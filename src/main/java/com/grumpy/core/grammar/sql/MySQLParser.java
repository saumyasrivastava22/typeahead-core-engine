// Generated from C:/github/typeahead-core-engine/src/main/resources/grammar/sql\MySQLParser.g4 by ANTLR 4.9.1
package grammar.sql;
/*
 * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation. The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySQLParser extends MySQLBaseRecognizer {
	static { RuntimeMetaData.checkVersion("4.9.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ACCESSIBLE_SYMBOL=1, ACCOUNT_SYMBOL=2, ACTION_SYMBOL=3, ADD_SYMBOL=4, 
		ADDDATE_SYMBOL=5, AFTER_SYMBOL=6, AGAINST_SYMBOL=7, AGGREGATE_SYMBOL=8, 
		ALGORITHM_SYMBOL=9, ALL_SYMBOL=10, ALTER_SYMBOL=11, ALWAYS_SYMBOL=12, 
		ANALYSE_SYMBOL=13, ANALYZE_SYMBOL=14, AND_SYMBOL=15, ANY_SYMBOL=16, AS_SYMBOL=17, 
		ASC_SYMBOL=18, ASCII_SYMBOL=19, ASENSITIVE_SYMBOL=20, AT_SYMBOL=21, AUTHORS_SYMBOL=22, 
		AUTOEXTEND_SIZE_SYMBOL=23, AUTO_INCREMENT_SYMBOL=24, AVG_ROW_LENGTH_SYMBOL=25, 
		AVG_SYMBOL=26, BACKUP_SYMBOL=27, BEFORE_SYMBOL=28, BEGIN_SYMBOL=29, BETWEEN_SYMBOL=30, 
		BIGINT_SYMBOL=31, BINARY_SYMBOL=32, BINLOG_SYMBOL=33, BIN_NUM_SYMBOL=34, 
		BIT_AND_SYMBOL=35, BIT_OR_SYMBOL=36, BIT_SYMBOL=37, BIT_XOR_SYMBOL=38, 
		BLOB_SYMBOL=39, BLOCK_SYMBOL=40, BOOLEAN_SYMBOL=41, BOOL_SYMBOL=42, BOTH_SYMBOL=43, 
		BTREE_SYMBOL=44, BY_SYMBOL=45, BYTE_SYMBOL=46, CACHE_SYMBOL=47, CALL_SYMBOL=48, 
		CASCADE_SYMBOL=49, CASCADED_SYMBOL=50, CASE_SYMBOL=51, CAST_SYMBOL=52, 
		CATALOG_NAME_SYMBOL=53, CHAIN_SYMBOL=54, CHANGE_SYMBOL=55, CHANGED_SYMBOL=56, 
		CHANNEL_SYMBOL=57, CHARSET_SYMBOL=58, CHARACTER_SYMBOL=59, CHAR_SYMBOL=60, 
		CHECKSUM_SYMBOL=61, CHECK_SYMBOL=62, CIPHER_SYMBOL=63, CLASS_ORIGIN_SYMBOL=64, 
		CLIENT_SYMBOL=65, CLOSE_SYMBOL=66, COALESCE_SYMBOL=67, CODE_SYMBOL=68, 
		COLLATE_SYMBOL=69, COLLATION_SYMBOL=70, COLUMNS_SYMBOL=71, COLUMN_SYMBOL=72, 
		COLUMN_NAME_SYMBOL=73, COLUMN_FORMAT_SYMBOL=74, COMMENT_SYMBOL=75, COMMITTED_SYMBOL=76, 
		COMMIT_SYMBOL=77, COMPACT_SYMBOL=78, COMPLETION_SYMBOL=79, COMPRESSED_SYMBOL=80, 
		COMPRESSION_SYMBOL=81, CONCURRENT_SYMBOL=82, CONDITION_SYMBOL=83, CONNECTION_SYMBOL=84, 
		CONSISTENT_SYMBOL=85, CONSTRAINT_SYMBOL=86, CONSTRAINT_CATALOG_SYMBOL=87, 
		CONSTRAINT_NAME_SYMBOL=88, CONSTRAINT_SCHEMA_SYMBOL=89, CONTAINS_SYMBOL=90, 
		CONTEXT_SYMBOL=91, CONTINUE_SYMBOL=92, CONTRIBUTORS_SYMBOL=93, CONVERT_SYMBOL=94, 
		COUNT_SYMBOL=95, CPU_SYMBOL=96, CREATE_SYMBOL=97, CROSS_SYMBOL=98, CUBE_SYMBOL=99, 
		CURDATE_SYMBOL=100, CURRENT_SYMBOL=101, CURRENT_DATE_SYMBOL=102, CURRENT_TIME_SYMBOL=103, 
		CURRENT_TIMESTAMP_SYMBOL=104, CURRENT_USER_SYMBOL=105, CURSOR_SYMBOL=106, 
		CURSOR_NAME_SYMBOL=107, CURTIME_SYMBOL=108, DATABASE_SYMBOL=109, DATABASES_SYMBOL=110, 
		DATAFILE_SYMBOL=111, DATA_SYMBOL=112, DATETIME_SYMBOL=113, DATE_ADD_SYMBOL=114, 
		DATE_SUB_SYMBOL=115, DATE_SYMBOL=116, DAYOFMONTH_SYMBOL=117, DAY_HOUR_SYMBOL=118, 
		DAY_MICROSECOND_SYMBOL=119, DAY_MINUTE_SYMBOL=120, DAY_SECOND_SYMBOL=121, 
		DAY_SYMBOL=122, DEALLOCATE_SYMBOL=123, DEC_SYMBOL=124, DECIMAL_NUM_SYMBOL=125, 
		DECIMAL_SYMBOL=126, DECLARE_SYMBOL=127, DEFAULT_SYMBOL=128, DEFAULT_AUTH_SYMBOL=129, 
		DEFINER_SYMBOL=130, DELAYED_SYMBOL=131, DELAY_KEY_WRITE_SYMBOL=132, DELETE_SYMBOL=133, 
		DESC_SYMBOL=134, DESCRIBE_SYMBOL=135, DES_KEY_FILE_SYMBOL=136, DETERMINISTIC_SYMBOL=137, 
		DIAGNOSTICS_SYMBOL=138, DIRECTORY_SYMBOL=139, DISABLE_SYMBOL=140, DISCARD_SYMBOL=141, 
		DISK_SYMBOL=142, DISTINCT_SYMBOL=143, DISTINCTROW_SYMBOL=144, DIV_SYMBOL=145, 
		DOUBLE_SYMBOL=146, DO_SYMBOL=147, DROP_SYMBOL=148, DUAL_SYMBOL=149, DUMPFILE_SYMBOL=150, 
		DUPLICATE_SYMBOL=151, DYNAMIC_SYMBOL=152, EACH_SYMBOL=153, ELSE_SYMBOL=154, 
		ELSEIF_SYMBOL=155, ENABLE_SYMBOL=156, ENCLOSED_SYMBOL=157, ENCRYPTION_SYMBOL=158, 
		END_SYMBOL=159, ENDS_SYMBOL=160, END_OF_INPUT_SYMBOL=161, ENGINES_SYMBOL=162, 
		ENGINE_SYMBOL=163, ENUM_SYMBOL=164, ERROR_SYMBOL=165, ERRORS_SYMBOL=166, 
		ESCAPED_SYMBOL=167, ESCAPE_SYMBOL=168, EVENTS_SYMBOL=169, EVENT_SYMBOL=170, 
		EVERY_SYMBOL=171, EXCHANGE_SYMBOL=172, EXECUTE_SYMBOL=173, EXISTS_SYMBOL=174, 
		EXIT_SYMBOL=175, EXPANSION_SYMBOL=176, EXPIRE_SYMBOL=177, EXPLAIN_SYMBOL=178, 
		EXPORT_SYMBOL=179, EXTENDED_SYMBOL=180, EXTENT_SIZE_SYMBOL=181, EXTRACT_SYMBOL=182, 
		FALSE_SYMBOL=183, FAST_SYMBOL=184, FAULTS_SYMBOL=185, FETCH_SYMBOL=186, 
		FIELDS_SYMBOL=187, FILE_SYMBOL=188, FILE_BLOCK_SIZE_SYMBOL=189, FILTER_SYMBOL=190, 
		FIRST_SYMBOL=191, FIXED_SYMBOL=192, FLOAT4_SYMBOL=193, FLOAT8_SYMBOL=194, 
		FLOAT_SYMBOL=195, FLUSH_SYMBOL=196, FOLLOWS_SYMBOL=197, FORCE_SYMBOL=198, 
		FOREIGN_SYMBOL=199, FOR_SYMBOL=200, FORMAT_SYMBOL=201, FOUND_SYMBOL=202, 
		FROM_SYMBOL=203, FULL_SYMBOL=204, FULLTEXT_SYMBOL=205, FUNCTION_SYMBOL=206, 
		GET_SYMBOL=207, GENERAL_SYMBOL=208, GENERATED_SYMBOL=209, GROUP_REPLICATION_SYMBOL=210, 
		GEOMETRYCOLLECTION_SYMBOL=211, GEOMETRY_SYMBOL=212, GET_FORMAT_SYMBOL=213, 
		GLOBAL_SYMBOL=214, GRANT_SYMBOL=215, GRANTS_SYMBOL=216, GROUP_SYMBOL=217, 
		GROUP_CONCAT_SYMBOL=218, HANDLER_SYMBOL=219, HASH_SYMBOL=220, HAVING_SYMBOL=221, 
		HELP_SYMBOL=222, HIGH_PRIORITY_SYMBOL=223, HOST_SYMBOL=224, HOSTS_SYMBOL=225, 
		HOUR_MICROSECOND_SYMBOL=226, HOUR_MINUTE_SYMBOL=227, HOUR_SECOND_SYMBOL=228, 
		HOUR_SYMBOL=229, IDENTIFIED_SYMBOL=230, IF_SYMBOL=231, IGNORE_SYMBOL=232, 
		IGNORE_SERVER_IDS_SYMBOL=233, IMPORT_SYMBOL=234, INDEXES_SYMBOL=235, INDEX_SYMBOL=236, 
		INFILE_SYMBOL=237, INITIAL_SIZE_SYMBOL=238, INNER_SYMBOL=239, INOUT_SYMBOL=240, 
		INSENSITIVE_SYMBOL=241, INSERT_SYMBOL=242, INSERT_METHOD_SYMBOL=243, INSTANCE_SYMBOL=244, 
		INSTALL_SYMBOL=245, INTEGER_SYMBOL=246, INTERVAL_SYMBOL=247, INTO_SYMBOL=248, 
		INT_SYMBOL=249, INVOKER_SYMBOL=250, IN_SYMBOL=251, IO_AFTER_GTIDS_SYMBOL=252, 
		IO_BEFORE_GTIDS_SYMBOL=253, IO_THREAD_SYMBOL=254, IO_SYMBOL=255, IPC_SYMBOL=256, 
		IS_SYMBOL=257, ISOLATION_SYMBOL=258, ISSUER_SYMBOL=259, ITERATE_SYMBOL=260, 
		JOIN_SYMBOL=261, JSON_SYMBOL=262, KEYS_SYMBOL=263, KEY_BLOCK_SIZE_SYMBOL=264, 
		KEY_SYMBOL=265, KILL_SYMBOL=266, LANGUAGE_SYMBOL=267, LAST_SYMBOL=268, 
		LEADING_SYMBOL=269, LEAVES_SYMBOL=270, LEAVE_SYMBOL=271, LEFT_SYMBOL=272, 
		LESS_SYMBOL=273, LEVEL_SYMBOL=274, LIKE_SYMBOL=275, LIMIT_SYMBOL=276, 
		LINEAR_SYMBOL=277, LINES_SYMBOL=278, LINESTRING_SYMBOL=279, LIST_SYMBOL=280, 
		LOAD_SYMBOL=281, LOCALTIME_SYMBOL=282, LOCALTIMESTAMP_SYMBOL=283, LOCAL_SYMBOL=284, 
		LOCATOR_SYMBOL=285, LOCKS_SYMBOL=286, LOCK_SYMBOL=287, LOGFILE_SYMBOL=288, 
		LOGS_SYMBOL=289, LONGBLOB_SYMBOL=290, LONGTEXT_SYMBOL=291, LONG_NUM_SYMBOL=292, 
		LONG_SYMBOL=293, LOOP_SYMBOL=294, LOW_PRIORITY_SYMBOL=295, MASTER_AUTO_POSITION_SYMBOL=296, 
		MASTER_BIND_SYMBOL=297, MASTER_CONNECT_RETRY_SYMBOL=298, MASTER_DELAY_SYMBOL=299, 
		MASTER_HOST_SYMBOL=300, MASTER_LOG_FILE_SYMBOL=301, MASTER_LOG_POS_SYMBOL=302, 
		MASTER_PASSWORD_SYMBOL=303, MASTER_PORT_SYMBOL=304, MASTER_RETRY_COUNT_SYMBOL=305, 
		MASTER_SERVER_ID_SYMBOL=306, MASTER_SSL_CAPATH_SYMBOL=307, MASTER_SSL_CA_SYMBOL=308, 
		MASTER_SSL_CERT_SYMBOL=309, MASTER_SSL_CIPHER_SYMBOL=310, MASTER_SSL_CRL_SYMBOL=311, 
		MASTER_SSL_CRLPATH_SYMBOL=312, MASTER_SSL_KEY_SYMBOL=313, MASTER_SSL_SYMBOL=314, 
		MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL=315, MASTER_SYMBOL=316, MASTER_TLS_VERSION_SYMBOL=317, 
		MASTER_USER_SYMBOL=318, MASTER_HEARTBEAT_PERIOD_SYMBOL=319, MATCH_SYMBOL=320, 
		MAX_CONNECTIONS_PER_HOUR_SYMBOL=321, MAX_QUERIES_PER_HOUR_SYMBOL=322, 
		MAX_ROWS_SYMBOL=323, MAX_SIZE_SYMBOL=324, MAX_STATEMENT_TIME_SYMBOL=325, 
		MAX_SYMBOL=326, MAX_UPDATES_PER_HOUR_SYMBOL=327, MAX_USER_CONNECTIONS_SYMBOL=328, 
		MAXVALUE_SYMBOL=329, MEDIUMBLOB_SYMBOL=330, MEDIUMINT_SYMBOL=331, MEDIUMTEXT_SYMBOL=332, 
		MEDIUM_SYMBOL=333, MEMORY_SYMBOL=334, MERGE_SYMBOL=335, MESSAGE_TEXT_SYMBOL=336, 
		MICROSECOND_SYMBOL=337, MID_SYMBOL=338, MIDDLEINT_SYMBOL=339, MIGRATE_SYMBOL=340, 
		MINUTE_MICROSECOND_SYMBOL=341, MINUTE_SECOND_SYMBOL=342, MINUTE_SYMBOL=343, 
		MIN_ROWS_SYMBOL=344, MIN_SYMBOL=345, MODE_SYMBOL=346, MODIFIES_SYMBOL=347, 
		MODIFY_SYMBOL=348, MOD_SYMBOL=349, MONTH_SYMBOL=350, MULTILINESTRING_SYMBOL=351, 
		MULTIPOINT_SYMBOL=352, MULTIPOLYGON_SYMBOL=353, MUTEX_SYMBOL=354, MYSQL_ERRNO_SYMBOL=355, 
		NAMES_SYMBOL=356, NAME_SYMBOL=357, NATIONAL_SYMBOL=358, NATURAL_SYMBOL=359, 
		NCHAR_STRING_SYMBOL=360, NCHAR_SYMBOL=361, NDB_SYMBOL=362, NDBCLUSTER_SYMBOL=363, 
		NEG_SYMBOL=364, NEVER_SYMBOL=365, NEW_SYMBOL=366, NEXT_SYMBOL=367, NODEGROUP_SYMBOL=368, 
		NONE_SYMBOL=369, NONBLOCKING_SYMBOL=370, NOT_SYMBOL=371, NOW_SYMBOL=372, 
		NO_SYMBOL=373, NO_WAIT_SYMBOL=374, NO_WRITE_TO_BINLOG_SYMBOL=375, NULL_SYMBOL=376, 
		NUMBER_SYMBOL=377, NUMERIC_SYMBOL=378, NVARCHAR_SYMBOL=379, OFFLINE_SYMBOL=380, 
		OFFSET_SYMBOL=381, OLD_PASSWORD_SYMBOL=382, ON_SYMBOL=383, ONE_SYMBOL=384, 
		ONLINE_SYMBOL=385, ONLY_SYMBOL=386, OPEN_SYMBOL=387, OPTIMIZE_SYMBOL=388, 
		OPTIMIZER_COSTS_SYMBOL=389, OPTIONS_SYMBOL=390, OPTION_SYMBOL=391, OPTIONALLY_SYMBOL=392, 
		ORDER_SYMBOL=393, OR_SYMBOL=394, OUTER_SYMBOL=395, OUTFILE_SYMBOL=396, 
		OUT_SYMBOL=397, OWNER_SYMBOL=398, PACK_KEYS_SYMBOL=399, PAGE_SYMBOL=400, 
		PARSER_SYMBOL=401, PARTIAL_SYMBOL=402, PARTITIONING_SYMBOL=403, PARTITIONS_SYMBOL=404, 
		PARTITION_SYMBOL=405, PASSWORD_SYMBOL=406, PHASE_SYMBOL=407, PLUGINS_SYMBOL=408, 
		PLUGIN_DIR_SYMBOL=409, PLUGIN_SYMBOL=410, POINT_SYMBOL=411, POLYGON_SYMBOL=412, 
		PORT_SYMBOL=413, POSITION_SYMBOL=414, PRECEDES_SYMBOL=415, PRECISION_SYMBOL=416, 
		PREPARE_SYMBOL=417, PRESERVE_SYMBOL=418, PREV_SYMBOL=419, PRIMARY_SYMBOL=420, 
		PRIVILEGES_SYMBOL=421, PROCEDURE_SYMBOL=422, PROCESS_SYMBOL=423, PROCESSLIST_SYMBOL=424, 
		PROFILE_SYMBOL=425, PROFILES_SYMBOL=426, PROXY_SYMBOL=427, PURGE_SYMBOL=428, 
		QUARTER_SYMBOL=429, QUERY_SYMBOL=430, QUICK_SYMBOL=431, RANGE_SYMBOL=432, 
		READS_SYMBOL=433, READ_ONLY_SYMBOL=434, READ_SYMBOL=435, READ_WRITE_SYMBOL=436, 
		REAL_SYMBOL=437, REBUILD_SYMBOL=438, RECOVER_SYMBOL=439, REDOFILE_SYMBOL=440, 
		REDO_BUFFER_SIZE_SYMBOL=441, REDUNDANT_SYMBOL=442, REFERENCES_SYMBOL=443, 
		REGEXP_SYMBOL=444, RELAY_SYMBOL=445, RELAYLOG_SYMBOL=446, RELAY_LOG_FILE_SYMBOL=447, 
		RELAY_LOG_POS_SYMBOL=448, RELAY_THREAD_SYMBOL=449, RELEASE_SYMBOL=450, 
		RELOAD_SYMBOL=451, REMOVE_SYMBOL=452, RENAME_SYMBOL=453, REORGANIZE_SYMBOL=454, 
		REPAIR_SYMBOL=455, REPEATABLE_SYMBOL=456, REPEAT_SYMBOL=457, REPLACE_SYMBOL=458, 
		REPLICATION_SYMBOL=459, REPLICATE_DO_DB_SYMBOL=460, REPLICATE_IGNORE_DB_SYMBOL=461, 
		REPLICATE_DO_TABLE_SYMBOL=462, REPLICATE_IGNORE_TABLE_SYMBOL=463, REPLICATE_WILD_DO_TABLE_SYMBOL=464, 
		REPLICATE_WILD_IGNORE_TABLE_SYMBOL=465, REPLICATE_REWRITE_DB_SYMBOL=466, 
		REQUIRE_SYMBOL=467, RESET_SYMBOL=468, RESIGNAL_SYMBOL=469, RESTORE_SYMBOL=470, 
		RESTRICT_SYMBOL=471, RESUME_SYMBOL=472, RETURNED_SQLSTATE_SYMBOL=473, 
		RETURNS_SYMBOL=474, RETURN_SYMBOL=475, REVERSE_SYMBOL=476, REVOKE_SYMBOL=477, 
		RIGHT_SYMBOL=478, RLIKE_SYMBOL=479, ROLLBACK_SYMBOL=480, ROLLUP_SYMBOL=481, 
		ROTATE_SYMBOL=482, ROUTINE_SYMBOL=483, ROWS_SYMBOL=484, ROW_COUNT_SYMBOL=485, 
		ROW_FORMAT_SYMBOL=486, ROW_SYMBOL=487, RTREE_SYMBOL=488, SAVEPOINT_SYMBOL=489, 
		SCHEDULE_SYMBOL=490, SCHEMA_SYMBOL=491, SCHEMA_NAME_SYMBOL=492, SCHEMAS_SYMBOL=493, 
		SECOND_MICROSECOND_SYMBOL=494, SECOND_SYMBOL=495, SECURITY_SYMBOL=496, 
		SELECT_SYMBOL=497, SENSITIVE_SYMBOL=498, SEPARATOR_SYMBOL=499, SERIALIZABLE_SYMBOL=500, 
		SERIAL_SYMBOL=501, SESSION_SYMBOL=502, SERVER_SYMBOL=503, SERVER_OPTIONS_SYMBOL=504, 
		SESSION_USER_SYMBOL=505, SET_SYMBOL=506, SET_VAR_SYMBOL=507, SHARE_SYMBOL=508, 
		SHOW_SYMBOL=509, SHUTDOWN_SYMBOL=510, SIGNAL_SYMBOL=511, SIGNED_SYMBOL=512, 
		SIMPLE_SYMBOL=513, SLAVE_SYMBOL=514, SLOW_SYMBOL=515, SMALLINT_SYMBOL=516, 
		SNAPSHOT_SYMBOL=517, SOME_SYMBOL=518, SOCKET_SYMBOL=519, SONAME_SYMBOL=520, 
		SOUNDS_SYMBOL=521, SOURCE_SYMBOL=522, SPATIAL_SYMBOL=523, SPECIFIC_SYMBOL=524, 
		SQLEXCEPTION_SYMBOL=525, SQLSTATE_SYMBOL=526, SQLWARNING_SYMBOL=527, SQL_AFTER_GTIDS_SYMBOL=528, 
		SQL_AFTER_MTS_GAPS_SYMBOL=529, SQL_BEFORE_GTIDS_SYMBOL=530, SQL_BIG_RESULT_SYMBOL=531, 
		SQL_BUFFER_RESULT_SYMBOL=532, SQL_CACHE_SYMBOL=533, SQL_CALC_FOUND_ROWS_SYMBOL=534, 
		SQL_NO_CACHE_SYMBOL=535, SQL_SMALL_RESULT_SYMBOL=536, SQL_SYMBOL=537, 
		SQL_THREAD_SYMBOL=538, SSL_SYMBOL=539, STACKED_SYMBOL=540, STARTING_SYMBOL=541, 
		STARTS_SYMBOL=542, START_SYMBOL=543, STATS_AUTO_RECALC_SYMBOL=544, STATS_PERSISTENT_SYMBOL=545, 
		STATS_SAMPLE_PAGES_SYMBOL=546, STATUS_SYMBOL=547, STDDEV_SAMP_SYMBOL=548, 
		STDDEV_SYMBOL=549, STDDEV_POP_SYMBOL=550, STD_SYMBOL=551, STOP_SYMBOL=552, 
		STORAGE_SYMBOL=553, STORED_SYMBOL=554, STRAIGHT_JOIN_SYMBOL=555, STRING_SYMBOL=556, 
		SUBCLASS_ORIGIN_SYMBOL=557, SUBDATE_SYMBOL=558, SUBJECT_SYMBOL=559, SUBPARTITIONS_SYMBOL=560, 
		SUBPARTITION_SYMBOL=561, SUBSTR_SYMBOL=562, SUBSTRING_SYMBOL=563, SUM_SYMBOL=564, 
		SUPER_SYMBOL=565, SUSPEND_SYMBOL=566, SWAPS_SYMBOL=567, SWITCHES_SYMBOL=568, 
		SYSDATE_SYMBOL=569, SYSTEM_USER_SYMBOL=570, TABLES_SYMBOL=571, TABLESPACE_SYMBOL=572, 
		TABLE_REF_PRIORITY_SYMBOL=573, TABLE_SYMBOL=574, TABLE_CHECKSUM_SYMBOL=575, 
		TABLE_NAME_SYMBOL=576, TEMPORARY_SYMBOL=577, TEMPTABLE_SYMBOL=578, TERMINATED_SYMBOL=579, 
		TEXT_SYMBOL=580, THAN_SYMBOL=581, THEN_SYMBOL=582, TIMESTAMP_SYMBOL=583, 
		TIMESTAMP_ADD_SYMBOL=584, TIMESTAMP_DIFF_SYMBOL=585, TIME_SYMBOL=586, 
		TINYBLOB_SYMBOL=587, TINYINT_SYMBOL=588, TINYTEXT_SYMBOL=589, TO_SYMBOL=590, 
		TRAILING_SYMBOL=591, TRANSACTION_SYMBOL=592, TRIGGERS_SYMBOL=593, TRIGGER_SYMBOL=594, 
		TRIM_SYMBOL=595, TRUE_SYMBOL=596, TRUNCATE_SYMBOL=597, TYPES_SYMBOL=598, 
		TYPE_SYMBOL=599, UDF_RETURNS_SYMBOL=600, UNCOMMITTED_SYMBOL=601, UNDEFINED_SYMBOL=602, 
		UNDOFILE_SYMBOL=603, UNDO_BUFFER_SIZE_SYMBOL=604, UNDO_SYMBOL=605, UNICODE_SYMBOL=606, 
		UNINSTALL_SYMBOL=607, UNION_SYMBOL=608, UNIQUE_SYMBOL=609, UNKNOWN_SYMBOL=610, 
		UNLOCK_SYMBOL=611, UNSIGNED_SYMBOL=612, UNTIL_SYMBOL=613, UPDATE_SYMBOL=614, 
		UPGRADE_SYMBOL=615, USAGE_SYMBOL=616, USER_RESOURCES_SYMBOL=617, USER_SYMBOL=618, 
		USE_FRM_SYMBOL=619, USE_SYMBOL=620, USING_SYMBOL=621, UTC_DATE_SYMBOL=622, 
		UTC_TIMESTAMP_SYMBOL=623, UTC_TIME_SYMBOL=624, VALIDATION_SYMBOL=625, 
		VALUES_SYMBOL=626, VALUE_SYMBOL=627, VARBINARY_SYMBOL=628, VARCHAR_SYMBOL=629, 
		VARCHARACTER_SYMBOL=630, VARIABLES_SYMBOL=631, VARIANCE_SYMBOL=632, VARYING_SYMBOL=633, 
		VAR_POP_SYMBOL=634, VAR_SAMP_SYMBOL=635, VIEW_SYMBOL=636, VIRTUAL_SYMBOL=637, 
		WAIT_SYMBOL=638, WARNINGS_SYMBOL=639, WEEK_SYMBOL=640, WEIGHT_STRING_SYMBOL=641, 
		WHEN_SYMBOL=642, WHERE_SYMBOL=643, WHILE_SYMBOL=644, WITH_SYMBOL=645, 
		WITHOUT_SYMBOL=646, WORK_SYMBOL=647, WRAPPER_SYMBOL=648, WRITE_SYMBOL=649, 
		X509_SYMBOL=650, XA_SYMBOL=651, XID_SYMBOL=652, XML_SYMBOL=653, XOR_SYMBOL=654, 
		YEAR_MONTH_SYMBOL=655, YEAR_SYMBOL=656, ZEROFILL_SYMBOL=657, PERSIST_SYMBOL=658, 
		ROLE_SYMBOL=659, ADMIN_SYMBOL=660, INVISIBLE_SYMBOL=661, VISIBLE_SYMBOL=662, 
		EXCEPT_SYMBOL=663, COMPONENT_SYMBOL=664, RECURSIVE_SYMBOL=665, JSON_OBJECTAGG_SYMBOL=666, 
		JSON_ARRAYAGG_SYMBOL=667, OF_SYMBOL=668, SKIP_SYMBOL=669, LOCKED_SYMBOL=670, 
		NOWAIT_SYMBOL=671, GROUPING_SYMBOL=672, PERSIST_ONLY_SYMBOL=673, HISTOGRAM_SYMBOL=674, 
		BUCKETS_SYMBOL=675, REMOTE_SYMBOL=676, CLONE_SYMBOL=677, CUME_DIST_SYMBOL=678, 
		DENSE_RANK_SYMBOL=679, EXCLUDE_SYMBOL=680, FIRST_VALUE_SYMBOL=681, FOLLOWING_SYMBOL=682, 
		GROUPS_SYMBOL=683, LAG_SYMBOL=684, LAST_VALUE_SYMBOL=685, LEAD_SYMBOL=686, 
		NTH_VALUE_SYMBOL=687, NTILE_SYMBOL=688, NULLS_SYMBOL=689, OTHERS_SYMBOL=690, 
		OVER_SYMBOL=691, PERCENT_RANK_SYMBOL=692, PRECEDING_SYMBOL=693, RANK_SYMBOL=694, 
		RESPECT_SYMBOL=695, ROW_NUMBER_SYMBOL=696, TIES_SYMBOL=697, UNBOUNDED_SYMBOL=698, 
		WINDOW_SYMBOL=699, EMPTY_SYMBOL=700, JSON_TABLE_SYMBOL=701, NESTED_SYMBOL=702, 
		ORDINALITY_SYMBOL=703, PATH_SYMBOL=704, HISTORY_SYMBOL=705, REUSE_SYMBOL=706, 
		SRID_SYMBOL=707, THREAD_PRIORITY_SYMBOL=708, RESOURCE_SYMBOL=709, SYSTEM_SYMBOL=710, 
		VCPU_SYMBOL=711, MASTER_PUBLIC_KEY_PATH_SYMBOL=712, GET_MASTER_PUBLIC_KEY_SYMBOL=713, 
		RESTART_SYMBOL=714, DEFINITION_SYMBOL=715, DESCRIPTION_SYMBOL=716, ORGANIZATION_SYMBOL=717, 
		REFERENCE_SYMBOL=718, OPTIONAL_SYMBOL=719, SECONDARY_SYMBOL=720, SECONDARY_ENGINE_SYMBOL=721, 
		SECONDARY_LOAD_SYMBOL=722, SECONDARY_UNLOAD_SYMBOL=723, ACTIVE_SYMBOL=724, 
		INACTIVE_SYMBOL=725, LATERAL_SYMBOL=726, RETAIN_SYMBOL=727, OLD_SYMBOL=728, 
		NETWORK_NAMESPACE_SYMBOL=729, ENFORCED_SYMBOL=730, ARRAY_SYMBOL=731, OJ_SYMBOL=732, 
		MEMBER_SYMBOL=733, RANDOM_SYMBOL=734, MASTER_COMPRESSION_ALGORITHM_SYMBOL=735, 
		MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL=736, PRIVILEGE_CHECKS_USER_SYMBOL=737, 
		MASTER_TLS_CIPHERSUITES_SYMBOL=738, REQUIRE_ROW_FORMAT_SYMBOL=739, PASSWORD_LOCK_TIME_SYMBOL=740, 
		FAILED_LOGIN_ATTEMPTS_SYMBOL=741, REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL=742, 
		STREAM_SYMBOL=743, OFF_SYMBOL=744, NOT2_SYMBOL=745, CONCAT_PIPES_SYMBOL=746, 
		INT_NUMBER=747, LONG_NUMBER=748, ULONGLONG_NUMBER=749, EQUAL_OPERATOR=750, 
		ASSIGN_OPERATOR=751, NULL_SAFE_EQUAL_OPERATOR=752, GREATER_OR_EQUAL_OPERATOR=753, 
		GREATER_THAN_OPERATOR=754, LESS_OR_EQUAL_OPERATOR=755, LESS_THAN_OPERATOR=756, 
		NOT_EQUAL_OPERATOR=757, PLUS_OPERATOR=758, MINUS_OPERATOR=759, MULT_OPERATOR=760, 
		DIV_OPERATOR=761, MOD_OPERATOR=762, LOGICAL_NOT_OPERATOR=763, BITWISE_NOT_OPERATOR=764, 
		SHIFT_LEFT_OPERATOR=765, SHIFT_RIGHT_OPERATOR=766, LOGICAL_AND_OPERATOR=767, 
		BITWISE_AND_OPERATOR=768, BITWISE_XOR_OPERATOR=769, LOGICAL_OR_OPERATOR=770, 
		BITWISE_OR_OPERATOR=771, DOT_SYMBOL=772, COMMA_SYMBOL=773, SEMICOLON_SYMBOL=774, 
		COLON_SYMBOL=775, OPEN_PAR_SYMBOL=776, CLOSE_PAR_SYMBOL=777, OPEN_CURLY_SYMBOL=778, 
		CLOSE_CURLY_SYMBOL=779, UNDERLINE_SYMBOL=780, JSON_SEPARATOR_SYMBOL=781, 
		JSON_UNQUOTED_SEPARATOR_SYMBOL=782, AT_SIGN_SYMBOL=783, AT_TEXT_SUFFIX=784, 
		AT_AT_SIGN_SYMBOL=785, NULL2_SYMBOL=786, PARAM_MARKER=787, HEX_NUMBER=788, 
		BIN_NUMBER=789, DECIMAL_NUMBER=790, FLOAT_NUMBER=791, WHITESPACE=792, 
		INVALID_INPUT=793, UNDERSCORE_CHARSET=794, IDENTIFIER=795, NCHAR_TEXT=796, 
		BACK_TICK_QUOTED_ID=797, DOUBLE_QUOTED_TEXT=798, SINGLE_QUOTED_TEXT=799, 
		VERSION_COMMENT_START=800, MYSQL_COMMENT_START=801, VERSION_COMMENT_END=802, 
		BLOCK_COMMENT=803, POUND_COMMENT=804, DASHDASH_COMMENT=805, NOT_EQUAL2_OPERATOR=806;
	public static final int
		RULE_query = 0, RULE_simpleStatement = 1, RULE_alterStatement = 2, RULE_alterDatabase = 3, 
		RULE_alterEvent = 4, RULE_alterLogfileGroup = 5, RULE_alterLogfileGroupOptions = 6, 
		RULE_alterLogfileGroupOption = 7, RULE_alterServer = 8, RULE_alterTable = 9, 
		RULE_alterTableActions = 10, RULE_alterCommandList = 11, RULE_alterCommandsModifierList = 12, 
		RULE_standaloneAlterCommands = 13, RULE_alterPartition = 14, RULE_alterList = 15, 
		RULE_alterCommandsModifier = 16, RULE_alterListItem = 17, RULE_place = 18, 
		RULE_restrict = 19, RULE_alterOrderList = 20, RULE_alterAlgorithmOption = 21, 
		RULE_alterLockOption = 22, RULE_indexLockAndAlgorithm = 23, RULE_withValidation = 24, 
		RULE_removePartitioning = 25, RULE_allOrPartitionNameList = 26, RULE_alterTablespace = 27, 
		RULE_alterUndoTablespace = 28, RULE_undoTableSpaceOptions = 29, RULE_undoTableSpaceOption = 30, 
		RULE_alterTablespaceOptions = 31, RULE_alterTablespaceOption = 32, RULE_changeTablespaceOption = 33, 
		RULE_alterView = 34, RULE_viewTail = 35, RULE_viewSelect = 36, RULE_viewCheckOption = 37, 
		RULE_createStatement = 38, RULE_createDatabase = 39, RULE_createDatabaseOption = 40, 
		RULE_createTable = 41, RULE_tableElementList = 42, RULE_tableElement = 43, 
		RULE_duplicateAsQueryExpression = 44, RULE_queryExpressionOrParens = 45, 
		RULE_createRoutine = 46, RULE_createProcedure = 47, RULE_createFunction = 48, 
		RULE_createUdf = 49, RULE_routineCreateOption = 50, RULE_routineAlterOptions = 51, 
		RULE_routineOption = 52, RULE_createIndex = 53, RULE_indexNameAndType = 54, 
		RULE_createIndexTarget = 55, RULE_createLogfileGroup = 56, RULE_logfileGroupOptions = 57, 
		RULE_logfileGroupOption = 58, RULE_createServer = 59, RULE_serverOptions = 60, 
		RULE_serverOption = 61, RULE_createTablespace = 62, RULE_createUndoTablespace = 63, 
		RULE_tsDataFileName = 64, RULE_tsDataFile = 65, RULE_tablespaceOptions = 66, 
		RULE_tablespaceOption = 67, RULE_tsOptionInitialSize = 68, RULE_tsOptionUndoRedoBufferSize = 69, 
		RULE_tsOptionAutoextendSize = 70, RULE_tsOptionMaxSize = 71, RULE_tsOptionExtentSize = 72, 
		RULE_tsOptionNodegroup = 73, RULE_tsOptionEngine = 74, RULE_tsOptionWait = 75, 
		RULE_tsOptionComment = 76, RULE_tsOptionFileblockSize = 77, RULE_tsOptionEncryption = 78, 
		RULE_createView = 79, RULE_viewReplaceOrAlgorithm = 80, RULE_viewAlgorithm = 81, 
		RULE_viewSuid = 82, RULE_createTrigger = 83, RULE_triggerFollowsPrecedesClause = 84, 
		RULE_createEvent = 85, RULE_createRole = 86, RULE_createSpatialReference = 87, 
		RULE_srsAttribute = 88, RULE_dropStatement = 89, RULE_dropDatabase = 90, 
		RULE_dropEvent = 91, RULE_dropFunction = 92, RULE_dropProcedure = 93, 
		RULE_dropIndex = 94, RULE_dropLogfileGroup = 95, RULE_dropLogfileGroupOption = 96, 
		RULE_dropServer = 97, RULE_dropTable = 98, RULE_dropTableSpace = 99, RULE_dropTrigger = 100, 
		RULE_dropView = 101, RULE_dropRole = 102, RULE_dropSpatialReference = 103, 
		RULE_dropUndoTablespace = 104, RULE_renameTableStatement = 105, RULE_renamePair = 106, 
		RULE_truncateTableStatement = 107, RULE_importStatement = 108, RULE_callStatement = 109, 
		RULE_deleteStatement = 110, RULE_partitionDelete = 111, RULE_deleteStatementOption = 112, 
		RULE_doStatement = 113, RULE_handlerStatement = 114, RULE_handlerReadOrScan = 115, 
		RULE_insertStatement = 116, RULE_insertLockOption = 117, RULE_insertFromConstructor = 118, 
		RULE_fields = 119, RULE_insertValues = 120, RULE_insertQueryExpression = 121, 
		RULE_valueList = 122, RULE_values = 123, RULE_valuesReference = 124, RULE_insertUpdateList = 125, 
		RULE_loadStatement = 126, RULE_dataOrXml = 127, RULE_xmlRowsIdentifiedBy = 128, 
		RULE_loadDataFileTail = 129, RULE_loadDataFileTargetList = 130, RULE_fieldOrVariableList = 131, 
		RULE_replaceStatement = 132, RULE_selectStatement = 133, RULE_selectStatementWithInto = 134, 
		RULE_queryExpression = 135, RULE_queryExpressionBody = 136, RULE_queryExpressionParens = 137, 
		RULE_queryPrimary = 138, RULE_querySpecification = 139, RULE_subquery = 140, 
		RULE_querySpecOption = 141, RULE_limitClause = 142, RULE_simpleLimitClause = 143, 
		RULE_limitOptions = 144, RULE_limitOption = 145, RULE_intoClause = 146, 
		RULE_procedureAnalyseClause = 147, RULE_havingClause = 148, RULE_windowClause = 149, 
		RULE_windowDefinition = 150, RULE_windowSpec = 151, RULE_windowSpecDetails = 152, 
		RULE_windowFrameClause = 153, RULE_windowFrameUnits = 154, RULE_windowFrameExtent = 155, 
		RULE_windowFrameStart = 156, RULE_windowFrameBetween = 157, RULE_windowFrameBound = 158, 
		RULE_windowFrameExclusion = 159, RULE_withClause = 160, RULE_commonTableExpression = 161, 
		RULE_groupByClause = 162, RULE_olapOption = 163, RULE_orderClause = 164, 
		RULE_direction = 165, RULE_fromClause = 166, RULE_tableReferenceList = 167, 
		RULE_tableValueConstructor = 168, RULE_explicitTable = 169, RULE_rowValueExplicit = 170, 
		RULE_selectOption = 171, RULE_lockingClauseList = 172, RULE_lockingClause = 173, 
		RULE_lockStrengh = 174, RULE_lockedRowAction = 175, RULE_selectItemList = 176, 
		RULE_selectItem = 177, RULE_selectAlias = 178, RULE_whereClause = 179, 
		RULE_tableReference = 180, RULE_escapedTableReference = 181, RULE_joinedTable = 182, 
		RULE_naturalJoinType = 183, RULE_innerJoinType = 184, RULE_outerJoinType = 185, 
		RULE_tableFactor = 186, RULE_singleTable = 187, RULE_singleTableParens = 188, 
		RULE_derivedTable = 189, RULE_tableReferenceListParens = 190, RULE_tableFunction = 191, 
		RULE_columnsClause = 192, RULE_jtColumn = 193, RULE_onEmptyOrError = 194, 
		RULE_onEmpty = 195, RULE_onError = 196, RULE_jtOnResponse = 197, RULE_unionOption = 198, 
		RULE_tableAlias = 199, RULE_indexHintList = 200, RULE_indexHint = 201, 
		RULE_indexHintType = 202, RULE_keyOrIndex = 203, RULE_constraintKeyType = 204, 
		RULE_indexHintClause = 205, RULE_indexList = 206, RULE_indexListElement = 207, 
		RULE_updateStatement = 208, RULE_transactionOrLockingStatement = 209, 
		RULE_transactionStatement = 210, RULE_beginWork = 211, RULE_transactionCharacteristic = 212, 
		RULE_savepointStatement = 213, RULE_lockStatement = 214, RULE_lockItem = 215, 
		RULE_lockOption = 216, RULE_xaStatement = 217, RULE_xaConvert = 218, RULE_xid = 219, 
		RULE_replicationStatement = 220, RULE_resetOption = 221, RULE_masterResetOptions = 222, 
		RULE_replicationLoad = 223, RULE_changeMaster = 224, RULE_changeMasterOptions = 225, 
		RULE_masterOption = 226, RULE_privilegeCheckDef = 227, RULE_tablePrimaryKeyCheckDef = 228, 
		RULE_masterTlsCiphersuitesDef = 229, RULE_masterFileDef = 230, RULE_serverIdList = 231, 
		RULE_changeReplication = 232, RULE_filterDefinition = 233, RULE_filterDbList = 234, 
		RULE_filterTableList = 235, RULE_filterStringList = 236, RULE_filterWildDbTableString = 237, 
		RULE_filterDbPairList = 238, RULE_slave = 239, RULE_slaveUntilOptions = 240, 
		RULE_slaveConnectionOptions = 241, RULE_slaveThreadOptions = 242, RULE_slaveThreadOption = 243, 
		RULE_groupReplication = 244, RULE_preparedStatement = 245, RULE_executeStatement = 246, 
		RULE_executeVarList = 247, RULE_cloneStatement = 248, RULE_dataDirSSL = 249, 
		RULE_ssl = 250, RULE_accountManagementStatement = 251, RULE_alterUser = 252, 
		RULE_alterUserTail = 253, RULE_userFunction = 254, RULE_createUser = 255, 
		RULE_createUserTail = 256, RULE_defaultRoleClause = 257, RULE_requireClause = 258, 
		RULE_connectOptions = 259, RULE_accountLockPasswordExpireOptions = 260, 
		RULE_dropUser = 261, RULE_grant = 262, RULE_grantTargetList = 263, RULE_grantOptions = 264, 
		RULE_exceptRoleList = 265, RULE_withRoles = 266, RULE_grantAs = 267, RULE_versionedRequireClause = 268, 
		RULE_renameUser = 269, RULE_revoke = 270, RULE_onTypeTo = 271, RULE_aclType = 272, 
		RULE_roleOrPrivilegesList = 273, RULE_roleOrPrivilege = 274, RULE_grantIdentifier = 275, 
		RULE_requireList = 276, RULE_requireListElement = 277, RULE_grantOption = 278, 
		RULE_setRole = 279, RULE_roleList = 280, RULE_role = 281, RULE_tableAdministrationStatement = 282, 
		RULE_histogram = 283, RULE_checkOption = 284, RULE_repairType = 285, RULE_installUninstallStatment = 286, 
		RULE_setStatement = 287, RULE_startOptionValueList = 288, RULE_transactionCharacteristics = 289, 
		RULE_transactionAccessMode = 290, RULE_isolationLevel = 291, RULE_optionValueListContinued = 292, 
		RULE_optionValueNoOptionType = 293, RULE_optionValue = 294, RULE_setSystemVariable = 295, 
		RULE_startOptionValueListFollowingOptionType = 296, RULE_optionValueFollowingOptionType = 297, 
		RULE_setExprOrDefault = 298, RULE_showStatement = 299, RULE_showCommandType = 300, 
		RULE_nonBlocking = 301, RULE_fromOrIn = 302, RULE_inDb = 303, RULE_profileType = 304, 
		RULE_otherAdministrativeStatement = 305, RULE_keyCacheListOrParts = 306, 
		RULE_keyCacheList = 307, RULE_assignToKeycache = 308, RULE_assignToKeycachePartition = 309, 
		RULE_cacheKeyList = 310, RULE_keyUsageElement = 311, RULE_keyUsageList = 312, 
		RULE_flushOption = 313, RULE_logType = 314, RULE_flushTables = 315, RULE_flushTablesOptions = 316, 
		RULE_preloadTail = 317, RULE_preloadList = 318, RULE_preloadKeys = 319, 
		RULE_adminPartition = 320, RULE_resourceGroupManagement = 321, RULE_createResourceGroup = 322, 
		RULE_resourceGroupVcpuList = 323, RULE_vcpuNumOrRange = 324, RULE_resourceGroupPriority = 325, 
		RULE_resourceGroupEnableDisable = 326, RULE_alterResourceGroup = 327, 
		RULE_setResourceGroup = 328, RULE_threadIdList = 329, RULE_dropResourceGroup = 330, 
		RULE_utilityStatement = 331, RULE_describeStatement = 332, RULE_explainStatement = 333, 
		RULE_explainableStatement = 334, RULE_helpCommand = 335, RULE_useCommand = 336, 
		RULE_restartServer = 337, RULE_expr = 338, RULE_boolPri = 339, RULE_compOp = 340, 
		RULE_predicate = 341, RULE_predicateOperations = 342, RULE_bitExpr = 343, 
		RULE_simpleExpr = 344, RULE_arrayCast = 345, RULE_jsonOperator = 346, 
		RULE_sumExpr = 347, RULE_groupingOperation = 348, RULE_windowFunctionCall = 349, 
		RULE_windowingClause = 350, RULE_leadLagInfo = 351, RULE_nullTreatment = 352, 
		RULE_jsonFunction = 353, RULE_inSumExpr = 354, RULE_identListArg = 355, 
		RULE_identList = 356, RULE_fulltextOptions = 357, RULE_runtimeFunctionCall = 358, 
		RULE_geometryFunction = 359, RULE_timeFunctionParameters = 360, RULE_fractionalPrecision = 361, 
		RULE_weightStringLevels = 362, RULE_weightStringLevelListItem = 363, RULE_dateTimeTtype = 364, 
		RULE_trimFunction = 365, RULE_substringFunction = 366, RULE_functionCall = 367, 
		RULE_udfExprList = 368, RULE_udfExpr = 369, RULE_variable = 370, RULE_userVariable = 371, 
		RULE_systemVariable = 372, RULE_internalVariableName = 373, RULE_whenExpression = 374, 
		RULE_thenExpression = 375, RULE_elseExpression = 376, RULE_castType = 377, 
		RULE_exprList = 378, RULE_charset = 379, RULE_notRule = 380, RULE_not2Rule = 381, 
		RULE_interval = 382, RULE_intervalTimeStamp = 383, RULE_exprListWithParentheses = 384, 
		RULE_exprWithParentheses = 385, RULE_simpleExprWithParentheses = 386, 
		RULE_orderList = 387, RULE_orderExpression = 388, RULE_groupList = 389, 
		RULE_groupingExpression = 390, RULE_channel = 391, RULE_compoundStatement = 392, 
		RULE_returnStatement = 393, RULE_ifStatement = 394, RULE_ifBody = 395, 
		RULE_thenStatement = 396, RULE_compoundStatementList = 397, RULE_caseStatement = 398, 
		RULE_elseStatement = 399, RULE_labeledBlock = 400, RULE_unlabeledBlock = 401, 
		RULE_label = 402, RULE_beginEndBlock = 403, RULE_labeledControl = 404, 
		RULE_unlabeledControl = 405, RULE_loopBlock = 406, RULE_whileDoBlock = 407, 
		RULE_repeatUntilBlock = 408, RULE_spDeclarations = 409, RULE_spDeclaration = 410, 
		RULE_variableDeclaration = 411, RULE_conditionDeclaration = 412, RULE_spCondition = 413, 
		RULE_sqlstate = 414, RULE_handlerDeclaration = 415, RULE_handlerCondition = 416, 
		RULE_cursorDeclaration = 417, RULE_iterateStatement = 418, RULE_leaveStatement = 419, 
		RULE_getDiagnostics = 420, RULE_signalAllowedExpr = 421, RULE_statementInformationItem = 422, 
		RULE_conditionInformationItem = 423, RULE_signalInformationItemName = 424, 
		RULE_signalStatement = 425, RULE_resignalStatement = 426, RULE_signalInformationItem = 427, 
		RULE_cursorOpen = 428, RULE_cursorClose = 429, RULE_cursorFetch = 430, 
		RULE_schedule = 431, RULE_columnDefinition = 432, RULE_checkOrReferences = 433, 
		RULE_checkConstraint = 434, RULE_constraintEnforcement = 435, RULE_tableConstraintDef = 436, 
		RULE_constraintName = 437, RULE_fieldDefinition = 438, RULE_columnAttribute = 439, 
		RULE_columnFormat = 440, RULE_storageMedia = 441, RULE_gcolAttribute = 442, 
		RULE_references = 443, RULE_deleteOption = 444, RULE_keyList = 445, RULE_keyPart = 446, 
		RULE_keyListWithExpression = 447, RULE_keyPartOrExpression = 448, RULE_keyListVariants = 449, 
		RULE_indexType = 450, RULE_indexOption = 451, RULE_commonIndexOption = 452, 
		RULE_visibility = 453, RULE_indexTypeClause = 454, RULE_fulltextIndexOption = 455, 
		RULE_spatialIndexOption = 456, RULE_dataTypeDefinition = 457, RULE_dataType = 458, 
		RULE_nchar = 459, RULE_realType = 460, RULE_fieldLength = 461, RULE_fieldOptions = 462, 
		RULE_charsetWithOptBinary = 463, RULE_ascii = 464, RULE_unicode = 465, 
		RULE_wsNumCodepoints = 466, RULE_typeDatetimePrecision = 467, RULE_charsetName = 468, 
		RULE_collationName = 469, RULE_createTableOptions = 470, RULE_createTableOptionsSpaceSeparated = 471, 
		RULE_createTableOption = 472, RULE_ternaryOption = 473, RULE_defaultCollation = 474, 
		RULE_defaultEncryption = 475, RULE_defaultCharset = 476, RULE_partitionClause = 477, 
		RULE_partitionTypeDef = 478, RULE_subPartitions = 479, RULE_partitionKeyAlgorithm = 480, 
		RULE_partitionDefinitions = 481, RULE_partitionDefinition = 482, RULE_partitionValuesIn = 483, 
		RULE_partitionOption = 484, RULE_subpartitionDefinition = 485, RULE_partitionValueItemListParen = 486, 
		RULE_partitionValueItem = 487, RULE_definerClause = 488, RULE_ifExists = 489, 
		RULE_ifNotExists = 490, RULE_procedureParameter = 491, RULE_functionParameter = 492, 
		RULE_collate = 493, RULE_typeWithOptCollate = 494, RULE_schemaIdentifierPair = 495, 
		RULE_viewRefList = 496, RULE_updateList = 497, RULE_updateElement = 498, 
		RULE_charsetClause = 499, RULE_fieldsClause = 500, RULE_fieldTerm = 501, 
		RULE_linesClause = 502, RULE_lineTerm = 503, RULE_userList = 504, RULE_createUserList = 505, 
		RULE_alterUserList = 506, RULE_createUserEntry = 507, RULE_alterUserEntry = 508, 
		RULE_retainCurrentPassword = 509, RULE_discardOldPassword = 510, RULE_replacePassword = 511, 
		RULE_userIdentifierOrText = 512, RULE_user = 513, RULE_likeClause = 514, 
		RULE_likeOrWhere = 515, RULE_onlineOption = 516, RULE_noWriteToBinLog = 517, 
		RULE_usePartition = 518, RULE_fieldIdentifier = 519, RULE_columnName = 520, 
		RULE_columnInternalRef = 521, RULE_columnInternalRefList = 522, RULE_columnRef = 523, 
		RULE_insertIdentifier = 524, RULE_indexName = 525, RULE_indexRef = 526, 
		RULE_tableWild = 527, RULE_schemaName = 528, RULE_schemaRef = 529, RULE_procedureName = 530, 
		RULE_procedureRef = 531, RULE_functionName = 532, RULE_functionRef = 533, 
		RULE_triggerName = 534, RULE_triggerRef = 535, RULE_viewName = 536, RULE_viewRef = 537, 
		RULE_tablespaceName = 538, RULE_tablespaceRef = 539, RULE_logfileGroupName = 540, 
		RULE_logfileGroupRef = 541, RULE_eventName = 542, RULE_eventRef = 543, 
		RULE_udfName = 544, RULE_serverName = 545, RULE_serverRef = 546, RULE_engineRef = 547, 
		RULE_tableName = 548, RULE_filterTableRef = 549, RULE_tableRefWithWildcard = 550, 
		RULE_tableRef = 551, RULE_tableRefList = 552, RULE_tableAliasRefList = 553, 
		RULE_parameterName = 554, RULE_labelIdentifier = 555, RULE_labelRef = 556, 
		RULE_roleIdentifier = 557, RULE_roleRef = 558, RULE_pluginRef = 559, RULE_componentRef = 560, 
		RULE_resourceGroupRef = 561, RULE_windowName = 562, RULE_pureIdentifier = 563, 
		RULE_identifier = 564, RULE_identifierList = 565, RULE_identifierListWithParentheses = 566, 
		RULE_qualifiedIdentifier = 567, RULE_simpleIdentifier = 568, RULE_dotIdentifier = 569, 
		RULE_ulong_number = 570, RULE_real_ulong_number = 571, RULE_ulonglong_number = 572, 
		RULE_real_ulonglong_number = 573, RULE_literal = 574, RULE_signedLiteral = 575, 
		RULE_stringList = 576, RULE_textStringLiteral = 577, RULE_textString = 578, 
		RULE_textStringHash = 579, RULE_textLiteral = 580, RULE_textStringNoLinebreak = 581, 
		RULE_textStringLiteralList = 582, RULE_numLiteral = 583, RULE_boolLiteral = 584, 
		RULE_nullLiteral = 585, RULE_temporalLiteral = 586, RULE_floatOptions = 587, 
		RULE_standardFloatOptions = 588, RULE_precision = 589, RULE_textOrIdentifier = 590, 
		RULE_lValueIdentifier = 591, RULE_roleIdentifierOrText = 592, RULE_sizeNumber = 593, 
		RULE_parentheses = 594, RULE_equal = 595, RULE_optionType = 596, RULE_varIdentType = 597, 
		RULE_setVarIdentType = 598, RULE_identifierKeyword = 599, RULE_identifierKeywordsAmbiguous1RolesAndLabels = 600, 
		RULE_identifierKeywordsAmbiguous2Labels = 601, RULE_labelKeyword = 602, 
		RULE_identifierKeywordsAmbiguous3Roles = 603, RULE_identifierKeywordsUnambiguous = 604, 
		RULE_roleKeyword = 605, RULE_lValueKeyword = 606, RULE_identifierKeywordsAmbiguous4SystemVariables = 607, 
		RULE_roleOrIdentifierKeyword = 608, RULE_roleOrLabelKeyword = 609;
	private static String[] makeRuleNames() {
		return new String[] {
			"query", "simpleStatement", "alterStatement", "alterDatabase", "alterEvent", 
			"alterLogfileGroup", "alterLogfileGroupOptions", "alterLogfileGroupOption", 
			"alterServer", "alterTable", "alterTableActions", "alterCommandList", 
			"alterCommandsModifierList", "standaloneAlterCommands", "alterPartition", 
			"alterList", "alterCommandsModifier", "alterListItem", "place", "restrict", 
			"alterOrderList", "alterAlgorithmOption", "alterLockOption", "indexLockAndAlgorithm", 
			"withValidation", "removePartitioning", "allOrPartitionNameList", "alterTablespace", 
			"alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption", 
			"alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption", 
			"alterView", "viewTail", "viewSelect", "viewCheckOption", "createStatement", 
			"createDatabase", "createDatabaseOption", "createTable", "tableElementList", 
			"tableElement", "duplicateAsQueryExpression", "queryExpressionOrParens", 
			"createRoutine", "createProcedure", "createFunction", "createUdf", "routineCreateOption", 
			"routineAlterOptions", "routineOption", "createIndex", "indexNameAndType", 
			"createIndexTarget", "createLogfileGroup", "logfileGroupOptions", "logfileGroupOption", 
			"createServer", "serverOptions", "serverOption", "createTablespace", 
			"createUndoTablespace", "tsDataFileName", "tsDataFile", "tablespaceOptions", 
			"tablespaceOption", "tsOptionInitialSize", "tsOptionUndoRedoBufferSize", 
			"tsOptionAutoextendSize", "tsOptionMaxSize", "tsOptionExtentSize", "tsOptionNodegroup", 
			"tsOptionEngine", "tsOptionWait", "tsOptionComment", "tsOptionFileblockSize", 
			"tsOptionEncryption", "createView", "viewReplaceOrAlgorithm", "viewAlgorithm", 
			"viewSuid", "createTrigger", "triggerFollowsPrecedesClause", "createEvent", 
			"createRole", "createSpatialReference", "srsAttribute", "dropStatement", 
			"dropDatabase", "dropEvent", "dropFunction", "dropProcedure", "dropIndex", 
			"dropLogfileGroup", "dropLogfileGroupOption", "dropServer", "dropTable", 
			"dropTableSpace", "dropTrigger", "dropView", "dropRole", "dropSpatialReference", 
			"dropUndoTablespace", "renameTableStatement", "renamePair", "truncateTableStatement", 
			"importStatement", "callStatement", "deleteStatement", "partitionDelete", 
			"deleteStatementOption", "doStatement", "handlerStatement", "handlerReadOrScan", 
			"insertStatement", "insertLockOption", "insertFromConstructor", "fields", 
			"insertValues", "insertQueryExpression", "valueList", "values", "valuesReference", 
			"insertUpdateList", "loadStatement", "dataOrXml", "xmlRowsIdentifiedBy", 
			"loadDataFileTail", "loadDataFileTargetList", "fieldOrVariableList", 
			"replaceStatement", "selectStatement", "selectStatementWithInto", "queryExpression", 
			"queryExpressionBody", "queryExpressionParens", "queryPrimary", "querySpecification", 
			"subquery", "querySpecOption", "limitClause", "simpleLimitClause", "limitOptions", 
			"limitOption", "intoClause", "procedureAnalyseClause", "havingClause", 
			"windowClause", "windowDefinition", "windowSpec", "windowSpecDetails", 
			"windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart", 
			"windowFrameBetween", "windowFrameBound", "windowFrameExclusion", "withClause", 
			"commonTableExpression", "groupByClause", "olapOption", "orderClause", 
			"direction", "fromClause", "tableReferenceList", "tableValueConstructor", 
			"explicitTable", "rowValueExplicit", "selectOption", "lockingClauseList", 
			"lockingClause", "lockStrengh", "lockedRowAction", "selectItemList", 
			"selectItem", "selectAlias", "whereClause", "tableReference", "escapedTableReference", 
			"joinedTable", "naturalJoinType", "innerJoinType", "outerJoinType", "tableFactor", 
			"singleTable", "singleTableParens", "derivedTable", "tableReferenceListParens", 
			"tableFunction", "columnsClause", "jtColumn", "onEmptyOrError", "onEmpty", 
			"onError", "jtOnResponse", "unionOption", "tableAlias", "indexHintList", 
			"indexHint", "indexHintType", "keyOrIndex", "constraintKeyType", "indexHintClause", 
			"indexList", "indexListElement", "updateStatement", "transactionOrLockingStatement", 
			"transactionStatement", "beginWork", "transactionCharacteristic", "savepointStatement", 
			"lockStatement", "lockItem", "lockOption", "xaStatement", "xaConvert", 
			"xid", "replicationStatement", "resetOption", "masterResetOptions", "replicationLoad", 
			"changeMaster", "changeMasterOptions", "masterOption", "privilegeCheckDef", 
			"tablePrimaryKeyCheckDef", "masterTlsCiphersuitesDef", "masterFileDef", 
			"serverIdList", "changeReplication", "filterDefinition", "filterDbList", 
			"filterTableList", "filterStringList", "filterWildDbTableString", "filterDbPairList", 
			"slave", "slaveUntilOptions", "slaveConnectionOptions", "slaveThreadOptions", 
			"slaveThreadOption", "groupReplication", "preparedStatement", "executeStatement", 
			"executeVarList", "cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement", 
			"alterUser", "alterUserTail", "userFunction", "createUser", "createUserTail", 
			"defaultRoleClause", "requireClause", "connectOptions", "accountLockPasswordExpireOptions", 
			"dropUser", "grant", "grantTargetList", "grantOptions", "exceptRoleList", 
			"withRoles", "grantAs", "versionedRequireClause", "renameUser", "revoke", 
			"onTypeTo", "aclType", "roleOrPrivilegesList", "roleOrPrivilege", "grantIdentifier", 
			"requireList", "requireListElement", "grantOption", "setRole", "roleList", 
			"role", "tableAdministrationStatement", "histogram", "checkOption", "repairType", 
			"installUninstallStatment", "setStatement", "startOptionValueList", "transactionCharacteristics", 
			"transactionAccessMode", "isolationLevel", "optionValueListContinued", 
			"optionValueNoOptionType", "optionValue", "setSystemVariable", "startOptionValueListFollowingOptionType", 
			"optionValueFollowingOptionType", "setExprOrDefault", "showStatement", 
			"showCommandType", "nonBlocking", "fromOrIn", "inDb", "profileType", 
			"otherAdministrativeStatement", "keyCacheListOrParts", "keyCacheList", 
			"assignToKeycache", "assignToKeycachePartition", "cacheKeyList", "keyUsageElement", 
			"keyUsageList", "flushOption", "logType", "flushTables", "flushTablesOptions", 
			"preloadTail", "preloadList", "preloadKeys", "adminPartition", "resourceGroupManagement", 
			"createResourceGroup", "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority", 
			"resourceGroupEnableDisable", "alterResourceGroup", "setResourceGroup", 
			"threadIdList", "dropResourceGroup", "utilityStatement", "describeStatement", 
			"explainStatement", "explainableStatement", "helpCommand", "useCommand", 
			"restartServer", "expr", "boolPri", "compOp", "predicate", "predicateOperations", 
			"bitExpr", "simpleExpr", "arrayCast", "jsonOperator", "sumExpr", "groupingOperation", 
			"windowFunctionCall", "windowingClause", "leadLagInfo", "nullTreatment", 
			"jsonFunction", "inSumExpr", "identListArg", "identList", "fulltextOptions", 
			"runtimeFunctionCall", "geometryFunction", "timeFunctionParameters", 
			"fractionalPrecision", "weightStringLevels", "weightStringLevelListItem", 
			"dateTimeTtype", "trimFunction", "substringFunction", "functionCall", 
			"udfExprList", "udfExpr", "variable", "userVariable", "systemVariable", 
			"internalVariableName", "whenExpression", "thenExpression", "elseExpression", 
			"castType", "exprList", "charset", "notRule", "not2Rule", "interval", 
			"intervalTimeStamp", "exprListWithParentheses", "exprWithParentheses", 
			"simpleExprWithParentheses", "orderList", "orderExpression", "groupList", 
			"groupingExpression", "channel", "compoundStatement", "returnStatement", 
			"ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement", 
			"elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock", 
			"labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock", 
			"spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration", 
			"spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", 
			"cursorDeclaration", "iterateStatement", "leaveStatement", "getDiagnostics", 
			"signalAllowedExpr", "statementInformationItem", "conditionInformationItem", 
			"signalInformationItemName", "signalStatement", "resignalStatement", 
			"signalInformationItem", "cursorOpen", "cursorClose", "cursorFetch", 
			"schedule", "columnDefinition", "checkOrReferences", "checkConstraint", 
			"constraintEnforcement", "tableConstraintDef", "constraintName", "fieldDefinition", 
			"columnAttribute", "columnFormat", "storageMedia", "gcolAttribute", "references", 
			"deleteOption", "keyList", "keyPart", "keyListWithExpression", "keyPartOrExpression", 
			"keyListVariants", "indexType", "indexOption", "commonIndexOption", "visibility", 
			"indexTypeClause", "fulltextIndexOption", "spatialIndexOption", "dataTypeDefinition", 
			"dataType", "nchar", "realType", "fieldLength", "fieldOptions", "charsetWithOptBinary", 
			"ascii", "unicode", "wsNumCodepoints", "typeDatetimePrecision", "charsetName", 
			"collationName", "createTableOptions", "createTableOptionsSpaceSeparated", 
			"createTableOption", "ternaryOption", "defaultCollation", "defaultEncryption", 
			"defaultCharset", "partitionClause", "partitionTypeDef", "subPartitions", 
			"partitionKeyAlgorithm", "partitionDefinitions", "partitionDefinition", 
			"partitionValuesIn", "partitionOption", "subpartitionDefinition", "partitionValueItemListParen", 
			"partitionValueItem", "definerClause", "ifExists", "ifNotExists", "procedureParameter", 
			"functionParameter", "collate", "typeWithOptCollate", "schemaIdentifierPair", 
			"viewRefList", "updateList", "updateElement", "charsetClause", "fieldsClause", 
			"fieldTerm", "linesClause", "lineTerm", "userList", "createUserList", 
			"alterUserList", "createUserEntry", "alterUserEntry", "retainCurrentPassword", 
			"discardOldPassword", "replacePassword", "userIdentifierOrText", "user", 
			"likeClause", "likeOrWhere", "onlineOption", "noWriteToBinLog", "usePartition", 
			"fieldIdentifier", "columnName", "columnInternalRef", "columnInternalRefList", 
			"columnRef", "insertIdentifier", "indexName", "indexRef", "tableWild", 
			"schemaName", "schemaRef", "procedureName", "procedureRef", "functionName", 
			"functionRef", "triggerName", "triggerRef", "viewName", "viewRef", "tablespaceName", 
			"tablespaceRef", "logfileGroupName", "logfileGroupRef", "eventName", 
			"eventRef", "udfName", "serverName", "serverRef", "engineRef", "tableName", 
			"filterTableRef", "tableRefWithWildcard", "tableRef", "tableRefList", 
			"tableAliasRefList", "parameterName", "labelIdentifier", "labelRef", 
			"roleIdentifier", "roleRef", "pluginRef", "componentRef", "resourceGroupRef", 
			"windowName", "pureIdentifier", "identifier", "identifierList", "identifierListWithParentheses", 
			"qualifiedIdentifier", "simpleIdentifier", "dotIdentifier", "ulong_number", 
			"real_ulong_number", "ulonglong_number", "real_ulonglong_number", "literal", 
			"signedLiteral", "stringList", "textStringLiteral", "textString", "textStringHash", 
			"textLiteral", "textStringNoLinebreak", "textStringLiteralList", "numLiteral", 
			"boolLiteral", "nullLiteral", "temporalLiteral", "floatOptions", "standardFloatOptions", 
			"precision", "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
			"sizeNumber", "parentheses", "equal", "optionType", "varIdentType", "setVarIdentType", 
			"identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels", "identifierKeywordsAmbiguous2Labels", 
			"labelKeyword", "identifierKeywordsAmbiguous3Roles", "identifierKeywordsUnambiguous", 
			"roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
			"roleOrIdentifierKeyword", "roleOrLabelKeyword"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, "'='", "':='", "'<=>'", "'>='", "'>'", 
			"'<='", "'<'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'~'", 
			"'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'", 
			"':'", "'('", "')'", "'{'", "'}'", "'_'", "'->'", "'->>'", "'@'", null, 
			"'@@'", "'\\N'", "'?'", null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, "'<>'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ACCESSIBLE_SYMBOL", "ACCOUNT_SYMBOL", "ACTION_SYMBOL", "ADD_SYMBOL", 
			"ADDDATE_SYMBOL", "AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", 
			"ALGORITHM_SYMBOL", "ALL_SYMBOL", "ALTER_SYMBOL", "ALWAYS_SYMBOL", "ANALYSE_SYMBOL", 
			"ANALYZE_SYMBOL", "AND_SYMBOL", "ANY_SYMBOL", "AS_SYMBOL", "ASC_SYMBOL", 
			"ASCII_SYMBOL", "ASENSITIVE_SYMBOL", "AT_SYMBOL", "AUTHORS_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", 
			"AUTO_INCREMENT_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", "AVG_SYMBOL", "BACKUP_SYMBOL", 
			"BEFORE_SYMBOL", "BEGIN_SYMBOL", "BETWEEN_SYMBOL", "BIGINT_SYMBOL", "BINARY_SYMBOL", 
			"BINLOG_SYMBOL", "BIN_NUM_SYMBOL", "BIT_AND_SYMBOL", "BIT_OR_SYMBOL", 
			"BIT_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BLOCK_SYMBOL", "BOOLEAN_SYMBOL", 
			"BOOL_SYMBOL", "BOTH_SYMBOL", "BTREE_SYMBOL", "BY_SYMBOL", "BYTE_SYMBOL", 
			"CACHE_SYMBOL", "CALL_SYMBOL", "CASCADE_SYMBOL", "CASCADED_SYMBOL", "CASE_SYMBOL", 
			"CAST_SYMBOL", "CATALOG_NAME_SYMBOL", "CHAIN_SYMBOL", "CHANGE_SYMBOL", 
			"CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CHARSET_SYMBOL", "CHARACTER_SYMBOL", 
			"CHAR_SYMBOL", "CHECKSUM_SYMBOL", "CHECK_SYMBOL", "CIPHER_SYMBOL", "CLASS_ORIGIN_SYMBOL", 
			"CLIENT_SYMBOL", "CLOSE_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", "COLLATE_SYMBOL", 
			"COLLATION_SYMBOL", "COLUMNS_SYMBOL", "COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", 
			"COLUMN_FORMAT_SYMBOL", "COMMENT_SYMBOL", "COMMITTED_SYMBOL", "COMMIT_SYMBOL", 
			"COMPACT_SYMBOL", "COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", 
			"CONCURRENT_SYMBOL", "CONDITION_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", 
			"CONSTRAINT_SYMBOL", "CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_NAME_SYMBOL", 
			"CONSTRAINT_SCHEMA_SYMBOL", "CONTAINS_SYMBOL", "CONTEXT_SYMBOL", "CONTINUE_SYMBOL", 
			"CONTRIBUTORS_SYMBOL", "CONVERT_SYMBOL", "COUNT_SYMBOL", "CPU_SYMBOL", 
			"CREATE_SYMBOL", "CROSS_SYMBOL", "CUBE_SYMBOL", "CURDATE_SYMBOL", "CURRENT_SYMBOL", 
			"CURRENT_DATE_SYMBOL", "CURRENT_TIME_SYMBOL", "CURRENT_TIMESTAMP_SYMBOL", 
			"CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURSOR_NAME_SYMBOL", "CURTIME_SYMBOL", 
			"DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATAFILE_SYMBOL", "DATA_SYMBOL", 
			"DATETIME_SYMBOL", "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", "DATE_SYMBOL", 
			"DAYOFMONTH_SYMBOL", "DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", 
			"DAY_SECOND_SYMBOL", "DAY_SYMBOL", "DEALLOCATE_SYMBOL", "DEC_SYMBOL", 
			"DECIMAL_NUM_SYMBOL", "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", 
			"DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", "DELAYED_SYMBOL", "DELAY_KEY_WRITE_SYMBOL", 
			"DELETE_SYMBOL", "DESC_SYMBOL", "DESCRIBE_SYMBOL", "DES_KEY_FILE_SYMBOL", 
			"DETERMINISTIC_SYMBOL", "DIAGNOSTICS_SYMBOL", "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", 
			"DISCARD_SYMBOL", "DISK_SYMBOL", "DISTINCT_SYMBOL", "DISTINCTROW_SYMBOL", 
			"DIV_SYMBOL", "DOUBLE_SYMBOL", "DO_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL", 
			"DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "EACH_SYMBOL", 
			"ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENABLE_SYMBOL", "ENCLOSED_SYMBOL", "ENCRYPTION_SYMBOL", 
			"END_SYMBOL", "ENDS_SYMBOL", "END_OF_INPUT_SYMBOL", "ENGINES_SYMBOL", 
			"ENGINE_SYMBOL", "ENUM_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", "ESCAPED_SYMBOL", 
			"ESCAPE_SYMBOL", "EVENTS_SYMBOL", "EVENT_SYMBOL", "EVERY_SYMBOL", "EXCHANGE_SYMBOL", 
			"EXECUTE_SYMBOL", "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPANSION_SYMBOL", 
			"EXPIRE_SYMBOL", "EXPLAIN_SYMBOL", "EXPORT_SYMBOL", "EXTENDED_SYMBOL", 
			"EXTENT_SIZE_SYMBOL", "EXTRACT_SYMBOL", "FALSE_SYMBOL", "FAST_SYMBOL", 
			"FAULTS_SYMBOL", "FETCH_SYMBOL", "FIELDS_SYMBOL", "FILE_SYMBOL", "FILE_BLOCK_SIZE_SYMBOL", 
			"FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", "FLOAT4_SYMBOL", "FLOAT8_SYMBOL", 
			"FLOAT_SYMBOL", "FLUSH_SYMBOL", "FOLLOWS_SYMBOL", "FORCE_SYMBOL", "FOREIGN_SYMBOL", 
			"FOR_SYMBOL", "FORMAT_SYMBOL", "FOUND_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", 
			"FULLTEXT_SYMBOL", "FUNCTION_SYMBOL", "GET_SYMBOL", "GENERAL_SYMBOL", 
			"GENERATED_SYMBOL", "GROUP_REPLICATION_SYMBOL", "GEOMETRYCOLLECTION_SYMBOL", 
			"GEOMETRY_SYMBOL", "GET_FORMAT_SYMBOL", "GLOBAL_SYMBOL", "GRANT_SYMBOL", 
			"GRANTS_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", "HANDLER_SYMBOL", 
			"HASH_SYMBOL", "HAVING_SYMBOL", "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL", 
			"HOST_SYMBOL", "HOSTS_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL", 
			"HOUR_SECOND_SYMBOL", "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", "IF_SYMBOL", 
			"IGNORE_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "IMPORT_SYMBOL", "INDEXES_SYMBOL", 
			"INDEX_SYMBOL", "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL", 
			"INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", "INSERT_METHOD_SYMBOL", 
			"INSTANCE_SYMBOL", "INSTALL_SYMBOL", "INTEGER_SYMBOL", "INTERVAL_SYMBOL", 
			"INTO_SYMBOL", "INT_SYMBOL", "INVOKER_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", 
			"IO_BEFORE_GTIDS_SYMBOL", "IO_THREAD_SYMBOL", "IO_SYMBOL", "IPC_SYMBOL", 
			"IS_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", 
			"JSON_SYMBOL", "KEYS_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", "KEY_SYMBOL", 
			"KILL_SYMBOL", "LANGUAGE_SYMBOL", "LAST_SYMBOL", "LEADING_SYMBOL", "LEAVES_SYMBOL", 
			"LEAVE_SYMBOL", "LEFT_SYMBOL", "LESS_SYMBOL", "LEVEL_SYMBOL", "LIKE_SYMBOL", 
			"LIMIT_SYMBOL", "LINEAR_SYMBOL", "LINES_SYMBOL", "LINESTRING_SYMBOL", 
			"LIST_SYMBOL", "LOAD_SYMBOL", "LOCALTIME_SYMBOL", "LOCALTIMESTAMP_SYMBOL", 
			"LOCAL_SYMBOL", "LOCATOR_SYMBOL", "LOCKS_SYMBOL", "LOCK_SYMBOL", "LOGFILE_SYMBOL", 
			"LOGS_SYMBOL", "LONGBLOB_SYMBOL", "LONGTEXT_SYMBOL", "LONG_NUM_SYMBOL", 
			"LONG_SYMBOL", "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", "MASTER_AUTO_POSITION_SYMBOL", 
			"MASTER_BIND_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL", "MASTER_DELAY_SYMBOL", 
			"MASTER_HOST_SYMBOL", "MASTER_LOG_FILE_SYMBOL", "MASTER_LOG_POS_SYMBOL", 
			"MASTER_PASSWORD_SYMBOL", "MASTER_PORT_SYMBOL", "MASTER_RETRY_COUNT_SYMBOL", 
			"MASTER_SERVER_ID_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", "MASTER_SSL_CA_SYMBOL", 
			"MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL", 
			"MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", "MASTER_SSL_SYMBOL", 
			"MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MASTER_SYMBOL", "MASTER_TLS_VERSION_SYMBOL", 
			"MASTER_USER_SYMBOL", "MASTER_HEARTBEAT_PERIOD_SYMBOL", "MATCH_SYMBOL", 
			"MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", "MAX_ROWS_SYMBOL", 
			"MAX_SIZE_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", "MAX_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", 
			"MAX_USER_CONNECTIONS_SYMBOL", "MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", 
			"MEDIUMINT_SYMBOL", "MEDIUMTEXT_SYMBOL", "MEDIUM_SYMBOL", "MEMORY_SYMBOL", 
			"MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL", "MICROSECOND_SYMBOL", "MID_SYMBOL", 
			"MIDDLEINT_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL", 
			"MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", "MIN_SYMBOL", "MODE_SYMBOL", "MODIFIES_SYMBOL", 
			"MODIFY_SYMBOL", "MOD_SYMBOL", "MONTH_SYMBOL", "MULTILINESTRING_SYMBOL", 
			"MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", "MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", 
			"NAMES_SYMBOL", "NAME_SYMBOL", "NATIONAL_SYMBOL", "NATURAL_SYMBOL", "NCHAR_STRING_SYMBOL", 
			"NCHAR_SYMBOL", "NDB_SYMBOL", "NDBCLUSTER_SYMBOL", "NEG_SYMBOL", "NEVER_SYMBOL", 
			"NEW_SYMBOL", "NEXT_SYMBOL", "NODEGROUP_SYMBOL", "NONE_SYMBOL", "NONBLOCKING_SYMBOL", 
			"NOT_SYMBOL", "NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", "NO_WRITE_TO_BINLOG_SYMBOL", 
			"NULL_SYMBOL", "NUMBER_SYMBOL", "NUMERIC_SYMBOL", "NVARCHAR_SYMBOL", 
			"OFFLINE_SYMBOL", "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", "ON_SYMBOL", 
			"ONE_SYMBOL", "ONLINE_SYMBOL", "ONLY_SYMBOL", "OPEN_SYMBOL", "OPTIMIZE_SYMBOL", 
			"OPTIMIZER_COSTS_SYMBOL", "OPTIONS_SYMBOL", "OPTION_SYMBOL", "OPTIONALLY_SYMBOL", 
			"ORDER_SYMBOL", "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", "OUT_SYMBOL", 
			"OWNER_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL", "PARSER_SYMBOL", "PARTIAL_SYMBOL", 
			"PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", "PARTITION_SYMBOL", "PASSWORD_SYMBOL", 
			"PHASE_SYMBOL", "PLUGINS_SYMBOL", "PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", 
			"POINT_SYMBOL", "POLYGON_SYMBOL", "PORT_SYMBOL", "POSITION_SYMBOL", "PRECEDES_SYMBOL", 
			"PRECISION_SYMBOL", "PREPARE_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", 
			"PRIMARY_SYMBOL", "PRIVILEGES_SYMBOL", "PROCEDURE_SYMBOL", "PROCESS_SYMBOL", 
			"PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", "PROFILES_SYMBOL", "PROXY_SYMBOL", 
			"PURGE_SYMBOL", "QUARTER_SYMBOL", "QUERY_SYMBOL", "QUICK_SYMBOL", "RANGE_SYMBOL", 
			"READS_SYMBOL", "READ_ONLY_SYMBOL", "READ_SYMBOL", "READ_WRITE_SYMBOL", 
			"REAL_SYMBOL", "REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDOFILE_SYMBOL", 
			"REDO_BUFFER_SIZE_SYMBOL", "REDUNDANT_SYMBOL", "REFERENCES_SYMBOL", "REGEXP_SYMBOL", 
			"RELAY_SYMBOL", "RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL", "RELAY_LOG_POS_SYMBOL", 
			"RELAY_THREAD_SYMBOL", "RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL", 
			"RENAME_SYMBOL", "REORGANIZE_SYMBOL", "REPAIR_SYMBOL", "REPEATABLE_SYMBOL", 
			"REPEAT_SYMBOL", "REPLACE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", 
			"REPLICATE_IGNORE_DB_SYMBOL", "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL", 
			"REPLICATE_WILD_DO_TABLE_SYMBOL", "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", 
			"REPLICATE_REWRITE_DB_SYMBOL", "REQUIRE_SYMBOL", "RESET_SYMBOL", "RESIGNAL_SYMBOL", 
			"RESTORE_SYMBOL", "RESTRICT_SYMBOL", "RESUME_SYMBOL", "RETURNED_SQLSTATE_SYMBOL", 
			"RETURNS_SYMBOL", "RETURN_SYMBOL", "REVERSE_SYMBOL", "REVOKE_SYMBOL", 
			"RIGHT_SYMBOL", "RLIKE_SYMBOL", "ROLLBACK_SYMBOL", "ROLLUP_SYMBOL", "ROTATE_SYMBOL", 
			"ROUTINE_SYMBOL", "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", "ROW_FORMAT_SYMBOL", 
			"ROW_SYMBOL", "RTREE_SYMBOL", "SAVEPOINT_SYMBOL", "SCHEDULE_SYMBOL", 
			"SCHEMA_SYMBOL", "SCHEMA_NAME_SYMBOL", "SCHEMAS_SYMBOL", "SECOND_MICROSECOND_SYMBOL", 
			"SECOND_SYMBOL", "SECURITY_SYMBOL", "SELECT_SYMBOL", "SENSITIVE_SYMBOL", 
			"SEPARATOR_SYMBOL", "SERIALIZABLE_SYMBOL", "SERIAL_SYMBOL", "SESSION_SYMBOL", 
			"SERVER_SYMBOL", "SERVER_OPTIONS_SYMBOL", "SESSION_USER_SYMBOL", "SET_SYMBOL", 
			"SET_VAR_SYMBOL", "SHARE_SYMBOL", "SHOW_SYMBOL", "SHUTDOWN_SYMBOL", "SIGNAL_SYMBOL", 
			"SIGNED_SYMBOL", "SIMPLE_SYMBOL", "SLAVE_SYMBOL", "SLOW_SYMBOL", "SMALLINT_SYMBOL", 
			"SNAPSHOT_SYMBOL", "SOME_SYMBOL", "SOCKET_SYMBOL", "SONAME_SYMBOL", "SOUNDS_SYMBOL", 
			"SOURCE_SYMBOL", "SPATIAL_SYMBOL", "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", 
			"SQLSTATE_SYMBOL", "SQLWARNING_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", 
			"SQL_BEFORE_GTIDS_SYMBOL", "SQL_BIG_RESULT_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", 
			"SQL_CACHE_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", "SQL_NO_CACHE_SYMBOL", 
			"SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SQL_THREAD_SYMBOL", "SSL_SYMBOL", 
			"STACKED_SYMBOL", "STARTING_SYMBOL", "STARTS_SYMBOL", "START_SYMBOL", 
			"STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", 
			"STATUS_SYMBOL", "STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL", 
			"STD_SYMBOL", "STOP_SYMBOL", "STORAGE_SYMBOL", "STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", 
			"STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", "SUBDATE_SYMBOL", "SUBJECT_SYMBOL", 
			"SUBPARTITIONS_SYMBOL", "SUBPARTITION_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
			"SUM_SYMBOL", "SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL", 
			"SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", "TABLES_SYMBOL", "TABLESPACE_SYMBOL", 
			"TABLE_REF_PRIORITY_SYMBOL", "TABLE_SYMBOL", "TABLE_CHECKSUM_SYMBOL", 
			"TABLE_NAME_SYMBOL", "TEMPORARY_SYMBOL", "TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", 
			"TEXT_SYMBOL", "THAN_SYMBOL", "THEN_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMP_ADD_SYMBOL", 
			"TIMESTAMP_DIFF_SYMBOL", "TIME_SYMBOL", "TINYBLOB_SYMBOL", "TINYINT_SYMBOL", 
			"TINYTEXT_SYMBOL", "TO_SYMBOL", "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", 
			"TRIGGERS_SYMBOL", "TRIGGER_SYMBOL", "TRIM_SYMBOL", "TRUE_SYMBOL", "TRUNCATE_SYMBOL", 
			"TYPES_SYMBOL", "TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", 
			"UNDEFINED_SYMBOL", "UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", "UNDO_SYMBOL", 
			"UNICODE_SYMBOL", "UNINSTALL_SYMBOL", "UNION_SYMBOL", "UNIQUE_SYMBOL", 
			"UNKNOWN_SYMBOL", "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UNTIL_SYMBOL", 
			"UPDATE_SYMBOL", "UPGRADE_SYMBOL", "USAGE_SYMBOL", "USER_RESOURCES_SYMBOL", 
			"USER_SYMBOL", "USE_FRM_SYMBOL", "USE_SYMBOL", "USING_SYMBOL", "UTC_DATE_SYMBOL", 
			"UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL", "VALIDATION_SYMBOL", "VALUES_SYMBOL", 
			"VALUE_SYMBOL", "VARBINARY_SYMBOL", "VARCHAR_SYMBOL", "VARCHARACTER_SYMBOL", 
			"VARIABLES_SYMBOL", "VARIANCE_SYMBOL", "VARYING_SYMBOL", "VAR_POP_SYMBOL", 
			"VAR_SAMP_SYMBOL", "VIEW_SYMBOL", "VIRTUAL_SYMBOL", "WAIT_SYMBOL", "WARNINGS_SYMBOL", 
			"WEEK_SYMBOL", "WEIGHT_STRING_SYMBOL", "WHEN_SYMBOL", "WHERE_SYMBOL", 
			"WHILE_SYMBOL", "WITH_SYMBOL", "WITHOUT_SYMBOL", "WORK_SYMBOL", "WRAPPER_SYMBOL", 
			"WRITE_SYMBOL", "X509_SYMBOL", "XA_SYMBOL", "XID_SYMBOL", "XML_SYMBOL", 
			"XOR_SYMBOL", "YEAR_MONTH_SYMBOL", "YEAR_SYMBOL", "ZEROFILL_SYMBOL", 
			"PERSIST_SYMBOL", "ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", 
			"VISIBLE_SYMBOL", "EXCEPT_SYMBOL", "COMPONENT_SYMBOL", "RECURSIVE_SYMBOL", 
			"JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", "OF_SYMBOL", "SKIP_SYMBOL", 
			"LOCKED_SYMBOL", "NOWAIT_SYMBOL", "GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL", 
			"HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", "REMOTE_SYMBOL", "CLONE_SYMBOL", 
			"CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", "FIRST_VALUE_SYMBOL", 
			"FOLLOWING_SYMBOL", "GROUPS_SYMBOL", "LAG_SYMBOL", "LAST_VALUE_SYMBOL", 
			"LEAD_SYMBOL", "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", "NULLS_SYMBOL", "OTHERS_SYMBOL", 
			"OVER_SYMBOL", "PERCENT_RANK_SYMBOL", "PRECEDING_SYMBOL", "RANK_SYMBOL", 
			"RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", "TIES_SYMBOL", "UNBOUNDED_SYMBOL", 
			"WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", "NESTED_SYMBOL", 
			"ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", "REUSE_SYMBOL", 
			"SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", "SYSTEM_SYMBOL", 
			"VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL", 
			"RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL", 
			"REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", 
			"SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", 
			"INACTIVE_SYMBOL", "LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
			"ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", "RANDOM_SYMBOL", 
			"MASTER_COMPRESSION_ALGORITHM_SYMBOL", "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", 
			"PRIVILEGE_CHECKS_USER_SYMBOL", "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL", 
			"PASSWORD_LOCK_TIME_SYMBOL", "FAILED_LOGIN_ATTEMPTS_SYMBOL", "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", 
			"STREAM_SYMBOL", "OFF_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", 
			"INT_NUMBER", "LONG_NUMBER", "ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", 
			"NULL_SAFE_EQUAL_OPERATOR", "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", 
			"LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", 
			"PLUS_OPERATOR", "MINUS_OPERATOR", "MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", 
			"LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", 
			"SHIFT_RIGHT_OPERATOR", "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", 
			"BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", 
			"DOT_SYMBOL", "COMMA_SYMBOL", "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
			"CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", 
			"JSON_SEPARATOR_SYMBOL", "JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", 
			"AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", "PARAM_MARKER", 
			"HEX_NUMBER", "BIN_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
			"INVALID_INPUT", "UNDERSCORE_CHARSET", "IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", 
			"DOUBLE_QUOTED_TEXT", "SINGLE_QUOTED_TEXT", "VERSION_COMMENT_START", 
			"MYSQL_COMMENT_START", "VERSION_COMMENT_END", "BLOCK_COMMENT", "POUND_COMMENT", 
			"DASHDASH_COMMENT", "NOT_EQUAL2_OPERATOR"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class QueryContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MySQLParser.EOF, 0); }
		public SimpleStatementContext simpleStatement() {
			return getRuleContext(SimpleStatementContext.class,0);
		}
		public BeginWorkContext beginWork() {
			return getRuleContext(BeginWorkContext.class,0);
		}
		public TerminalNode SEMICOLON_SYMBOL() { return getToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		public QueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryContext query() throws RecognitionException {
		QueryContext _localctx = new QueryContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_query);
		try {
			setState(1232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1220);
				match(EOF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1223);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					setState(1221);
					simpleStatement();
					}
					break;
				case 2:
					{
					setState(1222);
					beginWork();
					}
					break;
				}
				setState(1230);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SEMICOLON_SYMBOL:
					{
					setState(1225);
					match(SEMICOLON_SYMBOL);
					setState(1227);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						setState(1226);
						match(EOF);
						}
						break;
					}
					}
					break;
				case EOF:
					{
					setState(1229);
					match(EOF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStatementContext extends ParserRuleContext {
		public AlterStatementContext alterStatement() {
			return getRuleContext(AlterStatementContext.class,0);
		}
		public CreateStatementContext createStatement() {
			return getRuleContext(CreateStatementContext.class,0);
		}
		public DropStatementContext dropStatement() {
			return getRuleContext(DropStatementContext.class,0);
		}
		public RenameTableStatementContext renameTableStatement() {
			return getRuleContext(RenameTableStatementContext.class,0);
		}
		public TruncateTableStatementContext truncateTableStatement() {
			return getRuleContext(TruncateTableStatementContext.class,0);
		}
		public ImportStatementContext importStatement() {
			return getRuleContext(ImportStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public LoadStatementContext loadStatement() {
			return getRuleContext(LoadStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TransactionOrLockingStatementContext transactionOrLockingStatement() {
			return getRuleContext(TransactionOrLockingStatementContext.class,0);
		}
		public ReplicationStatementContext replicationStatement() {
			return getRuleContext(ReplicationStatementContext.class,0);
		}
		public PreparedStatementContext preparedStatement() {
			return getRuleContext(PreparedStatementContext.class,0);
		}
		public CloneStatementContext cloneStatement() {
			return getRuleContext(CloneStatementContext.class,0);
		}
		public AccountManagementStatementContext accountManagementStatement() {
			return getRuleContext(AccountManagementStatementContext.class,0);
		}
		public TableAdministrationStatementContext tableAdministrationStatement() {
			return getRuleContext(TableAdministrationStatementContext.class,0);
		}
		public InstallUninstallStatmentContext installUninstallStatment() {
			return getRuleContext(InstallUninstallStatmentContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public ResourceGroupManagementContext resourceGroupManagement() {
			return getRuleContext(ResourceGroupManagementContext.class,0);
		}
		public OtherAdministrativeStatementContext otherAdministrativeStatement() {
			return getRuleContext(OtherAdministrativeStatementContext.class,0);
		}
		public UtilityStatementContext utilityStatement() {
			return getRuleContext(UtilityStatementContext.class,0);
		}
		public GetDiagnosticsContext getDiagnostics() {
			return getRuleContext(GetDiagnosticsContext.class,0);
		}
		public SignalStatementContext signalStatement() {
			return getRuleContext(SignalStatementContext.class,0);
		}
		public ResignalStatementContext resignalStatement() {
			return getRuleContext(ResignalStatementContext.class,0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleStatementContext simpleStatement() throws RecognitionException {
		SimpleStatementContext _localctx = new SimpleStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_simpleStatement);
		try {
			setState(1268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1234);
				alterStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1235);
				createStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1236);
				dropStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1237);
				renameTableStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1238);
				truncateTableStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1239);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1240);
				importStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1241);
				callStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1242);
				deleteStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1243);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1244);
				handlerStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1245);
				insertStatement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1246);
				loadStatement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1247);
				replaceStatement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1248);
				selectStatement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1249);
				updateStatement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1250);
				transactionOrLockingStatement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1251);
				replicationStatement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1252);
				preparedStatement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1253);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1254);
				cloneStatement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1255);
				accountManagementStatement();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1256);
				tableAdministrationStatement();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1257);
				installUninstallStatment();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1258);
				setStatement();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1259);
				showStatement();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1260);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1261);
				resourceGroupManagement();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1262);
				otherAdministrativeStatement();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1263);
				utilityStatement();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1264);
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				setState(1265);
				getDiagnostics();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1266);
				signalStatement();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1267);
				resignalStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatementContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public AlterTableContext alterTable() {
			return getRuleContext(AlterTableContext.class,0);
		}
		public AlterDatabaseContext alterDatabase() {
			return getRuleContext(AlterDatabaseContext.class,0);
		}
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public AlterViewContext alterView() {
			return getRuleContext(AlterViewContext.class,0);
		}
		public AlterEventContext alterEvent() {
			return getRuleContext(AlterEventContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterUndoTablespaceContext alterUndoTablespace() {
			return getRuleContext(AlterUndoTablespaceContext.class,0);
		}
		public AlterLogfileGroupContext alterLogfileGroup() {
			return getRuleContext(AlterLogfileGroupContext.class,0);
		}
		public AlterServerContext alterServer() {
			return getRuleContext(AlterServerContext.class,0);
		}
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public RoutineAlterOptionsContext routineAlterOptions() {
			return getRuleContext(RoutineAlterOptionsContext.class,0);
		}
		public AlterStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatementContext alterStatement() throws RecognitionException {
		AlterStatementContext _localctx = new AlterStatementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_alterStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1270);
			match(ALTER_SYMBOL);
			setState(1297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				setState(1271);
				alterTable();
				}
				break;
			case 2:
				{
				setState(1272);
				alterDatabase();
				}
				break;
			case 3:
				{
				setState(1273);
				match(PROCEDURE_SYMBOL);
				setState(1274);
				procedureRef();
				setState(1276);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (COMMENT_SYMBOL - 75)) | (1L << (CONTAINS_SYMBOL - 75)) | (1L << (DETERMINISTIC_SYMBOL - 75)))) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (MODIFIES_SYMBOL - 347)) | (1L << (NOT_SYMBOL - 347)) | (1L << (NO_SYMBOL - 347)))) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL) {
					{
					setState(1275);
					routineAlterOptions();
					}
				}

				}
				break;
			case 4:
				{
				setState(1278);
				match(FUNCTION_SYMBOL);
				setState(1279);
				functionRef();
				setState(1281);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (COMMENT_SYMBOL - 75)) | (1L << (CONTAINS_SYMBOL - 75)) | (1L << (DETERMINISTIC_SYMBOL - 75)))) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (MODIFIES_SYMBOL - 347)) | (1L << (NOT_SYMBOL - 347)) | (1L << (NO_SYMBOL - 347)))) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL) {
					{
					setState(1280);
					routineAlterOptions();
					}
				}

				}
				break;
			case 5:
				{
				setState(1283);
				alterView();
				}
				break;
			case 6:
				{
				setState(1284);
				alterEvent();
				}
				break;
			case 7:
				{
				setState(1285);
				alterTablespace();
				}
				break;
			case 8:
				{
				setState(1286);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(1287);
				alterUndoTablespace();
				}
				break;
			case 9:
				{
				setState(1288);
				alterLogfileGroup();
				}
				break;
			case 10:
				{
				setState(1289);
				alterServer();
				}
				break;
			case 11:
				{
				setState(1290);
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				setState(1291);
				match(INSTANCE_SYMBOL);
				setState(1292);
				match(ROTATE_SYMBOL);
				setState(1293);
				textOrIdentifier();
				setState(1294);
				match(MASTER_SYMBOL);
				setState(1295);
				match(KEY_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_alterDatabase);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1299);
			match(DATABASE_SYMBOL);
			setState(1300);
			schemaRef();
			setState(1311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				setState(1302); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1301);
						createDatabaseOption();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1304); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,8,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(1306);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(1307);
				match(UPGRADE_SYMBOL);
				setState(1308);
				match(DATA_SYMBOL);
				setState(1309);
				match(DIRECTORY_SYMBOL);
				setState(1310);
				match(NAME_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MySQLParser.ON_SYMBOL, i);
		}
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return getRuleContext(ScheduleContext.class,0);
		}
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public AlterEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventContext alterEvent() throws RecognitionException {
		AlterEventContext _localctx = new AlterEventContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_alterEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1313);
				definerClause();
				}
			}

			setState(1316);
			match(EVENT_SYMBOL);
			setState(1317);
			eventRef();
			setState(1321);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				setState(1318);
				match(ON_SYMBOL);
				setState(1319);
				match(SCHEDULE_SYMBOL);
				setState(1320);
				schedule();
				}
				break;
			}
			setState(1329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON_SYMBOL) {
				{
				setState(1323);
				match(ON_SYMBOL);
				setState(1324);
				match(COMPLETION_SYMBOL);
				setState(1326);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(1325);
					match(NOT_SYMBOL);
					}
				}

				setState(1328);
				match(PRESERVE_SYMBOL);
				}
			}

			setState(1334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RENAME_SYMBOL) {
				{
				setState(1331);
				match(RENAME_SYMBOL);
				setState(1332);
				match(TO_SYMBOL);
				setState(1333);
				identifier();
				}
			}

			setState(1342);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_SYMBOL:
				{
				setState(1336);
				match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				setState(1337);
				match(DISABLE_SYMBOL);
				setState(1340);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(1338);
					match(ON_SYMBOL);
					setState(1339);
					match(SLAVE_SYMBOL);
					}
				}

				}
				break;
			case EOF:
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
			case SEMICOLON_SYMBOL:
				break;
			default:
				break;
			}
			setState(1346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				setState(1344);
				match(COMMENT_SYMBOL);
				setState(1345);
				textLiteral();
				}
			}

			setState(1350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DO_SYMBOL) {
				{
				setState(1348);
				match(DO_SYMBOL);
				setState(1349);
				compoundStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
			return getRuleContext(AlterLogfileGroupOptionsContext.class,0);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupContext alterLogfileGroup() throws RecognitionException {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alterLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1352);
			match(LOGFILE_SYMBOL);
			setState(1353);
			match(GROUP_SYMBOL);
			setState(1354);
			logfileGroupRef();
			setState(1355);
			match(ADD_SYMBOL);
			setState(1356);
			match(UNDOFILE_SYMBOL);
			setState(1357);
			textLiteral();
			setState(1359);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(1358);
				alterLogfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupOptionsContext extends ParserRuleContext {
		public List<AlterLogfileGroupOptionContext> alterLogfileGroupOption() {
			return getRuleContexts(AlterLogfileGroupOptionContext.class);
		}
		public AlterLogfileGroupOptionContext alterLogfileGroupOption(int i) {
			return getRuleContext(AlterLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterLogfileGroupOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroupOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterLogfileGroupOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterLogfileGroupOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterLogfileGroupOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupOptionsContext alterLogfileGroupOptions() throws RecognitionException {
		AlterLogfileGroupOptionsContext _localctx = new AlterLogfileGroupOptionsContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_alterLogfileGroupOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1361);
			alterLogfileGroupOption();
			setState(1368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				setState(1363);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(1362);
					match(COMMA_SYMBOL);
					}
				}

				setState(1365);
				alterLogfileGroupOption();
				}
				}
				setState(1370);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLogfileGroupOptionContext extends ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return getRuleContext(TsOptionInitialSizeContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public AlterLogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLogfileGroupOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterLogfileGroupOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterLogfileGroupOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterLogfileGroupOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLogfileGroupOptionContext alterLogfileGroupOption() throws RecognitionException {
		AlterLogfileGroupOptionContext _localctx = new AlterLogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alterLogfileGroupOption);
		try {
			setState(1374);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1371);
				tsOptionInitialSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1372);
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1373);
				tsOptionWait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return getRuleContext(ServerRefContext.class,0);
		}
		public ServerOptionsContext serverOptions() {
			return getRuleContext(ServerOptionsContext.class,0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alterServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1376);
			match(SERVER_SYMBOL);
			setState(1377);
			serverRef();
			setState(1378);
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public AlterTableActionsContext alterTableActions() {
			return getRuleContext(AlterTableActionsContext.class,0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alterTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1381);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(1380);
				onlineOption();
				}
				break;
			}
			setState(1385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(1383);
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				setState(1384);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(1387);
			match(TABLE_SYMBOL);
			setState(1388);
			tableRef();
			setState(1390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(1389);
				alterTableActions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableActionsContext extends ParserRuleContext {
		public AlterCommandListContext alterCommandList() {
			return getRuleContext(AlterCommandListContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public RemovePartitioningContext removePartitioning() {
			return getRuleContext(RemovePartitioningContext.class,0);
		}
		public StandaloneAlterCommandsContext standaloneAlterCommands() {
			return getRuleContext(StandaloneAlterCommandsContext.class,0);
		}
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return getRuleContext(AlterCommandsModifierListContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableActions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterTableActions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterTableActions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterTableActions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableActionsContext alterTableActions() throws RecognitionException {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alterTableActions);
		try {
			setState(1405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1392);
				alterCommandList();
				setState(1395);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PARTITION_SYMBOL:
					{
					setState(1393);
					partitionClause();
					}
					break;
				case REMOVE_SYMBOL:
					{
					setState(1394);
					removePartitioning();
					}
					break;
				case EOF:
				case SEMICOLON_SYMBOL:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1397);
				partitionClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1398);
				removePartitioning();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1402);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					setState(1399);
					alterCommandsModifierList();
					setState(1400);
					match(COMMA_SYMBOL);
					}
					break;
				}
				setState(1404);
				standaloneAlterCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCommandListContext extends ParserRuleContext {
		public AlterCommandsModifierListContext alterCommandsModifierList() {
			return getRuleContext(AlterCommandsModifierListContext.class,0);
		}
		public AlterListContext alterList() {
			return getRuleContext(AlterListContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public AlterCommandListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterCommandList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterCommandList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterCommandList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCommandListContext alterCommandList() throws RecognitionException {
		AlterCommandListContext _localctx = new AlterCommandListContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alterCommandList);
		try {
			setState(1414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1407);
				alterCommandsModifierList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1411);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					setState(1408);
					alterCommandsModifierList();
					setState(1409);
					match(COMMA_SYMBOL);
					}
					break;
				}
				setState(1413);
				alterList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCommandsModifierListContext extends ParserRuleContext {
		public List<AlterCommandsModifierContext> alterCommandsModifier() {
			return getRuleContexts(AlterCommandsModifierContext.class);
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return getRuleContext(AlterCommandsModifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterCommandsModifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandsModifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterCommandsModifierList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterCommandsModifierList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterCommandsModifierList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCommandsModifierListContext alterCommandsModifierList() throws RecognitionException {
		AlterCommandsModifierListContext _localctx = new AlterCommandsModifierListContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_alterCommandsModifierList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1416);
			alterCommandsModifier();
			setState(1421);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1417);
					match(COMMA_SYMBOL);
					setState(1418);
					alterCommandsModifier();
					}
					} 
				}
				setState(1423);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StandaloneAlterCommandsContext extends ParserRuleContext {
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext alterPartition() {
			return getRuleContext(AlterPartitionContext.class,0);
		}
		public TerminalNode SECONDARY_LOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public TerminalNode SECONDARY_UNLOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public StandaloneAlterCommandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standaloneAlterCommands; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterStandaloneAlterCommands(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitStandaloneAlterCommands(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitStandaloneAlterCommands(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StandaloneAlterCommandsContext standaloneAlterCommands() throws RecognitionException {
		StandaloneAlterCommandsContext _localctx = new StandaloneAlterCommandsContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_standaloneAlterCommands);
		int _la;
		try {
			setState(1431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1424);
				match(DISCARD_SYMBOL);
				setState(1425);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1426);
				match(IMPORT_SYMBOL);
				setState(1427);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1428);
				alterPartition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1429);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(1430);
				_la = _input.LA(1);
				if ( !(_la==SECONDARY_LOAD_SYMBOL || _la==SECONDARY_UNLOAD_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPartitionContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public List<NoWriteToBinLogContext> noWriteToBinLog() {
			return getRuleContexts(NoWriteToBinLogContext.class);
		}
		public NoWriteToBinLogContext noWriteToBinLog(int i) {
			return getRuleContext(NoWriteToBinLogContext.class,i);
		}
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode REBUILD_SYMBOL() { return getToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode OPTIMIZE_SYMBOL() { return getToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public List<CheckOptionContext> checkOption() {
			return getRuleContexts(CheckOptionContext.class);
		}
		public CheckOptionContext checkOption(int i) {
			return getRuleContext(CheckOptionContext.class,i);
		}
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public List<RepairTypeContext> repairType() {
			return getRuleContexts(RepairTypeContext.class);
		}
		public RepairTypeContext repairType(int i) {
			return getRuleContext(RepairTypeContext.class,i);
		}
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode EXCHANGE_SYMBOL() { return getToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public WithValidationContext withValidation() {
			return getRuleContext(WithValidationContext.class,0);
		}
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterPartition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPartitionContext alterPartition() throws RecognitionException {
		AlterPartitionContext _localctx = new AlterPartitionContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alterPartition);
		int _la;
		try {
			setState(1529);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1433);
				match(ADD_SYMBOL);
				setState(1434);
				match(PARTITION_SYMBOL);
				setState(1436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1435);
					noWriteToBinLog();
					}
				}

				setState(1441);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(1438);
					partitionDefinitions();
					}
					break;
				case PARTITIONS_SYMBOL:
					{
					setState(1439);
					match(PARTITIONS_SYMBOL);
					setState(1440);
					real_ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1443);
				match(DROP_SYMBOL);
				setState(1444);
				match(PARTITION_SYMBOL);
				setState(1445);
				identifierList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1446);
				match(REBUILD_SYMBOL);
				setState(1447);
				match(PARTITION_SYMBOL);
				setState(1449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					setState(1448);
					noWriteToBinLog();
					}
					break;
				}
				setState(1451);
				allOrPartitionNameList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1452);
				match(OPTIMIZE_SYMBOL);
				setState(1453);
				match(PARTITION_SYMBOL);
				setState(1455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
				case 1:
					{
					setState(1454);
					noWriteToBinLog();
					}
					break;
				}
				setState(1457);
				allOrPartitionNameList();
				setState(1459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1458);
					noWriteToBinLog();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1461);
				match(ANALYZE_SYMBOL);
				setState(1462);
				match(PARTITION_SYMBOL);
				setState(1464);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(1463);
					noWriteToBinLog();
					}
					break;
				}
				setState(1466);
				allOrPartitionNameList();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1467);
				match(CHECK_SYMBOL);
				setState(1468);
				match(PARTITION_SYMBOL);
				setState(1469);
				allOrPartitionNameList();
				setState(1473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CHANGED_SYMBOL || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (EXTENDED_SYMBOL - 180)) | (1L << (FAST_SYMBOL - 180)) | (1L << (FOR_SYMBOL - 180)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) {
					{
					{
					setState(1470);
					checkOption();
					}
					}
					setState(1475);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1476);
				match(REPAIR_SYMBOL);
				setState(1477);
				match(PARTITION_SYMBOL);
				setState(1479);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					setState(1478);
					noWriteToBinLog();
					}
					break;
				}
				setState(1481);
				allOrPartitionNameList();
				setState(1485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					setState(1482);
					repairType();
					}
					}
					setState(1487);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1488);
				match(COALESCE_SYMBOL);
				setState(1489);
				match(PARTITION_SYMBOL);
				setState(1491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(1490);
					noWriteToBinLog();
					}
				}

				setState(1493);
				real_ulong_number();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1494);
				match(TRUNCATE_SYMBOL);
				setState(1495);
				match(PARTITION_SYMBOL);
				setState(1496);
				allOrPartitionNameList();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1497);
				match(REORGANIZE_SYMBOL);
				setState(1498);
				match(PARTITION_SYMBOL);
				setState(1500);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					setState(1499);
					noWriteToBinLog();
					}
					break;
				}
				setState(1506);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					setState(1502);
					identifierList();
					setState(1503);
					match(INTO_SYMBOL);
					setState(1504);
					partitionDefinitions();
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1508);
				match(EXCHANGE_SYMBOL);
				setState(1509);
				match(PARTITION_SYMBOL);
				setState(1510);
				identifier();
				setState(1511);
				match(WITH_SYMBOL);
				setState(1512);
				match(TABLE_SYMBOL);
				setState(1513);
				tableRef();
				setState(1515);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(1514);
					withValidation();
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1517);
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				setState(1518);
				match(DISCARD_SYMBOL);
				setState(1519);
				match(PARTITION_SYMBOL);
				setState(1520);
				allOrPartitionNameList();
				setState(1521);
				match(TABLESPACE_SYMBOL);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1523);
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				setState(1524);
				match(IMPORT_SYMBOL);
				setState(1525);
				match(PARTITION_SYMBOL);
				setState(1526);
				allOrPartitionNameList();
				setState(1527);
				match(TABLESPACE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterListContext extends ParserRuleContext {
		public List<AlterListItemContext> alterListItem() {
			return getRuleContexts(AlterListItemContext.class);
		}
		public AlterListItemContext alterListItem(int i) {
			return getRuleContext(AlterListItemContext.class,i);
		}
		public List<CreateTableOptionsSpaceSeparatedContext> createTableOptionsSpaceSeparated() {
			return getRuleContexts(CreateTableOptionsSpaceSeparatedContext.class);
		}
		public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated(int i) {
			return getRuleContext(CreateTableOptionsSpaceSeparatedContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public List<AlterCommandsModifierContext> alterCommandsModifier() {
			return getRuleContexts(AlterCommandsModifierContext.class);
		}
		public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return getRuleContext(AlterCommandsModifierContext.class,i);
		}
		public AlterListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterListContext alterList() throws RecognitionException {
		AlterListContext _localctx = new AlterListContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alterList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				setState(1531);
				alterListItem();
				}
				break;
			case 2:
				{
				setState(1532);
				createTableOptionsSpaceSeparated();
				}
				break;
			}
			setState(1543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(1535);
				match(COMMA_SYMBOL);
				setState(1539);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(1536);
					alterListItem();
					}
					break;
				case 2:
					{
					setState(1537);
					alterCommandsModifier();
					}
					break;
				case 3:
					{
					setState(1538);
					createTableOptionsSpaceSeparated();
					}
					break;
				}
				}
				}
				setState(1545);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCommandsModifierContext extends ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return getRuleContext(AlterAlgorithmOptionContext.class,0);
		}
		public AlterLockOptionContext alterLockOption() {
			return getRuleContext(AlterLockOptionContext.class,0);
		}
		public WithValidationContext withValidation() {
			return getRuleContext(WithValidationContext.class,0);
		}
		public AlterCommandsModifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCommandsModifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterCommandsModifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterCommandsModifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterCommandsModifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCommandsModifierContext alterCommandsModifier() throws RecognitionException {
		AlterCommandsModifierContext _localctx = new AlterCommandsModifierContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alterCommandsModifier);
		try {
			setState(1549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1546);
				alterAlgorithmOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1547);
				alterLockOption();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1548);
				withValidation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterListItemContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return getRuleContext(FieldDefinitionContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode COLUMN_SYMBOL() { return getToken(MySQLParser.COLUMN_SYMBOL, 0); }
		public CheckOrReferencesContext checkOrReferences() {
			return getRuleContext(CheckOrReferencesContext.class,0);
		}
		public PlaceContext place() {
			return getRuleContext(PlaceContext.class,0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return getRuleContext(TableConstraintDefContext.class,0);
		}
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public ColumnInternalRefContext columnInternalRef() {
			return getRuleContext(ColumnInternalRefContext.class,0);
		}
		public TerminalNode MODIFY_SYMBOL() { return getToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public IndexRefContext indexRef() {
			return getRuleContext(IndexRefContext.class,0);
		}
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SYMBOL, 0); }
		public RestrictContext restrict() {
			return getRuleContext(RestrictContext.class,0);
		}
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode KEYS_SYMBOL() { return getToken(MySQLParser.KEYS_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public SignedLiteralContext signedLiteral() {
			return getRuleContext(SignedLiteralContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public ConstraintEnforcementContext constraintEnforcement() {
			return getRuleContext(ConstraintEnforcementContext.class,0);
		}
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public TerminalNode ORDER_SYMBOL() { return getToken(MySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public AlterOrderListContext alterOrderList() {
			return getRuleContext(AlterOrderListContext.class,0);
		}
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public AlterListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterListItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterListItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterListItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterListItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterListItemContext alterListItem() throws RecognitionException {
		AlterListItemContext _localctx = new AlterListItemContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alterListItem);
		int _la;
		try {
			setState(1696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1551);
				match(ADD_SYMBOL);
				setState(1553);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					setState(1552);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1567);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					setState(1555);
					identifier();
					setState(1556);
					fieldDefinition();
					setState(1558);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
					case 1:
						{
						setState(1557);
						checkOrReferences();
						}
						break;
					}
					setState(1561);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
						{
						setState(1560);
						place();
						}
					}

					}
					break;
				case 2:
					{
					setState(1563);
					match(OPEN_PAR_SYMBOL);
					setState(1564);
					tableElementList();
					setState(1565);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1569);
				match(ADD_SYMBOL);
				setState(1570);
				tableConstraintDef();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1571);
				match(CHANGE_SYMBOL);
				setState(1573);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					setState(1572);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1575);
				columnInternalRef();
				setState(1576);
				identifier();
				setState(1577);
				fieldDefinition();
				setState(1579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					setState(1578);
					place();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1581);
				match(MODIFY_SYMBOL);
				setState(1583);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
				case 1:
					{
					setState(1582);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1585);
				columnInternalRef();
				setState(1586);
				fieldDefinition();
				setState(1588);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					setState(1587);
					place();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1590);
				match(DROP_SYMBOL);
				setState(1619);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					setState(1592);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
					case 1:
						{
						setState(1591);
						match(COLUMN_SYMBOL);
						}
						break;
					}
					setState(1594);
					columnInternalRef();
					setState(1596);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
						{
						setState(1595);
						restrict();
						}
					}

					}
					break;
				case 2:
					{
					setState(1598);
					match(FOREIGN_SYMBOL);
					setState(1599);
					match(KEY_SYMBOL);
					setState(1606);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
					case 1:
						{
						setState(1600);
						if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
						setState(1601);
						columnInternalRef();
						}
						break;
					case 2:
						{
						setState(1602);
						if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
						setState(1604);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
						case 1:
							{
							setState(1603);
							columnInternalRef();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(1608);
					match(PRIMARY_SYMBOL);
					setState(1609);
					match(KEY_SYMBOL);
					}
					break;
				case 4:
					{
					setState(1610);
					keyOrIndex();
					setState(1611);
					indexRef();
					}
					break;
				case 5:
					{
					setState(1613);
					if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
					setState(1614);
					match(CHECK_SYMBOL);
					setState(1615);
					identifier();
					}
					break;
				case 6:
					{
					setState(1616);
					if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
					setState(1617);
					match(CONSTRAINT_SYMBOL);
					setState(1618);
					identifier();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1621);
				match(DISABLE_SYMBOL);
				setState(1622);
				match(KEYS_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1623);
				match(ENABLE_SYMBOL);
				setState(1624);
				match(KEYS_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1625);
				match(ALTER_SYMBOL);
				setState(1627);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					setState(1626);
					match(COLUMN_SYMBOL);
					}
					break;
				}
				setState(1629);
				columnInternalRef();
				setState(1639);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET_SYMBOL:
					{
					setState(1630);
					match(SET_SYMBOL);
					setState(1631);
					match(DEFAULT_SYMBOL);
					setState(1635);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
					case 1:
						{
						setState(1632);
						if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
						setState(1633);
						exprWithParentheses();
						}
						break;
					case 2:
						{
						setState(1634);
						signedLiteral();
						}
						break;
					}
					}
					break;
				case DROP_SYMBOL:
					{
					setState(1637);
					match(DROP_SYMBOL);
					setState(1638);
					match(DEFAULT_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1641);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1642);
				match(ALTER_SYMBOL);
				setState(1643);
				match(INDEX_SYMBOL);
				setState(1644);
				indexRef();
				setState(1645);
				visibility();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1647);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(1648);
				match(ALTER_SYMBOL);
				setState(1649);
				match(CHECK_SYMBOL);
				setState(1650);
				identifier();
				setState(1651);
				constraintEnforcement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1653);
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				setState(1654);
				match(ALTER_SYMBOL);
				setState(1655);
				match(CONSTRAINT_SYMBOL);
				setState(1656);
				identifier();
				setState(1657);
				constraintEnforcement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1659);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1660);
				match(RENAME_SYMBOL);
				setState(1661);
				match(COLUMN_SYMBOL);
				setState(1662);
				columnInternalRef();
				setState(1663);
				match(TO_SYMBOL);
				setState(1664);
				identifier();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1666);
				match(RENAME_SYMBOL);
				setState(1668);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					setState(1667);
					_la = _input.LA(1);
					if ( !(_la==AS_SYMBOL || _la==TO_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1670);
				tableName();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1671);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(1672);
				match(RENAME_SYMBOL);
				setState(1673);
				keyOrIndex();
				setState(1674);
				indexRef();
				setState(1675);
				match(TO_SYMBOL);
				setState(1676);
				indexName();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1678);
				match(CONVERT_SYMBOL);
				setState(1679);
				match(TO_SYMBOL);
				setState(1680);
				charset();
				setState(1684);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					setState(1681);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(1682);
					match(DEFAULT_SYMBOL);
					}
					break;
				case 2:
					{
					setState(1683);
					charsetName();
					}
					break;
				}
				setState(1687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					setState(1686);
					collate();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1689);
				match(FORCE_SYMBOL);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1690);
				match(ORDER_SYMBOL);
				setState(1691);
				match(BY_SYMBOL);
				setState(1692);
				alterOrderList();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1693);
				if (!(serverVersion >= 50708 && serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion >= 50708 && serverVersion < 80000");
				setState(1694);
				match(UPGRADE_SYMBOL);
				setState(1695);
				match(PARTITIONING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlaceContext extends ParserRuleContext {
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public PlaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_place; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPlace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPlace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPlace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlaceContext place() throws RecognitionException {
		PlaceContext _localctx = new PlaceContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_place);
		try {
			setState(1701);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFTER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1698);
				match(AFTER_SYMBOL);
				setState(1699);
				identifier();
				}
				break;
			case FIRST_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1700);
				match(FIRST_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestrictContext extends ParserRuleContext {
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public RestrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRestrict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRestrict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRestrict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestrictContext restrict() throws RecognitionException {
		RestrictContext _localctx = new RestrictContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_restrict);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1703);
			_la = _input.LA(1);
			if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOrderListContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<DirectionContext> direction() {
			return getRuleContexts(DirectionContext.class);
		}
		public DirectionContext direction(int i) {
			return getRuleContext(DirectionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterOrderListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOrderList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterOrderList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterOrderList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterOrderList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOrderListContext alterOrderList() throws RecognitionException {
		AlterOrderListContext _localctx = new AlterOrderListContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alterOrderList);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1705);
			identifier();
			setState(1707);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				setState(1706);
				direction();
				}
			}

			setState(1716);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1709);
					match(COMMA_SYMBOL);
					setState(1710);
					identifier();
					setState(1712);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
						{
						setState(1711);
						direction();
						}
					}

					}
					} 
				}
				setState(1718);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAlgorithmOptionContext extends ParserRuleContext {
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterAlgorithmOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAlgorithmOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterAlgorithmOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterAlgorithmOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterAlgorithmOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAlgorithmOptionContext alterAlgorithmOption() throws RecognitionException {
		AlterAlgorithmOptionContext _localctx = new AlterAlgorithmOptionContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alterAlgorithmOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1719);
			match(ALGORITHM_SYMBOL);
			setState(1721);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				setState(1720);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(1725);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				setState(1723);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(1724);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLockOptionContext extends ParserRuleContext {
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public AlterLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLockOptionContext alterLockOption() throws RecognitionException {
		AlterLockOptionContext _localctx = new AlterLockOptionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_alterLockOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1727);
			match(LOCK_SYMBOL);
			setState(1729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				setState(1728);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(1733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(1731);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(1732);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexLockAndAlgorithmContext extends ParserRuleContext {
		public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return getRuleContext(AlterAlgorithmOptionContext.class,0);
		}
		public AlterLockOptionContext alterLockOption() {
			return getRuleContext(AlterLockOptionContext.class,0);
		}
		public IndexLockAndAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexLockAndAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexLockAndAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexLockAndAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexLockAndAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexLockAndAlgorithmContext indexLockAndAlgorithm() throws RecognitionException {
		IndexLockAndAlgorithmContext _localctx = new IndexLockAndAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_indexLockAndAlgorithm);
		int _la;
		try {
			setState(1743);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALGORITHM_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1735);
				alterAlgorithmOption();
				setState(1737);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCK_SYMBOL) {
					{
					setState(1736);
					alterLockOption();
					}
				}

				}
				break;
			case LOCK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1739);
				alterLockOption();
				setState(1741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					setState(1740);
					alterAlgorithmOption();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithValidationContext extends ParserRuleContext {
		public TerminalNode VALIDATION_SYMBOL() { return getToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode WITHOUT_SYMBOL() { return getToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public WithValidationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withValidation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWithValidation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWithValidation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWithValidation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithValidationContext withValidation() throws RecognitionException {
		WithValidationContext _localctx = new WithValidationContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_withValidation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1745);
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			setState(1746);
			_la = _input.LA(1);
			if ( !(_la==WITH_SYMBOL || _la==WITHOUT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1747);
			match(VALIDATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RemovePartitioningContext extends ParserRuleContext {
		public TerminalNode REMOVE_SYMBOL() { return getToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public RemovePartitioningContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removePartitioning; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRemovePartitioning(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRemovePartitioning(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRemovePartitioning(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemovePartitioningContext removePartitioning() throws RecognitionException {
		RemovePartitioningContext _localctx = new RemovePartitioningContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_removePartitioning);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1749);
			match(REMOVE_SYMBOL);
			setState(1750);
			match(PARTITIONING_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOrPartitionNameListContext extends ParserRuleContext {
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public AllOrPartitionNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOrPartitionNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAllOrPartitionNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAllOrPartitionNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAllOrPartitionNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOrPartitionNameListContext allOrPartitionNameList() throws RecognitionException {
		AllOrPartitionNameListContext _localctx = new AllOrPartitionNameListContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_allOrPartitionNameList);
		try {
			setState(1754);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1752);
				match(ALL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1753);
				identifierList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlterTablespaceOptionsContext alterTablespaceOptions() {
			return getRuleContext(AlterTablespaceOptionsContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode ACCESSIBLE_SYMBOL() { return getToken(MySQLParser.ACCESSIBLE_SYMBOL, 0); }
		public TerminalNode READ_ONLY_SYMBOL() { return getToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public TerminalNode READ_WRITE_SYMBOL() { return getToken(MySQLParser.READ_WRITE_SYMBOL, 0); }
		public List<ChangeTablespaceOptionContext> changeTablespaceOption() {
			return getRuleContexts(ChangeTablespaceOptionContext.class);
		}
		public ChangeTablespaceOptionContext changeTablespaceOption(int i) {
			return getRuleContext(ChangeTablespaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_alterTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1756);
			match(TABLESPACE_SYMBOL);
			setState(1757);
			tablespaceRef();
			setState(1791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				setState(1758);
				_la = _input.LA(1);
				if ( !(_la==ADD_SYMBOL || _la==DROP_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1759);
				match(DATAFILE_SYMBOL);
				setState(1760);
				textLiteral();
				setState(1762);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTOEXTEND_SIZE_SYMBOL || _la==ENCRYPTION_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
					{
					setState(1761);
					alterTablespaceOptions();
					}
				}

				}
				break;
			case 2:
				{
				setState(1764);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(1784);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EOF:
				case SEMICOLON_SYMBOL:
					{
					}
					break;
				case CHANGE_SYMBOL:
					{
					setState(1766);
					match(CHANGE_SYMBOL);
					setState(1767);
					match(DATAFILE_SYMBOL);
					setState(1768);
					textLiteral();
					setState(1779);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AUTOEXTEND_SIZE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL) {
						{
						setState(1769);
						changeTablespaceOption();
						setState(1776);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==AUTOEXTEND_SIZE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==COMMA_SYMBOL) {
							{
							{
							setState(1771);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA_SYMBOL) {
								{
								setState(1770);
								match(COMMA_SYMBOL);
								}
							}

							setState(1773);
							changeTablespaceOption();
							}
							}
							setState(1778);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					}
					break;
				case READ_ONLY_SYMBOL:
				case READ_WRITE_SYMBOL:
					{
					setState(1781);
					_la = _input.LA(1);
					if ( !(_la==READ_ONLY_SYMBOL || _la==READ_WRITE_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case NOT_SYMBOL:
					{
					setState(1782);
					match(NOT_SYMBOL);
					setState(1783);
					match(ACCESSIBLE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				setState(1786);
				match(RENAME_SYMBOL);
				setState(1787);
				match(TO_SYMBOL);
				setState(1788);
				identifier();
				}
				break;
			case 4:
				{
				setState(1789);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(1790);
				alterTablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUndoTablespaceContext extends ParserRuleContext {
		public TerminalNode UNDO_SYMBOL() { return getToken(MySQLParser.UNDO_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode ACTIVE_SYMBOL() { return getToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public TerminalNode INACTIVE_SYMBOL() { return getToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return getRuleContext(UndoTableSpaceOptionsContext.class,0);
		}
		public AlterUndoTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUndoTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterUndoTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterUndoTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterUndoTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUndoTablespaceContext alterUndoTablespace() throws RecognitionException {
		AlterUndoTablespaceContext _localctx = new AlterUndoTablespaceContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_alterUndoTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1793);
			match(UNDO_SYMBOL);
			setState(1794);
			match(TABLESPACE_SYMBOL);
			setState(1795);
			tablespaceRef();
			setState(1796);
			match(SET_SYMBOL);
			setState(1797);
			_la = _input.LA(1);
			if ( !(_la==ACTIVE_SYMBOL || _la==INACTIVE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				setState(1798);
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UndoTableSpaceOptionsContext extends ParserRuleContext {
		public List<UndoTableSpaceOptionContext> undoTableSpaceOption() {
			return getRuleContexts(UndoTableSpaceOptionContext.class);
		}
		public UndoTableSpaceOptionContext undoTableSpaceOption(int i) {
			return getRuleContext(UndoTableSpaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UndoTableSpaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undoTableSpaceOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUndoTableSpaceOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUndoTableSpaceOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUndoTableSpaceOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UndoTableSpaceOptionsContext undoTableSpaceOptions() throws RecognitionException {
		UndoTableSpaceOptionsContext _localctx = new UndoTableSpaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_undoTableSpaceOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1801);
			undoTableSpaceOption();
			setState(1808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				setState(1803);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(1802);
					match(COMMA_SYMBOL);
					}
				}

				setState(1805);
				undoTableSpaceOption();
				}
				}
				setState(1810);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UndoTableSpaceOptionContext extends ParserRuleContext {
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public UndoTableSpaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undoTableSpaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUndoTableSpaceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUndoTableSpaceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUndoTableSpaceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UndoTableSpaceOptionContext undoTableSpaceOption() throws RecognitionException {
		UndoTableSpaceOptionContext _localctx = new UndoTableSpaceOptionContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_undoTableSpaceOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1811);
			tsOptionEngine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceOptionsContext extends ParserRuleContext {
		public List<AlterTablespaceOptionContext> alterTablespaceOption() {
			return getRuleContexts(AlterTablespaceOptionContext.class);
		}
		public AlterTablespaceOptionContext alterTablespaceOption(int i) {
			return getRuleContext(AlterTablespaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterTablespaceOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterTablespaceOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterTablespaceOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceOptionsContext alterTablespaceOptions() throws RecognitionException {
		AlterTablespaceOptionsContext _localctx = new AlterTablespaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_alterTablespaceOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1813);
			alterTablespaceOption();
			setState(1820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTOEXTEND_SIZE_SYMBOL || _la==ENCRYPTION_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==MAX_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				setState(1815);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(1814);
					match(COMMA_SYMBOL);
					}
				}

				setState(1817);
				alterTablespaceOption();
				}
				}
				setState(1822);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceOptionContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return getRuleContext(TsOptionAutoextendSizeContext.class,0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return getRuleContext(TsOptionMaxSizeContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionEncryptionContext tsOptionEncryption() {
			return getRuleContext(TsOptionEncryptionContext.class,0);
		}
		public AlterTablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterTablespaceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterTablespaceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterTablespaceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceOptionContext alterTablespaceOption() throws RecognitionException {
		AlterTablespaceOptionContext _localctx = new AlterTablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_alterTablespaceOption);
		try {
			setState(1833);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1823);
				match(INITIAL_SIZE_SYMBOL);
				setState(1825);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
				case 1:
					{
					setState(1824);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1827);
				sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1828);
				tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1829);
				tsOptionMaxSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(1830);
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(1831);
				tsOptionWait();
				}
				break;
			case ENCRYPTION_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(1832);
				tsOptionEncryption();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeTablespaceOptionContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return getRuleContext(TsOptionAutoextendSizeContext.class,0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return getRuleContext(TsOptionMaxSizeContext.class,0);
		}
		public ChangeTablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeTablespaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterChangeTablespaceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitChangeTablespaceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitChangeTablespaceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeTablespaceOptionContext changeTablespaceOption() throws RecognitionException {
		ChangeTablespaceOptionContext _localctx = new ChangeTablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_changeTablespaceOption);
		try {
			setState(1842);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1835);
				match(INITIAL_SIZE_SYMBOL);
				setState(1837);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					setState(1836);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(1839);
				sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1840);
				tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1841);
				tsOptionMaxSize();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefContext viewRef() {
			return getRuleContext(ViewRefContext.class,0);
		}
		public ViewTailContext viewTail() {
			return getRuleContext(ViewTailContext.class,0);
		}
		public ViewAlgorithmContext viewAlgorithm() {
			return getRuleContext(ViewAlgorithmContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public ViewSuidContext viewSuid() {
			return getRuleContext(ViewSuidContext.class,0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alterView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1845);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL) {
				{
				setState(1844);
				viewAlgorithm();
				}
			}

			setState(1848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1847);
				definerClause();
				}
			}

			setState(1851);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				setState(1850);
				viewSuid();
				}
			}

			setState(1853);
			match(VIEW_SYMBOL);
			setState(1854);
			viewRef();
			setState(1855);
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewTailContext extends ParserRuleContext {
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public ViewSelectContext viewSelect() {
			return getRuleContext(ViewSelectContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public ViewTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewTail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewTail(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewTail(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewTailContext viewTail() throws RecognitionException {
		ViewTailContext _localctx = new ViewTailContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_viewTail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(1857);
				columnInternalRefList();
				}
			}

			setState(1860);
			match(AS_SYMBOL);
			setState(1861);
			viewSelect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewSelectContext extends ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return getRuleContext(QueryExpressionOrParensContext.class,0);
		}
		public ViewCheckOptionContext viewCheckOption() {
			return getRuleContext(ViewCheckOptionContext.class,0);
		}
		public ViewSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewSelectContext viewSelect() throws RecognitionException {
		ViewSelectContext _localctx = new ViewSelectContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_viewSelect);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1863);
			queryExpressionOrParens();
			setState(1865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				setState(1864);
				viewCheckOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewCheckOptionContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public ViewCheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewCheckOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewCheckOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewCheckOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewCheckOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewCheckOptionContext viewCheckOption() throws RecognitionException {
		ViewCheckOptionContext _localctx = new ViewCheckOptionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_viewCheckOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1867);
			match(WITH_SYMBOL);
			setState(1869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) {
				{
				setState(1868);
				_la = _input.LA(1);
				if ( !(_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1871);
			match(CHECK_SYMBOL);
			setState(1872);
			match(OPTION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateStatementContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public CreateTableContext createTable() {
			return getRuleContext(CreateTableContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateUdfContext createUdf() {
			return getRuleContext(CreateUdfContext.class,0);
		}
		public CreateLogfileGroupContext createLogfileGroup() {
			return getRuleContext(CreateLogfileGroupContext.class,0);
		}
		public CreateViewContext createView() {
			return getRuleContext(CreateViewContext.class,0);
		}
		public CreateTriggerContext createTrigger() {
			return getRuleContext(CreateTriggerContext.class,0);
		}
		public CreateIndexContext createIndex() {
			return getRuleContext(CreateIndexContext.class,0);
		}
		public CreateServerContext createServer() {
			return getRuleContext(CreateServerContext.class,0);
		}
		public CreateTablespaceContext createTablespace() {
			return getRuleContext(CreateTablespaceContext.class,0);
		}
		public CreateEventContext createEvent() {
			return getRuleContext(CreateEventContext.class,0);
		}
		public CreateRoleContext createRole() {
			return getRuleContext(CreateRoleContext.class,0);
		}
		public CreateSpatialReferenceContext createSpatialReference() {
			return getRuleContext(CreateSpatialReferenceContext.class,0);
		}
		public CreateUndoTablespaceContext createUndoTablespace() {
			return getRuleContext(CreateUndoTablespaceContext.class,0);
		}
		public CreateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateStatementContext createStatement() throws RecognitionException {
		CreateStatementContext _localctx = new CreateStatementContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_createStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1874);
			match(CREATE_SYMBOL);
			setState(1893);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				setState(1875);
				createDatabase();
				}
				break;
			case 2:
				{
				setState(1876);
				createTable();
				}
				break;
			case 3:
				{
				setState(1877);
				createFunction();
				}
				break;
			case 4:
				{
				setState(1878);
				createProcedure();
				}
				break;
			case 5:
				{
				setState(1879);
				createUdf();
				}
				break;
			case 6:
				{
				setState(1880);
				createLogfileGroup();
				}
				break;
			case 7:
				{
				setState(1881);
				createView();
				}
				break;
			case 8:
				{
				setState(1882);
				createTrigger();
				}
				break;
			case 9:
				{
				setState(1883);
				createIndex();
				}
				break;
			case 10:
				{
				setState(1884);
				createServer();
				}
				break;
			case 11:
				{
				setState(1885);
				createTablespace();
				}
				break;
			case 12:
				{
				setState(1886);
				createEvent();
				}
				break;
			case 13:
				{
				setState(1887);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(1888);
				createRole();
				}
				break;
			case 14:
				{
				setState(1889);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(1890);
				createSpatialReference();
				}
				break;
			case 15:
				{
				setState(1891);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(1892);
				createUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CreateDatabaseOptionContext> createDatabaseOption() {
			return getRuleContexts(CreateDatabaseOptionContext.class);
		}
		public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return getRuleContext(CreateDatabaseOptionContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_createDatabase);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1895);
			match(DATABASE_SYMBOL);
			setState(1897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(1896);
				ifNotExists();
				}
				break;
			}
			setState(1899);
			schemaName();
			setState(1903);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,106,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1900);
					createDatabaseOption();
					}
					} 
				}
				setState(1905);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,106,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseOptionContext extends ParserRuleContext {
		public DefaultCharsetContext defaultCharset() {
			return getRuleContext(DefaultCharsetContext.class,0);
		}
		public DefaultCollationContext defaultCollation() {
			return getRuleContext(DefaultCollationContext.class,0);
		}
		public DefaultEncryptionContext defaultEncryption() {
			return getRuleContext(DefaultEncryptionContext.class,0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateDatabaseOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateDatabaseOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateDatabaseOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseOptionContext createDatabaseOption() throws RecognitionException {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_createDatabaseOption);
		try {
			setState(1910);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1906);
				defaultCharset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1907);
				defaultCollation();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1908);
				if (!(serverVersion >= 80016)) throw new FailedPredicateException(this, "serverVersion >= 80016");
				setState(1909);
				defaultEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public CreateTableOptionsContext createTableOptions() {
			return getRuleContext(CreateTableOptionsContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public DuplicateAsQueryExpressionContext duplicateAsQueryExpression() {
			return getRuleContext(DuplicateAsQueryExpressionContext.class,0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_createTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				setState(1912);
				match(TEMPORARY_SYMBOL);
				}
			}

			setState(1915);
			match(TABLE_SYMBOL);
			setState(1917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				setState(1916);
				ifNotExists();
				}
				break;
			}
			setState(1919);
			tableName();
			setState(1942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				{
				setState(1924);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
				case 1:
					{
					setState(1920);
					match(OPEN_PAR_SYMBOL);
					setState(1921);
					tableElementList();
					setState(1922);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				setState(1927);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(1926);
					createTableOptions();
					}
					break;
				}
				setState(1930);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
				case 1:
					{
					setState(1929);
					partitionClause();
					}
					break;
				}
				setState(1933);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					setState(1932);
					duplicateAsQueryExpression();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(1935);
				match(LIKE_SYMBOL);
				setState(1936);
				tableRef();
				}
				break;
			case 3:
				{
				setState(1937);
				match(OPEN_PAR_SYMBOL);
				setState(1938);
				match(LIKE_SYMBOL);
				setState(1939);
				tableRef();
				setState(1940);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementListContext extends ParserRuleContext {
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		TableElementListContext _localctx = new TableElementListContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_tableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1944);
			tableElement();
			setState(1949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(1945);
				match(COMMA_SYMBOL);
				setState(1946);
				tableElement();
				}
				}
				setState(1951);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TableConstraintDefContext tableConstraintDef() {
			return getRuleContext(TableConstraintDefContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_tableElement);
		try {
			setState(1954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1952);
				columnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1953);
				tableConstraintDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DuplicateAsQueryExpressionContext extends ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return getRuleContext(QueryExpressionOrParensContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DuplicateAsQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_duplicateAsQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDuplicateAsQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDuplicateAsQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDuplicateAsQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DuplicateAsQueryExpressionContext duplicateAsQueryExpression() throws RecognitionException {
		DuplicateAsQueryExpressionContext _localctx = new DuplicateAsQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_duplicateAsQueryExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				{
				setState(1956);
				_la = _input.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				setState(1959);
				match(AS_SYMBOL);
				}
				break;
			}
			setState(1962);
			queryExpressionOrParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionOrParensContext extends ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public QueryExpressionOrParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionOrParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQueryExpressionOrParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQueryExpressionOrParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQueryExpressionOrParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionOrParensContext queryExpressionOrParens() throws RecognitionException {
		QueryExpressionOrParensContext _localctx = new QueryExpressionOrParensContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_queryExpressionOrParens);
		try {
			setState(1966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1964);
				queryExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1965);
				queryExpressionParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoutineContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode EOF() { return getToken(MySQLParser.EOF, 0); }
		public CreateProcedureContext createProcedure() {
			return getRuleContext(CreateProcedureContext.class,0);
		}
		public CreateFunctionContext createFunction() {
			return getRuleContext(CreateFunctionContext.class,0);
		}
		public CreateUdfContext createUdf() {
			return getRuleContext(CreateUdfContext.class,0);
		}
		public TerminalNode SEMICOLON_SYMBOL() { return getToken(MySQLParser.SEMICOLON_SYMBOL, 0); }
		public CreateRoutineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRoutine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateRoutine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoutineContext createRoutine() throws RecognitionException {
		CreateRoutineContext _localctx = new CreateRoutineContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_createRoutine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1968);
			match(CREATE_SYMBOL);
			setState(1972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				setState(1969);
				createProcedure();
				}
				break;
			case 2:
				{
				setState(1970);
				createFunction();
				}
				break;
			case 3:
				{
				setState(1971);
				createUdf();
				}
				break;
			}
			setState(1975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMICOLON_SYMBOL) {
				{
				setState(1974);
				match(SEMICOLON_SYMBOL);
				}
			}

			setState(1977);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public List<ProcedureParameterContext> procedureParameter() {
			return getRuleContexts(ProcedureParameterContext.class);
		}
		public ProcedureParameterContext procedureParameter(int i) {
			return getRuleContext(ProcedureParameterContext.class,i);
		}
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(1979);
				definerClause();
				}
			}

			setState(1982);
			match(PROCEDURE_SYMBOL);
			setState(1983);
			procedureName();
			setState(1984);
			match(OPEN_PAR_SYMBOL);
			setState(1993);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(1985);
				procedureParameter();
				setState(1990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(1986);
					match(COMMA_SYMBOL);
					setState(1987);
					procedureParameter();
					}
					}
					setState(1992);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(1995);
			match(CLOSE_PAR_SYMBOL);
			setState(1999);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,125,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1996);
					routineCreateOption();
					}
					} 
				}
				setState(2001);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,125,_ctx);
			}
			setState(2002);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TypeWithOptCollateContext typeWithOptCollate() {
			return getRuleContext(TypeWithOptCollateContext.class,0);
		}
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_createFunction);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2004);
				definerClause();
				}
			}

			setState(2007);
			match(FUNCTION_SYMBOL);
			setState(2008);
			functionName();
			setState(2009);
			match(OPEN_PAR_SYMBOL);
			setState(2018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				setState(2010);
				functionParameter();
				setState(2015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(2011);
					match(COMMA_SYMBOL);
					setState(2012);
					functionParameter();
					}
					}
					setState(2017);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(2020);
			match(CLOSE_PAR_SYMBOL);
			setState(2021);
			match(RETURNS_SYMBOL);
			setState(2022);
			typeWithOptCollate();
			setState(2026);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2023);
					routineCreateOption();
					}
					} 
				}
				setState(2028);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,129,_ctx);
			}
			setState(2029);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfContext extends ParserRuleContext {
		public Token type;
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public UdfNameContext udfName() {
			return getRuleContext(UdfNameContext.class,0);
		}
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode STRING_SYMBOL() { return getToken(MySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode INT_SYMBOL() { return getToken(MySQLParser.INT_SYMBOL, 0); }
		public TerminalNode REAL_SYMBOL() { return getToken(MySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public CreateUdfContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdf; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateUdf(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateUdf(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateUdf(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfContext createUdf() throws RecognitionException {
		CreateUdfContext _localctx = new CreateUdfContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_createUdf);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE_SYMBOL) {
				{
				setState(2031);
				match(AGGREGATE_SYMBOL);
				}
			}

			setState(2034);
			match(FUNCTION_SYMBOL);
			setState(2035);
			udfName();
			setState(2036);
			match(RETURNS_SYMBOL);
			setState(2037);
			((CreateUdfContext)_localctx).type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL_SYMBOL || _la==INT_SYMBOL || _la==REAL_SYMBOL || _la==STRING_SYMBOL) ) {
				((CreateUdfContext)_localctx).type = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2038);
			match(SONAME_SYMBOL);
			setState(2039);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineCreateOptionContext extends ParserRuleContext {
		public RoutineOptionContext routineOption() {
			return getRuleContext(RoutineOptionContext.class,0);
		}
		public TerminalNode DETERMINISTIC_SYMBOL() { return getToken(MySQLParser.DETERMINISTIC_SYMBOL, 0); }
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public RoutineCreateOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineCreateOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoutineCreateOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoutineCreateOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoutineCreateOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineCreateOptionContext routineCreateOption() throws RecognitionException {
		RoutineCreateOptionContext _localctx = new RoutineCreateOptionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_routineCreateOption);
		int _la;
		try {
			setState(2046);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT_SYMBOL:
			case CONTAINS_SYMBOL:
			case LANGUAGE_SYMBOL:
			case MODIFIES_SYMBOL:
			case NO_SYMBOL:
			case READS_SYMBOL:
			case SQL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2041);
				routineOption();
				}
				break;
			case DETERMINISTIC_SYMBOL:
			case NOT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2043);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(2042);
					match(NOT_SYMBOL);
					}
				}

				setState(2045);
				match(DETERMINISTIC_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineAlterOptionsContext extends ParserRuleContext {
		public List<RoutineCreateOptionContext> routineCreateOption() {
			return getRuleContexts(RoutineCreateOptionContext.class);
		}
		public RoutineCreateOptionContext routineCreateOption(int i) {
			return getRuleContext(RoutineCreateOptionContext.class,i);
		}
		public RoutineAlterOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineAlterOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoutineAlterOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoutineAlterOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoutineAlterOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineAlterOptionsContext routineAlterOptions() throws RecognitionException {
		RoutineAlterOptionsContext _localctx = new RoutineAlterOptionsContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_routineAlterOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2049); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2048);
				routineCreateOption();
				}
				}
				setState(2051); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (COMMENT_SYMBOL - 75)) | (1L << (CONTAINS_SYMBOL - 75)) | (1L << (DETERMINISTIC_SYMBOL - 75)))) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (MODIFIES_SYMBOL - 347)) | (1L << (NOT_SYMBOL - 347)) | (1L << (NO_SYMBOL - 347)))) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public Token option;
		public Token security;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode SQL_SYMBOL() { return getToken(MySQLParser.SQL_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode READS_SYMBOL() { return getToken(MySQLParser.READS_SYMBOL, 0); }
		public TerminalNode MODIFIES_SYMBOL() { return getToken(MySQLParser.MODIFIES_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoutineOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoutineOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoutineOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_routineOption);
		int _la;
		try {
			setState(2070);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2053);
				((RoutineOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(2054);
				textLiteral();
				}
				break;
			case LANGUAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2055);
				((RoutineOptionContext)_localctx).option = match(LANGUAGE_SYMBOL);
				setState(2056);
				match(SQL_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2057);
				((RoutineOptionContext)_localctx).option = match(NO_SYMBOL);
				setState(2058);
				match(SQL_SYMBOL);
				}
				break;
			case CONTAINS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2059);
				((RoutineOptionContext)_localctx).option = match(CONTAINS_SYMBOL);
				setState(2060);
				match(SQL_SYMBOL);
				}
				break;
			case READS_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2061);
				((RoutineOptionContext)_localctx).option = match(READS_SYMBOL);
				setState(2062);
				match(SQL_SYMBOL);
				setState(2063);
				match(DATA_SYMBOL);
				}
				break;
			case MODIFIES_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2064);
				((RoutineOptionContext)_localctx).option = match(MODIFIES_SYMBOL);
				setState(2065);
				match(SQL_SYMBOL);
				setState(2066);
				match(DATA_SYMBOL);
				}
				break;
			case SQL_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(2067);
				((RoutineOptionContext)_localctx).option = match(SQL_SYMBOL);
				setState(2068);
				match(SECURITY_SYMBOL);
				setState(2069);
				((RoutineOptionContext)_localctx).security = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
					((RoutineOptionContext)_localctx).security = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public Token type;
		public CreateIndexTargetContext createIndexTarget() {
			return getRuleContext(CreateIndexTargetContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public TerminalNode FULLTEXT_SYMBOL() { return getToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return getRuleContext(IndexLockAndAlgorithmContext.class,0);
		}
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<FulltextIndexOptionContext> fulltextIndexOption() {
			return getRuleContexts(FulltextIndexOptionContext.class);
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return getRuleContext(FulltextIndexOptionContext.class,i);
		}
		public List<SpatialIndexOptionContext> spatialIndexOption() {
			return getRuleContexts(SpatialIndexOptionContext.class);
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return getRuleContext(SpatialIndexOptionContext.class,i);
		}
		public IndexTypeClauseContext indexTypeClause() {
			return getRuleContext(IndexTypeClauseContext.class,0);
		}
		public IndexNameAndTypeContext indexNameAndType() {
			return getRuleContext(IndexNameAndTypeContext.class,0);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_createIndex);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				setState(2072);
				onlineOption();
				}
			}

			setState(2116);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX_SYMBOL:
			case UNIQUE_SYMBOL:
				{
				setState(2076);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNIQUE_SYMBOL) {
					{
					setState(2075);
					match(UNIQUE_SYMBOL);
					}
				}

				setState(2078);
				((CreateIndexContext)_localctx).type = match(INDEX_SYMBOL);
				setState(2087);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
				case 1:
					{
					setState(2079);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(2080);
					indexName();
					setState(2082);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TYPE_SYMBOL || _la==USING_SYMBOL) {
						{
						setState(2081);
						indexTypeClause();
						}
					}

					}
					break;
				case 2:
					{
					setState(2085);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
					case 1:
						{
						setState(2084);
						indexNameAndType();
						}
						break;
					}
					}
					break;
				}
				setState(2089);
				createIndexTarget();
				setState(2093);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,140,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2090);
						indexOption();
						}
						} 
					}
					setState(2095);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,140,_ctx);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				{
				setState(2096);
				((CreateIndexContext)_localctx).type = match(FULLTEXT_SYMBOL);
				setState(2097);
				match(INDEX_SYMBOL);
				setState(2098);
				indexName();
				setState(2099);
				createIndexTarget();
				setState(2103);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,141,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2100);
						fulltextIndexOption();
						}
						} 
					}
					setState(2105);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,141,_ctx);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				{
				setState(2106);
				((CreateIndexContext)_localctx).type = match(SPATIAL_SYMBOL);
				setState(2107);
				match(INDEX_SYMBOL);
				setState(2108);
				indexName();
				setState(2109);
				createIndexTarget();
				setState(2113);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2110);
						spatialIndexOption();
						}
						} 
					}
					setState(2115);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,142,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				setState(2118);
				indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameAndTypeContext extends ParserRuleContext {
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexNameAndTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexNameAndType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexNameAndType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexNameAndType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexNameAndType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameAndTypeContext indexNameAndType() throws RecognitionException {
		IndexNameAndTypeContext _localctx = new IndexNameAndTypeContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_indexNameAndType);
		try {
			setState(2130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2121);
				indexName();
				setState(2124);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
				case 1:
					{
					setState(2122);
					match(USING_SYMBOL);
					setState(2123);
					indexType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2126);
				indexName();
				setState(2127);
				match(TYPE_SYMBOL);
				setState(2128);
				indexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexTargetContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public KeyListVariantsContext keyListVariants() {
			return getRuleContext(KeyListVariantsContext.class,0);
		}
		public CreateIndexTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateIndexTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateIndexTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateIndexTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexTargetContext createIndexTarget() throws RecognitionException {
		CreateIndexTargetContext _localctx = new CreateIndexTargetContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_createIndexTarget);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2132);
			match(ON_SYMBOL);
			setState(2133);
			tableRef();
			setState(2134);
			keyListVariants();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupNameContext logfileGroupName() {
			return getRuleContext(LogfileGroupNameContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TerminalNode REDOFILE_SYMBOL() { return getToken(MySQLParser.REDOFILE_SYMBOL, 0); }
		public LogfileGroupOptionsContext logfileGroupOptions() {
			return getRuleContext(LogfileGroupOptionsContext.class,0);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLogfileGroupContext createLogfileGroup() throws RecognitionException {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_createLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2136);
			match(LOGFILE_SYMBOL);
			setState(2137);
			match(GROUP_SYMBOL);
			setState(2138);
			logfileGroupName();
			setState(2139);
			match(ADD_SYMBOL);
			setState(2140);
			_la = _input.LA(1);
			if ( !(_la==REDOFILE_SYMBOL || _la==UNDOFILE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2141);
			textLiteral();
			setState(2143);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NODEGROUP_SYMBOL || _la==NO_WAIT_SYMBOL || _la==REDO_BUFFER_SIZE_SYMBOL || _la==STORAGE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(2142);
				logfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupOptionsContext extends ParserRuleContext {
		public List<LogfileGroupOptionContext> logfileGroupOption() {
			return getRuleContexts(LogfileGroupOptionContext.class);
		}
		public LogfileGroupOptionContext logfileGroupOption(int i) {
			return getRuleContext(LogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public LogfileGroupOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLogfileGroupOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLogfileGroupOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLogfileGroupOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogfileGroupOptionsContext logfileGroupOptions() throws RecognitionException {
		LogfileGroupOptionsContext _localctx = new LogfileGroupOptionsContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_logfileGroupOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2145);
			logfileGroupOption();
			setState(2152);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NODEGROUP_SYMBOL || _la==NO_WAIT_SYMBOL || _la==REDO_BUFFER_SIZE_SYMBOL || _la==STORAGE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
				{
				{
				setState(2147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(2146);
					match(COMMA_SYMBOL);
					}
				}

				setState(2149);
				logfileGroupOption();
				}
				}
				setState(2154);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupOptionContext extends ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return getRuleContext(TsOptionInitialSizeContext.class,0);
		}
		public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
			return getRuleContext(TsOptionUndoRedoBufferSizeContext.class,0);
		}
		public TsOptionNodegroupContext tsOptionNodegroup() {
			return getRuleContext(TsOptionNodegroupContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionCommentContext tsOptionComment() {
			return getRuleContext(TsOptionCommentContext.class,0);
		}
		public LogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLogfileGroupOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLogfileGroupOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLogfileGroupOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogfileGroupOptionContext logfileGroupOption() throws RecognitionException {
		LogfileGroupOptionContext _localctx = new LogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_logfileGroupOption);
		try {
			setState(2161);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2155);
				tsOptionInitialSize();
				}
				break;
			case REDO_BUFFER_SIZE_SYMBOL:
			case UNDO_BUFFER_SIZE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2156);
				tsOptionUndoRedoBufferSize();
				}
				break;
			case NODEGROUP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2157);
				tsOptionNodegroup();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2158);
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2159);
				tsOptionWait();
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2160);
				tsOptionComment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerNameContext serverName() {
			return getRuleContext(ServerNameContext.class,0);
		}
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerOptionsContext serverOptions() {
			return getRuleContext(ServerOptionsContext.class,0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_createServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2163);
			match(SERVER_SYMBOL);
			setState(2164);
			serverName();
			setState(2165);
			match(FOREIGN_SYMBOL);
			setState(2166);
			match(DATA_SYMBOL);
			setState(2167);
			match(WRAPPER_SYMBOL);
			setState(2168);
			textOrIdentifier();
			setState(2169);
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ServerOptionContext> serverOption() {
			return getRuleContexts(ServerOptionContext.class);
		}
		public ServerOptionContext serverOption(int i) {
			return getRuleContext(ServerOptionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterServerOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitServerOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitServerOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionsContext serverOptions() throws RecognitionException {
		ServerOptionsContext _localctx = new ServerOptionsContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_serverOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2171);
			match(OPTIONS_SYMBOL);
			setState(2172);
			match(OPEN_PAR_SYMBOL);
			setState(2173);
			serverOption();
			setState(2178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2174);
				match(COMMA_SYMBOL);
				setState(2175);
				serverOption();
				}
				}
				setState(2180);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2181);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public Token option;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode HOST_SYMBOL() { return getToken(MySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MySQLParser.OWNER_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode PORT_SYMBOL() { return getToken(MySQLParser.PORT_SYMBOL, 0); }
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterServerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitServerOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitServerOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_serverOption);
		try {
			setState(2197);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2183);
				((ServerOptionContext)_localctx).option = match(HOST_SYMBOL);
				setState(2184);
				textLiteral();
				}
				break;
			case DATABASE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2185);
				((ServerOptionContext)_localctx).option = match(DATABASE_SYMBOL);
				setState(2186);
				textLiteral();
				}
				break;
			case USER_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2187);
				((ServerOptionContext)_localctx).option = match(USER_SYMBOL);
				setState(2188);
				textLiteral();
				}
				break;
			case PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2189);
				((ServerOptionContext)_localctx).option = match(PASSWORD_SYMBOL);
				setState(2190);
				textLiteral();
				}
				break;
			case SOCKET_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2191);
				((ServerOptionContext)_localctx).option = match(SOCKET_SYMBOL);
				setState(2192);
				textLiteral();
				}
				break;
			case OWNER_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(2193);
				((ServerOptionContext)_localctx).option = match(OWNER_SYMBOL);
				setState(2194);
				textLiteral();
				}
				break;
			case PORT_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(2195);
				((ServerOptionContext)_localctx).option = match(PORT_SYMBOL);
				setState(2196);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public TsDataFileNameContext tsDataFileName() {
			return getRuleContext(TsDataFileNameContext.class,0);
		}
		public TerminalNode USE_SYMBOL() { return getToken(MySQLParser.USE_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public TablespaceOptionsContext tablespaceOptions() {
			return getRuleContext(TablespaceOptionsContext.class,0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceContext createTablespace() throws RecognitionException {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_createTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2199);
			match(TABLESPACE_SYMBOL);
			setState(2200);
			tablespaceName();
			setState(2201);
			tsDataFileName();
			setState(2206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				setState(2202);
				match(USE_SYMBOL);
				setState(2203);
				match(LOGFILE_SYMBOL);
				setState(2204);
				match(GROUP_SYMBOL);
				setState(2205);
				logfileGroupRef();
				}
				break;
			}
			setState(2209);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(2208);
				tablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUndoTablespaceContext extends ParserRuleContext {
		public TerminalNode UNDO_SYMBOL() { return getToken(MySQLParser.UNDO_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceNameContext tablespaceName() {
			return getRuleContext(TablespaceNameContext.class,0);
		}
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TsDataFileContext tsDataFile() {
			return getRuleContext(TsDataFileContext.class,0);
		}
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return getRuleContext(UndoTableSpaceOptionsContext.class,0);
		}
		public CreateUndoTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUndoTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateUndoTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateUndoTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateUndoTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUndoTablespaceContext createUndoTablespace() throws RecognitionException {
		CreateUndoTablespaceContext _localctx = new CreateUndoTablespaceContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_createUndoTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2211);
			match(UNDO_SYMBOL);
			setState(2212);
			match(TABLESPACE_SYMBOL);
			setState(2213);
			tablespaceName();
			setState(2214);
			match(ADD_SYMBOL);
			setState(2215);
			tsDataFile();
			setState(2217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				setState(2216);
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsDataFileNameContext extends ParserRuleContext {
		public TerminalNode ADD_SYMBOL() { return getToken(MySQLParser.ADD_SYMBOL, 0); }
		public TsDataFileContext tsDataFile() {
			return getRuleContext(TsDataFileContext.class,0);
		}
		public TsDataFileNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsDataFileName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTsDataFileName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTsDataFileName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTsDataFileName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TsDataFileNameContext tsDataFileName() throws RecognitionException {
		TsDataFileNameContext _localctx = new TsDataFileNameContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_tsDataFileName);
		try {
			setState(2226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2219);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(2222);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
				case 1:
					{
					setState(2220);
					match(ADD_SYMBOL);
					setState(2221);
					tsDataFile();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2224);
				match(ADD_SYMBOL);
				setState(2225);
				tsDataFile();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsDataFileContext extends ParserRuleContext {
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TsDataFileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsDataFile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTsDataFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTsDataFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTsDataFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TsDataFileContext tsDataFile() throws RecognitionException {
		TsDataFileContext _localctx = new TsDataFileContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_tsDataFile);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2228);
			match(DATAFILE_SYMBOL);
			setState(2229);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceOptionsContext extends ParserRuleContext {
		public List<TablespaceOptionContext> tablespaceOption() {
			return getRuleContexts(TablespaceOptionContext.class);
		}
		public TablespaceOptionContext tablespaceOption(int i) {
			return getRuleContext(TablespaceOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TablespaceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTablespaceOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTablespaceOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTablespaceOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceOptionsContext tablespaceOptions() throws RecognitionException {
		TablespaceOptionsContext _localctx = new TablespaceOptionsContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_tablespaceOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2231);
			tablespaceOption();
			setState(2238);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,159,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2233);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
					case 1:
						{
						setState(2232);
						match(COMMA_SYMBOL);
						}
						break;
					}
					setState(2235);
					tablespaceOption();
					}
					} 
				}
				setState(2240);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,159,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceOptionContext extends ParserRuleContext {
		public TsOptionInitialSizeContext tsOptionInitialSize() {
			return getRuleContext(TsOptionInitialSizeContext.class,0);
		}
		public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return getRuleContext(TsOptionAutoextendSizeContext.class,0);
		}
		public TsOptionMaxSizeContext tsOptionMaxSize() {
			return getRuleContext(TsOptionMaxSizeContext.class,0);
		}
		public TsOptionExtentSizeContext tsOptionExtentSize() {
			return getRuleContext(TsOptionExtentSizeContext.class,0);
		}
		public TsOptionNodegroupContext tsOptionNodegroup() {
			return getRuleContext(TsOptionNodegroupContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionCommentContext tsOptionComment() {
			return getRuleContext(TsOptionCommentContext.class,0);
		}
		public TsOptionFileblockSizeContext tsOptionFileblockSize() {
			return getRuleContext(TsOptionFileblockSizeContext.class,0);
		}
		public TsOptionEncryptionContext tsOptionEncryption() {
			return getRuleContext(TsOptionEncryptionContext.class,0);
		}
		public TablespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTablespaceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTablespaceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTablespaceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceOptionContext tablespaceOption() throws RecognitionException {
		TablespaceOptionContext _localctx = new TablespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_tablespaceOption);
		try {
			setState(2253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2241);
				tsOptionInitialSize();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2242);
				tsOptionAutoextendSize();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2243);
				tsOptionMaxSize();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2244);
				tsOptionExtentSize();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2245);
				tsOptionNodegroup();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2246);
				tsOptionEngine();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2247);
				tsOptionWait();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2248);
				tsOptionComment();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2249);
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				setState(2250);
				tsOptionFileblockSize();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2251);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(2252);
				tsOptionEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionInitialSizeContext extends ParserRuleContext {
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionInitialSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionInitialSize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTsOptionInitialSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTsOptionInitialSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTsOptionInitialSize(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TsOptionInitialSizeContext tsOptionInitialSize() throws RecognitionException {
		TsOptionInitialSizeContext _localctx = new TsOptionInitialSizeContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_tsOptionInitialSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2255);
			match(INITIAL_SIZE_SYMBOL);
			setState(2257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
			case 1:
				{
				setState(2256);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2259);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionUndoRedoBufferSizeContext extends ParserRuleContext {
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionUndoRedoBufferSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionUndoRedoBufferSize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTsOptionUndoRedoBufferSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTsOptionUndoRedoBufferSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTsOptionUndoRedoBufferSize(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() throws RecognitionException {
		TsOptionUndoRedoBufferSizeContext _localctx = new TsOptionUndoRedoBufferSizeContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_tsOptionUndoRedoBufferSize);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2261);
			_la = _input.LA(1);
			if ( !(_la==REDO_BUFFER_SIZE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,162,_ctx) ) {
			case 1:
				{
				setState(2262);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2265);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionAutoextendSizeContext extends ParserRuleContext {
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionAutoextendSize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTsOptionAutoextendSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTsOptionAutoextendSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTsOptionAutoextendSize(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TsOptionAutoextendSizeContext tsOptionAutoextendSize() throws RecognitionException {
		TsOptionAutoextendSizeContext _localctx = new TsOptionAutoextendSizeContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_tsOptionAutoextendSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2267);
			match(AUTOEXTEND_SIZE_SYMBOL);
			setState(2269);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				setState(2268);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2271);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionMaxSizeContext extends ParserRuleContext {
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionMaxSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionMaxSize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTsOptionMaxSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTsOptionMaxSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTsOptionMaxSize(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TsOptionMaxSizeContext tsOptionMaxSize() throws RecognitionException {
		TsOptionMaxSizeContext _localctx = new TsOptionMaxSizeContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_tsOptionMaxSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2273);
			match(MAX_SIZE_SYMBOL);
			setState(2275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				setState(2274);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2277);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionExtentSizeContext extends ParserRuleContext {
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionExtentSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionExtentSize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTsOptionExtentSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTsOptionExtentSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTsOptionExtentSize(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TsOptionExtentSizeContext tsOptionExtentSize() throws RecognitionException {
		TsOptionExtentSizeContext _localctx = new TsOptionExtentSizeContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_tsOptionExtentSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2279);
			match(EXTENT_SIZE_SYMBOL);
			setState(2281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				setState(2280);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2283);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionNodegroupContext extends ParserRuleContext {
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionNodegroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionNodegroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTsOptionNodegroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTsOptionNodegroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTsOptionNodegroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TsOptionNodegroupContext tsOptionNodegroup() throws RecognitionException {
		TsOptionNodegroupContext _localctx = new TsOptionNodegroupContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_tsOptionNodegroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2285);
			match(NODEGROUP_SYMBOL);
			setState(2287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR) {
				{
				setState(2286);
				match(EQUAL_OPERATOR);
				}
			}

			setState(2289);
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionEngineContext extends ParserRuleContext {
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEngineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionEngine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTsOptionEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTsOptionEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTsOptionEngine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TsOptionEngineContext tsOptionEngine() throws RecognitionException {
		TsOptionEngineContext _localctx = new TsOptionEngineContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_tsOptionEngine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORAGE_SYMBOL) {
				{
				setState(2291);
				match(STORAGE_SYMBOL);
				}
			}

			setState(2294);
			match(ENGINE_SYMBOL);
			setState(2296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				setState(2295);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2298);
			engineRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionWaitContext extends ParserRuleContext {
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TsOptionWaitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionWait; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTsOptionWait(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTsOptionWait(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTsOptionWait(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TsOptionWaitContext tsOptionWait() throws RecognitionException {
		TsOptionWaitContext _localctx = new TsOptionWaitContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_tsOptionWait);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2300);
			_la = _input.LA(1);
			if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionCommentContext extends ParserRuleContext {
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionComment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTsOptionComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTsOptionComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTsOptionComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TsOptionCommentContext tsOptionComment() throws RecognitionException {
		TsOptionCommentContext _localctx = new TsOptionCommentContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_tsOptionComment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2302);
			match(COMMENT_SYMBOL);
			setState(2304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(2303);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2306);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionFileblockSizeContext extends ParserRuleContext {
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public SizeNumberContext sizeNumber() {
			return getRuleContext(SizeNumberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionFileblockSizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionFileblockSize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTsOptionFileblockSize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTsOptionFileblockSize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTsOptionFileblockSize(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TsOptionFileblockSizeContext tsOptionFileblockSize() throws RecognitionException {
		TsOptionFileblockSizeContext _localctx = new TsOptionFileblockSizeContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_tsOptionFileblockSize);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2308);
			match(FILE_BLOCK_SIZE_SYMBOL);
			setState(2310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				setState(2309);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2312);
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TsOptionEncryptionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TsOptionEncryptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsOptionEncryption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTsOptionEncryption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTsOptionEncryption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTsOptionEncryption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TsOptionEncryptionContext tsOptionEncryption() throws RecognitionException {
		TsOptionEncryptionContext _localctx = new TsOptionEncryptionContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_tsOptionEncryption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2314);
			match(ENCRYPTION_SYMBOL);
			setState(2316);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				setState(2315);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(2318);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public ViewTailContext viewTail() {
			return getRuleContext(ViewTailContext.class,0);
		}
		public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
			return getRuleContext(ViewReplaceOrAlgorithmContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public ViewSuidContext viewSuid() {
			return getRuleContext(ViewSuidContext.class,0);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==OR_SYMBOL) {
				{
				setState(2320);
				viewReplaceOrAlgorithm();
				}
			}

			setState(2324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2323);
				definerClause();
				}
			}

			setState(2327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				setState(2326);
				viewSuid();
				}
			}

			setState(2329);
			match(VIEW_SYMBOL);
			setState(2330);
			viewName();
			setState(2331);
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewReplaceOrAlgorithmContext extends ParserRuleContext {
		public TerminalNode OR_SYMBOL() { return getToken(MySQLParser.OR_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public ViewAlgorithmContext viewAlgorithm() {
			return getRuleContext(ViewAlgorithmContext.class,0);
		}
		public ViewReplaceOrAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewReplaceOrAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewReplaceOrAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewReplaceOrAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewReplaceOrAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() throws RecognitionException {
		ViewReplaceOrAlgorithmContext _localctx = new ViewReplaceOrAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_viewReplaceOrAlgorithm);
		int _la;
		try {
			setState(2339);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2333);
				match(OR_SYMBOL);
				setState(2334);
				match(REPLACE_SYMBOL);
				setState(2336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					setState(2335);
					viewAlgorithm();
					}
				}

				}
				break;
			case ALGORITHM_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2338);
				viewAlgorithm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewAlgorithmContext extends ParserRuleContext {
		public Token algorithm;
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public ViewAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewAlgorithmContext viewAlgorithm() throws RecognitionException {
		ViewAlgorithmContext _localctx = new ViewAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_viewAlgorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2341);
			match(ALGORITHM_SYMBOL);
			setState(2342);
			match(EQUAL_OPERATOR);
			setState(2343);
			((ViewAlgorithmContext)_localctx).algorithm = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==MERGE_SYMBOL || _la==TEMPTABLE_SYMBOL || _la==UNDEFINED_SYMBOL) ) {
				((ViewAlgorithmContext)_localctx).algorithm = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewSuidContext extends ParserRuleContext {
		public TerminalNode SQL_SYMBOL() { return getToken(MySQLParser.SQL_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public ViewSuidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewSuid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewSuid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewSuid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewSuid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewSuidContext viewSuid() throws RecognitionException {
		ViewSuidContext _localctx = new ViewSuidContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_viewSuid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2345);
			match(SQL_SYMBOL);
			setState(2346);
			match(SECURITY_SYMBOL);
			setState(2347);
			_la = _input.LA(1);
			if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public Token timing;
		public Token event;
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode EACH_SYMBOL() { return getToken(MySQLParser.EACH_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode BEFORE_SYMBOL() { return getToken(MySQLParser.BEFORE_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
			return getRuleContext(TriggerFollowsPrecedesClauseContext.class,0);
		}
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_createTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2349);
				definerClause();
				}
			}

			setState(2352);
			match(TRIGGER_SYMBOL);
			setState(2353);
			triggerName();
			setState(2354);
			((CreateTriggerContext)_localctx).timing = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==AFTER_SYMBOL || _la==BEFORE_SYMBOL) ) {
				((CreateTriggerContext)_localctx).timing = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2355);
			((CreateTriggerContext)_localctx).event = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE_SYMBOL || _la==INSERT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				((CreateTriggerContext)_localctx).event = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2356);
			match(ON_SYMBOL);
			setState(2357);
			tableRef();
			setState(2358);
			match(FOR_SYMBOL);
			setState(2359);
			match(EACH_SYMBOL);
			setState(2360);
			match(ROW_SYMBOL);
			setState(2362);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				setState(2361);
				triggerFollowsPrecedesClause();
				}
				break;
			}
			setState(2364);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFollowsPrecedesClauseContext extends ParserRuleContext {
		public Token ordering;
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TriggerFollowsPrecedesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFollowsPrecedesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTriggerFollowsPrecedesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTriggerFollowsPrecedesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTriggerFollowsPrecedesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() throws RecognitionException {
		TriggerFollowsPrecedesClauseContext _localctx = new TriggerFollowsPrecedesClauseContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_triggerFollowsPrecedesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2366);
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			setState(2367);
			((TriggerFollowsPrecedesClauseContext)_localctx).ordering = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FOLLOWS_SYMBOL || _la==PRECEDES_SYMBOL) ) {
				((TriggerFollowsPrecedesClauseContext)_localctx).ordering = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2368);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventNameContext eventName() {
			return getRuleContext(EventNameContext.class,0);
		}
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MySQLParser.ON_SYMBOL, i);
		}
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public ScheduleContext schedule() {
			return getRuleContext(ScheduleContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public DefinerClauseContext definerClause() {
			return getRuleContext(DefinerClauseContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public CreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventContext createEvent() throws RecognitionException {
		CreateEventContext _localctx = new CreateEventContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_createEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				setState(2370);
				definerClause();
				}
			}

			setState(2373);
			match(EVENT_SYMBOL);
			setState(2375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(2374);
				ifNotExists();
				}
				break;
			}
			setState(2377);
			eventName();
			setState(2378);
			match(ON_SYMBOL);
			setState(2379);
			match(SCHEDULE_SYMBOL);
			setState(2380);
			schedule();
			setState(2387);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON_SYMBOL) {
				{
				setState(2381);
				match(ON_SYMBOL);
				setState(2382);
				match(COMPLETION_SYMBOL);
				setState(2384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(2383);
					match(NOT_SYMBOL);
					}
				}

				setState(2386);
				match(PRESERVE_SYMBOL);
				}
			}

			setState(2395);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_SYMBOL:
				{
				setState(2389);
				match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				setState(2390);
				match(DISABLE_SYMBOL);
				setState(2393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(2391);
					match(ON_SYMBOL);
					setState(2392);
					match(SLAVE_SYMBOL);
					}
				}

				}
				break;
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
				break;
			default:
				break;
			}
			setState(2399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				setState(2397);
				match(COMMENT_SYMBOL);
				setState(2398);
				textLiteral();
				}
			}

			setState(2401);
			match(DO_SYMBOL);
			setState(2402);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRoleContext extends ParserRuleContext {
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRoleContext createRole() throws RecognitionException {
		CreateRoleContext _localctx = new CreateRoleContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_createRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2404);
			match(ROLE_SYMBOL);
			setState(2406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(2405);
				ifNotExists();
				}
				break;
			}
			setState(2408);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSpatialReferenceContext extends ParserRuleContext {
		public TerminalNode OR_SYMBOL() { return getToken(MySQLParser.OR_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public List<SrsAttributeContext> srsAttribute() {
			return getRuleContexts(SrsAttributeContext.class);
		}
		public SrsAttributeContext srsAttribute(int i) {
			return getRuleContext(SrsAttributeContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateSpatialReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSpatialReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateSpatialReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateSpatialReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateSpatialReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSpatialReferenceContext createSpatialReference() throws RecognitionException {
		CreateSpatialReferenceContext _localctx = new CreateSpatialReferenceContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_createSpatialReference);
		int _la;
		try {
			setState(2435);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2410);
				match(OR_SYMBOL);
				setState(2411);
				match(REPLACE_SYMBOL);
				setState(2412);
				match(SPATIAL_SYMBOL);
				setState(2413);
				match(REFERENCE_SYMBOL);
				setState(2414);
				match(SYSTEM_SYMBOL);
				setState(2415);
				real_ulonglong_number();
				setState(2419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 715)) & ~0x3f) == 0 && ((1L << (_la - 715)) & ((1L << (DEFINITION_SYMBOL - 715)) | (1L << (DESCRIPTION_SYMBOL - 715)) | (1L << (ORGANIZATION_SYMBOL - 715)))) != 0)) {
					{
					{
					setState(2416);
					srsAttribute();
					}
					}
					setState(2421);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2422);
				match(SPATIAL_SYMBOL);
				setState(2423);
				match(REFERENCE_SYMBOL);
				setState(2424);
				match(SYSTEM_SYMBOL);
				setState(2426);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
				case 1:
					{
					setState(2425);
					ifNotExists();
					}
					break;
				}
				setState(2428);
				real_ulonglong_number();
				setState(2432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 715)) & ~0x3f) == 0 && ((1L << (_la - 715)) & ((1L << (DEFINITION_SYMBOL - 715)) | (1L << (DESCRIPTION_SYMBOL - 715)) | (1L << (ORGANIZATION_SYMBOL - 715)))) != 0)) {
					{
					{
					setState(2429);
					srsAttribute();
					}
					}
					setState(2434);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SrsAttributeContext extends ParserRuleContext {
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode DEFINITION_SYMBOL() { return getToken(MySQLParser.DEFINITION_SYMBOL, 0); }
		public TerminalNode ORGANIZATION_SYMBOL() { return getToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode DESCRIPTION_SYMBOL() { return getToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public SrsAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_srsAttribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSrsAttribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSrsAttribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSrsAttribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SrsAttributeContext srsAttribute() throws RecognitionException {
		SrsAttributeContext _localctx = new SrsAttributeContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_srsAttribute);
		try {
			setState(2452);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2437);
				match(NAME_SYMBOL);
				setState(2438);
				match(TEXT_SYMBOL);
				setState(2439);
				textStringNoLinebreak();
				}
				break;
			case DEFINITION_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2440);
				match(DEFINITION_SYMBOL);
				setState(2441);
				match(TEXT_SYMBOL);
				setState(2442);
				textStringNoLinebreak();
				}
				break;
			case ORGANIZATION_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2443);
				match(ORGANIZATION_SYMBOL);
				setState(2444);
				textStringNoLinebreak();
				setState(2445);
				match(IDENTIFIED_SYMBOL);
				setState(2446);
				match(BY_SYMBOL);
				setState(2447);
				real_ulonglong_number();
				}
				break;
			case DESCRIPTION_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2449);
				match(DESCRIPTION_SYMBOL);
				setState(2450);
				match(TEXT_SYMBOL);
				setState(2451);
				textStringNoLinebreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStatementContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropEventContext dropEvent() {
			return getRuleContext(DropEventContext.class,0);
		}
		public DropFunctionContext dropFunction() {
			return getRuleContext(DropFunctionContext.class,0);
		}
		public DropProcedureContext dropProcedure() {
			return getRuleContext(DropProcedureContext.class,0);
		}
		public DropIndexContext dropIndex() {
			return getRuleContext(DropIndexContext.class,0);
		}
		public DropLogfileGroupContext dropLogfileGroup() {
			return getRuleContext(DropLogfileGroupContext.class,0);
		}
		public DropServerContext dropServer() {
			return getRuleContext(DropServerContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public DropTableSpaceContext dropTableSpace() {
			return getRuleContext(DropTableSpaceContext.class,0);
		}
		public DropTriggerContext dropTrigger() {
			return getRuleContext(DropTriggerContext.class,0);
		}
		public DropViewContext dropView() {
			return getRuleContext(DropViewContext.class,0);
		}
		public DropRoleContext dropRole() {
			return getRuleContext(DropRoleContext.class,0);
		}
		public DropSpatialReferenceContext dropSpatialReference() {
			return getRuleContext(DropSpatialReferenceContext.class,0);
		}
		public DropUndoTablespaceContext dropUndoTablespace() {
			return getRuleContext(DropUndoTablespaceContext.class,0);
		}
		public DropStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropStatementContext dropStatement() throws RecognitionException {
		DropStatementContext _localctx = new DropStatementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_dropStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2454);
			match(DROP_SYMBOL);
			setState(2472);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				setState(2455);
				dropDatabase();
				}
				break;
			case 2:
				{
				setState(2456);
				dropEvent();
				}
				break;
			case 3:
				{
				setState(2457);
				dropFunction();
				}
				break;
			case 4:
				{
				setState(2458);
				dropProcedure();
				}
				break;
			case 5:
				{
				setState(2459);
				dropIndex();
				}
				break;
			case 6:
				{
				setState(2460);
				dropLogfileGroup();
				}
				break;
			case 7:
				{
				setState(2461);
				dropServer();
				}
				break;
			case 8:
				{
				setState(2462);
				dropTable();
				}
				break;
			case 9:
				{
				setState(2463);
				dropTableSpace();
				}
				break;
			case 10:
				{
				setState(2464);
				dropTrigger();
				}
				break;
			case 11:
				{
				setState(2465);
				dropView();
				}
				break;
			case 12:
				{
				setState(2466);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(2467);
				dropRole();
				}
				break;
			case 13:
				{
				setState(2468);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(2469);
				dropSpatialReference();
				}
				break;
			case 14:
				{
				setState(2470);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(2471);
				dropUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_dropDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2474);
			match(DATABASE_SYMBOL);
			setState(2476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2475);
				ifExists();
				}
				break;
			}
			setState(2478);
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventContext dropEvent() throws RecognitionException {
		DropEventContext _localctx = new DropEventContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_dropEvent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2480);
			match(EVENT_SYMBOL);
			setState(2482);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				setState(2481);
				ifExists();
				}
				break;
			}
			setState(2484);
			eventRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_dropFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2486);
			match(FUNCTION_SYMBOL);
			setState(2488);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(2487);
				ifExists();
				}
				break;
			}
			setState(2490);
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_dropProcedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2492);
			match(PROCEDURE_SYMBOL);
			setState(2494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2493);
				ifExists();
				}
				break;
			}
			setState(2496);
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public Token type;
		public IndexRefContext indexRef() {
			return getRuleContext(IndexRefContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public OnlineOptionContext onlineOption() {
			return getRuleContext(OnlineOptionContext.class,0);
		}
		public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return getRuleContext(IndexLockAndAlgorithmContext.class,0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_dropIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				setState(2498);
				onlineOption();
				}
			}

			setState(2501);
			((DropIndexContext)_localctx).type = match(INDEX_SYMBOL);
			setState(2502);
			indexRef();
			setState(2503);
			match(ON_SYMBOL);
			setState(2504);
			tableRef();
			setState(2506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				setState(2505);
				indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupContext extends ParserRuleContext {
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public LogfileGroupRefContext logfileGroupRef() {
			return getRuleContext(LogfileGroupRefContext.class,0);
		}
		public List<DropLogfileGroupOptionContext> dropLogfileGroupOption() {
			return getRuleContexts(DropLogfileGroupOptionContext.class);
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return getRuleContext(DropLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropLogfileGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropLogfileGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropLogfileGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupContext dropLogfileGroup() throws RecognitionException {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_dropLogfileGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2508);
			match(LOGFILE_SYMBOL);
			setState(2509);
			match(GROUP_SYMBOL);
			setState(2510);
			logfileGroupRef();
			setState(2521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(2511);
				dropLogfileGroupOption();
				setState(2518);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
					{
					{
					setState(2513);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(2512);
						match(COMMA_SYMBOL);
						}
					}

					setState(2515);
					dropLogfileGroupOption();
					}
					}
					setState(2520);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLogfileGroupOptionContext extends ParserRuleContext {
		public TsOptionWaitContext tsOptionWait() {
			return getRuleContext(TsOptionWaitContext.class,0);
		}
		public TsOptionEngineContext tsOptionEngine() {
			return getRuleContext(TsOptionEngineContext.class,0);
		}
		public DropLogfileGroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLogfileGroupOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropLogfileGroupOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropLogfileGroupOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropLogfileGroupOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLogfileGroupOptionContext dropLogfileGroupOption() throws RecognitionException {
		DropLogfileGroupOptionContext _localctx = new DropLogfileGroupOptionContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_dropLogfileGroupOption);
		try {
			setState(2525);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2523);
				tsOptionWait();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2524);
				tsOptionEngine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public ServerRefContext serverRef() {
			return getRuleContext(ServerRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_dropServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2527);
			match(SERVER_SYMBOL);
			setState(2529);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				setState(2528);
				ifExists();
				}
				break;
			}
			setState(2531);
			serverRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token type;
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				setState(2533);
				match(TEMPORARY_SYMBOL);
				}
			}

			setState(2536);
			((DropTableContext)_localctx).type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				((DropTableContext)_localctx).type = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2538);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				setState(2537);
				ifExists();
				}
				break;
			}
			setState(2540);
			tableRefList();
			setState(2542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				setState(2541);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public List<DropLogfileGroupOptionContext> dropLogfileGroupOption() {
			return getRuleContexts(DropLogfileGroupOptionContext.class);
		}
		public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return getRuleContext(DropLogfileGroupOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public DropTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableSpaceContext dropTableSpace() throws RecognitionException {
		DropTableSpaceContext _localctx = new DropTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_dropTableSpace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2544);
			match(TABLESPACE_SYMBOL);
			setState(2545);
			tablespaceRef();
			setState(2556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				setState(2546);
				dropLogfileGroupOption();
				setState(2553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL || _la==COMMA_SYMBOL) {
					{
					{
					setState(2548);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						setState(2547);
						match(COMMA_SYMBOL);
						}
					}

					setState(2550);
					dropLogfileGroupOption();
					}
					}
					setState(2555);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TriggerRefContext triggerRef() {
			return getRuleContext(TriggerRefContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_dropTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2558);
			match(TRIGGER_SYMBOL);
			setState(2560);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				setState(2559);
				ifExists();
				}
				break;
			}
			setState(2562);
			triggerRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public ViewRefListContext viewRefList() {
			return getRuleContext(ViewRefListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2564);
			match(VIEW_SYMBOL);
			setState(2566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				{
				setState(2565);
				ifExists();
				}
				break;
			}
			setState(2568);
			viewRefList();
			setState(2570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				setState(2569);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoleContext extends ParserRuleContext {
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoleContext dropRole() throws RecognitionException {
		DropRoleContext _localctx = new DropRoleContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_dropRole);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2572);
			match(ROLE_SYMBOL);
			setState(2574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2573);
				ifExists();
				}
				break;
			}
			setState(2576);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSpatialReferenceContext extends ParserRuleContext {
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropSpatialReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSpatialReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropSpatialReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropSpatialReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropSpatialReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSpatialReferenceContext dropSpatialReference() throws RecognitionException {
		DropSpatialReferenceContext _localctx = new DropSpatialReferenceContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_dropSpatialReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2578);
			match(SPATIAL_SYMBOL);
			setState(2579);
			match(REFERENCE_SYMBOL);
			setState(2580);
			match(SYSTEM_SYMBOL);
			setState(2582);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				setState(2581);
				ifExists();
				}
				break;
			}
			setState(2584);
			real_ulonglong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUndoTablespaceContext extends ParserRuleContext {
		public TerminalNode UNDO_SYMBOL() { return getToken(MySQLParser.UNDO_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TablespaceRefContext tablespaceRef() {
			return getRuleContext(TablespaceRefContext.class,0);
		}
		public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return getRuleContext(UndoTableSpaceOptionsContext.class,0);
		}
		public DropUndoTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUndoTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropUndoTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropUndoTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropUndoTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUndoTablespaceContext dropUndoTablespace() throws RecognitionException {
		DropUndoTablespaceContext _localctx = new DropUndoTablespaceContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_dropUndoTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2586);
			match(UNDO_SYMBOL);
			setState(2587);
			match(TABLESPACE_SYMBOL);
			setState(2588);
			tablespaceRef();
			setState(2590);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				setState(2589);
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableStatementContext extends ParserRuleContext {
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public List<RenamePairContext> renamePair() {
			return getRuleContexts(RenamePairContext.class);
		}
		public RenamePairContext renamePair(int i) {
			return getRuleContext(RenamePairContext.class,i);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRenameTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRenameTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRenameTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableStatementContext renameTableStatement() throws RecognitionException {
		RenameTableStatementContext _localctx = new RenameTableStatementContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_renameTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2592);
			match(RENAME_SYMBOL);
			setState(2593);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2594);
			renamePair();
			setState(2599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2595);
				match(COMMA_SYMBOL);
				setState(2596);
				renamePair();
				}
				}
				setState(2601);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenamePairContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public RenamePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renamePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRenamePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRenamePair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRenamePair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenamePairContext renamePair() throws RecognitionException {
		RenamePairContext _localctx = new RenamePairContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_renamePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2602);
			tableRef();
			setState(2603);
			match(TO_SYMBOL);
			setState(2604);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableStatementContext extends ParserRuleContext {
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTruncateTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTruncateTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTruncateTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableStatementContext truncateTableStatement() throws RecognitionException {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_truncateTableStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2606);
			match(TRUNCATE_SYMBOL);
			setState(2608);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				{
				setState(2607);
				match(TABLE_SYMBOL);
				}
				break;
			}
			setState(2610);
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportStatementContext extends ParserRuleContext {
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return getRuleContext(TextStringLiteralListContext.class,0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterImportStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitImportStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitImportStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportStatementContext importStatement() throws RecognitionException {
		ImportStatementContext _localctx = new ImportStatementContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_importStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2612);
			match(IMPORT_SYMBOL);
			setState(2613);
			match(TABLE_SYMBOL);
			setState(2614);
			match(FROM_SYMBOL);
			setState(2615);
			textStringLiteralList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL_SYMBOL() { return getToken(MySQLParser.CALL_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCallStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_callStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2617);
			match(CALL_SYMBOL);
			setState(2618);
			procedureRef();
			setState(2624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2619);
				match(OPEN_PAR_SYMBOL);
				setState(2621);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
				case 1:
					{
					setState(2620);
					exprList();
					}
					break;
				}
				setState(2623);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return getRuleContext(TableAliasRefListContext.class,0);
		}
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public List<DeleteStatementOptionContext> deleteStatementOption() {
			return getRuleContexts(DeleteStatementOptionContext.class);
		}
		public DeleteStatementOptionContext deleteStatementOption(int i) {
			return getRuleContext(DeleteStatementOptionContext.class,i);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public PartitionDeleteContext partitionDelete() {
			return getRuleContext(PartitionDeleteContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return getRuleContext(SimpleLimitClauseContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_deleteStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				setState(2626);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(2627);
				withClause();
				}
				break;
			}
			setState(2630);
			match(DELETE_SYMBOL);
			setState(2634);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2631);
					deleteStatementOption();
					}
					} 
				}
				setState(2636);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
			}
			setState(2669);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				{
				setState(2637);
				match(FROM_SYMBOL);
				setState(2661);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
				case 1:
					{
					setState(2638);
					tableAliasRefList();
					setState(2639);
					match(USING_SYMBOL);
					setState(2640);
					tableReferenceList();
					setState(2642);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						setState(2641);
						whereClause();
						}
					}

					}
					break;
				case 2:
					{
					setState(2644);
					tableRef();
					setState(2647);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
					case 1:
						{
						setState(2645);
						if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
						setState(2646);
						tableAlias();
						}
						break;
					}
					setState(2650);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
					case 1:
						{
						setState(2649);
						partitionDelete();
						}
						break;
					}
					setState(2653);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						setState(2652);
						whereClause();
						}
					}

					setState(2656);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ORDER_SYMBOL) {
						{
						setState(2655);
						orderClause();
						}
					}

					setState(2659);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						setState(2658);
						simpleLimitClause();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2663);
				tableAliasRefList();
				setState(2664);
				match(FROM_SYMBOL);
				setState(2665);
				tableReferenceList();
				setState(2667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					setState(2666);
					whereClause();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDeleteContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDeleteContext partitionDelete() throws RecognitionException {
		PartitionDeleteContext _localctx = new PartitionDeleteContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_partitionDelete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2671);
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			setState(2672);
			match(PARTITION_SYMBOL);
			setState(2673);
			match(OPEN_PAR_SYMBOL);
			setState(2674);
			identifierList();
			setState(2675);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementOptionContext extends ParserRuleContext {
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public DeleteStatementOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatementOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDeleteStatementOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDeleteStatementOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDeleteStatementOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementOptionContext deleteStatementOption() throws RecognitionException {
		DeleteStatementOptionContext _localctx = new DeleteStatementOptionContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_deleteStatementOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2677);
			_la = _input.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==LOW_PRIORITY_SYMBOL || _la==QUICK_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public SelectItemListContext selectItemList() {
			return getRuleContext(SelectItemListContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2679);
			match(DO_SYMBOL);
			setState(2684);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				setState(2680);
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				setState(2681);
				exprList();
				}
				break;
			case 2:
				{
				setState(2682);
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				setState(2683);
				selectItemList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public HandlerReadOrScanContext handlerReadOrScan() {
			return getRuleContext(HandlerReadOrScanContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHandlerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_handlerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2686);
			match(HANDLER_SYMBOL);
			setState(2704);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				setState(2687);
				tableRef();
				setState(2688);
				match(OPEN_SYMBOL);
				setState(2690);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
				case 1:
					{
					setState(2689);
					tableAlias();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2692);
				identifier();
				setState(2702);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CLOSE_SYMBOL:
					{
					setState(2693);
					match(CLOSE_SYMBOL);
					}
					break;
				case READ_SYMBOL:
					{
					setState(2694);
					match(READ_SYMBOL);
					setState(2695);
					handlerReadOrScan();
					setState(2697);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						setState(2696);
						whereClause();
						}
					}

					setState(2700);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						setState(2699);
						limitClause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadOrScanContext extends ParserRuleContext {
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode LESS_THAN_OPERATOR() { return getToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OPERATOR() { return getToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		public TerminalNode LESS_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public HandlerReadOrScanContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadOrScan; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHandlerReadOrScan(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHandlerReadOrScan(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHandlerReadOrScan(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadOrScanContext handlerReadOrScan() throws RecognitionException {
		HandlerReadOrScanContext _localctx = new HandlerReadOrScanContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_handlerReadOrScan);
		int _la;
		try {
			setState(2716);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2706);
				_la = _input.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==NEXT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2707);
				identifier();
				setState(2714);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FIRST_SYMBOL:
				case LAST_SYMBOL:
				case NEXT_SYMBOL:
				case PREV_SYMBOL:
					{
					setState(2708);
					_la = _input.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NEXT_SYMBOL || _la==PREV_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case EQUAL_OPERATOR:
				case GREATER_OR_EQUAL_OPERATOR:
				case GREATER_THAN_OPERATOR:
				case LESS_OR_EQUAL_OPERATOR:
				case LESS_THAN_OPERATOR:
					{
					setState(2709);
					_la = _input.LA(1);
					if ( !(((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (EQUAL_OPERATOR - 750)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 750)) | (1L << (GREATER_THAN_OPERATOR - 750)) | (1L << (LESS_OR_EQUAL_OPERATOR - 750)) | (1L << (LESS_THAN_OPERATOR - 750)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2710);
					match(OPEN_PAR_SYMBOL);
					setState(2711);
					values();
					setState(2712);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return getRuleContext(InsertFromConstructorContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return getRuleContext(InsertQueryExpressionContext.class,0);
		}
		public InsertLockOptionContext insertLockOption() {
			return getRuleContext(InsertLockOptionContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public InsertUpdateListContext insertUpdateList() {
			return getRuleContext(InsertUpdateListContext.class,0);
		}
		public ValuesReferenceContext valuesReference() {
			return getRuleContext(ValuesReferenceContext.class,0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2718);
			match(INSERT_SYMBOL);
			setState(2720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
			case 1:
				{
				setState(2719);
				insertLockOption();
				}
				break;
			}
			setState(2723);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				{
				setState(2722);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(2726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(2725);
				match(INTO_SYMBOL);
				}
				break;
			}
			setState(2728);
			tableRef();
			setState(2730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				{
				setState(2729);
				usePartition();
				}
				break;
			}
			setState(2744);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				{
				setState(2732);
				insertFromConstructor();
				setState(2735);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
				case 1:
					{
					setState(2733);
					if (!( serverVersion >= 80018)) throw new FailedPredicateException(this, " serverVersion >= 80018");
					setState(2734);
					valuesReference();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2737);
				match(SET_SYMBOL);
				setState(2738);
				updateList();
				setState(2741);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					setState(2739);
					if (!( serverVersion >= 80018)) throw new FailedPredicateException(this, " serverVersion >= 80018");
					setState(2740);
					valuesReference();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(2743);
				insertQueryExpression();
				}
				break;
			}
			setState(2747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON_SYMBOL) {
				{
				setState(2746);
				insertUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertLockOptionContext extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode DELAYED_SYMBOL() { return getToken(MySQLParser.DELAYED_SYMBOL, 0); }
		public TerminalNode HIGH_PRIORITY_SYMBOL() { return getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public InsertLockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertLockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertLockOptionContext insertLockOption() throws RecognitionException {
		InsertLockOptionContext _localctx = new InsertLockOptionContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_insertLockOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2749);
			_la = _input.LA(1);
			if ( !(_la==DELAYED_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertFromConstructorContext extends ParserRuleContext {
		public InsertValuesContext insertValues() {
			return getRuleContext(InsertValuesContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return getRuleContext(FieldsContext.class,0);
		}
		public InsertFromConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertFromConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertFromConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertFromConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertFromConstructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertFromConstructorContext insertFromConstructor() throws RecognitionException {
		InsertFromConstructorContext _localctx = new InsertFromConstructorContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_insertFromConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2756);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2751);
				match(OPEN_PAR_SYMBOL);
				setState(2753);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					setState(2752);
					fields();
					}
					break;
				}
				setState(2755);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			setState(2758);
			insertValues();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldsContext extends ParserRuleContext {
		public List<InsertIdentifierContext> insertIdentifier() {
			return getRuleContexts(InsertIdentifierContext.class);
		}
		public InsertIdentifierContext insertIdentifier(int i) {
			return getRuleContext(InsertIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fields; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFields(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFields(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFields(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldsContext fields() throws RecognitionException {
		FieldsContext _localctx = new FieldsContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_fields);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2760);
			insertIdentifier();
			setState(2765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2761);
				match(COMMA_SYMBOL);
				setState(2762);
				insertIdentifier();
				}
				}
				setState(2767);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertValuesContext extends ParserRuleContext {
		public ValueListContext valueList() {
			return getRuleContext(ValueListContext.class,0);
		}
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public InsertValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertValuesContext insertValues() throws RecognitionException {
		InsertValuesContext _localctx = new InsertValuesContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_insertValues);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2768);
			_la = _input.LA(1);
			if ( !(_la==VALUES_SYMBOL || _la==VALUE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2769);
			valueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertQueryExpressionContext extends ParserRuleContext {
		public QueryExpressionOrParensContext queryExpressionOrParens() {
			return getRuleContext(QueryExpressionOrParensContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldsContext fields() {
			return getRuleContext(FieldsContext.class,0);
		}
		public InsertQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertQueryExpressionContext insertQueryExpression() throws RecognitionException {
		InsertQueryExpressionContext _localctx = new InsertQueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_insertQueryExpression);
		try {
			setState(2778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2771);
				queryExpressionOrParens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2772);
				match(OPEN_PAR_SYMBOL);
				setState(2774);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					setState(2773);
					fields();
					}
					break;
				}
				setState(2776);
				match(CLOSE_PAR_SYMBOL);
				setState(2777);
				queryExpressionOrParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueListContext extends ParserRuleContext {
		public List<TerminalNode> OPEN_PAR_SYMBOL() { return getTokens(MySQLParser.OPEN_PAR_SYMBOL); }
		public TerminalNode OPEN_PAR_SYMBOL(int i) {
			return getToken(MySQLParser.OPEN_PAR_SYMBOL, i);
		}
		public List<TerminalNode> CLOSE_PAR_SYMBOL() { return getTokens(MySQLParser.CLOSE_PAR_SYMBOL); }
		public TerminalNode CLOSE_PAR_SYMBOL(int i) {
			return getToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
		}
		public List<ValuesContext> values() {
			return getRuleContexts(ValuesContext.class);
		}
		public ValuesContext values(int i) {
			return getRuleContext(ValuesContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterValueList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitValueList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitValueList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueListContext valueList() throws RecognitionException {
		ValueListContext _localctx = new ValueListContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_valueList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2780);
			match(OPEN_PAR_SYMBOL);
			setState(2782);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				setState(2781);
				values();
				}
				break;
			}
			setState(2784);
			match(CLOSE_PAR_SYMBOL);
			setState(2793);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,254,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2785);
					match(COMMA_SYMBOL);
					setState(2786);
					match(OPEN_PAR_SYMBOL);
					setState(2788);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
					case 1:
						{
						setState(2787);
						values();
						}
						break;
					}
					setState(2790);
					match(CLOSE_PAR_SYMBOL);
					}
					} 
				}
				setState(2795);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,254,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> DEFAULT_SYMBOL() { return getTokens(MySQLParser.DEFAULT_SYMBOL); }
		public TerminalNode DEFAULT_SYMBOL(int i) {
			return getToken(MySQLParser.DEFAULT_SYMBOL, i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesContext values() throws RecognitionException {
		ValuesContext _localctx = new ValuesContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_values);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2798);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				setState(2796);
				expr(0);
				}
				break;
			case 2:
				{
				setState(2797);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			setState(2807);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2800);
				match(COMMA_SYMBOL);
				setState(2803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					setState(2801);
					expr(0);
					}
					break;
				case 2:
					{
					setState(2802);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				}
				setState(2809);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesReferenceContext extends ParserRuleContext {
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public ValuesReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterValuesReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitValuesReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitValuesReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesReferenceContext valuesReference() throws RecognitionException {
		ValuesReferenceContext _localctx = new ValuesReferenceContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_valuesReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2810);
			match(AS_SYMBOL);
			setState(2811);
			identifier();
			setState(2813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2812);
				columnInternalRefList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertUpdateListContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertUpdateListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertUpdateList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertUpdateList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertUpdateList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertUpdateList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertUpdateListContext insertUpdateList() throws RecognitionException {
		InsertUpdateListContext _localctx = new InsertUpdateListContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_insertUpdateList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2815);
			match(ON_SYMBOL);
			setState(2816);
			match(DUPLICATE_SYMBOL);
			setState(2817);
			match(KEY_SYMBOL);
			setState(2818);
			match(UPDATE_SYMBOL);
			setState(2819);
			updateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadStatementContext extends ParserRuleContext {
		public TerminalNode LOAD_SYMBOL() { return getToken(MySQLParser.LOAD_SYMBOL, 0); }
		public DataOrXmlContext dataOrXml() {
			return getRuleContext(DataOrXmlContext.class,0);
		}
		public TerminalNode INFILE_SYMBOL() { return getToken(MySQLParser.INFILE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public LoadDataFileTailContext loadDataFileTail() {
			return getRuleContext(LoadDataFileTailContext.class,0);
		}
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
			return getRuleContext(XmlRowsIdentifiedByContext.class,0);
		}
		public FieldsClauseContext fieldsClause() {
			return getRuleContext(FieldsClauseContext.class,0);
		}
		public LinesClauseContext linesClause() {
			return getRuleContext(LinesClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public LoadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLoadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLoadStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLoadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadStatementContext loadStatement() throws RecognitionException {
		LoadStatementContext _localctx = new LoadStatementContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_loadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2821);
			match(LOAD_SYMBOL);
			setState(2822);
			dataOrXml();
			setState(2824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) {
				{
				setState(2823);
				_la = _input.LA(1);
				if ( !(_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_SYMBOL) {
				{
				setState(2826);
				match(LOCAL_SYMBOL);
				}
			}

			setState(2829);
			match(INFILE_SYMBOL);
			setState(2830);
			textLiteral();
			setState(2832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) {
				{
				setState(2831);
				_la = _input.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2834);
			match(INTO_SYMBOL);
			setState(2835);
			match(TABLE_SYMBOL);
			setState(2836);
			tableRef();
			setState(2838);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				{
				setState(2837);
				usePartition();
				}
				break;
			}
			setState(2841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARSET_SYMBOL || _la==CHAR_SYMBOL) {
				{
				setState(2840);
				charsetClause();
				}
			}

			setState(2844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS_SYMBOL) {
				{
				setState(2843);
				xmlRowsIdentifiedBy();
				}
			}

			setState(2847);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS_SYMBOL) {
				{
				setState(2846);
				fieldsClause();
				}
			}

			setState(2850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES_SYMBOL) {
				{
				setState(2849);
				linesClause();
				}
			}

			setState(2852);
			loadDataFileTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataOrXmlContext extends ParserRuleContext {
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MySQLParser.XML_SYMBOL, 0); }
		public DataOrXmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataOrXml; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDataOrXml(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDataOrXml(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDataOrXml(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataOrXmlContext dataOrXml() throws RecognitionException {
		DataOrXmlContext _localctx = new DataOrXmlContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_dataOrXml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2854);
			_la = _input.LA(1);
			if ( !(_la==DATA_SYMBOL || _la==XML_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlRowsIdentifiedByContext extends ParserRuleContext {
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public XmlRowsIdentifiedByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRowsIdentifiedBy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterXmlRowsIdentifiedBy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitXmlRowsIdentifiedBy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitXmlRowsIdentifiedBy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() throws RecognitionException {
		XmlRowsIdentifiedByContext _localctx = new XmlRowsIdentifiedByContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_xmlRowsIdentifiedBy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2856);
			match(ROWS_SYMBOL);
			setState(2857);
			match(IDENTIFIED_SYMBOL);
			setState(2858);
			match(BY_SYMBOL);
			setState(2859);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataFileTailContext extends ParserRuleContext {
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public LoadDataFileTargetListContext loadDataFileTargetList() {
			return getRuleContext(LoadDataFileTargetListContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public TerminalNode LINES_SYMBOL() { return getToken(MySQLParser.LINES_SYMBOL, 0); }
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public LoadDataFileTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataFileTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLoadDataFileTail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLoadDataFileTail(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLoadDataFileTail(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataFileTailContext loadDataFileTail() throws RecognitionException {
		LoadDataFileTailContext _localctx = new LoadDataFileTailContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_loadDataFileTail);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2864);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				setState(2861);
				match(IGNORE_SYMBOL);
				setState(2862);
				match(INT_NUMBER);
				setState(2863);
				_la = _input.LA(1);
				if ( !(_la==LINES_SYMBOL || _la==ROWS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(2866);
				loadDataFileTargetList();
				}
			}

			setState(2871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET_SYMBOL) {
				{
				setState(2869);
				match(SET_SYMBOL);
				setState(2870);
				updateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataFileTargetListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FieldOrVariableListContext fieldOrVariableList() {
			return getRuleContext(FieldOrVariableListContext.class,0);
		}
		public LoadDataFileTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataFileTargetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLoadDataFileTargetList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLoadDataFileTargetList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLoadDataFileTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataFileTargetListContext loadDataFileTargetList() throws RecognitionException {
		LoadDataFileTargetListContext _localctx = new LoadDataFileTargetListContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_loadDataFileTargetList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2873);
			match(OPEN_PAR_SYMBOL);
			setState(2875);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				setState(2874);
				fieldOrVariableList();
				}
				break;
			}
			setState(2877);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldOrVariableListContext extends ParserRuleContext {
		public List<ColumnRefContext> columnRef() {
			return getRuleContexts(ColumnRefContext.class);
		}
		public ColumnRefContext columnRef(int i) {
			return getRuleContext(ColumnRefContext.class,i);
		}
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FieldOrVariableListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldOrVariableList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldOrVariableList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldOrVariableList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldOrVariableList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldOrVariableListContext fieldOrVariableList() throws RecognitionException {
		FieldOrVariableListContext _localctx = new FieldOrVariableListContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_fieldOrVariableList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				setState(2879);
				columnRef();
				}
				break;
			case 2:
				{
				setState(2880);
				userVariable();
				}
				break;
			}
			setState(2890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(2883);
				match(COMMA_SYMBOL);
				setState(2886);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					setState(2884);
					columnRef();
					}
					break;
				case 2:
					{
					setState(2885);
					userVariable();
					}
					break;
				}
				}
				}
				setState(2892);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public InsertFromConstructorContext insertFromConstructor() {
			return getRuleContext(InsertFromConstructorContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public InsertQueryExpressionContext insertQueryExpression() {
			return getRuleContext(InsertQueryExpressionContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode DELAYED_SYMBOL() { return getToken(MySQLParser.DELAYED_SYMBOL, 0); }
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReplaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReplaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2893);
			match(REPLACE_SYMBOL);
			setState(2895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				{
				setState(2894);
				_la = _input.LA(1);
				if ( !(_la==DELAYED_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				{
				setState(2897);
				match(INTO_SYMBOL);
				}
				break;
			}
			setState(2900);
			tableRef();
			setState(2902);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				{
				setState(2901);
				usePartition();
				}
				break;
			}
			setState(2908);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				{
				setState(2904);
				insertFromConstructor();
				}
				break;
			case 2:
				{
				setState(2905);
				match(SET_SYMBOL);
				setState(2906);
				updateList();
				}
				break;
			case 3:
				{
				setState(2907);
				insertQueryExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockingClauseListContext lockingClauseList() {
			return getRuleContext(LockingClauseListContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return getRuleContext(SelectStatementWithIntoContext.class,0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSelectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSelectStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSelectStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_selectStatement);
		int _la;
		try {
			setState(2916);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2910);
				queryExpression();
				setState(2912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					setState(2911);
					lockingClauseList();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2914);
				queryExpressionParens();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2915);
				selectStatementWithInto();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementWithIntoContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SelectStatementWithIntoContext selectStatementWithInto() {
			return getRuleContext(SelectStatementWithIntoContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public LockingClauseListContext lockingClauseList() {
			return getRuleContext(LockingClauseListContext.class,0);
		}
		public SelectStatementWithIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatementWithInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSelectStatementWithInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSelectStatementWithInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSelectStatementWithInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementWithIntoContext selectStatementWithInto() throws RecognitionException {
		SelectStatementWithIntoContext _localctx = new SelectStatementWithIntoContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_selectStatementWithInto);
		int _la;
		try {
			setState(2930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2918);
				match(OPEN_PAR_SYMBOL);
				setState(2919);
				selectStatementWithInto();
				setState(2920);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2922);
				queryExpression();
				setState(2923);
				intoClause();
				setState(2925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					setState(2924);
					lockingClauseList();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2927);
				lockingClauseList();
				setState(2928);
				intoClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public QueryExpressionBodyContext queryExpressionBody() {
			return getRuleContext(QueryExpressionBodyContext.class,0);
		}
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public ProcedureAnalyseClauseContext procedureAnalyseClause() {
			return getRuleContext(ProcedureAnalyseClauseContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_queryExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				{
				setState(2932);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(2933);
				withClause();
				}
				break;
			}
			setState(2950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				setState(2936);
				queryExpressionBody();
				setState(2938);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
				case 1:
					{
					setState(2937);
					orderClause();
					}
					break;
				}
				setState(2941);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					setState(2940);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2943);
				queryExpressionParens();
				setState(2945);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					setState(2944);
					orderClause();
					}
					break;
				}
				setState(2948);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					setState(2947);
					limitClause();
					}
					break;
				}
				}
				break;
			}
			setState(2954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				setState(2952);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(2953);
				procedureAnalyseClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionBodyContext extends ParserRuleContext {
		public List<QueryPrimaryContext> queryPrimary() {
			return getRuleContexts(QueryPrimaryContext.class);
		}
		public QueryPrimaryContext queryPrimary(int i) {
			return getRuleContext(QueryPrimaryContext.class,i);
		}
		public List<QueryExpressionParensContext> queryExpressionParens() {
			return getRuleContexts(QueryExpressionParensContext.class);
		}
		public QueryExpressionParensContext queryExpressionParens(int i) {
			return getRuleContext(QueryExpressionParensContext.class,i);
		}
		public List<TerminalNode> UNION_SYMBOL() { return getTokens(MySQLParser.UNION_SYMBOL); }
		public TerminalNode UNION_SYMBOL(int i) {
			return getToken(MySQLParser.UNION_SYMBOL, i);
		}
		public List<UnionOptionContext> unionOption() {
			return getRuleContexts(UnionOptionContext.class);
		}
		public UnionOptionContext unionOption(int i) {
			return getRuleContext(UnionOptionContext.class,i);
		}
		public QueryExpressionBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQueryExpressionBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQueryExpressionBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQueryExpressionBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionBodyContext queryExpressionBody() throws RecognitionException {
		QueryExpressionBodyContext _localctx = new QueryExpressionBodyContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_queryExpressionBody);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				{
				setState(2956);
				queryPrimary();
				}
				break;
			case 2:
				{
				setState(2957);
				queryExpressionParens();
				setState(2958);
				match(UNION_SYMBOL);
				setState(2960);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(2959);
					unionOption();
					}
					break;
				}
				setState(2964);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(2962);
					queryPrimary();
					}
					break;
				case 2:
					{
					setState(2963);
					queryExpressionParens();
					}
					break;
				}
				}
				break;
			}
			setState(2978);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,294,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2968);
					match(UNION_SYMBOL);
					setState(2970);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
					case 1:
						{
						setState(2969);
						unionOption();
						}
						break;
					}
					setState(2974);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
					case 1:
						{
						setState(2972);
						queryPrimary();
						}
						break;
					case 2:
						{
						setState(2973);
						queryExpressionParens();
						}
						break;
					}
					}
					} 
				}
				setState(2980);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,294,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public LockingClauseListContext lockingClauseList() {
			return getRuleContext(LockingClauseListContext.class,0);
		}
		public QueryExpressionParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQueryExpressionParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQueryExpressionParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQueryExpressionParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionParensContext queryExpressionParens() throws RecognitionException {
		QueryExpressionParensContext _localctx = new QueryExpressionParensContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_queryExpressionParens);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2981);
			match(OPEN_PAR_SYMBOL);
			setState(2987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				setState(2982);
				queryExpressionParens();
				}
				break;
			case 2:
				{
				setState(2983);
				queryExpression();
				setState(2985);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL || _la==LOCK_SYMBOL) {
					{
					setState(2984);
					lockingClauseList();
					}
				}

				}
				break;
			}
			setState(2989);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryPrimaryContext extends ParserRuleContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TableValueConstructorContext tableValueConstructor() {
			return getRuleContext(TableValueConstructorContext.class,0);
		}
		public ExplicitTableContext explicitTable() {
			return getRuleContext(ExplicitTableContext.class,0);
		}
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQueryPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQueryPrimary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQueryPrimary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryPrimaryContext queryPrimary() throws RecognitionException {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_queryPrimary);
		try {
			setState(2996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2991);
				querySpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2992);
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				setState(2993);
				tableValueConstructor();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2994);
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				setState(2995);
				explicitTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT_SYMBOL() { return getToken(MySQLParser.SELECT_SYMBOL, 0); }
		public SelectItemListContext selectItemList() {
			return getRuleContext(SelectItemListContext.class,0);
		}
		public List<SelectOptionContext> selectOption() {
			return getRuleContexts(SelectOptionContext.class);
		}
		public SelectOptionContext selectOption(int i) {
			return getRuleContext(SelectOptionContext.class,i);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_querySpecification);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2998);
			match(SELECT_SYMBOL);
			setState(3002);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,298,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2999);
					selectOption();
					}
					} 
				}
				setState(3004);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,298,_ctx);
			}
			setState(3005);
			selectItemList();
			setState(3007);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				setState(3006);
				intoClause();
				}
				break;
			}
			setState(3010);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				setState(3009);
				fromClause();
				}
				break;
			}
			setState(3013);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				setState(3012);
				whereClause();
				}
				break;
			}
			setState(3016);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(3015);
				groupByClause();
				}
				break;
			}
			setState(3019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(3018);
				havingClause();
				}
				break;
			}
			setState(3023);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				{
				setState(3021);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3022);
				windowClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public QueryExpressionParensContext queryExpressionParens() {
			return getRuleContext(QueryExpressionParensContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3025);
			queryExpressionParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecOptionContext extends ParserRuleContext {
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public TerminalNode STRAIGHT_JOIN_SYMBOL() { return getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public TerminalNode HIGH_PRIORITY_SYMBOL() { return getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0); }
		public TerminalNode SQL_SMALL_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_BIG_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS_SYMBOL() { return getToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0); }
		public QuerySpecOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQuerySpecOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQuerySpecOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQuerySpecOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecOptionContext querySpecOption() throws RecognitionException {
		QuerySpecOptionContext _localctx = new QuerySpecOptionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_querySpecOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3027);
			_la = _input.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (SQL_BIG_RESULT_SYMBOL - 531)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 531)) | (1L << (SQL_CALC_FOUND_ROWS_SYMBOL - 531)) | (1L << (SQL_SMALL_RESULT_SYMBOL - 531)) | (1L << (STRAIGHT_JOIN_SYMBOL - 531)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT_SYMBOL() { return getToken(MySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionsContext limitOptions() {
			return getRuleContext(LimitOptionsContext.class,0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3029);
			match(LIMIT_SYMBOL);
			setState(3030);
			limitOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleLimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT_SYMBOL() { return getToken(MySQLParser.LIMIT_SYMBOL, 0); }
		public LimitOptionContext limitOption() {
			return getRuleContext(LimitOptionContext.class,0);
		}
		public SimpleLimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleLimitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleLimitClauseContext simpleLimitClause() throws RecognitionException {
		SimpleLimitClauseContext _localctx = new SimpleLimitClauseContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_simpleLimitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3032);
			match(LIMIT_SYMBOL);
			setState(3033);
			limitOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitOptionsContext extends ParserRuleContext {
		public List<LimitOptionContext> limitOption() {
			return getRuleContexts(LimitOptionContext.class);
		}
		public LimitOptionContext limitOption(int i) {
			return getRuleContext(LimitOptionContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public LimitOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLimitOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLimitOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLimitOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitOptionsContext limitOptions() throws RecognitionException {
		LimitOptionsContext _localctx = new LimitOptionsContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_limitOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3035);
			limitOption();
			setState(3038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				{
				setState(3036);
				_la = _input.LA(1);
				if ( !(_la==OFFSET_SYMBOL || _la==COMMA_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3037);
				limitOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitOptionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public LimitOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLimitOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLimitOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLimitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitOptionContext limitOption() throws RecognitionException {
		LimitOptionContext _localctx = new LimitOptionContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_limitOption);
		int _la;
		try {
			setState(3042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3040);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3041);
				_la = _input.LA(1);
				if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (PARAM_MARKER - 747)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public TerminalNode OUTFILE_SYMBOL() { return getToken(MySQLParser.OUTFILE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public List<TextOrIdentifierContext> textOrIdentifier() {
			return getRuleContexts(TextOrIdentifierContext.class);
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return getRuleContext(TextOrIdentifierContext.class,i);
		}
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public FieldsClauseContext fieldsClause() {
			return getRuleContext(FieldsClauseContext.class,0);
		}
		public LinesClauseContext linesClause() {
			return getRuleContext(LinesClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_intoClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3044);
			match(INTO_SYMBOL);
			setState(3072);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				setState(3045);
				match(OUTFILE_SYMBOL);
				setState(3046);
				textStringLiteral();
				setState(3048);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					setState(3047);
					charsetClause();
					}
					break;
				}
				setState(3051);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(3050);
					fieldsClause();
					}
					break;
				}
				setState(3054);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					setState(3053);
					linesClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3056);
				match(DUMPFILE_SYMBOL);
				setState(3057);
				textStringLiteral();
				}
				break;
			case 3:
				{
				setState(3060);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					setState(3058);
					textOrIdentifier();
					}
					break;
				case 2:
					{
					setState(3059);
					userVariable();
					}
					break;
				}
				setState(3069);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,312,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3062);
						match(COMMA_SYMBOL);
						setState(3065);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
						case 1:
							{
							setState(3063);
							textOrIdentifier();
							}
							break;
						case 2:
							{
							setState(3064);
							userVariable();
							}
							break;
						}
						}
						} 
					}
					setState(3071);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,312,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureAnalyseClauseContext extends ParserRuleContext {
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public TerminalNode ANALYSE_SYMBOL() { return getToken(MySQLParser.ANALYSE_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> INT_NUMBER() { return getTokens(MySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MySQLParser.INT_NUMBER, i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public ProcedureAnalyseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureAnalyseClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterProcedureAnalyseClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitProcedureAnalyseClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitProcedureAnalyseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureAnalyseClauseContext procedureAnalyseClause() throws RecognitionException {
		ProcedureAnalyseClauseContext _localctx = new ProcedureAnalyseClauseContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_procedureAnalyseClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3074);
			match(PROCEDURE_SYMBOL);
			setState(3075);
			match(ANALYSE_SYMBOL);
			setState(3076);
			match(OPEN_PAR_SYMBOL);
			setState(3082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INT_NUMBER) {
				{
				setState(3077);
				match(INT_NUMBER);
				setState(3080);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(3078);
					match(COMMA_SYMBOL);
					setState(3079);
					match(INT_NUMBER);
					}
				}

				}
			}

			setState(3084);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING_SYMBOL() { return getToken(MySQLParser.HAVING_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3086);
			match(HAVING_SYMBOL);
			setState(3087);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW_SYMBOL() { return getToken(MySQLParser.WINDOW_SYMBOL, 0); }
		public List<WindowDefinitionContext> windowDefinition() {
			return getRuleContexts(WindowDefinitionContext.class);
		}
		public WindowDefinitionContext windowDefinition(int i) {
			return getRuleContext(WindowDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_windowClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3089);
			match(WINDOW_SYMBOL);
			setState(3090);
			windowDefinition();
			setState(3095);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3091);
					match(COMMA_SYMBOL);
					setState(3092);
					windowDefinition();
					}
					} 
				}
				setState(3097);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,316,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowDefinitionContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowDefinitionContext windowDefinition() throws RecognitionException {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_windowDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3098);
			windowName();
			setState(3099);
			match(AS_SYMBOL);
			setState(3100);
			windowSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public WindowSpecDetailsContext windowSpecDetails() {
			return getRuleContext(WindowSpecDetailsContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_windowSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3102);
			match(OPEN_PAR_SYMBOL);
			setState(3103);
			windowSpecDetails();
			setState(3104);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecDetailsContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return getRuleContext(OrderListContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public WindowFrameClauseContext windowFrameClause() {
			return getRuleContext(WindowFrameClauseContext.class,0);
		}
		public WindowSpecDetailsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpecDetails; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowSpecDetails(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowSpecDetails(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowSpecDetails(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecDetailsContext windowSpecDetails() throws RecognitionException {
		WindowSpecDetailsContext _localctx = new WindowSpecDetailsContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_windowSpecDetails);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3107);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				setState(3106);
				windowName();
				}
				break;
			}
			setState(3112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION_SYMBOL) {
				{
				setState(3109);
				match(PARTITION_SYMBOL);
				setState(3110);
				match(BY_SYMBOL);
				setState(3111);
				orderList();
				}
			}

			setState(3115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				setState(3114);
				orderClause();
				}
			}

			setState(3118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE_SYMBOL || _la==ROWS_SYMBOL || _la==GROUPS_SYMBOL) {
				{
				setState(3117);
				windowFrameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameClauseContext extends ParserRuleContext {
		public WindowFrameUnitsContext windowFrameUnits() {
			return getRuleContext(WindowFrameUnitsContext.class,0);
		}
		public WindowFrameExtentContext windowFrameExtent() {
			return getRuleContext(WindowFrameExtentContext.class,0);
		}
		public WindowFrameExclusionContext windowFrameExclusion() {
			return getRuleContext(WindowFrameExclusionContext.class,0);
		}
		public WindowFrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameClauseContext windowFrameClause() throws RecognitionException {
		WindowFrameClauseContext _localctx = new WindowFrameClauseContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_windowFrameClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3120);
			windowFrameUnits();
			setState(3121);
			windowFrameExtent();
			setState(3123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE_SYMBOL) {
				{
				setState(3122);
				windowFrameExclusion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode RANGE_SYMBOL() { return getToken(MySQLParser.RANGE_SYMBOL, 0); }
		public TerminalNode GROUPS_SYMBOL() { return getToken(MySQLParser.GROUPS_SYMBOL, 0); }
		public WindowFrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameUnits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameUnits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameUnits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameUnits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameUnitsContext windowFrameUnits() throws RecognitionException {
		WindowFrameUnitsContext _localctx = new WindowFrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_windowFrameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3125);
			_la = _input.LA(1);
			if ( !(_la==RANGE_SYMBOL || _la==ROWS_SYMBOL || _la==GROUPS_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameExtentContext extends ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return getRuleContext(WindowFrameStartContext.class,0);
		}
		public WindowFrameBetweenContext windowFrameBetween() {
			return getRuleContext(WindowFrameBetweenContext.class,0);
		}
		public WindowFrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameExtentContext windowFrameExtent() throws RecognitionException {
		WindowFrameExtentContext _localctx = new WindowFrameExtentContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_windowFrameExtent);
		try {
			setState(3129);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_SYMBOL:
			case INTERVAL_SYMBOL:
			case UNBOUNDED_SYMBOL:
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case PARAM_MARKER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3127);
				windowFrameStart();
				}
				break;
			case BETWEEN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3128);
				windowFrameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameStartContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public WindowFrameStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameStart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameStart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameStart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameStartContext windowFrameStart() throws RecognitionException {
		WindowFrameStartContext _localctx = new WindowFrameStartContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_windowFrameStart);
		try {
			setState(3145);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3131);
				match(UNBOUNDED_SYMBOL);
				setState(3132);
				match(PRECEDING_SYMBOL);
				}
				break;
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3133);
				ulonglong_number();
				setState(3134);
				match(PRECEDING_SYMBOL);
				}
				break;
			case PARAM_MARKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3136);
				match(PARAM_MARKER);
				setState(3137);
				match(PRECEDING_SYMBOL);
				}
				break;
			case INTERVAL_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3138);
				match(INTERVAL_SYMBOL);
				setState(3139);
				expr(0);
				setState(3140);
				interval();
				setState(3141);
				match(PRECEDING_SYMBOL);
				}
				break;
			case CURRENT_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3143);
				match(CURRENT_SYMBOL);
				setState(3144);
				match(ROW_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN_SYMBOL() { return getToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		public List<WindowFrameBoundContext> windowFrameBound() {
			return getRuleContexts(WindowFrameBoundContext.class);
		}
		public WindowFrameBoundContext windowFrameBound(int i) {
			return getRuleContext(WindowFrameBoundContext.class,i);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public WindowFrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameBetweenContext windowFrameBetween() throws RecognitionException {
		WindowFrameBetweenContext _localctx = new WindowFrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_windowFrameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3147);
			match(BETWEEN_SYMBOL);
			setState(3148);
			windowFrameBound();
			setState(3149);
			match(AND_SYMBOL);
			setState(3150);
			windowFrameBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameBoundContext extends ParserRuleContext {
		public WindowFrameStartContext windowFrameStart() {
			return getRuleContext(WindowFrameStartContext.class,0);
		}
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public WindowFrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameBoundContext windowFrameBound() throws RecognitionException {
		WindowFrameBoundContext _localctx = new WindowFrameBoundContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_windowFrameBound);
		try {
			setState(3165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3152);
				windowFrameStart();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3153);
				match(UNBOUNDED_SYMBOL);
				setState(3154);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3155);
				ulonglong_number();
				setState(3156);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3158);
				match(PARAM_MARKER);
				setState(3159);
				match(FOLLOWING_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3160);
				match(INTERVAL_SYMBOL);
				setState(3161);
				expr(0);
				setState(3162);
				interval();
				setState(3163);
				match(FOLLOWING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFrameExclusionContext extends ParserRuleContext {
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public WindowFrameExclusionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFrameExclusion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFrameExclusion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFrameExclusion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFrameExclusion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFrameExclusionContext windowFrameExclusion() throws RecognitionException {
		WindowFrameExclusionContext _localctx = new WindowFrameExclusionContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_windowFrameExclusion);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3167);
			match(EXCLUDE_SYMBOL);
			setState(3174);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_SYMBOL:
				{
				setState(3168);
				match(CURRENT_SYMBOL);
				setState(3169);
				match(ROW_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				setState(3170);
				match(GROUP_SYMBOL);
				}
				break;
			case TIES_SYMBOL:
				{
				setState(3171);
				match(TIES_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				{
				setState(3172);
				match(NO_SYMBOL);
				setState(3173);
				match(OTHERS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public List<CommonTableExpressionContext> commonTableExpression() {
			return getRuleContexts(CommonTableExpressionContext.class);
		}
		public CommonTableExpressionContext commonTableExpression(int i) {
			return getRuleContext(CommonTableExpressionContext.class,i);
		}
		public TerminalNode RECURSIVE_SYMBOL() { return getToken(MySQLParser.RECURSIVE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_withClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3176);
			match(WITH_SYMBOL);
			setState(3178);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				{
				setState(3177);
				match(RECURSIVE_SYMBOL);
				}
				break;
			}
			setState(3180);
			commonTableExpression();
			setState(3185);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,327,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3181);
					match(COMMA_SYMBOL);
					setState(3182);
					commonTableExpression();
					}
					} 
				}
				setState(3187);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,327,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonTableExpressionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCommonTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCommonTableExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCommonTableExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExpressionContext commonTableExpression() throws RecognitionException {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_commonTableExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3188);
			identifier();
			setState(3190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(3189);
				columnInternalRefList();
				}
			}

			setState(3192);
			match(AS_SYMBOL);
			setState(3193);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return getRuleContext(OrderListContext.class,0);
		}
		public OlapOptionContext olapOption() {
			return getRuleContext(OlapOptionContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_groupByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3195);
			match(GROUP_SYMBOL);
			setState(3196);
			match(BY_SYMBOL);
			setState(3197);
			orderList();
			setState(3199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				{
				setState(3198);
				olapOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OlapOptionContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode CUBE_SYMBOL() { return getToken(MySQLParser.CUBE_SYMBOL, 0); }
		public OlapOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_olapOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOlapOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOlapOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOlapOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OlapOptionContext olapOption() throws RecognitionException {
		OlapOptionContext _localctx = new OlapOptionContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_olapOption);
		try {
			setState(3206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3201);
				match(WITH_SYMBOL);
				setState(3202);
				match(ROLLUP_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3203);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(3204);
				match(WITH_SYMBOL);
				setState(3205);
				match(CUBE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderClauseContext extends ParserRuleContext {
		public TerminalNode ORDER_SYMBOL() { return getToken(MySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public OrderListContext orderList() {
			return getRuleContext(OrderListContext.class,0);
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOrderClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOrderClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOrderClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderClauseContext orderClause() throws RecognitionException {
		OrderClauseContext _localctx = new OrderClauseContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_orderClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3208);
			match(ORDER_SYMBOL);
			setState(3209);
			match(BY_SYMBOL);
			setState(3210);
			orderList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DirectionContext extends ParserRuleContext {
		public TerminalNode ASC_SYMBOL() { return getToken(MySQLParser.ASC_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_direction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DirectionContext direction() throws RecognitionException {
		DirectionContext _localctx = new DirectionContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_direction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3212);
			_la = _input.LA(1);
			if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode DUAL_SYMBOL() { return getToken(MySQLParser.DUAL_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3214);
			match(FROM_SYMBOL);
			setState(3217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				setState(3215);
				match(DUAL_SYMBOL);
				}
				break;
			case 2:
				{
				setState(3216);
				tableReferenceList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceListContext extends ParserRuleContext {
		public List<TableReferenceContext> tableReference() {
			return getRuleContexts(TableReferenceContext.class);
		}
		public TableReferenceContext tableReference(int i) {
			return getRuleContext(TableReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableReferenceListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferenceList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableReferenceList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableReferenceList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableReferenceList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceListContext tableReferenceList() throws RecognitionException {
		TableReferenceListContext _localctx = new TableReferenceListContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_tableReferenceList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3219);
			tableReference();
			setState(3224);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3220);
					match(COMMA_SYMBOL);
					setState(3221);
					tableReference();
					}
					} 
				}
				setState(3226);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,332,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableValueConstructorContext extends ParserRuleContext {
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public List<RowValueExplicitContext> rowValueExplicit() {
			return getRuleContexts(RowValueExplicitContext.class);
		}
		public RowValueExplicitContext rowValueExplicit(int i) {
			return getRuleContext(RowValueExplicitContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableValueConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableValueConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableValueConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableValueConstructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableValueConstructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableValueConstructorContext tableValueConstructor() throws RecognitionException {
		TableValueConstructorContext _localctx = new TableValueConstructorContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_tableValueConstructor);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3227);
			match(VALUES_SYMBOL);
			setState(3228);
			rowValueExplicit();
			setState(3233);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,333,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3229);
					match(COMMA_SYMBOL);
					setState(3230);
					rowValueExplicit();
					}
					} 
				}
				setState(3235);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,333,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplicitTableContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public ExplicitTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicitTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExplicitTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExplicitTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExplicitTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplicitTableContext explicitTable() throws RecognitionException {
		ExplicitTableContext _localctx = new ExplicitTableContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_explicitTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3236);
			match(TABLE_SYMBOL);
			setState(3237);
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowValueExplicitContext extends ParserRuleContext {
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ValuesContext values() {
			return getRuleContext(ValuesContext.class,0);
		}
		public RowValueExplicitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowValueExplicit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRowValueExplicit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRowValueExplicit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRowValueExplicit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowValueExplicitContext rowValueExplicit() throws RecognitionException {
		RowValueExplicitContext _localctx = new RowValueExplicitContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_rowValueExplicit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3239);
			match(ROW_SYMBOL);
			setState(3240);
			match(OPEN_PAR_SYMBOL);
			setState(3242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
			case 1:
				{
				setState(3241);
				values();
				}
				break;
			}
			setState(3244);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectOptionContext extends ParserRuleContext {
		public QuerySpecOptionContext querySpecOption() {
			return getRuleContext(QuerySpecOptionContext.class,0);
		}
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_CACHE_SYMBOL, 0); }
		public TerminalNode MAX_STATEMENT_TIME_SYMBOL() { return getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public SelectOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSelectOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSelectOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSelectOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectOptionContext selectOption() throws RecognitionException {
		SelectOptionContext _localctx = new SelectOptionContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_selectOption);
		try {
			setState(3254);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3246);
				querySpecOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3247);
				match(SQL_NO_CACHE_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3248);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(3249);
				match(SQL_CACHE_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3250);
				if (!(serverVersion >= 50704 && serverVersion < 50708)) throw new FailedPredicateException(this, "serverVersion >= 50704 && serverVersion < 50708");
				setState(3251);
				match(MAX_STATEMENT_TIME_SYMBOL);
				setState(3252);
				match(EQUAL_OPERATOR);
				setState(3253);
				real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockingClauseListContext extends ParserRuleContext {
		public List<LockingClauseContext> lockingClause() {
			return getRuleContexts(LockingClauseContext.class);
		}
		public LockingClauseContext lockingClause(int i) {
			return getRuleContext(LockingClauseContext.class,i);
		}
		public LockingClauseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockingClauseList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLockingClauseList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLockingClauseList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLockingClauseList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockingClauseListContext lockingClauseList() throws RecognitionException {
		LockingClauseListContext _localctx = new LockingClauseListContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_lockingClauseList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3257); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3256);
				lockingClause();
				}
				}
				setState(3259); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR_SYMBOL || _la==LOCK_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockingClauseContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public LockStrenghContext lockStrengh() {
			return getRuleContext(LockStrenghContext.class,0);
		}
		public TerminalNode OF_SYMBOL() { return getToken(MySQLParser.OF_SYMBOL, 0); }
		public TableAliasRefListContext tableAliasRefList() {
			return getRuleContext(TableAliasRefListContext.class,0);
		}
		public LockedRowActionContext lockedRowAction() {
			return getRuleContext(LockedRowActionContext.class,0);
		}
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public LockingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLockingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLockingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLockingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockingClauseContext lockingClause() throws RecognitionException {
		LockingClauseContext _localctx = new LockingClauseContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_lockingClause);
		try {
			setState(3276);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3261);
				match(FOR_SYMBOL);
				setState(3262);
				lockStrengh();
				setState(3266);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
				case 1:
					{
					setState(3263);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3264);
					match(OF_SYMBOL);
					setState(3265);
					tableAliasRefList();
					}
					break;
				}
				setState(3270);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
				case 1:
					{
					setState(3268);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3269);
					lockedRowAction();
					}
					break;
				}
				}
				break;
			case LOCK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3272);
				match(LOCK_SYMBOL);
				setState(3273);
				match(IN_SYMBOL);
				setState(3274);
				match(SHARE_SYMBOL);
				setState(3275);
				match(MODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockStrenghContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public LockStrenghContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStrengh; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLockStrengh(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLockStrengh(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLockStrengh(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockStrenghContext lockStrengh() throws RecognitionException {
		LockStrenghContext _localctx = new LockStrenghContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_lockStrengh);
		try {
			setState(3281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3278);
				match(UPDATE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3279);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3280);
				match(SHARE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockedRowActionContext extends ParserRuleContext {
		public TerminalNode SKIP_SYMBOL() { return getToken(MySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public LockedRowActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockedRowAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLockedRowAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLockedRowAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLockedRowAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockedRowActionContext lockedRowAction() throws RecognitionException {
		LockedRowActionContext _localctx = new LockedRowActionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_lockedRowAction);
		try {
			setState(3286);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3283);
				match(SKIP_SYMBOL);
				setState(3284);
				match(LOCKED_SYMBOL);
				}
				break;
			case NOWAIT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3285);
				match(NOWAIT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemListContext extends ParserRuleContext {
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SelectItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSelectItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSelectItemList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSelectItemList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectItemListContext selectItemList() throws RecognitionException {
		SelectItemListContext _localctx = new SelectItemListContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_selectItemList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(3288);
				selectItem();
				}
				break;
			case 2:
				{
				setState(3289);
				match(MULT_OPERATOR);
				}
				break;
			}
			setState(3296);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,343,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3292);
					match(COMMA_SYMBOL);
					setState(3293);
					selectItem();
					}
					} 
				}
				setState(3298);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,343,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectItemContext extends ParserRuleContext {
		public TableWildContext tableWild() {
			return getRuleContext(TableWildContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectAliasContext selectAlias() {
			return getRuleContext(SelectAliasContext.class,0);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSelectItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSelectItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSelectItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectItemContext selectItem() throws RecognitionException {
		SelectItemContext _localctx = new SelectItemContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_selectItem);
		try {
			setState(3304);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3299);
				tableWild();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3300);
				expr(0);
				setState(3302);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
				case 1:
					{
					setState(3301);
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectAliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSelectAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSelectAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSelectAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectAliasContext selectAlias() throws RecognitionException {
		SelectAliasContext _localctx = new SelectAliasContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_selectAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3307);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(3306);
				match(AS_SYMBOL);
				}
				break;
			}
			setState(3311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
			case 1:
				{
				setState(3309);
				identifier();
				}
				break;
			case 2:
				{
				setState(3310);
				textStringLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE_SYMBOL() { return getToken(MySQLParser.WHERE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3313);
			match(WHERE_SYMBOL);
			setState(3314);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public TerminalNode OPEN_CURLY_SYMBOL() { return getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public EscapedTableReferenceContext escapedTableReference() {
			return getRuleContext(EscapedTableReferenceContext.class,0);
		}
		public TerminalNode CLOSE_CURLY_SYMBOL() { return getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public List<JoinedTableContext> joinedTable() {
			return getRuleContexts(JoinedTableContext.class);
		}
		public JoinedTableContext joinedTable(int i) {
			return getRuleContext(JoinedTableContext.class,i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OJ_SYMBOL() { return getToken(MySQLParser.OJ_SYMBOL, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_tableReference);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				{
				setState(3316);
				tableFactor();
				}
				break;
			case 2:
				{
				setState(3317);
				match(OPEN_CURLY_SYMBOL);
				setState(3321);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
				case 1:
					{
					setState(3318);
					if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
					setState(3319);
					identifier();
					}
					break;
				case 2:
					{
					setState(3320);
					match(OJ_SYMBOL);
					}
					break;
				}
				setState(3323);
				escapedTableReference();
				setState(3324);
				match(CLOSE_CURLY_SYMBOL);
				}
				break;
			}
			setState(3331);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,350,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3328);
					joinedTable();
					}
					} 
				}
				setState(3333);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,350,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EscapedTableReferenceContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public List<JoinedTableContext> joinedTable() {
			return getRuleContexts(JoinedTableContext.class);
		}
		public JoinedTableContext joinedTable(int i) {
			return getRuleContext(JoinedTableContext.class,i);
		}
		public EscapedTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escapedTableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterEscapedTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitEscapedTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitEscapedTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EscapedTableReferenceContext escapedTableReference() throws RecognitionException {
		EscapedTableReferenceContext _localctx = new EscapedTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_escapedTableReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3334);
			tableFactor();
			setState(3338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CROSS_SYMBOL || ((((_la - 239)) & ~0x3f) == 0 && ((1L << (_la - 239)) & ((1L << (INNER_SYMBOL - 239)) | (1L << (JOIN_SYMBOL - 239)) | (1L << (LEFT_SYMBOL - 239)))) != 0) || _la==NATURAL_SYMBOL || _la==RIGHT_SYMBOL || _la==STRAIGHT_JOIN_SYMBOL) {
				{
				{
				setState(3335);
				joinedTable();
				}
				}
				setState(3340);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinedTableContext extends ParserRuleContext {
		public InnerJoinTypeContext innerJoinType() {
			return getRuleContext(InnerJoinTypeContext.class,0);
		}
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public OuterJoinTypeContext outerJoinType() {
			return getRuleContext(OuterJoinTypeContext.class,0);
		}
		public NaturalJoinTypeContext naturalJoinType() {
			return getRuleContext(NaturalJoinTypeContext.class,0);
		}
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterJoinedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitJoinedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitJoinedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_joinedTable);
		try {
			setState(3360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
			case STRAIGHT_JOIN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3341);
				innerJoinType();
				setState(3342);
				tableReference();
				setState(3347);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(3343);
					match(ON_SYMBOL);
					setState(3344);
					expr(0);
					}
					break;
				case 2:
					{
					setState(3345);
					match(USING_SYMBOL);
					setState(3346);
					identifierListWithParentheses();
					}
					break;
				}
				}
				break;
			case LEFT_SYMBOL:
			case RIGHT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3349);
				outerJoinType();
				setState(3350);
				tableReference();
				setState(3355);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON_SYMBOL:
					{
					setState(3351);
					match(ON_SYMBOL);
					setState(3352);
					expr(0);
					}
					break;
				case USING_SYMBOL:
					{
					setState(3353);
					match(USING_SYMBOL);
					setState(3354);
					identifierListWithParentheses();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3357);
				naturalJoinType();
				setState(3358);
				tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NaturalJoinTypeContext extends ParserRuleContext {
		public TerminalNode NATURAL_SYMBOL() { return getToken(MySQLParser.NATURAL_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode INNER_SYMBOL() { return getToken(MySQLParser.INNER_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode OUTER_SYMBOL() { return getToken(MySQLParser.OUTER_SYMBOL, 0); }
		public NaturalJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_naturalJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNaturalJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNaturalJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNaturalJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NaturalJoinTypeContext naturalJoinType() throws RecognitionException {
		NaturalJoinTypeContext _localctx = new NaturalJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_naturalJoinType);
		int _la;
		try {
			setState(3373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3362);
				match(NATURAL_SYMBOL);
				setState(3364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER_SYMBOL) {
					{
					setState(3363);
					match(INNER_SYMBOL);
					}
				}

				setState(3366);
				match(JOIN_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3367);
				match(NATURAL_SYMBOL);
				setState(3368);
				_la = _input.LA(1);
				if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER_SYMBOL) {
					{
					setState(3369);
					match(OUTER_SYMBOL);
					}
				}

				setState(3372);
				match(JOIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InnerJoinTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode INNER_SYMBOL() { return getToken(MySQLParser.INNER_SYMBOL, 0); }
		public TerminalNode CROSS_SYMBOL() { return getToken(MySQLParser.CROSS_SYMBOL, 0); }
		public TerminalNode STRAIGHT_JOIN_SYMBOL() { return getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public InnerJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_innerJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInnerJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInnerJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInnerJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InnerJoinTypeContext innerJoinType() throws RecognitionException {
		InnerJoinTypeContext _localctx = new InnerJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_innerJoinType);
		int _la;
		try {
			setState(3380);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS_SYMBOL || _la==INNER_SYMBOL) {
					{
					setState(3375);
					((InnerJoinTypeContext)_localctx).type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CROSS_SYMBOL || _la==INNER_SYMBOL) ) {
						((InnerJoinTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3378);
				match(JOIN_SYMBOL);
				}
				break;
			case STRAIGHT_JOIN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3379);
				((InnerJoinTypeContext)_localctx).type = match(STRAIGHT_JOIN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OuterJoinTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode OUTER_SYMBOL() { return getToken(MySQLParser.OUTER_SYMBOL, 0); }
		public OuterJoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outerJoinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOuterJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOuterJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOuterJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OuterJoinTypeContext outerJoinType() throws RecognitionException {
		OuterJoinTypeContext _localctx = new OuterJoinTypeContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_outerJoinType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3382);
			((OuterJoinTypeContext)_localctx).type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				((OuterJoinTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3384);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER_SYMBOL) {
				{
				setState(3383);
				match(OUTER_SYMBOL);
				}
			}

			setState(3386);
			match(JOIN_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFactorContext extends ParserRuleContext {
		public SingleTableContext singleTable() {
			return getRuleContext(SingleTableContext.class,0);
		}
		public SingleTableParensContext singleTableParens() {
			return getRuleContext(SingleTableParensContext.class,0);
		}
		public DerivedTableContext derivedTable() {
			return getRuleContext(DerivedTableContext.class,0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return getRuleContext(TableReferenceListParensContext.class,0);
		}
		public TableFunctionContext tableFunction() {
			return getRuleContext(TableFunctionContext.class,0);
		}
		public TableFactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFactor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableFactor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableFactor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFactorContext tableFactor() throws RecognitionException {
		TableFactorContext _localctx = new TableFactorContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_tableFactor);
		try {
			setState(3394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3388);
				singleTable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3389);
				singleTableParens();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3390);
				derivedTable();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3391);
				tableReferenceListParens();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3392);
				if (!(serverVersion >= 80004)) throw new FailedPredicateException(this, "serverVersion >= 80004");
				setState(3393);
				tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public UsePartitionContext usePartition() {
			return getRuleContext(UsePartitionContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public IndexHintListContext indexHintList() {
			return getRuleContext(IndexHintListContext.class,0);
		}
		public SingleTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSingleTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSingleTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSingleTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableContext singleTable() throws RecognitionException {
		SingleTableContext _localctx = new SingleTableContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_singleTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3396);
			tableRef();
			setState(3398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				setState(3397);
				usePartition();
				}
				break;
			}
			setState(3401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				setState(3400);
				tableAlias();
				}
				break;
			}
			setState(3404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				{
				setState(3403);
				indexHintList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SingleTableContext singleTable() {
			return getRuleContext(SingleTableContext.class,0);
		}
		public SingleTableParensContext singleTableParens() {
			return getRuleContext(SingleTableParensContext.class,0);
		}
		public SingleTableParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSingleTableParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSingleTableParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSingleTableParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableParensContext singleTableParens() throws RecognitionException {
		SingleTableParensContext _localctx = new SingleTableParensContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_singleTableParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3406);
			match(OPEN_PAR_SYMBOL);
			setState(3409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
			case 1:
				{
				setState(3407);
				singleTable();
				}
				break;
			case 2:
				{
				setState(3408);
				singleTableParens();
				}
				break;
			}
			setState(3411);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DerivedTableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public TerminalNode LATERAL_SYMBOL() { return getToken(MySQLParser.LATERAL_SYMBOL, 0); }
		public DerivedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derivedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDerivedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDerivedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDerivedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DerivedTableContext derivedTable() throws RecognitionException {
		DerivedTableContext _localctx = new DerivedTableContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_derivedTable);
		try {
			setState(3430);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3413);
				subquery();
				setState(3415);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					setState(3414);
					tableAlias();
					}
					break;
				}
				setState(3419);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(3417);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3418);
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3421);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(3422);
				match(LATERAL_SYMBOL);
				setState(3423);
				subquery();
				setState(3425);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					setState(3424);
					tableAlias();
					}
					break;
				}
				setState(3428);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(3427);
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceListParensContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public TableReferenceListParensContext tableReferenceListParens() {
			return getRuleContext(TableReferenceListParensContext.class,0);
		}
		public TableReferenceListParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferenceListParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableReferenceListParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableReferenceListParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableReferenceListParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceListParensContext tableReferenceListParens() throws RecognitionException {
		TableReferenceListParensContext _localctx = new TableReferenceListParensContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_tableReferenceListParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3432);
			match(OPEN_PAR_SYMBOL);
			setState(3435);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
			case 1:
				{
				setState(3433);
				tableReferenceList();
				}
				break;
			case 2:
				{
				setState(3434);
				tableReferenceListParens();
				}
				break;
			}
			setState(3437);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFunctionContext extends ParserRuleContext {
		public TerminalNode JSON_TABLE_SYMBOL() { return getToken(MySQLParser.JSON_TABLE_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public ColumnsClauseContext columnsClause() {
			return getRuleContext(ColumnsClauseContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public TableFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFunctionContext tableFunction() throws RecognitionException {
		TableFunctionContext _localctx = new TableFunctionContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_tableFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3439);
			match(JSON_TABLE_SYMBOL);
			setState(3440);
			match(OPEN_PAR_SYMBOL);
			setState(3441);
			expr(0);
			setState(3442);
			match(COMMA_SYMBOL);
			setState(3443);
			textStringLiteral();
			setState(3444);
			columnsClause();
			setState(3445);
			match(CLOSE_PAR_SYMBOL);
			setState(3447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				setState(3446);
				tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnsClauseContext extends ParserRuleContext {
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<JtColumnContext> jtColumn() {
			return getRuleContexts(JtColumnContext.class);
		}
		public JtColumnContext jtColumn(int i) {
			return getRuleContext(JtColumnContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnsClauseContext columnsClause() throws RecognitionException {
		ColumnsClauseContext _localctx = new ColumnsClauseContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_columnsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3449);
			match(COLUMNS_SYMBOL);
			setState(3450);
			match(OPEN_PAR_SYMBOL);
			setState(3451);
			jtColumn();
			setState(3456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3452);
				match(COMMA_SYMBOL);
				setState(3453);
				jtColumn();
				}
				}
				setState(3458);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3459);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JtColumnContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode PATH_SYMBOL() { return getToken(MySQLParser.PATH_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public OnEmptyOrErrorContext onEmptyOrError() {
			return getRuleContext(OnEmptyOrErrorContext.class,0);
		}
		public TerminalNode NESTED_SYMBOL() { return getToken(MySQLParser.NESTED_SYMBOL, 0); }
		public ColumnsClauseContext columnsClause() {
			return getRuleContext(ColumnsClauseContext.class,0);
		}
		public JtColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jtColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterJtColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitJtColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitJtColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JtColumnContext jtColumn() throws RecognitionException {
		JtColumnContext _localctx = new JtColumnContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_jtColumn);
		int _la;
		try {
			setState(3484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3461);
				identifier();
				setState(3462);
				match(FOR_SYMBOL);
				setState(3463);
				match(ORDINALITY_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3465);
				identifier();
				setState(3466);
				dataType();
				setState(3469);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(3467);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(3468);
					collate();
					}
					break;
				}
				setState(3472);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					setState(3471);
					match(EXISTS_SYMBOL);
					}
				}

				setState(3474);
				match(PATH_SYMBOL);
				setState(3475);
				textStringLiteral();
				setState(3477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3476);
					onEmptyOrError();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3479);
				match(NESTED_SYMBOL);
				setState(3480);
				match(PATH_SYMBOL);
				setState(3481);
				textStringLiteral();
				setState(3482);
				columnsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnEmptyOrErrorContext extends ParserRuleContext {
		public OnEmptyContext onEmpty() {
			return getRuleContext(OnEmptyContext.class,0);
		}
		public OnErrorContext onError() {
			return getRuleContext(OnErrorContext.class,0);
		}
		public OnEmptyOrErrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onEmptyOrError; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOnEmptyOrError(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOnEmptyOrError(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOnEmptyOrError(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnEmptyOrErrorContext onEmptyOrError() throws RecognitionException {
		OnEmptyOrErrorContext _localctx = new OnEmptyOrErrorContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_onEmptyOrError);
		int _la;
		try {
			setState(3494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3486);
				onEmpty();
				setState(3488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3487);
					onError();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3490);
				onError();
				setState(3492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					setState(3491);
					onEmpty();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnEmptyContext extends ParserRuleContext {
		public JtOnResponseContext jtOnResponse() {
			return getRuleContext(JtOnResponseContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode EMPTY_SYMBOL() { return getToken(MySQLParser.EMPTY_SYMBOL, 0); }
		public OnEmptyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onEmpty; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOnEmpty(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOnEmpty(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOnEmpty(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnEmptyContext onEmpty() throws RecognitionException {
		OnEmptyContext _localctx = new OnEmptyContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_onEmpty);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3496);
			jtOnResponse();
			setState(3497);
			match(ON_SYMBOL);
			setState(3498);
			match(EMPTY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnErrorContext extends ParserRuleContext {
		public JtOnResponseContext jtOnResponse() {
			return getRuleContext(JtOnResponseContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public OnErrorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onError; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOnError(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOnError(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOnError(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnErrorContext onError() throws RecognitionException {
		OnErrorContext _localctx = new OnErrorContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_onError);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3500);
			jtOnResponse();
			setState(3501);
			match(ON_SYMBOL);
			setState(3502);
			match(ERROR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JtOnResponseContext extends ParserRuleContext {
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public JtOnResponseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jtOnResponse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterJtOnResponse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitJtOnResponse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitJtOnResponse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JtOnResponseContext jtOnResponse() throws RecognitionException {
		JtOnResponseContext _localctx = new JtOnResponseContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_jtOnResponse);
		try {
			setState(3508);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ERROR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3504);
				match(ERROR_SYMBOL);
				}
				break;
			case NULL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3505);
				match(NULL_SYMBOL);
				}
				break;
			case DEFAULT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3506);
				match(DEFAULT_SYMBOL);
				setState(3507);
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionOptionContext extends ParserRuleContext {
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public UnionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUnionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUnionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUnionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionOptionContext unionOption() throws RecognitionException {
		UnionOptionContext _localctx = new UnionOptionContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_unionOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3510);
			_la = _input.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasContext tableAlias() throws RecognitionException {
		TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_tableAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3515);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(3512);
				match(AS_SYMBOL);
				}
				break;
			case 2:
				{
				setState(3513);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(3514);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(3517);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintListContext extends ParserRuleContext {
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexHintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexHintList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexHintList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexHintList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintListContext indexHintList() throws RecognitionException {
		IndexHintListContext _localctx = new IndexHintListContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_indexHintList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3519);
			indexHint();
			setState(3524);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,383,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3520);
					match(COMMA_SYMBOL);
					setState(3521);
					indexHint();
					}
					} 
				}
				setState(3526);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,383,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IndexListContext indexList() {
			return getRuleContext(IndexListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IndexHintClauseContext indexHintClause() {
			return getRuleContext(IndexHintClauseContext.class,0);
		}
		public TerminalNode USE_SYMBOL() { return getToken(MySQLParser.USE_SYMBOL, 0); }
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_indexHint);
		int _la;
		try {
			setState(3547);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORCE_SYMBOL:
			case IGNORE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3527);
				indexHintType();
				setState(3528);
				keyOrIndex();
				setState(3530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(3529);
					indexHintClause();
					}
				}

				setState(3532);
				match(OPEN_PAR_SYMBOL);
				setState(3533);
				indexList();
				setState(3534);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case USE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3536);
				match(USE_SYMBOL);
				setState(3537);
				keyOrIndex();
				setState(3539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(3538);
					indexHintClause();
					}
				}

				setState(3541);
				match(OPEN_PAR_SYMBOL);
				setState(3543);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
				case 1:
					{
					setState(3542);
					indexList();
					}
					break;
				}
				setState(3545);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_indexHintType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3549);
			_la = _input.LA(1);
			if ( !(_la==FORCE_SYMBOL || _la==IGNORE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyOrIndexContext extends ParserRuleContext {
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public KeyOrIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyOrIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyOrIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyOrIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyOrIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyOrIndexContext keyOrIndex() throws RecognitionException {
		KeyOrIndexContext _localctx = new KeyOrIndexContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_keyOrIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3551);
			_la = _input.LA(1);
			if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintKeyTypeContext extends ParserRuleContext {
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public ConstraintKeyTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintKeyType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterConstraintKeyType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitConstraintKeyType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitConstraintKeyType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintKeyTypeContext constraintKeyType() throws RecognitionException {
		ConstraintKeyTypeContext _localctx = new ConstraintKeyTypeContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_constraintKeyType);
		int _la;
		try {
			setState(3559);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3553);
				match(PRIMARY_SYMBOL);
				setState(3554);
				match(KEY_SYMBOL);
				}
				break;
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3555);
				match(UNIQUE_SYMBOL);
				setState(3557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					setState(3556);
					keyOrIndex();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintClauseContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode ORDER_SYMBOL() { return getToken(MySQLParser.ORDER_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IndexHintClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexHintClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexHintClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexHintClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintClauseContext indexHintClause() throws RecognitionException {
		IndexHintClauseContext _localctx = new IndexHintClauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_indexHintClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3561);
			match(FOR_SYMBOL);
			setState(3567);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN_SYMBOL:
				{
				setState(3562);
				match(JOIN_SYMBOL);
				}
				break;
			case ORDER_SYMBOL:
				{
				setState(3563);
				match(ORDER_SYMBOL);
				setState(3564);
				match(BY_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				setState(3565);
				match(GROUP_SYMBOL);
				setState(3566);
				match(BY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexListContext extends ParserRuleContext {
		public List<IndexListElementContext> indexListElement() {
			return getRuleContexts(IndexListElementContext.class);
		}
		public IndexListElementContext indexListElement(int i) {
			return getRuleContext(IndexListElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IndexListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexListContext indexList() throws RecognitionException {
		IndexListContext _localctx = new IndexListContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_indexList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3569);
			indexListElement();
			setState(3574);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(3570);
				match(COMMA_SYMBOL);
				setState(3571);
				indexListElement();
				}
				}
				setState(3576);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexListElementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public IndexListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexListElementContext indexListElement() throws RecognitionException {
		IndexListElementContext _localctx = new IndexListElementContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_indexListElement);
		try {
			setState(3579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3577);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3578);
				match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TableReferenceListContext tableReferenceList() {
			return getRuleContext(TableReferenceListContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public UpdateListContext updateList() {
			return getRuleContext(UpdateListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public SimpleLimitClauseContext simpleLimitClause() {
			return getRuleContext(SimpleLimitClauseContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_updateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				setState(3581);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3582);
				withClause();
				}
				break;
			}
			setState(3585);
			match(UPDATE_SYMBOL);
			setState(3587);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				setState(3586);
				match(LOW_PRIORITY_SYMBOL);
				}
				break;
			}
			setState(3590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				setState(3589);
				match(IGNORE_SYMBOL);
				}
				break;
			}
			setState(3592);
			tableReferenceList();
			setState(3593);
			match(SET_SYMBOL);
			setState(3594);
			updateList();
			setState(3596);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				setState(3595);
				whereClause();
				}
			}

			setState(3599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				setState(3598);
				orderClause();
				}
			}

			setState(3602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				setState(3601);
				simpleLimitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionOrLockingStatementContext extends ParserRuleContext {
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public SavepointStatementContext savepointStatement() {
			return getRuleContext(SavepointStatementContext.class,0);
		}
		public LockStatementContext lockStatement() {
			return getRuleContext(LockStatementContext.class,0);
		}
		public XaStatementContext xaStatement() {
			return getRuleContext(XaStatementContext.class,0);
		}
		public TransactionOrLockingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionOrLockingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTransactionOrLockingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTransactionOrLockingStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTransactionOrLockingStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionOrLockingStatementContext transactionOrLockingStatement() throws RecognitionException {
		TransactionOrLockingStatementContext _localctx = new TransactionOrLockingStatementContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_transactionOrLockingStatement);
		try {
			setState(3608);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3604);
				transactionStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3605);
				savepointStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3606);
				lockStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3607);
				xaStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public List<TransactionCharacteristicContext> transactionCharacteristic() {
			return getRuleContexts(TransactionCharacteristicContext.class);
		}
		public TransactionCharacteristicContext transactionCharacteristic(int i) {
			return getRuleContext(TransactionCharacteristicContext.class,i);
		}
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode RELEASE_SYMBOL() { return getToken(MySQLParser.RELEASE_SYMBOL, 0); }
		public List<TerminalNode> NO_SYMBOL() { return getTokens(MySQLParser.NO_SYMBOL); }
		public TerminalNode NO_SYMBOL(int i) {
			return getToken(MySQLParser.NO_SYMBOL, i);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_transactionStatement);
		int _la;
		try {
			int _alt;
			setState(3635);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3610);
				match(START_SYMBOL);
				setState(3611);
				match(TRANSACTION_SYMBOL);
				setState(3615);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,400,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3612);
						transactionCharacteristic();
						}
						} 
					}
					setState(3617);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,400,_ctx);
				}
				}
				break;
			case COMMIT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3618);
				match(COMMIT_SYMBOL);
				setState(3620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					setState(3619);
					match(WORK_SYMBOL);
					}
				}

				setState(3627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND_SYMBOL) {
					{
					setState(3622);
					match(AND_SYMBOL);
					setState(3624);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL) {
						{
						setState(3623);
						match(NO_SYMBOL);
						}
					}

					setState(3626);
					match(CHAIN_SYMBOL);
					}
				}

				setState(3633);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
					{
					setState(3630);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL) {
						{
						setState(3629);
						match(NO_SYMBOL);
						}
					}

					setState(3632);
					match(RELEASE_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginWorkContext extends ParserRuleContext {
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginWork; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterBeginWork(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitBeginWork(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitBeginWork(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginWorkContext beginWork() throws RecognitionException {
		BeginWorkContext _localctx = new BeginWorkContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_beginWork);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3637);
			match(BEGIN_SYMBOL);
			setState(3639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK_SYMBOL) {
				{
				setState(3638);
				match(WORK_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionCharacteristicContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TransactionCharacteristicContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionCharacteristic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTransactionCharacteristic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTransactionCharacteristic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTransactionCharacteristic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionCharacteristicContext transactionCharacteristic() throws RecognitionException {
		TransactionCharacteristicContext _localctx = new TransactionCharacteristicContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_transactionCharacteristic);
		int _la;
		try {
			setState(3647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3641);
				match(WITH_SYMBOL);
				setState(3642);
				match(CONSISTENT_SYMBOL);
				setState(3643);
				match(SNAPSHOT_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3644);
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				setState(3645);
				match(READ_SYMBOL);
				setState(3646);
				_la = _input.LA(1);
				if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SavepointStatementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode RELEASE_SYMBOL() { return getToken(MySQLParser.RELEASE_SYMBOL, 0); }
		public List<TerminalNode> NO_SYMBOL() { return getTokens(MySQLParser.NO_SYMBOL); }
		public TerminalNode NO_SYMBOL(int i) {
			return getToken(MySQLParser.NO_SYMBOL, i);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepointStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSavepointStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSavepointStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSavepointStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SavepointStatementContext savepointStatement() throws RecognitionException {
		SavepointStatementContext _localctx = new SavepointStatementContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_savepointStatement);
		int _la;
		try {
			setState(3678);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SAVEPOINT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3649);
				match(SAVEPOINT_SYMBOL);
				setState(3650);
				identifier();
				}
				break;
			case ROLLBACK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3651);
				match(ROLLBACK_SYMBOL);
				setState(3653);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					setState(3652);
					match(WORK_SYMBOL);
					}
				}

				setState(3673);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TO_SYMBOL:
					{
					setState(3655);
					match(TO_SYMBOL);
					setState(3657);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
					case 1:
						{
						setState(3656);
						match(SAVEPOINT_SYMBOL);
						}
						break;
					}
					setState(3659);
					identifier();
					}
					break;
				case EOF:
				case AND_SYMBOL:
				case NO_SYMBOL:
				case RELEASE_SYMBOL:
				case SEMICOLON_SYMBOL:
					{
					setState(3665);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND_SYMBOL) {
						{
						setState(3660);
						match(AND_SYMBOL);
						setState(3662);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NO_SYMBOL) {
							{
							setState(3661);
							match(NO_SYMBOL);
							}
						}

						setState(3664);
						match(CHAIN_SYMBOL);
						}
					}

					setState(3671);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
						{
						setState(3668);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NO_SYMBOL) {
							{
							setState(3667);
							match(NO_SYMBOL);
							}
						}

						setState(3670);
						match(RELEASE_SYMBOL);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RELEASE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3675);
				match(RELEASE_SYMBOL);
				setState(3676);
				match(SAVEPOINT_SYMBOL);
				setState(3677);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockStatementContext extends ParserRuleContext {
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public List<LockItemContext> lockItem() {
			return getRuleContexts(LockItemContext.class);
		}
		public LockItemContext lockItem(int i) {
			return getRuleContext(LockItemContext.class,i);
		}
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode UNLOCK_SYMBOL() { return getToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		public LockStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLockStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLockStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLockStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockStatementContext lockStatement() throws RecognitionException {
		LockStatementContext _localctx = new LockStatementContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_lockStatement);
		int _la;
		try {
			setState(3702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3680);
				match(LOCK_SYMBOL);
				setState(3681);
				_la = _input.LA(1);
				if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3682);
				lockItem();
				setState(3687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(3683);
					match(COMMA_SYMBOL);
					setState(3684);
					lockItem();
					}
					}
					setState(3689);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3690);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3691);
				match(LOCK_SYMBOL);
				setState(3692);
				match(INSTANCE_SYMBOL);
				setState(3693);
				match(FOR_SYMBOL);
				setState(3694);
				match(BACKUP_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3695);
				match(UNLOCK_SYMBOL);
				setState(3700);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(3696);
					match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					setState(3697);
					match(TABLE_SYMBOL);
					}
					break;
				case 3:
					{
					setState(3698);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(3699);
					match(INSTANCE_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockItemContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public LockOptionContext lockOption() {
			return getRuleContext(LockOptionContext.class,0);
		}
		public TableAliasContext tableAlias() {
			return getRuleContext(TableAliasContext.class,0);
		}
		public LockItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLockItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLockItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLockItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockItemContext lockItem() throws RecognitionException {
		LockItemContext _localctx = new LockItemContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_lockItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3704);
			tableRef();
			setState(3706);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				setState(3705);
				tableAlias();
				}
				break;
			}
			setState(3708);
			lockOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockOptionContext extends ParserRuleContext {
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode LOW_PRIORITY_SYMBOL() { return getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0); }
		public LockOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLockOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLockOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLockOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockOptionContext lockOption() throws RecognitionException {
		LockOptionContext _localctx = new LockOptionContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_lockOption);
		int _la;
		try {
			setState(3718);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3710);
				match(READ_SYMBOL);
				setState(3712);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL) {
					{
					setState(3711);
					match(LOCAL_SYMBOL);
					}
				}

				}
				break;
			case LOW_PRIORITY_SYMBOL:
			case WRITE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3715);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOW_PRIORITY_SYMBOL) {
					{
					setState(3714);
					match(LOW_PRIORITY_SYMBOL);
					}
				}

				setState(3717);
				match(WRITE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaStatementContext extends ParserRuleContext {
		public TerminalNode XA_SYMBOL() { return getToken(MySQLParser.XA_SYMBOL, 0); }
		public XidContext xid() {
			return getRuleContext(XidContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public XaConvertContext xaConvert() {
			return getRuleContext(XaConvertContext.class,0);
		}
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MySQLParser.PHASE_SYMBOL, 0); }
		public TerminalNode JOIN_SYMBOL() { return getToken(MySQLParser.JOIN_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public XaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterXaStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitXaStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitXaStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaStatementContext xaStatement() throws RecognitionException {
		XaStatementContext _localctx = new XaStatementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_xaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3720);
			match(XA_SYMBOL);
			setState(3747);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN_SYMBOL:
			case START_SYMBOL:
				{
				setState(3721);
				_la = _input.LA(1);
				if ( !(_la==BEGIN_SYMBOL || _la==START_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3722);
				xid();
				setState(3724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==JOIN_SYMBOL || _la==RESUME_SYMBOL) {
					{
					setState(3723);
					_la = _input.LA(1);
					if ( !(_la==JOIN_SYMBOL || _la==RESUME_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case END_SYMBOL:
				{
				setState(3726);
				match(END_SYMBOL);
				setState(3727);
				xid();
				setState(3733);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUSPEND_SYMBOL) {
					{
					setState(3728);
					match(SUSPEND_SYMBOL);
					setState(3731);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FOR_SYMBOL) {
						{
						setState(3729);
						match(FOR_SYMBOL);
						setState(3730);
						match(MIGRATE_SYMBOL);
						}
					}

					}
				}

				}
				break;
			case PREPARE_SYMBOL:
				{
				setState(3735);
				match(PREPARE_SYMBOL);
				setState(3736);
				xid();
				}
				break;
			case COMMIT_SYMBOL:
				{
				setState(3737);
				match(COMMIT_SYMBOL);
				setState(3738);
				xid();
				setState(3741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONE_SYMBOL) {
					{
					setState(3739);
					match(ONE_SYMBOL);
					setState(3740);
					match(PHASE_SYMBOL);
					}
				}

				}
				break;
			case ROLLBACK_SYMBOL:
				{
				setState(3743);
				match(ROLLBACK_SYMBOL);
				setState(3744);
				xid();
				}
				break;
			case RECOVER_SYMBOL:
				{
				setState(3745);
				match(RECOVER_SYMBOL);
				setState(3746);
				xaConvert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XaConvertContext extends ParserRuleContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MySQLParser.XID_SYMBOL, 0); }
		public XaConvertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xaConvert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterXaConvert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitXaConvert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitXaConvert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XaConvertContext xaConvert() throws RecognitionException {
		XaConvertContext _localctx = new XaConvertContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_xaConvert);
		int _la;
		try {
			setState(3755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3749);
				if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
				setState(3752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONVERT_SYMBOL) {
					{
					setState(3750);
					match(CONVERT_SYMBOL);
					setState(3751);
					match(XID_SYMBOL);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitXid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3757);
			textString();
			setState(3764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				setState(3758);
				match(COMMA_SYMBOL);
				setState(3759);
				textString();
				setState(3762);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(3760);
					match(COMMA_SYMBOL);
					setState(3761);
					ulong_number();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationStatementContext extends ParserRuleContext {
		public TerminalNode PURGE_SYMBOL() { return getToken(MySQLParser.PURGE_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode BEFORE_SYMBOL() { return getToken(MySQLParser.BEFORE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ChangeMasterContext changeMaster() {
			return getRuleContext(ChangeMasterContext.class,0);
		}
		public TerminalNode RESET_SYMBOL() { return getToken(MySQLParser.RESET_SYMBOL, 0); }
		public List<ResetOptionContext> resetOption() {
			return getRuleContexts(ResetOptionContext.class);
		}
		public ResetOptionContext resetOption(int i) {
			return getRuleContext(ResetOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SlaveContext slave() {
			return getRuleContext(SlaveContext.class,0);
		}
		public ChangeReplicationContext changeReplication() {
			return getRuleContext(ChangeReplicationContext.class,0);
		}
		public ReplicationLoadContext replicationLoad() {
			return getRuleContext(ReplicationLoadContext.class,0);
		}
		public GroupReplicationContext groupReplication() {
			return getRuleContext(GroupReplicationContext.class,0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReplicationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReplicationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReplicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationStatementContext replicationStatement() throws RecognitionException {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_replicationStatement);
		int _la;
		try {
			setState(3799);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3766);
				match(PURGE_SYMBOL);
				setState(3767);
				_la = _input.LA(1);
				if ( !(_la==BINARY_SYMBOL || _la==MASTER_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3768);
				match(LOGS_SYMBOL);
				setState(3773);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TO_SYMBOL:
					{
					setState(3769);
					match(TO_SYMBOL);
					setState(3770);
					textLiteral();
					}
					break;
				case BEFORE_SYMBOL:
					{
					setState(3771);
					match(BEFORE_SYMBOL);
					setState(3772);
					expr(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3775);
				changeMaster();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3776);
				match(RESET_SYMBOL);
				setState(3777);
				resetOption();
				setState(3782);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(3778);
					match(COMMA_SYMBOL);
					setState(3779);
					resetOption();
					}
					}
					setState(3784);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3785);
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				setState(3786);
				match(RESET_SYMBOL);
				setState(3787);
				match(PERSIST_SYMBOL);
				setState(3791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF_SYMBOL) {
					{
					setState(3788);
					ifExists();
					setState(3789);
					identifier();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3793);
				slave();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3794);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(3795);
				changeReplication();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3796);
				replicationLoad();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3797);
				if (!(serverVersion > 50706)) throw new FailedPredicateException(this, "serverVersion > 50706");
				setState(3798);
				groupReplication();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public MasterResetOptionsContext masterResetOptions() {
			return getRuleContext(MasterResetOptionsContext.class,0);
		}
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ResetOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResetOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResetOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResetOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetOptionContext resetOption() throws RecognitionException {
		ResetOptionContext _localctx = new ResetOptionContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_resetOption);
		try {
			setState(3815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3801);
				((ResetOptionContext)_localctx).option = match(MASTER_SYMBOL);
				setState(3803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
				case 1:
					{
					setState(3802);
					masterResetOptions();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3805);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(3806);
				((ResetOptionContext)_localctx).option = match(QUERY_SYMBOL);
				setState(3807);
				match(CACHE_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3808);
				((ResetOptionContext)_localctx).option = match(SLAVE_SYMBOL);
				setState(3810);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					setState(3809);
					match(ALL_SYMBOL);
					}
					break;
				}
				setState(3813);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(3812);
					channel();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterResetOptionsContext extends ParserRuleContext {
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public MasterResetOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterResetOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterMasterResetOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitMasterResetOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitMasterResetOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterResetOptionsContext masterResetOptions() throws RecognitionException {
		MasterResetOptionsContext _localctx = new MasterResetOptionsContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_masterResetOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3817);
			if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
			setState(3818);
			match(TO_SYMBOL);
			setState(3823);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(3819);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(3820);
				real_ulong_number();
				}
				break;
			case 2:
				{
				setState(3821);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(3822);
				real_ulonglong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicationLoadContext extends ParserRuleContext {
		public TerminalNode LOAD_SYMBOL() { return getToken(MySQLParser.LOAD_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public ReplicationLoadContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicationLoad; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReplicationLoad(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReplicationLoad(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReplicationLoad(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicationLoadContext replicationLoad() throws RecognitionException {
		ReplicationLoadContext _localctx = new ReplicationLoadContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_replicationLoad);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3825);
			match(LOAD_SYMBOL);
			setState(3829);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATA_SYMBOL:
				{
				setState(3826);
				match(DATA_SYMBOL);
				}
				break;
			case TABLE_SYMBOL:
				{
				setState(3827);
				match(TABLE_SYMBOL);
				setState(3828);
				tableRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3831);
			match(FROM_SYMBOL);
			setState(3832);
			match(MASTER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterContext extends ParserRuleContext {
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public ChangeMasterOptionsContext changeMasterOptions() {
			return getRuleContext(ChangeMasterOptionsContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ChangeMasterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMaster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterChangeMaster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitChangeMaster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitChangeMaster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterContext changeMaster() throws RecognitionException {
		ChangeMasterContext _localctx = new ChangeMasterContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_changeMaster);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3834);
			match(CHANGE_SYMBOL);
			setState(3835);
			match(MASTER_SYMBOL);
			setState(3836);
			match(TO_SYMBOL);
			setState(3837);
			changeMasterOptions();
			setState(3839);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(3838);
				channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeMasterOptionsContext extends ParserRuleContext {
		public List<MasterOptionContext> masterOption() {
			return getRuleContexts(MasterOptionContext.class);
		}
		public MasterOptionContext masterOption(int i) {
			return getRuleContext(MasterOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ChangeMasterOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeMasterOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterChangeMasterOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitChangeMasterOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitChangeMasterOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeMasterOptionsContext changeMasterOptions() throws RecognitionException {
		ChangeMasterOptionsContext _localctx = new ChangeMasterOptionsContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_changeMasterOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3841);
			masterOption();
			setState(3846);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,444,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3842);
					match(COMMA_SYMBOL);
					setState(3843);
					masterOption();
					}
					} 
				}
				setState(3848);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,444,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterOptionContext extends ParserRuleContext {
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode NETWORK_NAMESPACE_SYMBOL() { return getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		public TerminalNode MASTER_BIND_SYMBOL() { return getToken(MySQLParser.MASTER_BIND_SYMBOL, 0); }
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		public MasterTlsCiphersuitesDefContext masterTlsCiphersuitesDef() {
			return getRuleContext(MasterTlsCiphersuitesDefContext.class,0);
		}
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public ServerIdListContext serverIdList() {
			return getRuleContext(ServerIdListContext.class,0);
		}
		public TerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		public PrivilegeCheckDefContext privilegeCheckDef() {
			return getRuleContext(PrivilegeCheckDefContext.class,0);
		}
		public TerminalNode REQUIRE_ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() { return getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0); }
		public TablePrimaryKeyCheckDefContext tablePrimaryKeyCheckDef() {
			return getRuleContext(TablePrimaryKeyCheckDefContext.class,0);
		}
		public MasterFileDefContext masterFileDef() {
			return getRuleContext(MasterFileDefContext.class,0);
		}
		public MasterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterMasterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitMasterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitMasterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterOptionContext masterOption() throws RecognitionException {
		MasterOptionContext _localctx = new MasterOptionContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_masterOption);
		try {
			setState(3940);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_HOST_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3849);
				match(MASTER_HOST_SYMBOL);
				setState(3850);
				match(EQUAL_OPERATOR);
				setState(3851);
				textStringNoLinebreak();
				}
				break;
			case NETWORK_NAMESPACE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3852);
				match(NETWORK_NAMESPACE_SYMBOL);
				setState(3853);
				match(EQUAL_OPERATOR);
				setState(3854);
				textStringNoLinebreak();
				}
				break;
			case MASTER_BIND_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3855);
				match(MASTER_BIND_SYMBOL);
				setState(3856);
				match(EQUAL_OPERATOR);
				setState(3857);
				textStringNoLinebreak();
				}
				break;
			case MASTER_USER_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3858);
				match(MASTER_USER_SYMBOL);
				setState(3859);
				match(EQUAL_OPERATOR);
				setState(3860);
				textStringNoLinebreak();
				}
				break;
			case MASTER_PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3861);
				match(MASTER_PASSWORD_SYMBOL);
				setState(3862);
				match(EQUAL_OPERATOR);
				setState(3863);
				textStringNoLinebreak();
				}
				break;
			case MASTER_PORT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(3864);
				match(MASTER_PORT_SYMBOL);
				setState(3865);
				match(EQUAL_OPERATOR);
				setState(3866);
				ulong_number();
				}
				break;
			case MASTER_CONNECT_RETRY_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3867);
				match(MASTER_CONNECT_RETRY_SYMBOL);
				setState(3868);
				match(EQUAL_OPERATOR);
				setState(3869);
				ulong_number();
				}
				break;
			case MASTER_RETRY_COUNT_SYMBOL:
				enterOuterAlt(_localctx, 8);
				{
				setState(3870);
				match(MASTER_RETRY_COUNT_SYMBOL);
				setState(3871);
				match(EQUAL_OPERATOR);
				setState(3872);
				ulong_number();
				}
				break;
			case MASTER_DELAY_SYMBOL:
				enterOuterAlt(_localctx, 9);
				{
				setState(3873);
				match(MASTER_DELAY_SYMBOL);
				setState(3874);
				match(EQUAL_OPERATOR);
				setState(3875);
				ulong_number();
				}
				break;
			case MASTER_SSL_SYMBOL:
				enterOuterAlt(_localctx, 10);
				{
				setState(3876);
				match(MASTER_SSL_SYMBOL);
				setState(3877);
				match(EQUAL_OPERATOR);
				setState(3878);
				ulong_number();
				}
				break;
			case MASTER_SSL_CA_SYMBOL:
				enterOuterAlt(_localctx, 11);
				{
				setState(3879);
				match(MASTER_SSL_CA_SYMBOL);
				setState(3880);
				match(EQUAL_OPERATOR);
				setState(3881);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CAPATH_SYMBOL:
				enterOuterAlt(_localctx, 12);
				{
				setState(3882);
				match(MASTER_SSL_CAPATH_SYMBOL);
				setState(3883);
				match(EQUAL_OPERATOR);
				setState(3884);
				textStringNoLinebreak();
				}
				break;
			case MASTER_TLS_VERSION_SYMBOL:
				enterOuterAlt(_localctx, 13);
				{
				setState(3885);
				match(MASTER_TLS_VERSION_SYMBOL);
				setState(3886);
				match(EQUAL_OPERATOR);
				setState(3887);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_CERT_SYMBOL:
				enterOuterAlt(_localctx, 14);
				{
				setState(3888);
				match(MASTER_SSL_CERT_SYMBOL);
				setState(3889);
				match(EQUAL_OPERATOR);
				setState(3890);
				textStringNoLinebreak();
				}
				break;
			case MASTER_TLS_CIPHERSUITES_SYMBOL:
				enterOuterAlt(_localctx, 15);
				{
				setState(3891);
				match(MASTER_TLS_CIPHERSUITES_SYMBOL);
				setState(3892);
				match(EQUAL_OPERATOR);
				setState(3893);
				masterTlsCiphersuitesDef();
				}
				break;
			case MASTER_SSL_CIPHER_SYMBOL:
				enterOuterAlt(_localctx, 16);
				{
				setState(3894);
				match(MASTER_SSL_CIPHER_SYMBOL);
				setState(3895);
				match(EQUAL_OPERATOR);
				setState(3896);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_KEY_SYMBOL:
				enterOuterAlt(_localctx, 17);
				{
				setState(3897);
				match(MASTER_SSL_KEY_SYMBOL);
				setState(3898);
				match(EQUAL_OPERATOR);
				setState(3899);
				textStringNoLinebreak();
				}
				break;
			case MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL:
				enterOuterAlt(_localctx, 18);
				{
				setState(3900);
				match(MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL);
				setState(3901);
				match(EQUAL_OPERATOR);
				setState(3902);
				ulong_number();
				}
				break;
			case MASTER_SSL_CRL_SYMBOL:
				enterOuterAlt(_localctx, 19);
				{
				setState(3903);
				match(MASTER_SSL_CRL_SYMBOL);
				setState(3904);
				match(EQUAL_OPERATOR);
				setState(3905);
				textLiteral();
				}
				break;
			case MASTER_SSL_CRLPATH_SYMBOL:
				enterOuterAlt(_localctx, 20);
				{
				setState(3906);
				match(MASTER_SSL_CRLPATH_SYMBOL);
				setState(3907);
				match(EQUAL_OPERATOR);
				setState(3908);
				textStringNoLinebreak();
				}
				break;
			case MASTER_PUBLIC_KEY_PATH_SYMBOL:
				enterOuterAlt(_localctx, 21);
				{
				setState(3909);
				match(MASTER_PUBLIC_KEY_PATH_SYMBOL);
				setState(3910);
				match(EQUAL_OPERATOR);
				setState(3911);
				textStringNoLinebreak();
				}
				break;
			case GET_MASTER_PUBLIC_KEY_SYMBOL:
				enterOuterAlt(_localctx, 22);
				{
				setState(3912);
				match(GET_MASTER_PUBLIC_KEY_SYMBOL);
				setState(3913);
				match(EQUAL_OPERATOR);
				setState(3914);
				ulong_number();
				}
				break;
			case MASTER_HEARTBEAT_PERIOD_SYMBOL:
				enterOuterAlt(_localctx, 23);
				{
				setState(3915);
				match(MASTER_HEARTBEAT_PERIOD_SYMBOL);
				setState(3916);
				match(EQUAL_OPERATOR);
				setState(3917);
				ulong_number();
				}
				break;
			case IGNORE_SERVER_IDS_SYMBOL:
				enterOuterAlt(_localctx, 24);
				{
				setState(3918);
				match(IGNORE_SERVER_IDS_SYMBOL);
				setState(3919);
				match(EQUAL_OPERATOR);
				setState(3920);
				serverIdList();
				}
				break;
			case MASTER_COMPRESSION_ALGORITHM_SYMBOL:
				enterOuterAlt(_localctx, 25);
				{
				setState(3921);
				match(MASTER_COMPRESSION_ALGORITHM_SYMBOL);
				setState(3922);
				match(EQUAL_OPERATOR);
				setState(3923);
				textStringLiteral();
				}
				break;
			case MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL:
				enterOuterAlt(_localctx, 26);
				{
				setState(3924);
				match(MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL);
				setState(3925);
				match(EQUAL_OPERATOR);
				setState(3926);
				ulong_number();
				}
				break;
			case MASTER_AUTO_POSITION_SYMBOL:
				enterOuterAlt(_localctx, 27);
				{
				setState(3927);
				match(MASTER_AUTO_POSITION_SYMBOL);
				setState(3928);
				match(EQUAL_OPERATOR);
				setState(3929);
				ulong_number();
				}
				break;
			case PRIVILEGE_CHECKS_USER_SYMBOL:
				enterOuterAlt(_localctx, 28);
				{
				setState(3930);
				match(PRIVILEGE_CHECKS_USER_SYMBOL);
				setState(3931);
				match(EQUAL_OPERATOR);
				setState(3932);
				privilegeCheckDef();
				}
				break;
			case REQUIRE_ROW_FORMAT_SYMBOL:
				enterOuterAlt(_localctx, 29);
				{
				setState(3933);
				match(REQUIRE_ROW_FORMAT_SYMBOL);
				setState(3934);
				match(EQUAL_OPERATOR);
				setState(3935);
				ulong_number();
				}
				break;
			case REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL:
				enterOuterAlt(_localctx, 30);
				{
				setState(3936);
				match(REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL);
				setState(3937);
				match(EQUAL_OPERATOR);
				setState(3938);
				tablePrimaryKeyCheckDef();
				}
				break;
			case MASTER_LOG_FILE_SYMBOL:
			case MASTER_LOG_POS_SYMBOL:
			case RELAY_LOG_FILE_SYMBOL:
			case RELAY_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 31);
				{
				setState(3939);
				masterFileDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeCheckDefContext extends ParserRuleContext {
		public UserIdentifierOrTextContext userIdentifierOrText() {
			return getRuleContext(UserIdentifierOrTextContext.class,0);
		}
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public PrivilegeCheckDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeCheckDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPrivilegeCheckDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPrivilegeCheckDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPrivilegeCheckDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeCheckDefContext privilegeCheckDef() throws RecognitionException {
		PrivilegeCheckDefContext _localctx = new PrivilegeCheckDefContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_privilegeCheckDef);
		try {
			setState(3944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3942);
				userIdentifierOrText();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3943);
				match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablePrimaryKeyCheckDefContext extends ParserRuleContext {
		public TerminalNode STREAM_SYMBOL() { return getToken(MySQLParser.STREAM_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode OFF_SYMBOL() { return getToken(MySQLParser.OFF_SYMBOL, 0); }
		public TablePrimaryKeyCheckDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablePrimaryKeyCheckDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTablePrimaryKeyCheckDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTablePrimaryKeyCheckDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTablePrimaryKeyCheckDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablePrimaryKeyCheckDefContext tablePrimaryKeyCheckDef() throws RecognitionException {
		TablePrimaryKeyCheckDefContext _localctx = new TablePrimaryKeyCheckDefContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_tablePrimaryKeyCheckDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3946);
			_la = _input.LA(1);
			if ( !(_la==ON_SYMBOL || _la==STREAM_SYMBOL || _la==OFF_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterTlsCiphersuitesDefContext extends ParserRuleContext {
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public MasterTlsCiphersuitesDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterTlsCiphersuitesDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterMasterTlsCiphersuitesDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitMasterTlsCiphersuitesDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitMasterTlsCiphersuitesDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterTlsCiphersuitesDefContext masterTlsCiphersuitesDef() throws RecognitionException {
		MasterTlsCiphersuitesDefContext _localctx = new MasterTlsCiphersuitesDefContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_masterTlsCiphersuitesDef);
		try {
			setState(3950);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3948);
				textStringNoLinebreak();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3949);
				match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MasterFileDefContext extends ParserRuleContext {
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public MasterFileDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_masterFileDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterMasterFileDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitMasterFileDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitMasterFileDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MasterFileDefContext masterFileDef() throws RecognitionException {
		MasterFileDefContext _localctx = new MasterFileDefContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_masterFileDef);
		try {
			setState(3964);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER_LOG_FILE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3952);
				match(MASTER_LOG_FILE_SYMBOL);
				setState(3953);
				match(EQUAL_OPERATOR);
				setState(3954);
				textStringNoLinebreak();
				}
				break;
			case MASTER_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3955);
				match(MASTER_LOG_POS_SYMBOL);
				setState(3956);
				match(EQUAL_OPERATOR);
				setState(3957);
				ulonglong_number();
				}
				break;
			case RELAY_LOG_FILE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3958);
				match(RELAY_LOG_FILE_SYMBOL);
				setState(3959);
				match(EQUAL_OPERATOR);
				setState(3960);
				textStringNoLinebreak();
				}
				break;
			case RELAY_LOG_POS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3961);
				match(RELAY_LOG_POS_SYMBOL);
				setState(3962);
				match(EQUAL_OPERATOR);
				setState(3963);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerIdListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ServerIdListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverIdList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterServerIdList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitServerIdList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitServerIdList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerIdListContext serverIdList() throws RecognitionException {
		ServerIdListContext _localctx = new ServerIdListContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_serverIdList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3966);
			match(OPEN_PAR_SYMBOL);
			setState(3975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (HEX_NUMBER - 747)) | (1L << (DECIMAL_NUMBER - 747)) | (1L << (FLOAT_NUMBER - 747)))) != 0)) {
				{
				setState(3967);
				ulong_number();
				setState(3972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(3968);
					match(COMMA_SYMBOL);
					setState(3969);
					ulong_number();
					}
					}
					setState(3974);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3977);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChangeReplicationContext extends ParserRuleContext {
		public TerminalNode CHANGE_SYMBOL() { return getToken(MySQLParser.CHANGE_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MySQLParser.FILTER_SYMBOL, 0); }
		public List<FilterDefinitionContext> filterDefinition() {
			return getRuleContexts(FilterDefinitionContext.class);
		}
		public FilterDefinitionContext filterDefinition(int i) {
			return getRuleContext(FilterDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public ChangeReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changeReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterChangeReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitChangeReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitChangeReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangeReplicationContext changeReplication() throws RecognitionException {
		ChangeReplicationContext _localctx = new ChangeReplicationContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_changeReplication);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3979);
			match(CHANGE_SYMBOL);
			setState(3980);
			match(REPLICATION_SYMBOL);
			setState(3981);
			match(FILTER_SYMBOL);
			setState(3982);
			filterDefinition();
			setState(3987);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,451,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3983);
					match(COMMA_SYMBOL);
					setState(3984);
					filterDefinition();
					}
					} 
				}
				setState(3989);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,451,_ctx);
			}
			setState(3992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				setState(3990);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(3991);
				channel();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterDefinitionContext extends ParserRuleContext {
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FilterDbListContext filterDbList() {
			return getRuleContext(FilterDbListContext.class,0);
		}
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public FilterTableListContext filterTableList() {
			return getRuleContext(FilterTableListContext.class,0);
		}
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public FilterStringListContext filterStringList() {
			return getRuleContext(FilterStringListContext.class,0);
		}
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public FilterDbPairListContext filterDbPairList() {
			return getRuleContext(FilterDbPairListContext.class,0);
		}
		public FilterDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterDefinitionContext filterDefinition() throws RecognitionException {
		FilterDefinitionContext _localctx = new FilterDefinitionContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_filterDefinition);
		int _la;
		try {
			setState(4043);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATE_DO_DB_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3994);
				match(REPLICATE_DO_DB_SYMBOL);
				setState(3995);
				match(EQUAL_OPERATOR);
				setState(3996);
				match(OPEN_PAR_SYMBOL);
				setState(3998);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
				case 1:
					{
					setState(3997);
					filterDbList();
					}
					break;
				}
				setState(4000);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_DB_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4001);
				match(REPLICATE_IGNORE_DB_SYMBOL);
				setState(4002);
				match(EQUAL_OPERATOR);
				setState(4003);
				match(OPEN_PAR_SYMBOL);
				setState(4005);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
				case 1:
					{
					setState(4004);
					filterDbList();
					}
					break;
				}
				setState(4007);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_DO_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4008);
				match(REPLICATE_DO_TABLE_SYMBOL);
				setState(4009);
				match(EQUAL_OPERATOR);
				setState(4010);
				match(OPEN_PAR_SYMBOL);
				setState(4012);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
				case 1:
					{
					setState(4011);
					filterTableList();
					}
					break;
				}
				setState(4014);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4015);
				match(REPLICATE_IGNORE_TABLE_SYMBOL);
				setState(4016);
				match(EQUAL_OPERATOR);
				setState(4017);
				match(OPEN_PAR_SYMBOL);
				setState(4019);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
				case 1:
					{
					setState(4018);
					filterTableList();
					}
					break;
				}
				setState(4021);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_DO_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4022);
				match(REPLICATE_WILD_DO_TABLE_SYMBOL);
				setState(4023);
				match(EQUAL_OPERATOR);
				setState(4024);
				match(OPEN_PAR_SYMBOL);
				setState(4026);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
				case 1:
					{
					setState(4025);
					filterStringList();
					}
					break;
				}
				setState(4028);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(4029);
				match(REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
				setState(4030);
				match(EQUAL_OPERATOR);
				setState(4031);
				match(OPEN_PAR_SYMBOL);
				setState(4033);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
				case 1:
					{
					setState(4032);
					filterStringList();
					}
					break;
				}
				setState(4035);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_REWRITE_DB_SYMBOL:
				enterOuterAlt(_localctx, 7);
				{
				setState(4036);
				match(REPLICATE_REWRITE_DB_SYMBOL);
				setState(4037);
				match(EQUAL_OPERATOR);
				setState(4038);
				match(OPEN_PAR_SYMBOL);
				setState(4040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					setState(4039);
					filterDbPairList();
					}
				}

				setState(4042);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterDbListContext extends ParserRuleContext {
		public List<SchemaRefContext> schemaRef() {
			return getRuleContexts(SchemaRefContext.class);
		}
		public SchemaRefContext schemaRef(int i) {
			return getRuleContext(SchemaRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDbList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterDbList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterDbList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterDbList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterDbListContext filterDbList() throws RecognitionException {
		FilterDbListContext _localctx = new FilterDbListContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_filterDbList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4045);
			schemaRef();
			setState(4050);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4046);
				match(COMMA_SYMBOL);
				setState(4047);
				schemaRef();
				}
				}
				setState(4052);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterTableListContext extends ParserRuleContext {
		public List<FilterTableRefContext> filterTableRef() {
			return getRuleContexts(FilterTableRefContext.class);
		}
		public FilterTableRefContext filterTableRef(int i) {
			return getRuleContext(FilterTableRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterTableListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterTableList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterTableList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterTableList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterTableList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterTableListContext filterTableList() throws RecognitionException {
		FilterTableListContext _localctx = new FilterTableListContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_filterTableList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4053);
			filterTableRef();
			setState(4058);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4054);
				match(COMMA_SYMBOL);
				setState(4055);
				filterTableRef();
				}
				}
				setState(4060);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterStringListContext extends ParserRuleContext {
		public List<FilterWildDbTableStringContext> filterWildDbTableString() {
			return getRuleContexts(FilterWildDbTableStringContext.class);
		}
		public FilterWildDbTableStringContext filterWildDbTableString(int i) {
			return getRuleContext(FilterWildDbTableStringContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterStringListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterStringList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterStringList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterStringList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterStringList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterStringListContext filterStringList() throws RecognitionException {
		FilterStringListContext _localctx = new FilterStringListContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_filterStringList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4061);
			filterWildDbTableString();
			setState(4066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4062);
				match(COMMA_SYMBOL);
				setState(4063);
				filterWildDbTableString();
				}
				}
				setState(4068);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterWildDbTableStringContext extends ParserRuleContext {
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public FilterWildDbTableStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterWildDbTableString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterWildDbTableString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterWildDbTableString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterWildDbTableString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterWildDbTableStringContext filterWildDbTableString() throws RecognitionException {
		FilterWildDbTableStringContext _localctx = new FilterWildDbTableStringContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_filterWildDbTableString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4069);
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterDbPairListContext extends ParserRuleContext {
		public List<SchemaIdentifierPairContext> schemaIdentifierPair() {
			return getRuleContexts(SchemaIdentifierPairContext.class);
		}
		public SchemaIdentifierPairContext schemaIdentifierPair(int i) {
			return getRuleContext(SchemaIdentifierPairContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public FilterDbPairListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterDbPairList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterDbPairList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterDbPairList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterDbPairList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterDbPairListContext filterDbPairList() throws RecognitionException {
		FilterDbPairListContext _localctx = new FilterDbPairListContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_filterDbPairList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4071);
			schemaIdentifierPair();
			setState(4076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4072);
				match(COMMA_SYMBOL);
				setState(4073);
				schemaIdentifierPair();
				}
				}
				setState(4078);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveContext extends ParserRuleContext {
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public SlaveConnectionOptionsContext slaveConnectionOptions() {
			return getRuleContext(SlaveConnectionOptionsContext.class,0);
		}
		public SlaveThreadOptionsContext slaveThreadOptions() {
			return getRuleContext(SlaveThreadOptionsContext.class,0);
		}
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public SlaveUntilOptionsContext slaveUntilOptions() {
			return getRuleContext(SlaveUntilOptionsContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public SlaveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slave; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSlave(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSlave(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSlave(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SlaveContext slave() throws RecognitionException {
		SlaveContext _localctx = new SlaveContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_slave);
		try {
			setState(4100);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4079);
				match(START_SYMBOL);
				setState(4080);
				match(SLAVE_SYMBOL);
				setState(4082);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
				case 1:
					{
					setState(4081);
					slaveThreadOptions();
					}
					break;
				}
				setState(4086);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
				case 1:
					{
					setState(4084);
					match(UNTIL_SYMBOL);
					setState(4085);
					slaveUntilOptions();
					}
					break;
				}
				setState(4088);
				slaveConnectionOptions();
				setState(4090);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
				case 1:
					{
					setState(4089);
					channel();
					}
					break;
				}
				}
				break;
			case STOP_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4092);
				match(STOP_SYMBOL);
				setState(4093);
				match(SLAVE_SYMBOL);
				setState(4095);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
				case 1:
					{
					setState(4094);
					slaveThreadOptions();
					}
					break;
				}
				setState(4098);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
				case 1:
					{
					setState(4097);
					channel();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveUntilOptionsContext extends ParserRuleContext {
		public List<MasterFileDefContext> masterFileDef() {
			return getRuleContexts(MasterFileDefContext.class);
		}
		public MasterFileDefContext masterFileDef(int i) {
			return getRuleContext(MasterFileDefContext.class,i);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SlaveUntilOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveUntilOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSlaveUntilOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSlaveUntilOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSlaveUntilOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SlaveUntilOptionsContext slaveUntilOptions() throws RecognitionException {
		SlaveUntilOptionsContext _localctx = new SlaveUntilOptionsContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_slaveUntilOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				setState(4102);
				masterFileDef();
				}
				break;
			case 2:
				{
				setState(4103);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(4104);
				_la = _input.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS_SYMBOL || _la==SQL_BEFORE_GTIDS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4105);
				match(EQUAL_OPERATOR);
				setState(4106);
				textString();
				}
				break;
			case 3:
				{
				setState(4107);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(4108);
				match(SQL_AFTER_MTS_GAPS_SYMBOL);
				}
				break;
			}
			setState(4115);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,472,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4111);
					match(COMMA_SYMBOL);
					setState(4112);
					masterFileDef();
					}
					} 
				}
				setState(4117);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,472,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveConnectionOptionsContext extends ParserRuleContext {
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public List<TerminalNode> EQUAL_OPERATOR() { return getTokens(MySQLParser.EQUAL_OPERATOR); }
		public TerminalNode EQUAL_OPERATOR(int i) {
			return getToken(MySQLParser.EQUAL_OPERATOR, i);
		}
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public SlaveConnectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveConnectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSlaveConnectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSlaveConnectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSlaveConnectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SlaveConnectionOptionsContext slaveConnectionOptions() throws RecognitionException {
		SlaveConnectionOptionsContext _localctx = new SlaveConnectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_slaveConnectionOptions);
		try {
			setState(4140);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4118);
				if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
				setState(4122);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
				case 1:
					{
					setState(4119);
					match(USER_SYMBOL);
					setState(4120);
					match(EQUAL_OPERATOR);
					setState(4121);
					textString();
					}
					break;
				}
				setState(4127);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					setState(4124);
					match(PASSWORD_SYMBOL);
					setState(4125);
					match(EQUAL_OPERATOR);
					setState(4126);
					textString();
					}
					break;
				}
				setState(4132);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
				case 1:
					{
					setState(4129);
					match(DEFAULT_AUTH_SYMBOL);
					setState(4130);
					match(EQUAL_OPERATOR);
					setState(4131);
					textString();
					}
					break;
				}
				setState(4137);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
				case 1:
					{
					setState(4134);
					match(PLUGIN_DIR_SYMBOL);
					setState(4135);
					match(EQUAL_OPERATOR);
					setState(4136);
					textString();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveThreadOptionsContext extends ParserRuleContext {
		public List<SlaveThreadOptionContext> slaveThreadOption() {
			return getRuleContexts(SlaveThreadOptionContext.class);
		}
		public SlaveThreadOptionContext slaveThreadOption(int i) {
			return getRuleContext(SlaveThreadOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SlaveThreadOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveThreadOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSlaveThreadOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSlaveThreadOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSlaveThreadOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SlaveThreadOptionsContext slaveThreadOptions() throws RecognitionException {
		SlaveThreadOptionsContext _localctx = new SlaveThreadOptionsContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_slaveThreadOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4142);
			slaveThreadOption();
			setState(4147);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,478,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4143);
					match(COMMA_SYMBOL);
					setState(4144);
					slaveThreadOption();
					}
					} 
				}
				setState(4149);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,478,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SlaveThreadOptionContext extends ParserRuleContext {
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public SlaveThreadOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_slaveThreadOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSlaveThreadOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSlaveThreadOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSlaveThreadOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SlaveThreadOptionContext slaveThreadOption() throws RecognitionException {
		SlaveThreadOptionContext _localctx = new SlaveThreadOptionContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_slaveThreadOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4150);
			_la = _input.LA(1);
			if ( !(_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupReplicationContext extends ParserRuleContext {
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public GroupReplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupReplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGroupReplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGroupReplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGroupReplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupReplicationContext groupReplication() throws RecognitionException {
		GroupReplicationContext _localctx = new GroupReplicationContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_groupReplication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4152);
			_la = _input.LA(1);
			if ( !(_la==START_SYMBOL || _la==STOP_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4153);
			match(GROUP_REPLICATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparedStatementContext extends ParserRuleContext {
		public Token type;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public PreparedStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparedStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPreparedStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPreparedStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPreparedStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparedStatementContext preparedStatement() throws RecognitionException {
		PreparedStatementContext _localctx = new PreparedStatementContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_preparedStatement);
		int _la;
		try {
			setState(4166);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PREPARE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4155);
				((PreparedStatementContext)_localctx).type = match(PREPARE_SYMBOL);
				setState(4156);
				identifier();
				setState(4157);
				match(FROM_SYMBOL);
				setState(4160);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
				case 1:
					{
					setState(4158);
					textLiteral();
					}
					break;
				case 2:
					{
					setState(4159);
					userVariable();
					}
					break;
				}
				}
				break;
			case EXECUTE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4162);
				executeStatement();
				}
				break;
			case DEALLOCATE_SYMBOL:
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4163);
				((PreparedStatementContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEALLOCATE_SYMBOL || _la==DROP_SYMBOL) ) {
					((PreparedStatementContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4164);
				match(PREPARE_SYMBOL);
				setState(4165);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public ExecuteVarListContext executeVarList() {
			return getRuleContext(ExecuteVarListContext.class,0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExecuteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4168);
			match(EXECUTE_SYMBOL);
			setState(4169);
			identifier();
			setState(4172);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING_SYMBOL) {
				{
				setState(4170);
				match(USING_SYMBOL);
				setState(4171);
				executeVarList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteVarListContext extends ParserRuleContext {
		public List<UserVariableContext> userVariable() {
			return getRuleContexts(UserVariableContext.class);
		}
		public UserVariableContext userVariable(int i) {
			return getRuleContext(UserVariableContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExecuteVarListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeVarList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExecuteVarList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExecuteVarList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExecuteVarList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteVarListContext executeVarList() throws RecognitionException {
		ExecuteVarListContext _localctx = new ExecuteVarListContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_executeVarList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4174);
			userVariable();
			setState(4179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4175);
				match(COMMA_SYMBOL);
				setState(4176);
				userVariable();
				}
				}
				setState(4181);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneStatementContext extends ParserRuleContext {
		public TerminalNode CLONE_SYMBOL() { return getToken(MySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode REMOTE_SYMBOL() { return getToken(MySQLParser.REMOTE_SYMBOL, 0); }
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode COLON_SYMBOL() { return getToken(MySQLParser.COLON_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public DataDirSSLContext dataDirSSL() {
			return getRuleContext(DataDirSSLContext.class,0);
		}
		public CloneStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCloneStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCloneStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCloneStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneStatementContext cloneStatement() throws RecognitionException {
		CloneStatementContext _localctx = new CloneStatementContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_cloneStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4182);
			match(CLONE_SYMBOL);
			setState(4207);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				setState(4183);
				match(LOCAL_SYMBOL);
				setState(4184);
				match(DATA_SYMBOL);
				setState(4185);
				match(DIRECTORY_SYMBOL);
				setState(4187);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
				case 1:
					{
					setState(4186);
					equal();
					}
					break;
				}
				setState(4189);
				textStringLiteral();
				}
				break;
			case 2:
				{
				setState(4190);
				match(REMOTE_SYMBOL);
				setState(4193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(4191);
					match(FOR_SYMBOL);
					setState(4192);
					match(REPLICATION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				{
				setState(4195);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(4196);
				match(INSTANCE_SYMBOL);
				setState(4197);
				match(FROM_SYMBOL);
				setState(4198);
				user();
				setState(4199);
				match(COLON_SYMBOL);
				setState(4200);
				ulong_number();
				setState(4201);
				match(IDENTIFIED_SYMBOL);
				setState(4202);
				match(BY_SYMBOL);
				setState(4203);
				textStringLiteral();
				setState(4205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATA_SYMBOL || _la==REQUIRE_SYMBOL) {
					{
					setState(4204);
					dataDirSSL();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataDirSSLContext extends ParserRuleContext {
		public SslContext ssl() {
			return getRuleContext(SslContext.class,0);
		}
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public DataDirSSLContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataDirSSL; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDataDirSSL(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDataDirSSL(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDataDirSSL(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataDirSSLContext dataDirSSL() throws RecognitionException {
		DataDirSSLContext _localctx = new DataDirSSLContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_dataDirSSL);
		int _la;
		try {
			setState(4219);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REQUIRE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4209);
				ssl();
				}
				break;
			case DATA_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4210);
				match(DATA_SYMBOL);
				setState(4211);
				match(DIRECTORY_SYMBOL);
				setState(4213);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
				case 1:
					{
					setState(4212);
					equal();
					}
					break;
				}
				setState(4215);
				textStringLiteral();
				setState(4217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					setState(4216);
					ssl();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SslContext extends ParserRuleContext {
		public TerminalNode REQUIRE_SYMBOL() { return getToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public TerminalNode SSL_SYMBOL() { return getToken(MySQLParser.SSL_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public SslContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ssl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSsl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSsl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSsl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SslContext ssl() throws RecognitionException {
		SslContext _localctx = new SslContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_ssl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4221);
			match(REQUIRE_SYMBOL);
			setState(4223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO_SYMBOL) {
				{
				setState(4222);
				match(NO_SYMBOL);
				}
			}

			setState(4225);
			match(SSL_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccountManagementStatementContext extends ParserRuleContext {
		public AlterUserContext alterUser() {
			return getRuleContext(AlterUserContext.class,0);
		}
		public CreateUserContext createUser() {
			return getRuleContext(CreateUserContext.class,0);
		}
		public DropUserContext dropUser() {
			return getRuleContext(DropUserContext.class,0);
		}
		public GrantContext grant() {
			return getRuleContext(GrantContext.class,0);
		}
		public RenameUserContext renameUser() {
			return getRuleContext(RenameUserContext.class,0);
		}
		public RevokeContext revoke() {
			return getRuleContext(RevokeContext.class,0);
		}
		public SetRoleContext setRole() {
			return getRuleContext(SetRoleContext.class,0);
		}
		public AccountManagementStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accountManagementStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAccountManagementStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAccountManagementStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAccountManagementStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccountManagementStatementContext accountManagementStatement() throws RecognitionException {
		AccountManagementStatementContext _localctx = new AccountManagementStatementContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_accountManagementStatement);
		try {
			setState(4236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4227);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(4228);
				alterUser();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4229);
				createUser();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4230);
				dropUser();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4231);
				grant();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4232);
				renameUser();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4233);
				revoke();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4234);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4235);
				setRole();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public AlterUserTailContext alterUserTail() {
			return getRuleContext(AlterUserTailContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserContext alterUser() throws RecognitionException {
		AlterUserContext _localctx = new AlterUserContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_alterUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4238);
			match(ALTER_SYMBOL);
			setState(4239);
			match(USER_SYMBOL);
			setState(4242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				setState(4240);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4241);
				ifExists();
				}
				break;
			}
			setState(4244);
			alterUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserTailContext extends ParserRuleContext {
		public CreateUserTailContext createUserTail() {
			return getRuleContext(CreateUserTailContext.class,0);
		}
		public CreateUserListContext createUserList() {
			return getRuleContext(CreateUserListContext.class,0);
		}
		public AlterUserListContext alterUserList() {
			return getRuleContext(AlterUserListContext.class,0);
		}
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public ReplacePasswordContext replacePassword() {
			return getRuleContext(ReplacePasswordContext.class,0);
		}
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return getRuleContext(RetainCurrentPasswordContext.class,0);
		}
		public DiscardOldPasswordContext discardOldPassword() {
			return getRuleContext(DiscardOldPasswordContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode RANDOM_SYMBOL() { return getToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode FAILED_LOGIN_ATTEMPTS_SYMBOL() { return getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode PASSWORD_LOCK_TIME_SYMBOL() { return getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0); }
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public AlterUserTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterUserTail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterUserTail(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterUserTail(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserTailContext alterUserTail() throws RecognitionException {
		AlterUserTailContext _localctx = new AlterUserTailContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_alterUserTail);
		int _la;
		try {
			setState(4300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4250);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
				case 1:
					{
					setState(4246);
					if (!(serverVersion < 80014)) throw new FailedPredicateException(this, "serverVersion < 80014");
					setState(4247);
					createUserList();
					}
					break;
				case 2:
					{
					setState(4248);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(4249);
					alterUserList();
					}
					break;
				}
				setState(4252);
				createUserTail();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4254);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4255);
				user();
				setState(4256);
				match(IDENTIFIED_SYMBOL);
				setState(4257);
				match(BY_SYMBOL);
				setState(4258);
				textString();
				setState(4261);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
				case 1:
					{
					setState(4259);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(4260);
					replacePassword();
					}
					break;
				}
				setState(4265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
				case 1:
					{
					setState(4263);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(4264);
					retainCurrentPassword();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4267);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(4268);
				user();
				setState(4269);
				discardOldPassword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4271);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4272);
				user();
				setState(4273);
				match(DEFAULT_SYMBOL);
				setState(4274);
				match(ROLE_SYMBOL);
				setState(4278);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
				case 1:
					{
					setState(4275);
					match(ALL_SYMBOL);
					}
					break;
				case 2:
					{
					setState(4276);
					match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					setState(4277);
					roleList();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4280);
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				setState(4281);
				user();
				setState(4282);
				match(IDENTIFIED_SYMBOL);
				setState(4285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4283);
					match(WITH_SYMBOL);
					setState(4284);
					textOrIdentifier();
					}
				}

				setState(4287);
				match(BY_SYMBOL);
				setState(4288);
				match(RANDOM_SYMBOL);
				setState(4289);
				match(PASSWORD_SYMBOL);
				setState(4291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETAIN_SYMBOL) {
					{
					setState(4290);
					retainCurrentPassword();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4293);
				match(FAILED_LOGIN_ATTEMPTS_SYMBOL);
				setState(4294);
				real_ulong_number();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4295);
				match(PASSWORD_LOCK_TIME_SYMBOL);
				setState(4298);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INT_NUMBER:
				case LONG_NUMBER:
				case ULONGLONG_NUMBER:
				case HEX_NUMBER:
					{
					setState(4296);
					real_ulong_number();
					}
					break;
				case UNBOUNDED_SYMBOL:
					{
					setState(4297);
					match(UNBOUNDED_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserFunctionContext extends ParserRuleContext {
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public UserFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUserFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUserFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUserFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserFunctionContext userFunction() throws RecognitionException {
		UserFunctionContext _localctx = new UserFunctionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_userFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4302);
			match(USER_SYMBOL);
			setState(4303);
			parentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public CreateUserListContext createUserList() {
			return getRuleContext(CreateUserListContext.class,0);
		}
		public DefaultRoleClauseContext defaultRoleClause() {
			return getRuleContext(DefaultRoleClauseContext.class,0);
		}
		public CreateUserTailContext createUserTail() {
			return getRuleContext(CreateUserTailContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserContext createUser() throws RecognitionException {
		CreateUserContext _localctx = new CreateUserContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_createUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4305);
			match(CREATE_SYMBOL);
			setState(4306);
			match(USER_SYMBOL);
			setState(4310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				{
				setState(4307);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4308);
				ifNotExists();
				}
				break;
			case 2:
				{
				}
				break;
			}
			setState(4312);
			createUserList();
			setState(4313);
			defaultRoleClause();
			setState(4314);
			createUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserTailContext extends ParserRuleContext {
		public RequireClauseContext requireClause() {
			return getRuleContext(RequireClauseContext.class,0);
		}
		public ConnectOptionsContext connectOptions() {
			return getRuleContext(ConnectOptionsContext.class,0);
		}
		public List<AccountLockPasswordExpireOptionsContext> accountLockPasswordExpireOptions() {
			return getRuleContexts(AccountLockPasswordExpireOptionsContext.class);
		}
		public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions(int i) {
			return getRuleContext(AccountLockPasswordExpireOptionsContext.class,i);
		}
		public CreateUserTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateUserTail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateUserTail(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateUserTail(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserTailContext createUserTail() throws RecognitionException {
		CreateUserTailContext _localctx = new CreateUserTailContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_createUserTail);
		int _la;
		try {
			setState(4330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4316);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4318);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					setState(4317);
					requireClause();
					}
				}

				setState(4321);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4320);
					connectOptions();
					}
				}

				setState(4326);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ACCOUNT_SYMBOL || _la==PASSWORD_SYMBOL) {
					{
					{
					setState(4323);
					accountLockPasswordExpireOptions();
					}
					}
					setState(4328);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultRoleClauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public DefaultRoleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultRoleClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDefaultRoleClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDefaultRoleClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDefaultRoleClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultRoleClauseContext defaultRoleClause() throws RecognitionException {
		DefaultRoleClauseContext _localctx = new DefaultRoleClauseContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_defaultRoleClause);
		try {
			setState(4339);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4332);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4336);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
				case 1:
					{
					setState(4333);
					match(DEFAULT_SYMBOL);
					setState(4334);
					match(ROLE_SYMBOL);
					setState(4335);
					roleList();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RequireClauseContext extends ParserRuleContext {
		public Token option;
		public TerminalNode REQUIRE_SYMBOL() { return getToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public RequireListContext requireList() {
			return getRuleContext(RequireListContext.class,0);
		}
		public TerminalNode SSL_SYMBOL() { return getToken(MySQLParser.SSL_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MySQLParser.X509_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public RequireClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRequireClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRequireClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRequireClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RequireClauseContext requireClause() throws RecognitionException {
		RequireClauseContext _localctx = new RequireClauseContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_requireClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4341);
			match(REQUIRE_SYMBOL);
			setState(4344);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CIPHER_SYMBOL:
			case ISSUER_SYMBOL:
			case SUBJECT_SYMBOL:
				{
				setState(4342);
				requireList();
				}
				break;
			case NONE_SYMBOL:
			case SSL_SYMBOL:
			case X509_SYMBOL:
				{
				setState(4343);
				((RequireClauseContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==SSL_SYMBOL || _la==X509_SYMBOL) ) {
					((RequireClauseContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectOptionsContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public List<TerminalNode> MAX_QUERIES_PER_HOUR_SYMBOL() { return getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
		}
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public List<TerminalNode> MAX_UPDATES_PER_HOUR_SYMBOL() { return getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
		}
		public List<TerminalNode> MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
		}
		public List<TerminalNode> MAX_USER_CONNECTIONS_SYMBOL() { return getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL(int i) {
			return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
		}
		public ConnectOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterConnectOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitConnectOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitConnectOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectOptionsContext connectOptions() throws RecognitionException {
		ConnectOptionsContext _localctx = new ConnectOptionsContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_connectOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4346);
			match(WITH_SYMBOL);
			setState(4355); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(4355);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MAX_QUERIES_PER_HOUR_SYMBOL:
					{
					setState(4347);
					match(MAX_QUERIES_PER_HOUR_SYMBOL);
					setState(4348);
					ulong_number();
					}
					break;
				case MAX_UPDATES_PER_HOUR_SYMBOL:
					{
					setState(4349);
					match(MAX_UPDATES_PER_HOUR_SYMBOL);
					setState(4350);
					ulong_number();
					}
					break;
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
					{
					setState(4351);
					match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
					setState(4352);
					ulong_number();
					}
					break;
				case MAX_USER_CONNECTIONS_SYMBOL:
					{
					setState(4353);
					match(MAX_USER_CONNECTIONS_SYMBOL);
					setState(4354);
					ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4357); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 321)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccountLockPasswordExpireOptionsContext extends ParserRuleContext {
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode UNLOCK_SYMBOL() { return getToken(MySQLParser.UNLOCK_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode EXPIRE_SYMBOL() { return getToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MySQLParser.REUSE_SYMBOL, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public TerminalNode REQUIRE_SYMBOL() { return getToken(MySQLParser.REQUIRE_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode OPTIONAL_SYMBOL() { return getToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public AccountLockPasswordExpireOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accountLockPasswordExpireOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAccountLockPasswordExpireOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAccountLockPasswordExpireOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAccountLockPasswordExpireOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions() throws RecognitionException {
		AccountLockPasswordExpireOptionsContext _localctx = new AccountLockPasswordExpireOptionsContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_accountLockPasswordExpireOptions);
		int _la;
		try {
			setState(4392);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCOUNT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4359);
				match(ACCOUNT_SYMBOL);
				setState(4360);
				_la = _input.LA(1);
				if ( !(_la==LOCK_SYMBOL || _la==UNLOCK_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case PASSWORD_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4361);
				match(PASSWORD_SYMBOL);
				setState(4390);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
				case 1:
					{
					setState(4362);
					match(EXPIRE_SYMBOL);
					setState(4369);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INTERVAL_SYMBOL:
						{
						setState(4363);
						match(INTERVAL_SYMBOL);
						setState(4364);
						real_ulong_number();
						setState(4365);
						match(DAY_SYMBOL);
						}
						break;
					case NEVER_SYMBOL:
						{
						setState(4367);
						match(NEVER_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						setState(4368);
						match(DEFAULT_SYMBOL);
						}
						break;
					case EOF:
					case ACCOUNT_SYMBOL:
					case PASSWORD_SYMBOL:
					case SEMICOLON_SYMBOL:
						break;
					default:
						break;
					}
					}
					break;
				case 2:
					{
					setState(4371);
					match(HISTORY_SYMBOL);
					setState(4374);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						setState(4372);
						real_ulong_number();
						}
						break;
					case DEFAULT_SYMBOL:
						{
						setState(4373);
						match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 3:
					{
					setState(4376);
					match(REUSE_SYMBOL);
					setState(4377);
					match(INTERVAL_SYMBOL);
					setState(4382);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						setState(4378);
						real_ulong_number();
						setState(4379);
						match(DAY_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						setState(4381);
						match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 4:
					{
					setState(4384);
					if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
					setState(4385);
					match(REQUIRE_SYMBOL);
					setState(4386);
					match(CURRENT_SYMBOL);
					setState(4388);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) {
						{
						setState(4387);
						_la = _input.LA(1);
						if ( !(_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserContext dropUser() throws RecognitionException {
		DropUserContext _localctx = new DropUserContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_dropUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4394);
			match(DROP_SYMBOL);
			setState(4395);
			match(USER_SYMBOL);
			setState(4398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
			case 1:
				{
				setState(4396);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(4397);
				ifExists();
				}
				break;
			}
			setState(4400);
			userList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantContext extends ParserRuleContext {
		public List<TerminalNode> GRANT_SYMBOL() { return getTokens(MySQLParser.GRANT_SYMBOL); }
		public TerminalNode GRANT_SYMBOL(int i) {
			return getToken(MySQLParser.GRANT_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return getRuleContext(RoleOrPrivilegesListContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public GrantTargetListContext grantTargetList() {
			return getRuleContext(GrantTargetListContext.class,0);
		}
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ADMIN_SYMBOL() { return getToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public VersionedRequireClauseContext versionedRequireClause() {
			return getRuleContext(VersionedRequireClauseContext.class,0);
		}
		public GrantOptionsContext grantOptions() {
			return getRuleContext(GrantOptionsContext.class,0);
		}
		public GrantAsContext grantAs() {
			return getRuleContext(GrantAsContext.class,0);
		}
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public GrantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGrant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGrant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGrant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantContext grant() throws RecognitionException {
		GrantContext _localctx = new GrantContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_grant);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4402);
			match(GRANT_SYMBOL);
			setState(4445);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				{
				setState(4403);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4404);
				roleOrPrivilegesList();
				setState(4405);
				match(TO_SYMBOL);
				setState(4406);
				userList();
				setState(4410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4407);
					match(WITH_SYMBOL);
					setState(4408);
					match(ADMIN_SYMBOL);
					setState(4409);
					match(OPTION_SYMBOL);
					}
				}

				}
				break;
			case 2:
				{
				setState(4417);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
				case 1:
					{
					setState(4412);
					roleOrPrivilegesList();
					}
					break;
				case 2:
					{
					setState(4413);
					match(ALL_SYMBOL);
					setState(4415);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES_SYMBOL) {
						{
						setState(4414);
						match(PRIVILEGES_SYMBOL);
						}
					}

					}
					break;
				}
				setState(4419);
				match(ON_SYMBOL);
				setState(4421);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
				case 1:
					{
					setState(4420);
					aclType();
					}
					break;
				}
				setState(4423);
				grantIdentifier();
				setState(4424);
				match(TO_SYMBOL);
				setState(4425);
				grantTargetList();
				setState(4427);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
				case 1:
					{
					setState(4426);
					versionedRequireClause();
					}
					break;
				}
				setState(4430);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
				case 1:
					{
					setState(4429);
					grantOptions();
					}
					break;
				}
				setState(4433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS_SYMBOL) {
					{
					setState(4432);
					grantAs();
					}
				}

				}
				break;
			case 3:
				{
				setState(4435);
				match(PROXY_SYMBOL);
				setState(4436);
				match(ON_SYMBOL);
				setState(4437);
				user();
				setState(4438);
				match(TO_SYMBOL);
				setState(4439);
				grantTargetList();
				setState(4443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4440);
					match(WITH_SYMBOL);
					setState(4441);
					match(GRANT_SYMBOL);
					setState(4442);
					match(OPTION_SYMBOL);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantTargetListContext extends ParserRuleContext {
		public CreateUserListContext createUserList() {
			return getRuleContext(CreateUserListContext.class,0);
		}
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public GrantTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantTargetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGrantTargetList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGrantTargetList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGrantTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantTargetListContext grantTargetList() throws RecognitionException {
		GrantTargetListContext _localctx = new GrantTargetListContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_grantTargetList);
		try {
			setState(4451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4447);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(4448);
				createUserList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4449);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(4450);
				userList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantOptionsContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public List<GrantOptionContext> grantOption() {
			return getRuleContexts(GrantOptionContext.class);
		}
		public GrantOptionContext grantOption(int i) {
			return getRuleContext(GrantOptionContext.class,i);
		}
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public GrantOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGrantOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGrantOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGrantOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantOptionsContext grantOptions() throws RecognitionException {
		GrantOptionsContext _localctx = new GrantOptionsContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_grantOptions);
		int _la;
		try {
			setState(4464);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4453);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(4454);
				match(WITH_SYMBOL);
				setState(4456); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4455);
					grantOption();
					}
					}
					setState(4458); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==GRANT_SYMBOL || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 321)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 321)))) != 0) );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4460);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(4461);
				match(WITH_SYMBOL);
				setState(4462);
				match(GRANT_SYMBOL);
				setState(4463);
				match(OPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExceptRoleListContext extends ParserRuleContext {
		public TerminalNode EXCEPT_SYMBOL() { return getToken(MySQLParser.EXCEPT_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public ExceptRoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptRoleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExceptRoleList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExceptRoleList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExceptRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExceptRoleListContext exceptRoleList() throws RecognitionException {
		ExceptRoleListContext _localctx = new ExceptRoleListContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_exceptRoleList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4466);
			match(EXCEPT_SYMBOL);
			setState(4467);
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithRolesContext extends ParserRuleContext {
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExceptRoleListContext exceptRoleList() {
			return getRuleContext(ExceptRoleListContext.class,0);
		}
		public WithRolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withRoles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWithRoles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWithRoles(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWithRoles(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithRolesContext withRoles() throws RecognitionException {
		WithRolesContext _localctx = new WithRolesContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_withRoles);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4469);
			match(WITH_SYMBOL);
			setState(4470);
			match(ROLE_SYMBOL);
			setState(4478);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				{
				setState(4471);
				roleList();
				}
				break;
			case 2:
				{
				setState(4472);
				match(ALL_SYMBOL);
				setState(4474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					setState(4473);
					exceptRoleList();
					}
				}

				}
				break;
			case 3:
				{
				setState(4476);
				match(NONE_SYMBOL);
				}
				break;
			case 4:
				{
				setState(4477);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantAsContext extends ParserRuleContext {
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public WithRolesContext withRoles() {
			return getRuleContext(WithRolesContext.class,0);
		}
		public GrantAsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantAs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGrantAs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGrantAs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGrantAs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantAsContext grantAs() throws RecognitionException {
		GrantAsContext _localctx = new GrantAsContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_grantAs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4480);
			match(AS_SYMBOL);
			setState(4481);
			match(USER_SYMBOL);
			setState(4483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				setState(4482);
				withRoles();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VersionedRequireClauseContext extends ParserRuleContext {
		public RequireClauseContext requireClause() {
			return getRuleContext(RequireClauseContext.class,0);
		}
		public VersionedRequireClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_versionedRequireClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterVersionedRequireClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitVersionedRequireClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitVersionedRequireClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VersionedRequireClauseContext versionedRequireClause() throws RecognitionException {
		VersionedRequireClauseContext _localctx = new VersionedRequireClauseContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_versionedRequireClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4485);
			if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
			setState(4486);
			requireClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameUserContext extends ParserRuleContext {
		public TerminalNode RENAME_SYMBOL() { return getToken(MySQLParser.RENAME_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public List<TerminalNode> TO_SYMBOL() { return getTokens(MySQLParser.TO_SYMBOL); }
		public TerminalNode TO_SYMBOL(int i) {
			return getToken(MySQLParser.TO_SYMBOL, i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RenameUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRenameUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRenameUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRenameUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameUserContext renameUser() throws RecognitionException {
		RenameUserContext _localctx = new RenameUserContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_renameUser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4488);
			match(RENAME_SYMBOL);
			setState(4489);
			match(USER_SYMBOL);
			setState(4490);
			user();
			setState(4491);
			match(TO_SYMBOL);
			setState(4492);
			user();
			setState(4500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4493);
				match(COMMA_SYMBOL);
				setState(4494);
				user();
				setState(4495);
				match(TO_SYMBOL);
				setState(4496);
				user();
				}
				}
				setState(4502);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeContext extends ParserRuleContext {
		public TerminalNode REVOKE_SYMBOL() { return getToken(MySQLParser.REVOKE_SYMBOL, 0); }
		public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return getRuleContext(RoleOrPrivilegesListContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public OnTypeToContext onTypeTo() {
			return getRuleContext(OnTypeToContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public RevokeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeContext revoke() throws RecognitionException {
		RevokeContext _localctx = new RevokeContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_revoke);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4503);
			match(REVOKE_SYMBOL);
			setState(4537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
			case 1:
				{
				setState(4504);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4505);
				roleOrPrivilegesList();
				setState(4506);
				match(FROM_SYMBOL);
				setState(4507);
				userList();
				}
				break;
			case 2:
				{
				setState(4509);
				roleOrPrivilegesList();
				setState(4510);
				onTypeTo();
				setState(4511);
				match(FROM_SYMBOL);
				setState(4512);
				userList();
				}
				break;
			case 3:
				{
				setState(4514);
				match(ALL_SYMBOL);
				setState(4516);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
				case 1:
					{
					setState(4515);
					match(PRIVILEGES_SYMBOL);
					}
					break;
				}
				setState(4529);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
				case 1:
					{
					setState(4518);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(4519);
					match(ON_SYMBOL);
					setState(4521);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
					case 1:
						{
						setState(4520);
						aclType();
						}
						break;
					}
					setState(4523);
					grantIdentifier();
					}
					break;
				case 2:
					{
					setState(4524);
					match(COMMA_SYMBOL);
					setState(4525);
					match(GRANT_SYMBOL);
					setState(4526);
					match(OPTION_SYMBOL);
					setState(4527);
					match(FROM_SYMBOL);
					setState(4528);
					userList();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(4531);
				match(PROXY_SYMBOL);
				setState(4532);
				match(ON_SYMBOL);
				setState(4533);
				user();
				setState(4534);
				match(FROM_SYMBOL);
				setState(4535);
				userList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnTypeToContext extends ParserRuleContext {
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public GrantIdentifierContext grantIdentifier() {
			return getRuleContext(GrantIdentifierContext.class,0);
		}
		public AclTypeContext aclType() {
			return getRuleContext(AclTypeContext.class,0);
		}
		public OnTypeToContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onTypeTo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOnTypeTo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOnTypeTo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOnTypeTo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnTypeToContext onTypeTo() throws RecognitionException {
		OnTypeToContext _localctx = new OnTypeToContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_onTypeTo);
		int _la;
		try {
			setState(4553);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4539);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(4540);
				match(ON_SYMBOL);
				setState(4542);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
				case 1:
					{
					setState(4541);
					aclType();
					}
					break;
				}
				setState(4544);
				grantIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4545);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(4546);
					match(ON_SYMBOL);
					setState(4548);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
					case 1:
						{
						setState(4547);
						aclType();
						}
						break;
					}
					setState(4550);
					grantIdentifier();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AclTypeContext extends ParserRuleContext {
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public AclTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aclType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAclType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAclType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAclType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AclTypeContext aclType() throws RecognitionException {
		AclTypeContext _localctx = new AclTypeContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_aclType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4555);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION_SYMBOL || _la==PROCEDURE_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrPrivilegesListContext extends ParserRuleContext {
		public List<RoleOrPrivilegeContext> roleOrPrivilege() {
			return getRuleContexts(RoleOrPrivilegeContext.class);
		}
		public RoleOrPrivilegeContext roleOrPrivilege(int i) {
			return getRuleContext(RoleOrPrivilegeContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrPrivilegesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleOrPrivilegesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleOrPrivilegesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleOrPrivilegesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleOrPrivilegesListContext roleOrPrivilegesList() throws RecognitionException {
		RoleOrPrivilegesListContext _localctx = new RoleOrPrivilegesListContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_roleOrPrivilegesList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4557);
			roleOrPrivilege();
			setState(4562);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,542,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4558);
					match(COMMA_SYMBOL);
					setState(4559);
					roleOrPrivilege();
					}
					} 
				}
				setState(4564);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,542,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrPrivilegeContext extends ParserRuleContext {
		public Token object;
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return getRuleContext(RoleIdentifierOrTextContext.class,0);
		}
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ColumnInternalRefListContext columnInternalRefList() {
			return getRuleContext(ColumnInternalRefListContext.class,0);
		}
		public TerminalNode SELECT_SYMBOL() { return getToken(MySQLParser.SELECT_SYMBOL, 0); }
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode REFERENCES_SYMBOL() { return getToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode USAGE_SYMBOL() { return getToken(MySQLParser.USAGE_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode DATABASES_SYMBOL() { return getToken(MySQLParser.DATABASES_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public RoleOrPrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrPrivilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleOrPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleOrPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleOrPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleOrPrivilegeContext roleOrPrivilege() throws RecognitionException {
		RoleOrPrivilegeContext _localctx = new RoleOrPrivilegeContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_roleOrPrivilege);
		int _la;
		try {
			setState(4606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4565);
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				setState(4576);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
				case 1:
					{
					setState(4566);
					roleIdentifierOrText();
					setState(4568);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
					case 1:
						{
						setState(4567);
						columnInternalRefList();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(4570);
					roleIdentifierOrText();
					setState(4574);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AT_TEXT_SUFFIX:
						{
						setState(4571);
						match(AT_TEXT_SUFFIX);
						}
						break;
					case AT_SIGN_SYMBOL:
						{
						setState(4572);
						match(AT_SIGN_SYMBOL);
						setState(4573);
						textOrIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4578);
				_la = _input.LA(1);
				if ( !(_la==INSERT_SYMBOL || _la==REFERENCES_SYMBOL || _la==SELECT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4580);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
				case 1:
					{
					setState(4579);
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4582);
				_la = _input.LA(1);
				if ( !(((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (DELETE_SYMBOL - 133)) | (1L << (DROP_SYMBOL - 133)) | (1L << (EVENT_SYMBOL - 133)) | (1L << (EXECUTE_SYMBOL - 133)) | (1L << (FILE_SYMBOL - 133)))) != 0) || _la==INDEX_SYMBOL || ((((_la - 423)) & ~0x3f) == 0 && ((1L << (_la - 423)) & ((1L << (PROCESS_SYMBOL - 423)) | (1L << (PROXY_SYMBOL - 423)) | (1L << (RELOAD_SYMBOL - 423)))) != 0) || _la==SHUTDOWN_SYMBOL || _la==SUPER_SYMBOL || _la==TRIGGER_SYMBOL || _la==USAGE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4583);
				match(GRANT_SYMBOL);
				setState(4584);
				match(OPTION_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4585);
				match(SHOW_SYMBOL);
				setState(4586);
				match(DATABASES_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4587);
				match(CREATE_SYMBOL);
				setState(4591);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
				case 1:
					{
					setState(4588);
					match(TEMPORARY_SYMBOL);
					setState(4589);
					((RoleOrPrivilegeContext)_localctx).object = match(TABLES_SYMBOL);
					}
					break;
				case 2:
					{
					setState(4590);
					((RoleOrPrivilegeContext)_localctx).object = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ROUTINE_SYMBOL || _la==TABLESPACE_SYMBOL || _la==USER_SYMBOL || _la==VIEW_SYMBOL) ) {
						((RoleOrPrivilegeContext)_localctx).object = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4593);
				match(LOCK_SYMBOL);
				setState(4594);
				match(TABLES_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4595);
				match(REPLICATION_SYMBOL);
				setState(4596);
				((RoleOrPrivilegeContext)_localctx).object = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CLIENT_SYMBOL || _la==SLAVE_SYMBOL) ) {
					((RoleOrPrivilegeContext)_localctx).object = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4597);
				match(SHOW_SYMBOL);
				setState(4598);
				match(VIEW_SYMBOL);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4599);
				match(ALTER_SYMBOL);
				setState(4601);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
				case 1:
					{
					setState(4600);
					match(ROUTINE_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4603);
				if (!(serverVersion > 80000)) throw new FailedPredicateException(this, "serverVersion > 80000");
				setState(4604);
				_la = _input.LA(1);
				if ( !(_la==CREATE_SYMBOL || _la==DROP_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4605);
				match(ROLE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantIdentifierContext extends ParserRuleContext {
		public List<TerminalNode> MULT_OPERATOR() { return getTokens(MySQLParser.MULT_OPERATOR); }
		public TerminalNode MULT_OPERATOR(int i) {
			return getToken(MySQLParser.MULT_OPERATOR, i);
		}
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public GrantIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGrantIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGrantIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGrantIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantIdentifierContext grantIdentifier() throws RecognitionException {
		GrantIdentifierContext _localctx = new GrantIdentifierContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_grantIdentifier);
		int _la;
		try {
			setState(4624);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4608);
				match(MULT_OPERATOR);
				setState(4611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(4609);
					match(DOT_SYMBOL);
					setState(4610);
					match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4613);
				schemaRef();
				setState(4616);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(4614);
					match(DOT_SYMBOL);
					setState(4615);
					match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4618);
				tableRef();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4619);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(4620);
				schemaRef();
				setState(4621);
				match(DOT_SYMBOL);
				setState(4622);
				tableRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RequireListContext extends ParserRuleContext {
		public List<RequireListElementContext> requireListElement() {
			return getRuleContexts(RequireListElementContext.class);
		}
		public RequireListElementContext requireListElement(int i) {
			return getRuleContext(RequireListElementContext.class,i);
		}
		public List<TerminalNode> AND_SYMBOL() { return getTokens(MySQLParser.AND_SYMBOL); }
		public TerminalNode AND_SYMBOL(int i) {
			return getToken(MySQLParser.AND_SYMBOL, i);
		}
		public RequireListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRequireList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRequireList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRequireList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RequireListContext requireList() throws RecognitionException {
		RequireListContext _localctx = new RequireListContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_requireList);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4626);
			requireListElement();
			setState(4633);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,554,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4628);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND_SYMBOL) {
						{
						setState(4627);
						match(AND_SYMBOL);
						}
					}

					setState(4630);
					requireListElement();
					}
					} 
				}
				setState(4635);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,554,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RequireListElementContext extends ParserRuleContext {
		public Token element;
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode CIPHER_SYMBOL() { return getToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public RequireListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_requireListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRequireListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRequireListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRequireListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RequireListElementContext requireListElement() throws RecognitionException {
		RequireListElementContext _localctx = new RequireListElementContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_requireListElement);
		try {
			setState(4642);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CIPHER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4636);
				((RequireListElementContext)_localctx).element = match(CIPHER_SYMBOL);
				setState(4637);
				textString();
				}
				break;
			case ISSUER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4638);
				((RequireListElementContext)_localctx).element = match(ISSUER_SYMBOL);
				setState(4639);
				textString();
				}
				break;
			case SUBJECT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4640);
				((RequireListElementContext)_localctx).element = match(SUBJECT_SYMBOL);
				setState(4641);
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode OPTION_SYMBOL() { return getToken(MySQLParser.OPTION_SYMBOL, 0); }
		public TerminalNode GRANT_SYMBOL() { return getToken(MySQLParser.GRANT_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public GrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGrantOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGrantOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGrantOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantOptionContext grantOption() throws RecognitionException {
		GrantOptionContext _localctx = new GrantOptionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_grantOption);
		try {
			setState(4654);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRANT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4644);
				((GrantOptionContext)_localctx).option = match(GRANT_SYMBOL);
				setState(4645);
				match(OPTION_SYMBOL);
				}
				break;
			case MAX_QUERIES_PER_HOUR_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4646);
				((GrantOptionContext)_localctx).option = match(MAX_QUERIES_PER_HOUR_SYMBOL);
				setState(4647);
				ulong_number();
				}
				break;
			case MAX_UPDATES_PER_HOUR_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4648);
				((GrantOptionContext)_localctx).option = match(MAX_UPDATES_PER_HOUR_SYMBOL);
				setState(4649);
				ulong_number();
				}
				break;
			case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4650);
				((GrantOptionContext)_localctx).option = match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
				setState(4651);
				ulong_number();
				}
				break;
			case MAX_USER_CONNECTIONS_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4652);
				((GrantOptionContext)_localctx).option = match(MAX_USER_CONNECTIONS_SYMBOL);
				setState(4653);
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRoleContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public List<RoleListContext> roleList() {
			return getRuleContexts(RoleListContext.class);
		}
		public RoleListContext roleList(int i) {
			return getRuleContext(RoleListContext.class,i);
		}
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode EXCEPT_SYMBOL() { return getToken(MySQLParser.EXCEPT_SYMBOL, 0); }
		public SetRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRoleContext setRole() throws RecognitionException {
		SetRoleContext _localctx = new SetRoleContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_setRole);
		int _la;
		try {
			setState(4679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4656);
				match(SET_SYMBOL);
				setState(4657);
				match(ROLE_SYMBOL);
				setState(4658);
				roleList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4659);
				match(SET_SYMBOL);
				setState(4660);
				match(ROLE_SYMBOL);
				setState(4661);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT_SYMBOL || _la==NONE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4662);
				match(SET_SYMBOL);
				setState(4663);
				match(DEFAULT_SYMBOL);
				setState(4664);
				match(ROLE_SYMBOL);
				setState(4668);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
				case 1:
					{
					setState(4665);
					roleList();
					}
					break;
				case 2:
					{
					setState(4666);
					match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					setState(4667);
					match(ALL_SYMBOL);
					}
					break;
				}
				setState(4670);
				match(TO_SYMBOL);
				setState(4671);
				roleList();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4672);
				match(SET_SYMBOL);
				setState(4673);
				match(ROLE_SYMBOL);
				setState(4674);
				match(ALL_SYMBOL);
				setState(4677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					setState(4675);
					match(EXCEPT_SYMBOL);
					setState(4676);
					roleList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleListContext extends ParserRuleContext {
		public List<RoleContext> role() {
			return getRuleContexts(RoleContext.class);
		}
		public RoleContext role(int i) {
			return getRuleContext(RoleContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleListContext roleList() throws RecognitionException {
		RoleListContext _localctx = new RoleListContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_roleList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4681);
			role();
			setState(4686);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,560,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4682);
					match(COMMA_SYMBOL);
					setState(4683);
					role();
					}
					} 
				}
				setState(4688);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,560,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleContext extends ParserRuleContext {
		public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return getRuleContext(RoleIdentifierOrTextContext.class,0);
		}
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public RoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleContext role() throws RecognitionException {
		RoleContext _localctx = new RoleContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4689);
			roleIdentifierOrText();
			setState(4693);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				{
				setState(4690);
				match(AT_SIGN_SYMBOL);
				setState(4691);
				textOrIdentifier();
				}
				break;
			case 2:
				{
				setState(4692);
				match(AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAdministrationStatementContext extends ParserRuleContext {
		public Token type;
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public NoWriteToBinLogContext noWriteToBinLog() {
			return getRuleContext(NoWriteToBinLogContext.class,0);
		}
		public HistogramContext histogram() {
			return getRuleContext(HistogramContext.class,0);
		}
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public List<CheckOptionContext> checkOption() {
			return getRuleContexts(CheckOptionContext.class);
		}
		public CheckOptionContext checkOption(int i) {
			return getRuleContext(CheckOptionContext.class,i);
		}
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode OPTIMIZE_SYMBOL() { return getToken(MySQLParser.OPTIMIZE_SYMBOL, 0); }
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public List<RepairTypeContext> repairType() {
			return getRuleContexts(RepairTypeContext.class);
		}
		public RepairTypeContext repairType(int i) {
			return getRuleContext(RepairTypeContext.class,i);
		}
		public TableAdministrationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAdministrationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableAdministrationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableAdministrationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableAdministrationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAdministrationStatementContext tableAdministrationStatement() throws RecognitionException {
		TableAdministrationStatementContext _localctx = new TableAdministrationStatementContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_tableAdministrationStatement);
		int _la;
		try {
			setState(4738);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANALYZE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4695);
				((TableAdministrationStatementContext)_localctx).type = match(ANALYZE_SYMBOL);
				setState(4697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(4696);
					noWriteToBinLog();
					}
				}

				setState(4699);
				match(TABLE_SYMBOL);
				setState(4700);
				tableRefList();
				setState(4703);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
				case 1:
					{
					setState(4701);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(4702);
					histogram();
					}
					break;
				}
				}
				break;
			case CHECK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4705);
				((TableAdministrationStatementContext)_localctx).type = match(CHECK_SYMBOL);
				setState(4706);
				match(TABLE_SYMBOL);
				setState(4707);
				tableRefList();
				setState(4711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CHANGED_SYMBOL || ((((_la - 180)) & ~0x3f) == 0 && ((1L << (_la - 180)) & ((1L << (EXTENDED_SYMBOL - 180)) | (1L << (FAST_SYMBOL - 180)) | (1L << (FOR_SYMBOL - 180)))) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) {
					{
					{
					setState(4708);
					checkOption();
					}
					}
					setState(4713);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case CHECKSUM_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(4714);
				((TableAdministrationStatementContext)_localctx).type = match(CHECKSUM_SYMBOL);
				setState(4715);
				match(TABLE_SYMBOL);
				setState(4716);
				tableRefList();
				setState(4718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) {
					{
					setState(4717);
					_la = _input.LA(1);
					if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case OPTIMIZE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(4720);
				((TableAdministrationStatementContext)_localctx).type = match(OPTIMIZE_SYMBOL);
				setState(4722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(4721);
					noWriteToBinLog();
					}
				}

				setState(4724);
				match(TABLE_SYMBOL);
				setState(4725);
				tableRefList();
				}
				break;
			case REPAIR_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4726);
				((TableAdministrationStatementContext)_localctx).type = match(REPAIR_SYMBOL);
				setState(4728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					setState(4727);
					noWriteToBinLog();
					}
				}

				setState(4730);
				match(TABLE_SYMBOL);
				setState(4731);
				tableRefList();
				setState(4735);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					setState(4732);
					repairType();
					}
					}
					setState(4737);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HistogramContext extends ParserRuleContext {
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public HistogramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_histogram; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHistogram(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHistogram(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHistogram(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HistogramContext histogram() throws RecognitionException {
		HistogramContext _localctx = new HistogramContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_histogram);
		int _la;
		try {
			setState(4753);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4740);
				match(UPDATE_SYMBOL);
				setState(4741);
				match(HISTOGRAM_SYMBOL);
				setState(4742);
				match(ON_SYMBOL);
				setState(4743);
				identifierList();
				setState(4747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(4744);
					match(WITH_SYMBOL);
					setState(4745);
					match(INT_NUMBER);
					setState(4746);
					match(BUCKETS_SYMBOL);
					}
				}

				}
				break;
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4749);
				match(DROP_SYMBOL);
				setState(4750);
				match(HISTOGRAM_SYMBOL);
				setState(4751);
				match(ON_SYMBOL);
				setState(4752);
				identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckOptionContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCheckOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCheckOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCheckOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckOptionContext checkOption() throws RecognitionException {
		CheckOptionContext _localctx = new CheckOptionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_checkOption);
		int _la;
		try {
			setState(4758);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4755);
				match(FOR_SYMBOL);
				setState(4756);
				match(UPGRADE_SYMBOL);
				}
				break;
			case CHANGED_SYMBOL:
			case EXTENDED_SYMBOL:
			case FAST_SYMBOL:
			case MEDIUM_SYMBOL:
			case QUICK_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4757);
				_la = _input.LA(1);
				if ( !(_la==CHANGED_SYMBOL || _la==EXTENDED_SYMBOL || _la==FAST_SYMBOL || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTypeContext extends ParserRuleContext {
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public RepairTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRepairType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRepairType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRepairType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTypeContext repairType() throws RecognitionException {
		RepairTypeContext _localctx = new RepairTypeContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_repairType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4760);
			_la = _input.LA(1);
			if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallUninstallStatmentContext extends ParserRuleContext {
		public Token action;
		public Token type;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode INSTALL_SYMBOL() { return getToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public TextStringLiteralListContext textStringLiteralList() {
			return getRuleContext(TextStringLiteralListContext.class,0);
		}
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public PluginRefContext pluginRef() {
			return getRuleContext(PluginRefContext.class,0);
		}
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public List<ComponentRefContext> componentRef() {
			return getRuleContexts(ComponentRefContext.class);
		}
		public ComponentRefContext componentRef(int i) {
			return getRuleContext(ComponentRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public InstallUninstallStatmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installUninstallStatment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInstallUninstallStatment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInstallUninstallStatment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInstallUninstallStatment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallUninstallStatmentContext installUninstallStatment() throws RecognitionException {
		InstallUninstallStatmentContext _localctx = new InstallUninstallStatmentContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_installUninstallStatment);
		int _la;
		try {
			setState(4784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4762);
				((InstallUninstallStatmentContext)_localctx).action = match(INSTALL_SYMBOL);
				setState(4763);
				((InstallUninstallStatmentContext)_localctx).type = match(PLUGIN_SYMBOL);
				setState(4764);
				identifier();
				setState(4765);
				match(SONAME_SYMBOL);
				setState(4766);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4768);
				((InstallUninstallStatmentContext)_localctx).action = match(INSTALL_SYMBOL);
				setState(4769);
				((InstallUninstallStatmentContext)_localctx).type = match(COMPONENT_SYMBOL);
				setState(4770);
				textStringLiteralList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4771);
				((InstallUninstallStatmentContext)_localctx).action = match(UNINSTALL_SYMBOL);
				setState(4772);
				((InstallUninstallStatmentContext)_localctx).type = match(PLUGIN_SYMBOL);
				setState(4773);
				pluginRef();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4774);
				((InstallUninstallStatmentContext)_localctx).action = match(UNINSTALL_SYMBOL);
				setState(4775);
				((InstallUninstallStatmentContext)_localctx).type = match(COMPONENT_SYMBOL);
				setState(4776);
				componentRef();
				setState(4781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(4777);
					match(COMMA_SYMBOL);
					setState(4778);
					componentRef();
					}
					}
					setState(4783);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public StartOptionValueListContext startOptionValueList() {
			return getRuleContext(StartOptionValueListContext.class,0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_setStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4786);
			match(SET_SYMBOL);
			setState(4787);
			startOptionValueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartOptionValueListContext extends ParserRuleContext {
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return getRuleContext(OptionValueNoOptionTypeContext.class,0);
		}
		public OptionValueListContinuedContext optionValueListContinued() {
			return getRuleContext(OptionValueListContinuedContext.class,0);
		}
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TransactionCharacteristicsContext transactionCharacteristics() {
			return getRuleContext(TransactionCharacteristicsContext.class,0);
		}
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() {
			return getRuleContext(StartOptionValueListFollowingOptionTypeContext.class,0);
		}
		public List<TerminalNode> PASSWORD_SYMBOL() { return getTokens(MySQLParser.PASSWORD_SYMBOL); }
		public TerminalNode PASSWORD_SYMBOL(int i) {
			return getToken(MySQLParser.PASSWORD_SYMBOL, i);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode OLD_PASSWORD_SYMBOL() { return getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public ReplacePasswordContext replacePassword() {
			return getRuleContext(ReplacePasswordContext.class,0);
		}
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return getRuleContext(RetainCurrentPasswordContext.class,0);
		}
		public TerminalNode TO_SYMBOL() { return getToken(MySQLParser.TO_SYMBOL, 0); }
		public TerminalNode RANDOM_SYMBOL() { return getToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public StartOptionValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startOptionValueList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterStartOptionValueList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitStartOptionValueList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitStartOptionValueList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartOptionValueListContext startOptionValueList() throws RecognitionException {
		StartOptionValueListContext _localctx = new StartOptionValueListContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_startOptionValueList);
		int _la;
		try {
			setState(4845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4789);
				optionValueNoOptionType();
				setState(4790);
				optionValueListContinued();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4792);
				match(TRANSACTION_SYMBOL);
				setState(4793);
				transactionCharacteristics();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4794);
				optionType();
				setState(4795);
				startOptionValueListFollowingOptionType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4797);
				match(PASSWORD_SYMBOL);
				setState(4800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(4798);
					match(FOR_SYMBOL);
					setState(4799);
					user();
					}
				}

				setState(4802);
				equal();
				setState(4829);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
				case 1:
					{
					setState(4803);
					textString();
					setState(4805);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						setState(4804);
						replacePassword();
						}
					}

					setState(4808);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						setState(4807);
						retainCurrentPassword();
						}
					}

					}
					break;
				case 2:
					{
					setState(4810);
					textString();
					setState(4812);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						setState(4811);
						replacePassword();
						}
					}

					setState(4815);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						setState(4814);
						retainCurrentPassword();
						}
					}

					}
					break;
				case 3:
					{
					setState(4817);
					if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
					setState(4818);
					match(OLD_PASSWORD_SYMBOL);
					setState(4819);
					match(OPEN_PAR_SYMBOL);
					setState(4820);
					textString();
					setState(4821);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				case 4:
					{
					setState(4823);
					if (!(serverVersion < 80014)) throw new FailedPredicateException(this, "serverVersion < 80014");
					setState(4824);
					match(PASSWORD_SYMBOL);
					setState(4825);
					match(OPEN_PAR_SYMBOL);
					setState(4826);
					textString();
					setState(4827);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4831);
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				setState(4832);
				match(PASSWORD_SYMBOL);
				setState(4835);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(4833);
					match(FOR_SYMBOL);
					setState(4834);
					user();
					}
				}

				setState(4837);
				match(TO_SYMBOL);
				setState(4838);
				match(RANDOM_SYMBOL);
				setState(4840);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLACE_SYMBOL) {
					{
					setState(4839);
					replacePassword();
					}
				}

				setState(4843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETAIN_SYMBOL) {
					{
					setState(4842);
					retainCurrentPassword();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionCharacteristicsContext extends ParserRuleContext {
		public TransactionAccessModeContext transactionAccessMode() {
			return getRuleContext(TransactionAccessModeContext.class,0);
		}
		public IsolationLevelContext isolationLevel() {
			return getRuleContext(IsolationLevelContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TransactionCharacteristicsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionCharacteristics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTransactionCharacteristics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTransactionCharacteristics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTransactionCharacteristics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionCharacteristicsContext transactionCharacteristics() throws RecognitionException {
		TransactionCharacteristicsContext _localctx = new TransactionCharacteristicsContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_transactionCharacteristics);
		int _la;
		try {
			setState(4856);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4847);
				transactionAccessMode();
				setState(4849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ISOLATION_SYMBOL) {
					{
					setState(4848);
					isolationLevel();
					}
				}

				}
				break;
			case ISOLATION_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4851);
				isolationLevel();
				setState(4854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(4852);
					match(COMMA_SYMBOL);
					setState(4853);
					transactionAccessMode();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionAccessModeContext extends ParserRuleContext {
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode WRITE_SYMBOL() { return getToken(MySQLParser.WRITE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TransactionAccessModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionAccessMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTransactionAccessMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTransactionAccessMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTransactionAccessMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionAccessModeContext transactionAccessMode() throws RecognitionException {
		TransactionAccessModeContext _localctx = new TransactionAccessModeContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_transactionAccessMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4858);
			match(READ_SYMBOL);
			setState(4859);
			_la = _input.LA(1);
			if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsolationLevelContext extends ParserRuleContext {
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isolationLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIsolationLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIsolationLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIsolationLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsolationLevelContext isolationLevel() throws RecognitionException {
		IsolationLevelContext _localctx = new IsolationLevelContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_isolationLevel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4861);
			match(ISOLATION_SYMBOL);
			setState(4862);
			match(LEVEL_SYMBOL);
			setState(4868);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPEATABLE_SYMBOL:
				{
				setState(4863);
				match(REPEATABLE_SYMBOL);
				setState(4864);
				match(READ_SYMBOL);
				}
				break;
			case READ_SYMBOL:
				{
				setState(4865);
				match(READ_SYMBOL);
				setState(4866);
				_la = _input.LA(1);
				if ( !(_la==COMMITTED_SYMBOL || _la==UNCOMMITTED_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SERIALIZABLE_SYMBOL:
				{
				setState(4867);
				match(SERIALIZABLE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueListContinuedContext extends ParserRuleContext {
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public List<OptionValueContext> optionValue() {
			return getRuleContexts(OptionValueContext.class);
		}
		public OptionValueContext optionValue(int i) {
			return getRuleContext(OptionValueContext.class,i);
		}
		public OptionValueListContinuedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueListContinued; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOptionValueListContinued(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOptionValueListContinued(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOptionValueListContinued(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionValueListContinuedContext optionValueListContinued() throws RecognitionException {
		OptionValueListContinuedContext _localctx = new OptionValueListContinuedContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_optionValueListContinued);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(4870);
				match(COMMA_SYMBOL);
				setState(4871);
				optionValue();
				}
				}
				setState(4876);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueNoOptionTypeContext extends ParserRuleContext {
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public CharsetClauseContext charsetClause() {
			return getRuleContext(CharsetClauseContext.class,0);
		}
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SetSystemVariableContext setSystemVariable() {
			return getRuleContext(SetSystemVariableContext.class,0);
		}
		public TerminalNode NAMES_SYMBOL() { return getToken(MySQLParser.NAMES_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public OptionValueNoOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueNoOptionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOptionValueNoOptionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOptionValueNoOptionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOptionValueNoOptionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionValueNoOptionTypeContext optionValueNoOptionType() throws RecognitionException {
		OptionValueNoOptionTypeContext _localctx = new OptionValueNoOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_optionValueNoOptionType);
		int _la;
		try {
			setState(4902);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4877);
				internalVariableName();
				setState(4878);
				equal();
				setState(4879);
				setExprOrDefault();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4881);
				charsetClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4882);
				userVariable();
				setState(4883);
				equal();
				setState(4884);
				expr(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4886);
				setSystemVariable();
				setState(4887);
				equal();
				setState(4888);
				setExprOrDefault();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4890);
				match(NAMES_SYMBOL);
				setState(4900);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
				case 1:
					{
					setState(4891);
					equal();
					setState(4892);
					expr(0);
					}
					break;
				case 2:
					{
					setState(4894);
					charsetName();
					setState(4896);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COLLATE_SYMBOL) {
						{
						setState(4895);
						collate();
						}
					}

					}
					break;
				case 3:
					{
					setState(4898);
					if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
					setState(4899);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueContext extends ParserRuleContext {
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return getRuleContext(OptionValueNoOptionTypeContext.class,0);
		}
		public OptionValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOptionValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOptionValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOptionValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionValueContext optionValue() throws RecognitionException {
		OptionValueContext _localctx = new OptionValueContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_optionValue);
		try {
			setState(4910);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4904);
				optionType();
				setState(4905);
				internalVariableName();
				setState(4906);
				equal();
				setState(4907);
				setExprOrDefault();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4909);
				optionValueNoOptionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetSystemVariableContext extends ParserRuleContext {
		public TerminalNode AT_AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public SetVarIdentTypeContext setVarIdentType() {
			return getRuleContext(SetVarIdentTypeContext.class,0);
		}
		public SetSystemVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setSystemVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetSystemVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetSystemVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetSystemVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetSystemVariableContext setSystemVariable() throws RecognitionException {
		SetSystemVariableContext _localctx = new SetSystemVariableContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_setSystemVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4912);
			match(AT_AT_SIGN_SYMBOL);
			setState(4914);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
			case 1:
				{
				setState(4913);
				setVarIdentType();
				}
				break;
			}
			setState(4916);
			internalVariableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartOptionValueListFollowingOptionTypeContext extends ParserRuleContext {
		public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
			return getRuleContext(OptionValueFollowingOptionTypeContext.class,0);
		}
		public OptionValueListContinuedContext optionValueListContinued() {
			return getRuleContext(OptionValueListContinuedContext.class,0);
		}
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TransactionCharacteristicsContext transactionCharacteristics() {
			return getRuleContext(TransactionCharacteristicsContext.class,0);
		}
		public StartOptionValueListFollowingOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startOptionValueListFollowingOptionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterStartOptionValueListFollowingOptionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitStartOptionValueListFollowingOptionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitStartOptionValueListFollowingOptionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() throws RecognitionException {
		StartOptionValueListFollowingOptionTypeContext _localctx = new StartOptionValueListFollowingOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_startOptionValueListFollowingOptionType);
		try {
			setState(4923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4918);
				optionValueFollowingOptionType();
				setState(4919);
				optionValueListContinued();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4921);
				match(TRANSACTION_SYMBOL);
				setState(4922);
				transactionCharacteristics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionValueFollowingOptionTypeContext extends ParserRuleContext {
		public InternalVariableNameContext internalVariableName() {
			return getRuleContext(InternalVariableNameContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public SetExprOrDefaultContext setExprOrDefault() {
			return getRuleContext(SetExprOrDefaultContext.class,0);
		}
		public OptionValueFollowingOptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionValueFollowingOptionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOptionValueFollowingOptionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOptionValueFollowingOptionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOptionValueFollowingOptionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() throws RecognitionException {
		OptionValueFollowingOptionTypeContext _localctx = new OptionValueFollowingOptionTypeContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_optionValueFollowingOptionType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4925);
			internalVariableName();
			setState(4926);
			equal();
			setState(4927);
			setExprOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetExprOrDefaultContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public SetExprOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setExprOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetExprOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetExprOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetExprOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetExprOrDefaultContext setExprOrDefault() throws RecognitionException {
		SetExprOrDefaultContext _localctx = new SetExprOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_setExprOrDefault);
		int _la;
		try {
			setState(4933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4929);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4930);
				_la = _input.LA(1);
				if ( !(_la==ALL_SYMBOL || _la==BINARY_SYMBOL || _la==DEFAULT_SYMBOL || _la==ON_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4931);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(4932);
				_la = _input.LA(1);
				if ( !(_la==ROW_SYMBOL || _la==SYSTEM_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public Token value;
		public Token object;
		public TerminalNode SHOW_SYMBOL() { return getToken(MySQLParser.SHOW_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode EVENTS_SYMBOL() { return getToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public FromOrInContext fromOrIn() {
			return getRuleContext(FromOrInContext.class,0);
		}
		public TerminalNode COUNT_SYMBOL() { return getToken(MySQLParser.COUNT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public UserListContext userList() {
			return getRuleContext(UserListContext.class,0);
		}
		public TerminalNode CODE_SYMBOL() { return getToken(MySQLParser.CODE_SYMBOL, 0); }
		public ProcedureRefContext procedureRef() {
			return getRuleContext(ProcedureRefContext.class,0);
		}
		public FunctionRefContext functionRef() {
			return getRuleContext(FunctionRefContext.class,0);
		}
		public TerminalNode AUTHORS_SYMBOL() { return getToken(MySQLParser.AUTHORS_SYMBOL, 0); }
		public TerminalNode DATABASES_SYMBOL() { return getToken(MySQLParser.DATABASES_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode MUTEX_SYMBOL() { return getToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode CONTRIBUTORS_SYMBOL() { return getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode PROCEDURE_SYMBOL() { return getToken(MySQLParser.PROCEDURE_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public NonBlockingContext nonBlocking() {
			return getRuleContext(NonBlockingContext.class,0);
		}
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode KEYS_SYMBOL() { return getToken(MySQLParser.KEYS_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public EventRefContext eventRef() {
			return getRuleContext(EventRefContext.class,0);
		}
		public TriggerRefContext triggerRef() {
			return getRuleContext(TriggerRefContext.class,0);
		}
		public ViewRefContext viewRef() {
			return getRuleContext(ViewRefContext.class,0);
		}
		public LikeOrWhereContext likeOrWhere() {
			return getRuleContext(LikeOrWhereContext.class,0);
		}
		public ShowCommandTypeContext showCommandType() {
			return getRuleContext(ShowCommandTypeContext.class,0);
		}
		public InDbContext inDb() {
			return getRuleContext(InDbContext.class,0);
		}
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public List<ProfileTypeContext> profileType() {
			return getRuleContexts(ProfileTypeContext.class);
		}
		public ProfileTypeContext profileType(int i) {
			return getRuleContext(ProfileTypeContext.class,i);
		}
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public OptionTypeContext optionType() {
			return getRuleContext(OptionTypeContext.class,0);
		}
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode TRIGGER_SYMBOL() { return getToken(MySQLParser.TRIGGER_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterShowStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitShowStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitShowStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_showStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4935);
			match(SHOW_SYMBOL);
			setState(5155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
			case 1:
				{
				setState(4936);
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				setState(4937);
				((ShowStatementContext)_localctx).value = match(AUTHORS_SYMBOL);
				}
				break;
			case 2:
				{
				setState(4938);
				((ShowStatementContext)_localctx).value = match(DATABASES_SYMBOL);
				setState(4940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4939);
					likeOrWhere();
					}
				}

				}
				break;
			case 3:
				{
				setState(4943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					setState(4942);
					showCommandType();
					}
					break;
				}
				setState(4945);
				((ShowStatementContext)_localctx).value = match(TABLES_SYMBOL);
				setState(4947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4946);
					inDb();
					}
				}

				setState(4950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4949);
					likeOrWhere();
					}
				}

				}
				break;
			case 4:
				{
				setState(4953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					setState(4952);
					match(FULL_SYMBOL);
					}
				}

				setState(4955);
				((ShowStatementContext)_localctx).value = match(TRIGGERS_SYMBOL);
				setState(4957);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4956);
					inDb();
					}
				}

				setState(4960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4959);
					likeOrWhere();
					}
				}

				}
				break;
			case 5:
				{
				setState(4962);
				((ShowStatementContext)_localctx).value = match(EVENTS_SYMBOL);
				setState(4964);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4963);
					inDb();
					}
				}

				setState(4967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4966);
					likeOrWhere();
					}
				}

				}
				break;
			case 6:
				{
				setState(4969);
				((ShowStatementContext)_localctx).value = match(TABLE_SYMBOL);
				setState(4970);
				match(STATUS_SYMBOL);
				setState(4972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4971);
					inDb();
					}
				}

				setState(4975);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4974);
					likeOrWhere();
					}
				}

				}
				break;
			case 7:
				{
				setState(4977);
				((ShowStatementContext)_localctx).value = match(OPEN_SYMBOL);
				setState(4978);
				match(TABLES_SYMBOL);
				setState(4980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4979);
					inDb();
					}
				}

				setState(4983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(4982);
					likeOrWhere();
					}
				}

				}
				break;
			case 8:
				{
				setState(4985);
				((ShowStatementContext)_localctx).value = match(PLUGINS_SYMBOL);
				}
				break;
			case 9:
				{
				setState(4986);
				((ShowStatementContext)_localctx).value = match(ENGINE_SYMBOL);
				setState(4989);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
				case 1:
					{
					setState(4987);
					engineRef();
					}
					break;
				case 2:
					{
					setState(4988);
					match(ALL_SYMBOL);
					}
					break;
				}
				setState(4991);
				_la = _input.LA(1);
				if ( !(_la==LOGS_SYMBOL || _la==MUTEX_SYMBOL || _la==STATUS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				{
				setState(4993);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
				case 1:
					{
					setState(4992);
					showCommandType();
					}
					break;
				}
				setState(4995);
				((ShowStatementContext)_localctx).value = match(COLUMNS_SYMBOL);
				setState(4996);
				_la = _input.LA(1);
				if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4997);
				tableRef();
				setState(4999);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(4998);
					inDb();
					}
				}

				setState(5002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(5001);
					likeOrWhere();
					}
				}

				}
				break;
			case 11:
				{
				setState(5004);
				_la = _input.LA(1);
				if ( !(_la==BINARY_SYMBOL || _la==MASTER_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5005);
				((ShowStatementContext)_localctx).value = match(LOGS_SYMBOL);
				}
				break;
			case 12:
				{
				setState(5006);
				((ShowStatementContext)_localctx).value = match(SLAVE_SYMBOL);
				setState(5013);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case HOSTS_SYMBOL:
					{
					setState(5007);
					match(HOSTS_SYMBOL);
					}
					break;
				case STATUS_SYMBOL:
					{
					setState(5008);
					match(STATUS_SYMBOL);
					setState(5009);
					nonBlocking();
					setState(5011);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
					case 1:
						{
						setState(5010);
						channel();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				{
				setState(5015);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG_SYMBOL || _la==RELAYLOG_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5016);
				match(EVENTS_SYMBOL);
				setState(5019);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
				case 1:
					{
					setState(5017);
					match(IN_SYMBOL);
					setState(5018);
					textString();
					}
					break;
				}
				setState(5023);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
				case 1:
					{
					setState(5021);
					match(FROM_SYMBOL);
					setState(5022);
					ulonglong_number();
					}
					break;
				}
				setState(5026);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
				case 1:
					{
					setState(5025);
					limitClause();
					}
					break;
				}
				setState(5029);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
				case 1:
					{
					setState(5028);
					channel();
					}
					break;
				}
				}
				break;
			case 14:
				{
				setState(5033);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
				case 1:
					{
					setState(5031);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5032);
					match(EXTENDED_SYMBOL);
					}
					break;
				}
				setState(5035);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 235)) & ~0x3f) == 0 && ((1L << (_la - 235)) & ((1L << (INDEXES_SYMBOL - 235)) | (1L << (INDEX_SYMBOL - 235)) | (1L << (KEYS_SYMBOL - 235)))) != 0)) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5036);
				fromOrIn();
				setState(5037);
				tableRef();
				setState(5039);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
					{
					setState(5038);
					inDb();
					}
				}

				setState(5042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					setState(5041);
					whereClause();
					}
				}

				}
				break;
			case 15:
				{
				setState(5045);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(5044);
					match(STORAGE_SYMBOL);
					}
				}

				setState(5047);
				((ShowStatementContext)_localctx).value = match(ENGINES_SYMBOL);
				}
				break;
			case 16:
				{
				setState(5048);
				match(COUNT_SYMBOL);
				setState(5049);
				match(OPEN_PAR_SYMBOL);
				setState(5050);
				match(MULT_OPERATOR);
				setState(5051);
				match(CLOSE_PAR_SYMBOL);
				setState(5052);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS_SYMBOL || _la==WARNINGS_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 17:
				{
				setState(5053);
				((ShowStatementContext)_localctx).value = match(WARNINGS_SYMBOL);
				setState(5055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					setState(5054);
					limitClause();
					}
				}

				}
				break;
			case 18:
				{
				setState(5057);
				((ShowStatementContext)_localctx).value = match(ERRORS_SYMBOL);
				setState(5059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					setState(5058);
					limitClause();
					}
				}

				}
				break;
			case 19:
				{
				setState(5061);
				((ShowStatementContext)_localctx).value = match(PROFILES_SYMBOL);
				}
				break;
			case 20:
				{
				setState(5062);
				((ShowStatementContext)_localctx).value = match(PROFILE_SYMBOL);
				setState(5071);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL_SYMBOL || _la==BLOCK_SYMBOL || _la==CONTEXT_SYMBOL || _la==CPU_SYMBOL || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==PAGE_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL) {
					{
					setState(5063);
					profileType();
					setState(5068);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						setState(5064);
						match(COMMA_SYMBOL);
						setState(5065);
						profileType();
						}
						}
						setState(5070);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(5076);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(5073);
					match(FOR_SYMBOL);
					setState(5074);
					match(QUERY_SYMBOL);
					setState(5075);
					match(INT_NUMBER);
					}
				}

				setState(5079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT_SYMBOL) {
					{
					setState(5078);
					limitClause();
					}
				}

				}
				break;
			case 21:
				{
				setState(5082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
					{
					setState(5081);
					optionType();
					}
				}

				setState(5084);
				((ShowStatementContext)_localctx).value = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==STATUS_SYMBOL || _la==VARIABLES_SYMBOL) ) {
					((ShowStatementContext)_localctx).value = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(5085);
					likeOrWhere();
					}
				}

				}
				break;
			case 22:
				{
				setState(5089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					setState(5088);
					match(FULL_SYMBOL);
					}
				}

				setState(5091);
				((ShowStatementContext)_localctx).value = match(PROCESSLIST_SYMBOL);
				}
				break;
			case 23:
				{
				setState(5092);
				charset();
				setState(5094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(5093);
					likeOrWhere();
					}
				}

				}
				break;
			case 24:
				{
				setState(5096);
				((ShowStatementContext)_localctx).value = match(COLLATION_SYMBOL);
				setState(5098);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(5097);
					likeOrWhere();
					}
				}

				}
				break;
			case 25:
				{
				setState(5100);
				if (!(serverVersion < 50700)) throw new FailedPredicateException(this, "serverVersion < 50700");
				setState(5101);
				((ShowStatementContext)_localctx).value = match(CONTRIBUTORS_SYMBOL);
				}
				break;
			case 26:
				{
				setState(5102);
				((ShowStatementContext)_localctx).value = match(PRIVILEGES_SYMBOL);
				}
				break;
			case 27:
				{
				setState(5103);
				((ShowStatementContext)_localctx).value = match(GRANTS_SYMBOL);
				setState(5106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(5104);
					match(FOR_SYMBOL);
					setState(5105);
					user();
					}
				}

				}
				break;
			case 28:
				{
				setState(5108);
				((ShowStatementContext)_localctx).value = match(GRANTS_SYMBOL);
				setState(5109);
				match(FOR_SYMBOL);
				setState(5110);
				user();
				setState(5111);
				match(USING_SYMBOL);
				setState(5112);
				userList();
				}
				break;
			case 29:
				{
				setState(5114);
				((ShowStatementContext)_localctx).value = match(MASTER_SYMBOL);
				setState(5115);
				match(STATUS_SYMBOL);
				}
				break;
			case 30:
				{
				setState(5116);
				((ShowStatementContext)_localctx).value = match(CREATE_SYMBOL);
				setState(5137);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
				case 1:
					{
					setState(5117);
					((ShowStatementContext)_localctx).object = match(DATABASE_SYMBOL);
					setState(5119);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
					case 1:
						{
						setState(5118);
						ifNotExists();
						}
						break;
					}
					setState(5121);
					schemaRef();
					}
					break;
				case 2:
					{
					setState(5122);
					((ShowStatementContext)_localctx).object = match(EVENT_SYMBOL);
					setState(5123);
					eventRef();
					}
					break;
				case 3:
					{
					setState(5124);
					((ShowStatementContext)_localctx).object = match(FUNCTION_SYMBOL);
					setState(5125);
					functionRef();
					}
					break;
				case 4:
					{
					setState(5126);
					((ShowStatementContext)_localctx).object = match(PROCEDURE_SYMBOL);
					setState(5127);
					procedureRef();
					}
					break;
				case 5:
					{
					setState(5128);
					((ShowStatementContext)_localctx).object = match(TABLE_SYMBOL);
					setState(5129);
					tableRef();
					}
					break;
				case 6:
					{
					setState(5130);
					((ShowStatementContext)_localctx).object = match(TRIGGER_SYMBOL);
					setState(5131);
					triggerRef();
					}
					break;
				case 7:
					{
					setState(5132);
					((ShowStatementContext)_localctx).object = match(VIEW_SYMBOL);
					setState(5133);
					viewRef();
					}
					break;
				case 8:
					{
					setState(5134);
					if (!(serverVersion >= 50704)) throw new FailedPredicateException(this, "serverVersion >= 50704");
					setState(5135);
					((ShowStatementContext)_localctx).object = match(USER_SYMBOL);
					setState(5136);
					user();
					}
					break;
				}
				}
				break;
			case 31:
				{
				setState(5139);
				((ShowStatementContext)_localctx).value = match(PROCEDURE_SYMBOL);
				setState(5140);
				match(STATUS_SYMBOL);
				setState(5142);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(5141);
					likeOrWhere();
					}
				}

				}
				break;
			case 32:
				{
				setState(5144);
				((ShowStatementContext)_localctx).value = match(FUNCTION_SYMBOL);
				setState(5145);
				match(STATUS_SYMBOL);
				setState(5147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
					{
					setState(5146);
					likeOrWhere();
					}
				}

				}
				break;
			case 33:
				{
				setState(5149);
				((ShowStatementContext)_localctx).value = match(PROCEDURE_SYMBOL);
				setState(5150);
				match(CODE_SYMBOL);
				setState(5151);
				procedureRef();
				}
				break;
			case 34:
				{
				setState(5152);
				((ShowStatementContext)_localctx).value = match(FUNCTION_SYMBOL);
				setState(5153);
				match(CODE_SYMBOL);
				setState(5154);
				functionRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommandTypeContext extends ParserRuleContext {
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public ShowCommandTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommandType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterShowCommandType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitShowCommandType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitShowCommandType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCommandTypeContext showCommandType() throws RecognitionException {
		ShowCommandTypeContext _localctx = new ShowCommandTypeContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_showCommandType);
		int _la;
		try {
			setState(5163);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5157);
				match(FULL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5158);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5159);
				match(EXTENDED_SYMBOL);
				setState(5161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					setState(5160);
					match(FULL_SYMBOL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonBlockingContext extends ParserRuleContext {
		public TerminalNode NONBLOCKING_SYMBOL() { return getToken(MySQLParser.NONBLOCKING_SYMBOL, 0); }
		public NonBlockingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonBlocking; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNonBlocking(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNonBlocking(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNonBlocking(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonBlockingContext nonBlocking() throws RecognitionException {
		NonBlockingContext _localctx = new NonBlockingContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_nonBlocking);
		try {
			setState(5170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5165);
				if (!(serverVersion >= 50700 && serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion >= 50700 && serverVersion < 50706");
				setState(5167);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
				case 1:
					{
					setState(5166);
					match(NONBLOCKING_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromOrInContext extends ParserRuleContext {
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public FromOrInContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromOrIn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFromOrIn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFromOrIn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFromOrIn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromOrInContext fromOrIn() throws RecognitionException {
		FromOrInContext _localctx = new FromOrInContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_fromOrIn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5172);
			_la = _input.LA(1);
			if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InDbContext extends ParserRuleContext {
		public FromOrInContext fromOrIn() {
			return getRuleContext(FromOrInContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public InDbContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inDb; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInDb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInDb(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InDbContext inDb() throws RecognitionException {
		InDbContext _localctx = new InDbContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_inDb);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5174);
			fromOrIn();
			setState(5175);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProfileTypeContext extends ParserRuleContext {
		public TerminalNode BLOCK_SYMBOL() { return getToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MySQLParser.IO_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public ProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_profileType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterProfileType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitProfileType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProfileTypeContext profileType() throws RecognitionException {
		ProfileTypeContext _localctx = new ProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_profileType);
		int _la;
		try {
			setState(5184);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BLOCK_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5177);
				match(BLOCK_SYMBOL);
				setState(5178);
				match(IO_SYMBOL);
				}
				break;
			case CONTEXT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5179);
				match(CONTEXT_SYMBOL);
				setState(5180);
				match(SWITCHES_SYMBOL);
				}
				break;
			case PAGE_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5181);
				match(PAGE_SYMBOL);
				setState(5182);
				match(FAULTS_SYMBOL);
				}
				break;
			case ALL_SYMBOL:
			case CPU_SYMBOL:
			case IPC_SYMBOL:
			case MEMORY_SYMBOL:
			case SOURCE_SYMBOL:
			case SWAPS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5183);
				_la = _input.LA(1);
				if ( !(_la==ALL_SYMBOL || _la==CPU_SYMBOL || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OtherAdministrativeStatementContext extends ParserRuleContext {
		public Token type;
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public KeyCacheListOrPartsContext keyCacheListOrParts() {
			return getRuleContext(KeyCacheListOrPartsContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public FlushTablesContext flushTables() {
			return getRuleContext(FlushTablesContext.class,0);
		}
		public List<FlushOptionContext> flushOption() {
			return getRuleContexts(FlushOptionContext.class);
		}
		public FlushOptionContext flushOption(int i) {
			return getRuleContext(FlushOptionContext.class,i);
		}
		public NoWriteToBinLogContext noWriteToBinLog() {
			return getRuleContext(NoWriteToBinLogContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode KILL_SYMBOL() { return getToken(MySQLParser.KILL_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public PreloadTailContext preloadTail() {
			return getRuleContext(PreloadTailContext.class,0);
		}
		public TerminalNode LOAD_SYMBOL() { return getToken(MySQLParser.LOAD_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public OtherAdministrativeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_otherAdministrativeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOtherAdministrativeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOtherAdministrativeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOtherAdministrativeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OtherAdministrativeStatementContext otherAdministrativeStatement() throws RecognitionException {
		OtherAdministrativeStatementContext _localctx = new OtherAdministrativeStatementContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_otherAdministrativeStatement);
		int _la;
		try {
			setState(5223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5186);
				((OtherAdministrativeStatementContext)_localctx).type = match(BINLOG_SYMBOL);
				setState(5187);
				textLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5188);
				((OtherAdministrativeStatementContext)_localctx).type = match(CACHE_SYMBOL);
				setState(5189);
				match(INDEX_SYMBOL);
				setState(5190);
				keyCacheListOrParts();
				setState(5191);
				match(IN_SYMBOL);
				setState(5194);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
				case 1:
					{
					setState(5192);
					identifier();
					}
					break;
				case 2:
					{
					setState(5193);
					match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5196);
				((OtherAdministrativeStatementContext)_localctx).type = match(FLUSH_SYMBOL);
				setState(5198);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
				case 1:
					{
					setState(5197);
					noWriteToBinLog();
					}
					break;
				}
				setState(5209);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
				case 1:
					{
					setState(5200);
					flushTables();
					}
					break;
				case 2:
					{
					setState(5201);
					flushOption();
					setState(5206);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						setState(5202);
						match(COMMA_SYMBOL);
						setState(5203);
						flushOption();
						}
						}
						setState(5208);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5211);
				((OtherAdministrativeStatementContext)_localctx).type = match(KILL_SYMBOL);
				setState(5213);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
				case 1:
					{
					setState(5212);
					_la = _input.LA(1);
					if ( !(_la==CONNECTION_SYMBOL || _la==QUERY_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(5215);
				expr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5216);
				((OtherAdministrativeStatementContext)_localctx).type = match(LOAD_SYMBOL);
				setState(5217);
				match(INDEX_SYMBOL);
				setState(5218);
				match(INTO_SYMBOL);
				setState(5219);
				match(CACHE_SYMBOL);
				setState(5220);
				preloadTail();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5221);
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				setState(5222);
				((OtherAdministrativeStatementContext)_localctx).type = match(SHUTDOWN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyCacheListOrPartsContext extends ParserRuleContext {
		public KeyCacheListContext keyCacheList() {
			return getRuleContext(KeyCacheListContext.class,0);
		}
		public AssignToKeycachePartitionContext assignToKeycachePartition() {
			return getRuleContext(AssignToKeycachePartitionContext.class,0);
		}
		public KeyCacheListOrPartsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyCacheListOrParts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyCacheListOrParts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyCacheListOrParts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyCacheListOrParts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyCacheListOrPartsContext keyCacheListOrParts() throws RecognitionException {
		KeyCacheListOrPartsContext _localctx = new KeyCacheListOrPartsContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_keyCacheListOrParts);
		try {
			setState(5227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5225);
				keyCacheList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5226);
				assignToKeycachePartition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyCacheListContext extends ParserRuleContext {
		public List<AssignToKeycacheContext> assignToKeycache() {
			return getRuleContexts(AssignToKeycacheContext.class);
		}
		public AssignToKeycacheContext assignToKeycache(int i) {
			return getRuleContext(AssignToKeycacheContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyCacheListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyCacheList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyCacheList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyCacheList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyCacheList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyCacheListContext keyCacheList() throws RecognitionException {
		KeyCacheListContext _localctx = new KeyCacheListContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_keyCacheList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5229);
			assignToKeycache();
			setState(5234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5230);
				match(COMMA_SYMBOL);
				setState(5231);
				assignToKeycache();
				}
				}
				setState(5236);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignToKeycacheContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public AssignToKeycacheContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignToKeycache; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAssignToKeycache(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAssignToKeycache(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAssignToKeycache(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignToKeycacheContext assignToKeycache() throws RecognitionException {
		AssignToKeycacheContext _localctx = new AssignToKeycacheContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_assignToKeycache);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5237);
			tableRef();
			setState(5239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(5238);
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignToKeycachePartitionContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public AssignToKeycachePartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignToKeycachePartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAssignToKeycachePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAssignToKeycachePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAssignToKeycachePartition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignToKeycachePartitionContext assignToKeycachePartition() throws RecognitionException {
		AssignToKeycachePartitionContext _localctx = new AssignToKeycachePartitionContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_assignToKeycachePartition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5241);
			tableRef();
			setState(5242);
			match(PARTITION_SYMBOL);
			setState(5243);
			match(OPEN_PAR_SYMBOL);
			setState(5244);
			allOrPartitionNameList();
			setState(5245);
			match(CLOSE_PAR_SYMBOL);
			setState(5247);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(5246);
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheKeyListContext extends ParserRuleContext {
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public KeyUsageListContext keyUsageList() {
			return getRuleContext(KeyUsageListContext.class,0);
		}
		public CacheKeyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheKeyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCacheKeyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCacheKeyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCacheKeyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheKeyListContext cacheKeyList() throws RecognitionException {
		CacheKeyListContext _localctx = new CacheKeyListContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_cacheKeyList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5249);
			keyOrIndex();
			setState(5250);
			match(OPEN_PAR_SYMBOL);
			setState(5252);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
			case 1:
				{
				setState(5251);
				keyUsageList();
				}
				break;
			}
			setState(5254);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyUsageElementContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public KeyUsageElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUsageElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyUsageElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyUsageElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyUsageElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyUsageElementContext keyUsageElement() throws RecognitionException {
		KeyUsageElementContext _localctx = new KeyUsageElementContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_keyUsageElement);
		try {
			setState(5258);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5256);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5257);
				match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyUsageListContext extends ParserRuleContext {
		public List<KeyUsageElementContext> keyUsageElement() {
			return getRuleContexts(KeyUsageElementContext.class);
		}
		public KeyUsageElementContext keyUsageElement(int i) {
			return getRuleContext(KeyUsageElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyUsageListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUsageList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyUsageList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyUsageList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyUsageList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyUsageListContext keyUsageList() throws RecognitionException {
		KeyUsageListContext _localctx = new KeyUsageListContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_keyUsageList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5260);
			keyUsageElement();
			setState(5265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5261);
				match(COMMA_SYMBOL);
				setState(5262);
				keyUsageElement();
				}
				}
				setState(5267);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOptionContext extends ParserRuleContext {
		public Token option;
		public TerminalNode DES_KEY_FILE_SYMBOL() { return getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public LogTypeContext logType() {
			return getRuleContext(LogTypeContext.class,0);
		}
		public TerminalNode RELAY_SYMBOL() { return getToken(MySQLParser.RELAY_SYMBOL, 0); }
		public ChannelContext channel() {
			return getRuleContext(ChannelContext.class,0);
		}
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode OPTIMIZER_COSTS_SYMBOL() { return getToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0); }
		public FlushOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFlushOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFlushOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFlushOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOptionContext flushOption() throws RecognitionException {
		FlushOptionContext _localctx = new FlushOptionContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_flushOption);
		int _la;
		try {
			setState(5283);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5268);
				((FlushOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DES_KEY_FILE_SYMBOL || _la==HOSTS_SYMBOL || _la==PRIVILEGES_SYMBOL || _la==STATUS_SYMBOL || _la==USER_RESOURCES_SYMBOL) ) {
					((FlushOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5270);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY_SYMBOL || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (ENGINE_SYMBOL - 163)) | (1L << (ERROR_SYMBOL - 163)) | (1L << (GENERAL_SYMBOL - 163)))) != 0) || _la==SLOW_SYMBOL) {
					{
					setState(5269);
					logType();
					}
				}

				setState(5272);
				((FlushOptionContext)_localctx).option = match(LOGS_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5273);
				((FlushOptionContext)_localctx).option = match(RELAY_SYMBOL);
				setState(5274);
				match(LOGS_SYMBOL);
				setState(5276);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
				case 1:
					{
					setState(5275);
					channel();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5278);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(5279);
				((FlushOptionContext)_localctx).option = match(QUERY_SYMBOL);
				setState(5280);
				match(CACHE_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5281);
				if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
				setState(5282);
				((FlushOptionContext)_localctx).option = match(OPTIMIZER_COSTS_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogTypeContext extends ParserRuleContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MySQLParser.SLOW_SYMBOL, 0); }
		public LogTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLogType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLogType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLogType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogTypeContext logType() throws RecognitionException {
		LogTypeContext _localctx = new LogTypeContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_logType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5285);
			_la = _input.LA(1);
			if ( !(_la==BINARY_SYMBOL || ((((_la - 163)) & ~0x3f) == 0 && ((1L << (_la - 163)) & ((1L << (ENGINE_SYMBOL - 163)) | (1L << (ERROR_SYMBOL - 163)) | (1L << (GENERAL_SYMBOL - 163)))) != 0) || _la==SLOW_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTablesContext extends ParserRuleContext {
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_SYMBOL() { return getToken(MySQLParser.TABLE_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public FlushTablesOptionsContext flushTablesOptions() {
			return getRuleContext(FlushTablesOptionsContext.class,0);
		}
		public FlushTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFlushTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFlushTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFlushTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTablesContext flushTables() throws RecognitionException {
		FlushTablesContext _localctx = new FlushTablesContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_flushTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5287);
			_la = _input.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
			case 1:
				{
				setState(5288);
				match(WITH_SYMBOL);
				setState(5289);
				match(READ_SYMBOL);
				setState(5290);
				match(LOCK_SYMBOL);
				}
				break;
			case 2:
				{
				setState(5291);
				identifierList();
				setState(5293);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
				case 1:
					{
					setState(5292);
					flushTablesOptions();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushTablesOptionsContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode READ_SYMBOL() { return getToken(MySQLParser.READ_SYMBOL, 0); }
		public TerminalNode LOCK_SYMBOL() { return getToken(MySQLParser.LOCK_SYMBOL, 0); }
		public FlushTablesOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushTablesOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFlushTablesOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFlushTablesOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFlushTablesOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushTablesOptionsContext flushTablesOptions() throws RecognitionException {
		FlushTablesOptionsContext _localctx = new FlushTablesOptionsContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_flushTablesOptions);
		try {
			setState(5303);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5297);
				if (!(serverVersion >= 50606)) throw new FailedPredicateException(this, "serverVersion >= 50606");
				setState(5298);
				match(FOR_SYMBOL);
				setState(5299);
				match(EXPORT_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5300);
				match(WITH_SYMBOL);
				setState(5301);
				match(READ_SYMBOL);
				setState(5302);
				match(LOCK_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreloadTailContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public AdminPartitionContext adminPartition() {
			return getRuleContext(AdminPartitionContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadListContext preloadList() {
			return getRuleContext(PreloadListContext.class,0);
		}
		public PreloadTailContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadTail; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPreloadTail(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPreloadTail(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPreloadTail(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreloadTailContext preloadTail() throws RecognitionException {
		PreloadTailContext _localctx = new PreloadTailContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_preloadTail);
		int _la;
		try {
			setState(5315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5305);
				tableRef();
				setState(5306);
				adminPartition();
				setState(5308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					setState(5307);
					cacheKeyList();
					}
				}

				setState(5312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL) {
					{
					setState(5310);
					match(IGNORE_SYMBOL);
					setState(5311);
					match(LEAVES_SYMBOL);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5314);
				preloadList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreloadListContext extends ParserRuleContext {
		public List<PreloadKeysContext> preloadKeys() {
			return getRuleContexts(PreloadKeysContext.class);
		}
		public PreloadKeysContext preloadKeys(int i) {
			return getRuleContext(PreloadKeysContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PreloadListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPreloadList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPreloadList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPreloadList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreloadListContext preloadList() throws RecognitionException {
		PreloadListContext _localctx = new PreloadListContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_preloadList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5317);
			preloadKeys();
			setState(5322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5318);
				match(COMMA_SYMBOL);
				setState(5319);
				preloadKeys();
				}
				}
				setState(5324);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreloadKeysContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public CacheKeyListContext cacheKeyList() {
			return getRuleContext(CacheKeyListContext.class,0);
		}
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public PreloadKeysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preloadKeys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPreloadKeys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPreloadKeys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPreloadKeys(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreloadKeysContext preloadKeys() throws RecognitionException {
		PreloadKeysContext _localctx = new PreloadKeysContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_preloadKeys);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5325);
			tableRef();
			setState(5327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				setState(5326);
				cacheKeyList();
				}
			}

			setState(5331);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				setState(5329);
				match(IGNORE_SYMBOL);
				setState(5330);
				match(LEAVES_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdminPartitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public AllOrPartitionNameListContext allOrPartitionNameList() {
			return getRuleContext(AllOrPartitionNameListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public AdminPartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_adminPartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAdminPartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAdminPartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAdminPartition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdminPartitionContext adminPartition() throws RecognitionException {
		AdminPartitionContext _localctx = new AdminPartitionContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_adminPartition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5333);
			match(PARTITION_SYMBOL);
			setState(5334);
			match(OPEN_PAR_SYMBOL);
			setState(5335);
			allOrPartitionNameList();
			setState(5336);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupManagementContext extends ParserRuleContext {
		public CreateResourceGroupContext createResourceGroup() {
			return getRuleContext(CreateResourceGroupContext.class,0);
		}
		public AlterResourceGroupContext alterResourceGroup() {
			return getRuleContext(AlterResourceGroupContext.class,0);
		}
		public SetResourceGroupContext setResourceGroup() {
			return getRuleContext(SetResourceGroupContext.class,0);
		}
		public DropResourceGroupContext dropResourceGroup() {
			return getRuleContext(DropResourceGroupContext.class,0);
		}
		public ResourceGroupManagementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupManagement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResourceGroupManagement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResourceGroupManagement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResourceGroupManagement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceGroupManagementContext resourceGroupManagement() throws RecognitionException {
		ResourceGroupManagementContext _localctx = new ResourceGroupManagementContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_resourceGroupManagement);
		try {
			setState(5342);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5338);
				createResourceGroup();
				}
				break;
			case ALTER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5339);
				alterResourceGroup();
				}
				break;
			case SET_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5340);
				setResourceGroup();
				}
				break;
			case DROP_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5341);
				dropResourceGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateResourceGroupContext extends ParserRuleContext {
		public TerminalNode CREATE_SYMBOL() { return getToken(MySQLParser.CREATE_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode SYSTEM_SYMBOL() { return getToken(MySQLParser.SYSTEM_SYMBOL, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return getRuleContext(ResourceGroupVcpuListContext.class,0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return getRuleContext(ResourceGroupPriorityContext.class,0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return getRuleContext(ResourceGroupEnableDisableContext.class,0);
		}
		public CreateResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateResourceGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateResourceGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateResourceGroupContext createResourceGroup() throws RecognitionException {
		CreateResourceGroupContext _localctx = new CreateResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_createResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5344);
			match(CREATE_SYMBOL);
			setState(5345);
			match(RESOURCE_SYMBOL);
			setState(5346);
			match(GROUP_SYMBOL);
			setState(5347);
			identifier();
			setState(5348);
			match(TYPE_SYMBOL);
			setState(5350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(5349);
				equal();
				}
			}

			setState(5352);
			_la = _input.LA(1);
			if ( !(_la==USER_SYMBOL || _la==SYSTEM_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				setState(5353);
				resourceGroupVcpuList();
				}
			}

			setState(5357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				setState(5356);
				resourceGroupPriority();
				}
			}

			setState(5360);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				setState(5359);
				resourceGroupEnableDisable();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupVcpuListContext extends ParserRuleContext {
		public TerminalNode VCPU_SYMBOL() { return getToken(MySQLParser.VCPU_SYMBOL, 0); }
		public List<VcpuNumOrRangeContext> vcpuNumOrRange() {
			return getRuleContexts(VcpuNumOrRangeContext.class);
		}
		public VcpuNumOrRangeContext vcpuNumOrRange(int i) {
			return getRuleContext(VcpuNumOrRangeContext.class,i);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResourceGroupVcpuListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupVcpuList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResourceGroupVcpuList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResourceGroupVcpuList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResourceGroupVcpuList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceGroupVcpuListContext resourceGroupVcpuList() throws RecognitionException {
		ResourceGroupVcpuListContext _localctx = new ResourceGroupVcpuListContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_resourceGroupVcpuList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5362);
			match(VCPU_SYMBOL);
			setState(5364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(5363);
				equal();
				}
			}

			setState(5366);
			vcpuNumOrRange();
			setState(5373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INT_NUMBER || _la==COMMA_SYMBOL) {
				{
				{
				setState(5368);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5367);
					match(COMMA_SYMBOL);
					}
				}

				setState(5370);
				vcpuNumOrRange();
				}
				}
				setState(5375);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VcpuNumOrRangeContext extends ParserRuleContext {
		public List<TerminalNode> INT_NUMBER() { return getTokens(MySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MySQLParser.INT_NUMBER, i);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public VcpuNumOrRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vcpuNumOrRange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterVcpuNumOrRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitVcpuNumOrRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitVcpuNumOrRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VcpuNumOrRangeContext vcpuNumOrRange() throws RecognitionException {
		VcpuNumOrRangeContext _localctx = new VcpuNumOrRangeContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_vcpuNumOrRange);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5376);
			match(INT_NUMBER);
			setState(5379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS_OPERATOR) {
				{
				setState(5377);
				match(MINUS_OPERATOR);
				setState(5378);
				match(INT_NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupPriorityContext extends ParserRuleContext {
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public ResourceGroupPriorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupPriority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResourceGroupPriority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResourceGroupPriority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResourceGroupPriority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceGroupPriorityContext resourceGroupPriority() throws RecognitionException {
		ResourceGroupPriorityContext _localctx = new ResourceGroupPriorityContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_resourceGroupPriority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5381);
			match(THREAD_PRIORITY_SYMBOL);
			setState(5383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				setState(5382);
				equal();
				}
			}

			setState(5385);
			match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupEnableDisableContext extends ParserRuleContext {
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public ResourceGroupEnableDisableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupEnableDisable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResourceGroupEnableDisable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResourceGroupEnableDisable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResourceGroupEnableDisable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceGroupEnableDisableContext resourceGroupEnableDisable() throws RecognitionException {
		ResourceGroupEnableDisableContext _localctx = new ResourceGroupEnableDisableContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_resourceGroupEnableDisable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5387);
			_la = _input.LA(1);
			if ( !(_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterResourceGroupContext extends ParserRuleContext {
		public TerminalNode ALTER_SYMBOL() { return getToken(MySQLParser.ALTER_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return getRuleContext(ResourceGroupRefContext.class,0);
		}
		public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return getRuleContext(ResourceGroupVcpuListContext.class,0);
		}
		public ResourceGroupPriorityContext resourceGroupPriority() {
			return getRuleContext(ResourceGroupPriorityContext.class,0);
		}
		public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return getRuleContext(ResourceGroupEnableDisableContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public AlterResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterResourceGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterResourceGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterResourceGroupContext alterResourceGroup() throws RecognitionException {
		AlterResourceGroupContext _localctx = new AlterResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_alterResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5389);
			match(ALTER_SYMBOL);
			setState(5390);
			match(RESOURCE_SYMBOL);
			setState(5391);
			match(GROUP_SYMBOL);
			setState(5392);
			resourceGroupRef();
			setState(5394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				setState(5393);
				resourceGroupVcpuList();
				}
			}

			setState(5397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				setState(5396);
				resourceGroupPriority();
				}
			}

			setState(5400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				setState(5399);
				resourceGroupEnableDisable();
				}
			}

			setState(5403);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				setState(5402);
				match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResourceGroupContext extends ParserRuleContext {
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public ThreadIdListContext threadIdList() {
			return getRuleContext(ThreadIdListContext.class,0);
		}
		public SetResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetResourceGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetResourceGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResourceGroupContext setResourceGroup() throws RecognitionException {
		SetResourceGroupContext _localctx = new SetResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_setResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5405);
			match(SET_SYMBOL);
			setState(5406);
			match(RESOURCE_SYMBOL);
			setState(5407);
			match(GROUP_SYMBOL);
			setState(5408);
			identifier();
			setState(5411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				setState(5409);
				match(FOR_SYMBOL);
				setState(5410);
				threadIdList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThreadIdListContext extends ParserRuleContext {
		public List<Real_ulong_numberContext> real_ulong_number() {
			return getRuleContexts(Real_ulong_numberContext.class);
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return getRuleContext(Real_ulong_numberContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ThreadIdListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_threadIdList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterThreadIdList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitThreadIdList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitThreadIdList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThreadIdListContext threadIdList() throws RecognitionException {
		ThreadIdListContext _localctx = new ThreadIdListContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_threadIdList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5413);
			real_ulong_number();
			setState(5420);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (COMMA_SYMBOL - 747)) | (1L << (HEX_NUMBER - 747)))) != 0)) {
				{
				{
				setState(5415);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5414);
					match(COMMA_SYMBOL);
					}
				}

				setState(5417);
				real_ulong_number();
				}
				}
				setState(5422);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropResourceGroupContext extends ParserRuleContext {
		public TerminalNode DROP_SYMBOL() { return getToken(MySQLParser.DROP_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode GROUP_SYMBOL() { return getToken(MySQLParser.GROUP_SYMBOL, 0); }
		public ResourceGroupRefContext resourceGroupRef() {
			return getRuleContext(ResourceGroupRefContext.class,0);
		}
		public TerminalNode FORCE_SYMBOL() { return getToken(MySQLParser.FORCE_SYMBOL, 0); }
		public DropResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDropResourceGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDropResourceGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDropResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropResourceGroupContext dropResourceGroup() throws RecognitionException {
		DropResourceGroupContext _localctx = new DropResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_dropResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5423);
			match(DROP_SYMBOL);
			setState(5424);
			match(RESOURCE_SYMBOL);
			setState(5425);
			match(GROUP_SYMBOL);
			setState(5426);
			resourceGroupRef();
			setState(5428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				setState(5427);
				match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UtilityStatementContext extends ParserRuleContext {
		public DescribeStatementContext describeStatement() {
			return getRuleContext(DescribeStatementContext.class,0);
		}
		public ExplainStatementContext explainStatement() {
			return getRuleContext(ExplainStatementContext.class,0);
		}
		public HelpCommandContext helpCommand() {
			return getRuleContext(HelpCommandContext.class,0);
		}
		public UseCommandContext useCommand() {
			return getRuleContext(UseCommandContext.class,0);
		}
		public RestartServerContext restartServer() {
			return getRuleContext(RestartServerContext.class,0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_utilityStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUtilityStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUtilityStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUtilityStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UtilityStatementContext utilityStatement() throws RecognitionException {
		UtilityStatementContext _localctx = new UtilityStatementContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_utilityStatement);
		try {
			setState(5436);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5430);
				describeStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5431);
				explainStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5432);
				helpCommand();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5433);
				useCommand();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5434);
				if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
				setState(5435);
				restartServer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeStatementContext extends ParserRuleContext {
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public TerminalNode EXPLAIN_SYMBOL() { return getToken(MySQLParser.EXPLAIN_SYMBOL, 0); }
		public TerminalNode DESCRIBE_SYMBOL() { return getToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public DescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeStatementContext describeStatement() throws RecognitionException {
		DescribeStatementContext _localctx = new DescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_describeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5438);
			_la = _input.LA(1);
			if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (DESC_SYMBOL - 134)) | (1L << (DESCRIBE_SYMBOL - 134)) | (1L << (EXPLAIN_SYMBOL - 134)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5439);
			tableRef();
			setState(5442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
			case 1:
				{
				setState(5440);
				textString();
				}
				break;
			case 2:
				{
				setState(5441);
				columnRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainStatementContext extends ParserRuleContext {
		public ExplainableStatementContext explainableStatement() {
			return getRuleContext(ExplainableStatementContext.class,0);
		}
		public TerminalNode EXPLAIN_SYMBOL() { return getToken(MySQLParser.EXPLAIN_SYMBOL, 0); }
		public TerminalNode DESCRIBE_SYMBOL() { return getToken(MySQLParser.DESCRIBE_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode ANALYZE_SYMBOL() { return getToken(MySQLParser.ANALYZE_SYMBOL, 0); }
		public ExplainStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExplainStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExplainStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExplainStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainStatementContext explainStatement() throws RecognitionException {
		ExplainStatementContext _localctx = new ExplainStatementContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_explainStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5444);
			_la = _input.LA(1);
			if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (DESC_SYMBOL - 134)) | (1L << (DESCRIBE_SYMBOL - 134)) | (1L << (EXPLAIN_SYMBOL - 134)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5460);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
			case 1:
				{
				setState(5445);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(5446);
				match(EXTENDED_SYMBOL);
				}
				break;
			case 2:
				{
				setState(5447);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(5448);
				match(PARTITIONS_SYMBOL);
				}
				break;
			case 3:
				{
				setState(5449);
				if (!(serverVersion >= 50605)) throw new FailedPredicateException(this, "serverVersion >= 50605");
				setState(5450);
				match(FORMAT_SYMBOL);
				setState(5451);
				match(EQUAL_OPERATOR);
				setState(5452);
				textOrIdentifier();
				}
				break;
			case 4:
				{
				setState(5453);
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				setState(5454);
				match(ANALYZE_SYMBOL);
				}
				break;
			case 5:
				{
				setState(5455);
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				setState(5456);
				match(ANALYZE_SYMBOL);
				setState(5457);
				match(FORMAT_SYMBOL);
				setState(5458);
				match(EQUAL_OPERATOR);
				setState(5459);
				textOrIdentifier();
				}
				break;
			}
			setState(5462);
			explainableStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainableStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public ExplainableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExplainableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExplainableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExplainableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainableStatementContext explainableStatement() throws RecognitionException {
		ExplainableStatementContext _localctx = new ExplainableStatementContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_explainableStatement);
		try {
			setState(5476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5464);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5465);
				if (!(serverVersion >= 50603)) throw new FailedPredicateException(this, "serverVersion >= 50603");
				setState(5470);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,692,_ctx) ) {
				case 1:
					{
					setState(5466);
					deleteStatement();
					}
					break;
				case 2:
					{
					setState(5467);
					insertStatement();
					}
					break;
				case 3:
					{
					setState(5468);
					replaceStatement();
					}
					break;
				case 4:
					{
					setState(5469);
					updateStatement();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5472);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(5473);
				match(FOR_SYMBOL);
				setState(5474);
				match(CONNECTION_SYMBOL);
				setState(5475);
				real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpCommandContext extends ParserRuleContext {
		public TerminalNode HELP_SYMBOL() { return getToken(MySQLParser.HELP_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public HelpCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHelpCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHelpCommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHelpCommand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpCommandContext helpCommand() throws RecognitionException {
		HelpCommandContext _localctx = new HelpCommandContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_helpCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5478);
			match(HELP_SYMBOL);
			setState(5479);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseCommandContext extends ParserRuleContext {
		public TerminalNode USE_SYMBOL() { return getToken(MySQLParser.USE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UseCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUseCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUseCommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUseCommand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseCommandContext useCommand() throws RecognitionException {
		UseCommandContext _localctx = new UseCommandContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_useCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5481);
			match(USE_SYMBOL);
			setState(5482);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestartServerContext extends ParserRuleContext {
		public TerminalNode RESTART_SYMBOL() { return getToken(MySQLParser.RESTART_SYMBOL, 0); }
		public RestartServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restartServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRestartServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRestartServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRestartServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestartServerContext restartServer() throws RecognitionException {
		RestartServerContext _localctx = new RestartServerContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_restartServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5484);
			match(RESTART_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
	 
		public ExprContext() { }
		public void copyFrom(ExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ExprOrContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode OR_SYMBOL() { return getToken(MySQLParser.OR_SYMBOL, 0); }
		public TerminalNode LOGICAL_OR_OPERATOR() { return getToken(MySQLParser.LOGICAL_OR_OPERATOR, 0); }
		public ExprOrContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprOr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprOr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprOr(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExprNotContext extends ExprContext {
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ExprNotContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprNot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprNot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprNot(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExprIsContext extends ExprContext {
		public Token type;
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public TerminalNode IS_SYMBOL() { return getToken(MySQLParser.IS_SYMBOL, 0); }
		public TerminalNode TRUE_SYMBOL() { return getToken(MySQLParser.TRUE_SYMBOL, 0); }
		public TerminalNode FALSE_SYMBOL() { return getToken(MySQLParser.FALSE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public ExprIsContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprIs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprIs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprIs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExprAndContext extends ExprContext {
		public Token op;
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public TerminalNode LOGICAL_AND_OPERATOR() { return getToken(MySQLParser.LOGICAL_AND_OPERATOR, 0); }
		public ExprAndContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprAnd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprAnd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprAnd(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExprXorContext extends ExprContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode XOR_SYMBOL() { return getToken(MySQLParser.XOR_SYMBOL, 0); }
		public ExprXorContext(ExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprXor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprXor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprXor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 676;
		enterRecursionRule(_localctx, 676, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5497);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
			case 1:
				{
				_localctx = new ExprIsContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5487);
				boolPri(0);
				setState(5493);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
				case 1:
					{
					setState(5488);
					match(IS_SYMBOL);
					setState(5490);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT_SYMBOL || _la==NOT2_SYMBOL) {
						{
						setState(5489);
						notRule();
						}
					}

					setState(5492);
					((ExprIsContext)_localctx).type = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL || _la==UNKNOWN_SYMBOL) ) {
						((ExprIsContext)_localctx).type = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new ExprNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5495);
				match(NOT_SYMBOL);
				setState(5496);
				expr(4);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5510);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,698,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5508);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
					case 1:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(5499);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5500);
						((ExprAndContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==AND_SYMBOL || _la==LOGICAL_AND_OPERATOR) ) {
							((ExprAndContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5501);
						expr(4);
						}
						break;
					case 2:
						{
						_localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(5502);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5503);
						match(XOR_SYMBOL);
						setState(5504);
						expr(3);
						}
						break;
					case 3:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(5505);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5506);
						((ExprOrContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==OR_SYMBOL || _la==LOGICAL_OR_OPERATOR) ) {
							((ExprOrContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5507);
						expr(2);
						}
						break;
					}
					} 
				}
				setState(5512);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,698,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class BoolPriContext extends ParserRuleContext {
		public BoolPriContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolPri; }
	 
		public BoolPriContext() { }
		public void copyFrom(BoolPriContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PrimaryExprPredicateContext extends BoolPriContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PrimaryExprPredicateContext(BoolPriContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPrimaryExprPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPrimaryExprPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPrimaryExprPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryExprCompareContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public CompOpContext compOp() {
			return getRuleContext(CompOpContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PrimaryExprCompareContext(BoolPriContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPrimaryExprCompare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPrimaryExprCompare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPrimaryExprCompare(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryExprAllAnyContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public CompOpContext compOp() {
			return getRuleContext(CompOpContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MySQLParser.ANY_SYMBOL, 0); }
		public PrimaryExprAllAnyContext(BoolPriContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPrimaryExprAllAny(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPrimaryExprAllAny(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPrimaryExprAllAny(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryExprIsNullContext extends BoolPriContext {
		public BoolPriContext boolPri() {
			return getRuleContext(BoolPriContext.class,0);
		}
		public TerminalNode IS_SYMBOL() { return getToken(MySQLParser.IS_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public PrimaryExprIsNullContext(BoolPriContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPrimaryExprIsNull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPrimaryExprIsNull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPrimaryExprIsNull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolPriContext boolPri() throws RecognitionException {
		return boolPri(0);
	}

	private BoolPriContext boolPri(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BoolPriContext _localctx = new BoolPriContext(_ctx, _parentState);
		BoolPriContext _prevctx = _localctx;
		int _startState = 678;
		enterRecursionRule(_localctx, 678, RULE_boolPri, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryExprPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(5514);
			predicate();
			}
			_ctx.stop = _input.LT(-1);
			setState(5533);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,701,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5531);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
					case 1:
						{
						_localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(5516);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5517);
						match(IS_SYMBOL);
						setState(5519);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT_SYMBOL || _la==NOT2_SYMBOL) {
							{
							setState(5518);
							notRule();
							}
						}

						setState(5521);
						match(NULL_SYMBOL);
						}
						break;
					case 2:
						{
						_localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(5522);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5523);
						compOp();
						setState(5524);
						predicate();
						}
						break;
					case 3:
						{
						_localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						setState(5526);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5527);
						compOp();
						setState(5528);
						_la = _input.LA(1);
						if ( !(_la==ALL_SYMBOL || _la==ANY_SYMBOL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5529);
						subquery();
						}
						break;
					}
					} 
				}
				setState(5535);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,701,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CompOpContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode NULL_SAFE_EQUAL_OPERATOR() { return getToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OPERATOR() { return getToken(MySQLParser.GREATER_THAN_OPERATOR, 0); }
		public TerminalNode LESS_OR_EQUAL_OPERATOR() { return getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0); }
		public TerminalNode LESS_THAN_OPERATOR() { return getToken(MySQLParser.LESS_THAN_OPERATOR, 0); }
		public TerminalNode NOT_EQUAL_OPERATOR() { return getToken(MySQLParser.NOT_EQUAL_OPERATOR, 0); }
		public CompOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCompOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCompOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCompOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompOpContext compOp() throws RecognitionException {
		CompOpContext _localctx = new CompOpContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_compOp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5536);
			_la = _input.LA(1);
			if ( !(((((_la - 750)) & ~0x3f) == 0 && ((1L << (_la - 750)) & ((1L << (EQUAL_OPERATOR - 750)) | (1L << (NULL_SAFE_EQUAL_OPERATOR - 750)) | (1L << (GREATER_OR_EQUAL_OPERATOR - 750)) | (1L << (GREATER_THAN_OPERATOR - 750)) | (1L << (LESS_OR_EQUAL_OPERATOR - 750)) | (1L << (LESS_THAN_OPERATOR - 750)) | (1L << (NOT_EQUAL_OPERATOR - 750)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public PredicateOperationsContext predicateOperations() {
			return getRuleContext(PredicateOperationsContext.class,0);
		}
		public TerminalNode MEMBER_SYMBOL() { return getToken(MySQLParser.MEMBER_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return getRuleContext(SimpleExprWithParenthesesContext.class,0);
		}
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode OF_SYMBOL() { return getToken(MySQLParser.OF_SYMBOL, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5538);
			bitExpr(0);
			setState(5552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
			case 1:
				{
				setState(5540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL || _la==NOT2_SYMBOL) {
					{
					setState(5539);
					notRule();
					}
				}

				setState(5542);
				predicateOperations();
				}
				break;
			case 2:
				{
				setState(5543);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(5544);
				match(MEMBER_SYMBOL);
				setState(5546);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF_SYMBOL) {
					{
					setState(5545);
					match(OF_SYMBOL);
					}
				}

				setState(5548);
				simpleExprWithParentheses();
				}
				break;
			case 3:
				{
				setState(5549);
				match(SOUNDS_SYMBOL);
				setState(5550);
				match(LIKE_SYMBOL);
				setState(5551);
				bitExpr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateOperationsContext extends ParserRuleContext {
		public PredicateOperationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicateOperations; }
	 
		public PredicateOperationsContext() { }
		public void copyFrom(PredicateOperationsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PredicateExprRegexContext extends PredicateOperationsContext {
		public TerminalNode REGEXP_SYMBOL() { return getToken(MySQLParser.REGEXP_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public PredicateExprRegexContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPredicateExprRegex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPredicateExprRegex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPredicateExprRegex(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExprBetweenContext extends PredicateOperationsContext {
		public TerminalNode BETWEEN_SYMBOL() { return getToken(MySQLParser.BETWEEN_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode AND_SYMBOL() { return getToken(MySQLParser.AND_SYMBOL, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExprBetweenContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPredicateExprBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPredicateExprBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPredicateExprBetween(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExprInContext extends PredicateOperationsContext {
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PredicateExprInContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPredicateExprIn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPredicateExprIn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPredicateExprIn(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExprLikeContext extends PredicateOperationsContext {
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public PredicateExprLikeContext(PredicateOperationsContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPredicateExprLike(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPredicateExprLike(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPredicateExprLike(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateOperationsContext predicateOperations() throws RecognitionException {
		PredicateOperationsContext _localctx = new PredicateOperationsContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_predicateOperations);
		try {
			setState(5575);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN_SYMBOL:
				_localctx = new PredicateExprInContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(5554);
				match(IN_SYMBOL);
				setState(5560);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
				case 1:
					{
					setState(5555);
					subquery();
					}
					break;
				case 2:
					{
					setState(5556);
					match(OPEN_PAR_SYMBOL);
					setState(5557);
					exprList();
					setState(5558);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case BETWEEN_SYMBOL:
				_localctx = new PredicateExprBetweenContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(5562);
				match(BETWEEN_SYMBOL);
				setState(5563);
				bitExpr(0);
				setState(5564);
				match(AND_SYMBOL);
				setState(5565);
				predicate();
				}
				break;
			case LIKE_SYMBOL:
				_localctx = new PredicateExprLikeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(5567);
				match(LIKE_SYMBOL);
				setState(5568);
				simpleExpr(0);
				setState(5571);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
				case 1:
					{
					setState(5569);
					match(ESCAPE_SYMBOL);
					setState(5570);
					simpleExpr(0);
					}
					break;
				}
				}
				break;
			case REGEXP_SYMBOL:
				_localctx = new PredicateExprRegexContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(5573);
				match(REGEXP_SYMBOL);
				setState(5574);
				bitExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitExprContext extends ParserRuleContext {
		public Token op;
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public TerminalNode BITWISE_XOR_OPERATOR() { return getToken(MySQLParser.BITWISE_XOR_OPERATOR, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode DIV_OPERATOR() { return getToken(MySQLParser.DIV_OPERATOR, 0); }
		public TerminalNode MOD_OPERATOR() { return getToken(MySQLParser.MOD_OPERATOR, 0); }
		public TerminalNode DIV_SYMBOL() { return getToken(MySQLParser.DIV_SYMBOL, 0); }
		public TerminalNode MOD_SYMBOL() { return getToken(MySQLParser.MOD_SYMBOL, 0); }
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public TerminalNode SHIFT_LEFT_OPERATOR() { return getToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0); }
		public TerminalNode SHIFT_RIGHT_OPERATOR() { return getToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0); }
		public TerminalNode BITWISE_AND_OPERATOR() { return getToken(MySQLParser.BITWISE_AND_OPERATOR, 0); }
		public TerminalNode BITWISE_OR_OPERATOR() { return getToken(MySQLParser.BITWISE_OR_OPERATOR, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public BitExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterBitExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitBitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitBitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitExprContext bitExpr() throws RecognitionException {
		return bitExpr(0);
	}

	private BitExprContext bitExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BitExprContext _localctx = new BitExprContext(_ctx, _parentState);
		BitExprContext _prevctx = _localctx;
		int _startState = 686;
		enterRecursionRule(_localctx, 686, RULE_bitExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(5578);
			simpleExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(5606);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,709,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5604);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,708,_ctx) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5580);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5581);
						((BitExprContext)_localctx).op = match(BITWISE_XOR_OPERATOR);
						setState(5582);
						bitExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5583);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(5584);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==DIV_SYMBOL || _la==MOD_SYMBOL || ((((_la - 760)) & ~0x3f) == 0 && ((1L << (_la - 760)) & ((1L << (MULT_OPERATOR - 760)) | (1L << (DIV_OPERATOR - 760)) | (1L << (MOD_OPERATOR - 760)))) != 0)) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5585);
						bitExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5586);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5587);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5588);
						bitExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5589);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5590);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==SHIFT_LEFT_OPERATOR || _la==SHIFT_RIGHT_OPERATOR) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5591);
						bitExpr(4);
						}
						break;
					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5592);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5593);
						((BitExprContext)_localctx).op = match(BITWISE_AND_OPERATOR);
						setState(5594);
						bitExpr(3);
						}
						break;
					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5595);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(5596);
						((BitExprContext)_localctx).op = match(BITWISE_OR_OPERATOR);
						setState(5597);
						bitExpr(2);
						}
						break;
					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(5598);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(5599);
						((BitExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							((BitExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5600);
						match(INTERVAL_SYMBOL);
						setState(5601);
						expr(0);
						setState(5602);
						interval();
						}
						break;
					}
					} 
				}
				setState(5608);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,709,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpleExprContext extends ParserRuleContext {
		public SimpleExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExpr; }
	 
		public SimpleExprContext() { }
		public void copyFrom(SimpleExprContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SimpleExprConvertContext extends SimpleExprContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public CastTypeContext castType() {
			return getRuleContext(CastTypeContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprConvert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprConvert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprConvert(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprVariableContext extends SimpleExprContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SimpleExprVariableContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprVariable(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprCastContext extends SimpleExprContext {
		public TerminalNode CAST_SYMBOL() { return getToken(MySQLParser.CAST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public CastTypeContext castType() {
			return getRuleContext(CastTypeContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ArrayCastContext arrayCast() {
			return getRuleContext(ArrayCastContext.class,0);
		}
		public SimpleExprCastContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprCast(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprUnaryContext extends SimpleExprContext {
		public Token op;
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public TerminalNode BITWISE_NOT_OPERATOR() { return getToken(MySQLParser.BITWISE_NOT_OPERATOR, 0); }
		public SimpleExprUnaryContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprUnary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprUnary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprUnary(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprOdbcContext extends SimpleExprContext {
		public TerminalNode OPEN_CURLY_SYMBOL() { return getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_CURLY_SYMBOL() { return getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0); }
		public SimpleExprOdbcContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprOdbc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprOdbc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprOdbc(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprRuntimeFunctionContext extends SimpleExprContext {
		public RuntimeFunctionCallContext runtimeFunctionCall() {
			return getRuleContext(RuntimeFunctionCallContext.class,0);
		}
		public SimpleExprRuntimeFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprRuntimeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprRuntimeFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprRuntimeFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprFunctionContext extends SimpleExprContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public SimpleExprFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprCollateContext extends SimpleExprContext {
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public SimpleExprCollateContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprCollate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprMatchContext extends SimpleExprContext {
		public TerminalNode MATCH_SYMBOL() { return getToken(MySQLParser.MATCH_SYMBOL, 0); }
		public IdentListArgContext identListArg() {
			return getRuleContext(IdentListArgContext.class,0);
		}
		public TerminalNode AGAINST_SYMBOL() { return getToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FulltextOptionsContext fulltextOptions() {
			return getRuleContext(FulltextOptionsContext.class,0);
		}
		public SimpleExprMatchContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprMatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprMatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprMatch(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprWindowingFunctionContext extends SimpleExprContext {
		public WindowFunctionCallContext windowFunctionCall() {
			return getRuleContext(WindowFunctionCallContext.class,0);
		}
		public SimpleExprWindowingFunctionContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprWindowingFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprWindowingFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprWindowingFunction(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprBinaryContext extends SimpleExprContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public SimpleExprBinaryContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprBinary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprBinary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprBinary(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprColumnRefContext extends SimpleExprContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public SimpleExprColumnRefContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprColumnRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprColumnRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprColumnRef(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprParamMarkerContext extends SimpleExprContext {
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public SimpleExprParamMarkerContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprParamMarker(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprParamMarker(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprParamMarker(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprSumContext extends SimpleExprContext {
		public SumExprContext sumExpr() {
			return getRuleContext(SumExprContext.class,0);
		}
		public SimpleExprSumContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprSum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprSum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprSum(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprConvertUsingContext extends SimpleExprContext {
		public TerminalNode CONVERT_SYMBOL() { return getToken(MySQLParser.CONVERT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertUsingContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprConvertUsing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprConvertUsing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprConvertUsing(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprSubQueryContext extends SimpleExprContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public SimpleExprSubQueryContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprSubQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprSubQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprSubQuery(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprGroupingOperationContext extends SimpleExprContext {
		public GroupingOperationContext groupingOperation() {
			return getRuleContext(GroupingOperationContext.class,0);
		}
		public SimpleExprGroupingOperationContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprGroupingOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprGroupingOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprGroupingOperation(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprNotContext extends SimpleExprContext {
		public Not2RuleContext not2Rule() {
			return getRuleContext(Not2RuleContext.class,0);
		}
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public SimpleExprNotContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprNot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprNot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprNot(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprValuesContext extends SimpleExprContext {
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return getRuleContext(SimpleIdentifierContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprValuesContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprValues(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprDefaultContext extends SimpleExprContext {
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleIdentifierContext simpleIdentifier() {
			return getRuleContext(SimpleIdentifierContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprDefaultContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprDefault(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprListContext extends SimpleExprContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public SimpleExprListContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprIntervalContext extends SimpleExprContext {
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public SimpleExprIntervalContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprInterval(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprCaseContext extends SimpleExprContext {
		public TerminalNode CASE_SYMBOL() { return getToken(MySQLParser.CASE_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<WhenExpressionContext> whenExpression() {
			return getRuleContexts(WhenExpressionContext.class);
		}
		public WhenExpressionContext whenExpression(int i) {
			return getRuleContext(WhenExpressionContext.class,i);
		}
		public List<ThenExpressionContext> thenExpression() {
			return getRuleContexts(ThenExpressionContext.class);
		}
		public ThenExpressionContext thenExpression(int i) {
			return getRuleContext(ThenExpressionContext.class,i);
		}
		public ElseExpressionContext elseExpression() {
			return getRuleContext(ElseExpressionContext.class,0);
		}
		public SimpleExprCaseContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprCase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprCase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprCase(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprConcatContext extends SimpleExprContext {
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode CONCAT_PIPES_SYMBOL() { return getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0); }
		public SimpleExprConcatContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprConcat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprConcat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprConcat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleExprLiteralContext extends SimpleExprContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public SimpleExprLiteralContext(SimpleExprContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleExprContext simpleExpr() throws RecognitionException {
		return simpleExpr(0);
	}

	private SimpleExprContext simpleExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SimpleExprContext _localctx = new SimpleExprContext(_ctx, _parentState);
		SimpleExprContext _prevctx = _localctx;
		int _startState = 688;
		enterRecursionRule(_localctx, 688, RULE_simpleExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5718);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
			case 1:
				{
				_localctx = new SimpleExprVariableContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(5610);
				variable();
				setState(5614);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
				case 1:
					{
					setState(5611);
					equal();
					setState(5612);
					expr(0);
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new SimpleExprColumnRefContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5616);
				columnRef();
				setState(5618);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
				case 1:
					{
					setState(5617);
					jsonOperator();
					}
					break;
				}
				}
				break;
			case 3:
				{
				_localctx = new SimpleExprRuntimeFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5620);
				runtimeFunctionCall();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExprFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5621);
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExprLiteralContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5622);
				literal();
				}
				break;
			case 6:
				{
				_localctx = new SimpleExprParamMarkerContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5623);
				match(PARAM_MARKER);
				}
				break;
			case 7:
				{
				_localctx = new SimpleExprSumContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5624);
				sumExpr();
				}
				break;
			case 8:
				{
				_localctx = new SimpleExprGroupingOperationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5625);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5626);
				groupingOperation();
				}
				break;
			case 9:
				{
				_localctx = new SimpleExprWindowingFunctionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5627);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5628);
				windowFunctionCall();
				}
				break;
			case 10:
				{
				_localctx = new SimpleExprUnaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5629);
				((SimpleExprUnaryContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 758)) & ~0x3f) == 0 && ((1L << (_la - 758)) & ((1L << (PLUS_OPERATOR - 758)) | (1L << (MINUS_OPERATOR - 758)) | (1L << (BITWISE_NOT_OPERATOR - 758)))) != 0)) ) {
					((SimpleExprUnaryContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5630);
				simpleExpr(14);
				}
				break;
			case 11:
				{
				_localctx = new SimpleExprNotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5631);
				not2Rule();
				setState(5632);
				simpleExpr(13);
				}
				break;
			case 12:
				{
				_localctx = new SimpleExprListContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW_SYMBOL) {
					{
					setState(5634);
					match(ROW_SYMBOL);
					}
				}

				setState(5637);
				match(OPEN_PAR_SYMBOL);
				setState(5638);
				exprList();
				setState(5639);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 13:
				{
				_localctx = new SimpleExprSubQueryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					setState(5641);
					match(EXISTS_SYMBOL);
					}
				}

				setState(5644);
				subquery();
				}
				break;
			case 14:
				{
				_localctx = new SimpleExprOdbcContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5645);
				match(OPEN_CURLY_SYMBOL);
				setState(5646);
				identifier();
				setState(5647);
				expr(0);
				setState(5648);
				match(CLOSE_CURLY_SYMBOL);
				}
				break;
			case 15:
				{
				_localctx = new SimpleExprMatchContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5650);
				match(MATCH_SYMBOL);
				setState(5651);
				identListArg();
				setState(5652);
				match(AGAINST_SYMBOL);
				setState(5653);
				match(OPEN_PAR_SYMBOL);
				setState(5654);
				bitExpr(0);
				setState(5656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN_SYMBOL || _la==WITH_SYMBOL) {
					{
					setState(5655);
					fulltextOptions();
					}
				}

				setState(5658);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 16:
				{
				_localctx = new SimpleExprBinaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5660);
				match(BINARY_SYMBOL);
				setState(5661);
				simpleExpr(8);
				}
				break;
			case 17:
				{
				_localctx = new SimpleExprCastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5662);
				match(CAST_SYMBOL);
				setState(5663);
				match(OPEN_PAR_SYMBOL);
				setState(5664);
				expr(0);
				setState(5665);
				match(AS_SYMBOL);
				setState(5666);
				castType();
				setState(5668);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
				case 1:
					{
					setState(5667);
					arrayCast();
					}
					break;
				}
				setState(5670);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 18:
				{
				_localctx = new SimpleExprCaseContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5672);
				match(CASE_SYMBOL);
				setState(5674);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
				case 1:
					{
					setState(5673);
					expr(0);
					}
					break;
				}
				setState(5679); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5676);
					whenExpression();
					setState(5677);
					thenExpression();
					}
					}
					setState(5681); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN_SYMBOL );
				setState(5684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE_SYMBOL) {
					{
					setState(5683);
					elseExpression();
					}
				}

				setState(5686);
				match(END_SYMBOL);
				}
				break;
			case 19:
				{
				_localctx = new SimpleExprConvertContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5688);
				match(CONVERT_SYMBOL);
				setState(5689);
				match(OPEN_PAR_SYMBOL);
				setState(5690);
				expr(0);
				setState(5691);
				match(COMMA_SYMBOL);
				setState(5692);
				castType();
				setState(5693);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				{
				_localctx = new SimpleExprConvertUsingContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5695);
				match(CONVERT_SYMBOL);
				setState(5696);
				match(OPEN_PAR_SYMBOL);
				setState(5697);
				expr(0);
				setState(5698);
				match(USING_SYMBOL);
				setState(5699);
				charsetName();
				setState(5700);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 21:
				{
				_localctx = new SimpleExprDefaultContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5702);
				match(DEFAULT_SYMBOL);
				setState(5703);
				match(OPEN_PAR_SYMBOL);
				setState(5704);
				simpleIdentifier();
				setState(5705);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 22:
				{
				_localctx = new SimpleExprValuesContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5707);
				match(VALUES_SYMBOL);
				setState(5708);
				match(OPEN_PAR_SYMBOL);
				setState(5709);
				simpleIdentifier();
				setState(5710);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				{
				_localctx = new SimpleExprIntervalContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(5712);
				match(INTERVAL_SYMBOL);
				setState(5713);
				expr(0);
				setState(5714);
				interval();
				setState(5715);
				match(PLUS_OPERATOR);
				setState(5716);
				expr(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5728);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,721,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5726);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,720,_ctx) ) {
					case 1:
						{
						_localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(5720);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(5721);
						match(CONCAT_PIPES_SYMBOL);
						setState(5722);
						simpleExpr(16);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(5723);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(5724);
						match(COLLATE_SYMBOL);
						setState(5725);
						textOrIdentifier();
						}
						break;
					}
					} 
				}
				setState(5730);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,721,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ArrayCastContext extends ParserRuleContext {
		public TerminalNode ARRAY_SYMBOL() { return getToken(MySQLParser.ARRAY_SYMBOL, 0); }
		public ArrayCastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayCast; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterArrayCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitArrayCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitArrayCast(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayCastContext arrayCast() throws RecognitionException {
		ArrayCastContext _localctx = new ArrayCastContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_arrayCast);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5731);
			if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
			setState(5732);
			match(ARRAY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode JSON_SEPARATOR_SYMBOL() { return getToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode JSON_UNQUOTED_SEPARATOR_SYMBOL() { return getToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0); }
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterJsonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitJsonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitJsonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_jsonOperator);
		try {
			setState(5740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5734);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(5735);
				match(JSON_SEPARATOR_SYMBOL);
				setState(5736);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5737);
				if (!(serverVersion >= 50713)) throw new FailedPredicateException(this, "serverVersion >= 50713");
				setState(5738);
				match(JSON_UNQUOTED_SEPARATOR_SYMBOL);
				setState(5739);
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SumExprContext extends ParserRuleContext {
		public Token name;
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public InSumExprContext inSumExpr() {
			return getRuleContext(InSumExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode DISTINCT_SYMBOL() { return getToken(MySQLParser.DISTINCT_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode BIT_AND_SYMBOL() { return getToken(MySQLParser.BIT_AND_SYMBOL, 0); }
		public TerminalNode BIT_OR_SYMBOL() { return getToken(MySQLParser.BIT_OR_SYMBOL, 0); }
		public TerminalNode BIT_XOR_SYMBOL() { return getToken(MySQLParser.BIT_XOR_SYMBOL, 0); }
		public JsonFunctionContext jsonFunction() {
			return getRuleContext(JsonFunctionContext.class,0);
		}
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TerminalNode COUNT_SYMBOL() { return getToken(MySQLParser.COUNT_SYMBOL, 0); }
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode MIN_SYMBOL() { return getToken(MySQLParser.MIN_SYMBOL, 0); }
		public TerminalNode MAX_SYMBOL() { return getToken(MySQLParser.MAX_SYMBOL, 0); }
		public TerminalNode STD_SYMBOL() { return getToken(MySQLParser.STD_SYMBOL, 0); }
		public TerminalNode VARIANCE_SYMBOL() { return getToken(MySQLParser.VARIANCE_SYMBOL, 0); }
		public TerminalNode STDDEV_SAMP_SYMBOL() { return getToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0); }
		public TerminalNode VAR_SAMP_SYMBOL() { return getToken(MySQLParser.VAR_SAMP_SYMBOL, 0); }
		public TerminalNode SUM_SYMBOL() { return getToken(MySQLParser.SUM_SYMBOL, 0); }
		public TerminalNode GROUP_CONCAT_SYMBOL() { return getToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0); }
		public OrderClauseContext orderClause() {
			return getRuleContext(OrderClauseContext.class,0);
		}
		public TerminalNode SEPARATOR_SYMBOL() { return getToken(MySQLParser.SEPARATOR_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public SumExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sumExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSumExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSumExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSumExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SumExprContext sumExpr() throws RecognitionException {
		SumExprContext _localctx = new SumExprContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_sumExpr);
		int _la;
		try {
			setState(5873);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5742);
				((SumExprContext)_localctx).name = match(AVG_SYMBOL);
				setState(5743);
				match(OPEN_PAR_SYMBOL);
				setState(5745);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
				case 1:
					{
					setState(5744);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5747);
				inSumExpr();
				setState(5748);
				match(CLOSE_PAR_SYMBOL);
				setState(5751);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
				case 1:
					{
					setState(5749);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5750);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5753);
				((SumExprContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BIT_AND_SYMBOL) | (1L << BIT_OR_SYMBOL) | (1L << BIT_XOR_SYMBOL))) != 0)) ) {
					((SumExprContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5754);
				match(OPEN_PAR_SYMBOL);
				setState(5755);
				inSumExpr();
				setState(5756);
				match(CLOSE_PAR_SYMBOL);
				setState(5759);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
				case 1:
					{
					setState(5757);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5758);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5761);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(5762);
				jsonFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5763);
				((SumExprContext)_localctx).name = match(COUNT_SYMBOL);
				setState(5764);
				match(OPEN_PAR_SYMBOL);
				setState(5766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL_SYMBOL) {
					{
					setState(5765);
					match(ALL_SYMBOL);
					}
				}

				setState(5768);
				match(MULT_OPERATOR);
				setState(5769);
				match(CLOSE_PAR_SYMBOL);
				setState(5772);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,727,_ctx) ) {
				case 1:
					{
					setState(5770);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5771);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5774);
				((SumExprContext)_localctx).name = match(COUNT_SYMBOL);
				setState(5775);
				match(OPEN_PAR_SYMBOL);
				setState(5783);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
				case 1:
					{
					setState(5777);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL_SYMBOL) {
						{
						setState(5776);
						match(ALL_SYMBOL);
						}
					}

					setState(5779);
					match(MULT_OPERATOR);
					}
					break;
				case 2:
					{
					setState(5780);
					inSumExpr();
					}
					break;
				case 3:
					{
					setState(5781);
					match(DISTINCT_SYMBOL);
					setState(5782);
					exprList();
					}
					break;
				}
				setState(5785);
				match(CLOSE_PAR_SYMBOL);
				setState(5788);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
				case 1:
					{
					setState(5786);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5787);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5790);
				((SumExprContext)_localctx).name = match(MIN_SYMBOL);
				setState(5791);
				match(OPEN_PAR_SYMBOL);
				setState(5793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
				case 1:
					{
					setState(5792);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5795);
				inSumExpr();
				setState(5796);
				match(CLOSE_PAR_SYMBOL);
				setState(5799);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
				case 1:
					{
					setState(5797);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5798);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5801);
				((SumExprContext)_localctx).name = match(MAX_SYMBOL);
				setState(5802);
				match(OPEN_PAR_SYMBOL);
				setState(5804);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
				case 1:
					{
					setState(5803);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5806);
				inSumExpr();
				setState(5807);
				match(CLOSE_PAR_SYMBOL);
				setState(5810);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
				case 1:
					{
					setState(5808);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5809);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5812);
				((SumExprContext)_localctx).name = match(STD_SYMBOL);
				setState(5813);
				match(OPEN_PAR_SYMBOL);
				setState(5814);
				inSumExpr();
				setState(5815);
				match(CLOSE_PAR_SYMBOL);
				setState(5818);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,735,_ctx) ) {
				case 1:
					{
					setState(5816);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5817);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5820);
				((SumExprContext)_localctx).name = match(VARIANCE_SYMBOL);
				setState(5821);
				match(OPEN_PAR_SYMBOL);
				setState(5822);
				inSumExpr();
				setState(5823);
				match(CLOSE_PAR_SYMBOL);
				setState(5826);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
				case 1:
					{
					setState(5824);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5825);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5828);
				((SumExprContext)_localctx).name = match(STDDEV_SAMP_SYMBOL);
				setState(5829);
				match(OPEN_PAR_SYMBOL);
				setState(5830);
				inSumExpr();
				setState(5831);
				match(CLOSE_PAR_SYMBOL);
				setState(5834);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
				case 1:
					{
					setState(5832);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5833);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5836);
				((SumExprContext)_localctx).name = match(VAR_SAMP_SYMBOL);
				setState(5837);
				match(OPEN_PAR_SYMBOL);
				setState(5838);
				inSumExpr();
				setState(5839);
				match(CLOSE_PAR_SYMBOL);
				setState(5842);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
				case 1:
					{
					setState(5840);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5841);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5844);
				((SumExprContext)_localctx).name = match(SUM_SYMBOL);
				setState(5845);
				match(OPEN_PAR_SYMBOL);
				setState(5847);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,739,_ctx) ) {
				case 1:
					{
					setState(5846);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5849);
				inSumExpr();
				setState(5850);
				match(CLOSE_PAR_SYMBOL);
				setState(5853);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,740,_ctx) ) {
				case 1:
					{
					setState(5851);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5852);
					windowingClause();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5855);
				((SumExprContext)_localctx).name = match(GROUP_CONCAT_SYMBOL);
				setState(5856);
				match(OPEN_PAR_SYMBOL);
				setState(5858);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
				case 1:
					{
					setState(5857);
					match(DISTINCT_SYMBOL);
					}
					break;
				}
				setState(5860);
				exprList();
				setState(5862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER_SYMBOL) {
					{
					setState(5861);
					orderClause();
					}
				}

				setState(5866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR_SYMBOL) {
					{
					setState(5864);
					match(SEPARATOR_SYMBOL);
					setState(5865);
					textString();
					}
				}

				setState(5868);
				match(CLOSE_PAR_SYMBOL);
				setState(5871);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,744,_ctx) ) {
				case 1:
					{
					setState(5869);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(5870);
					windowingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingOperationContext extends ParserRuleContext {
		public TerminalNode GROUPING_SYMBOL() { return getToken(MySQLParser.GROUPING_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public GroupingOperationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingOperation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGroupingOperation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGroupingOperation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGroupingOperation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingOperationContext groupingOperation() throws RecognitionException {
		GroupingOperationContext _localctx = new GroupingOperationContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_groupingOperation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5875);
			match(GROUPING_SYMBOL);
			setState(5876);
			match(OPEN_PAR_SYMBOL);
			setState(5877);
			exprList();
			setState(5878);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFunctionCallContext extends ParserRuleContext {
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode ROW_NUMBER_SYMBOL() { return getToken(MySQLParser.ROW_NUMBER_SYMBOL, 0); }
		public TerminalNode RANK_SYMBOL() { return getToken(MySQLParser.RANK_SYMBOL, 0); }
		public TerminalNode DENSE_RANK_SYMBOL() { return getToken(MySQLParser.DENSE_RANK_SYMBOL, 0); }
		public TerminalNode CUME_DIST_SYMBOL() { return getToken(MySQLParser.CUME_DIST_SYMBOL, 0); }
		public TerminalNode PERCENT_RANK_SYMBOL() { return getToken(MySQLParser.PERCENT_RANK_SYMBOL, 0); }
		public TerminalNode NTILE_SYMBOL() { return getToken(MySQLParser.NTILE_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return getRuleContext(SimpleExprWithParenthesesContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode LEAD_SYMBOL() { return getToken(MySQLParser.LEAD_SYMBOL, 0); }
		public TerminalNode LAG_SYMBOL() { return getToken(MySQLParser.LAG_SYMBOL, 0); }
		public LeadLagInfoContext leadLagInfo() {
			return getRuleContext(LeadLagInfoContext.class,0);
		}
		public NullTreatmentContext nullTreatment() {
			return getRuleContext(NullTreatmentContext.class,0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public TerminalNode FIRST_VALUE_SYMBOL() { return getToken(MySQLParser.FIRST_VALUE_SYMBOL, 0); }
		public TerminalNode LAST_VALUE_SYMBOL() { return getToken(MySQLParser.LAST_VALUE_SYMBOL, 0); }
		public TerminalNode NTH_VALUE_SYMBOL() { return getToken(MySQLParser.NTH_VALUE_SYMBOL, 0); }
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public WindowFunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunctionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFunctionCallContext windowFunctionCall() throws RecognitionException {
		WindowFunctionCallContext _localctx = new WindowFunctionCallContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_windowFunctionCall);
		int _la;
		try {
			setState(5922);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CUME_DIST_SYMBOL:
			case DENSE_RANK_SYMBOL:
			case PERCENT_RANK_SYMBOL:
			case RANK_SYMBOL:
			case ROW_NUMBER_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5880);
				_la = _input.LA(1);
				if ( !(((((_la - 678)) & ~0x3f) == 0 && ((1L << (_la - 678)) & ((1L << (CUME_DIST_SYMBOL - 678)) | (1L << (DENSE_RANK_SYMBOL - 678)) | (1L << (PERCENT_RANK_SYMBOL - 678)) | (1L << (RANK_SYMBOL - 678)) | (1L << (ROW_NUMBER_SYMBOL - 678)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5881);
				parentheses();
				setState(5882);
				windowingClause();
				}
				break;
			case NTILE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5884);
				match(NTILE_SYMBOL);
				setState(5885);
				simpleExprWithParentheses();
				setState(5886);
				windowingClause();
				}
				break;
			case LAG_SYMBOL:
			case LEAD_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5888);
				_la = _input.LA(1);
				if ( !(_la==LAG_SYMBOL || _la==LEAD_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5889);
				match(OPEN_PAR_SYMBOL);
				setState(5890);
				expr(0);
				setState(5892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(5891);
					leadLagInfo();
					}
				}

				setState(5894);
				match(CLOSE_PAR_SYMBOL);
				setState(5896);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(5895);
					nullTreatment();
					}
				}

				setState(5898);
				windowingClause();
				}
				break;
			case FIRST_VALUE_SYMBOL:
			case LAST_VALUE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(5900);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE_SYMBOL || _la==LAST_VALUE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5901);
				exprWithParentheses();
				setState(5903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(5902);
					nullTreatment();
					}
				}

				setState(5905);
				windowingClause();
				}
				break;
			case NTH_VALUE_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(5907);
				match(NTH_VALUE_SYMBOL);
				setState(5908);
				match(OPEN_PAR_SYMBOL);
				setState(5909);
				expr(0);
				setState(5910);
				match(COMMA_SYMBOL);
				setState(5911);
				simpleExpr(0);
				setState(5912);
				match(CLOSE_PAR_SYMBOL);
				setState(5915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					setState(5913);
					match(FROM_SYMBOL);
					setState(5914);
					_la = _input.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					setState(5917);
					nullTreatment();
					}
				}

				setState(5920);
				windowingClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowingClauseContext extends ParserRuleContext {
		public TerminalNode OVER_SYMBOL() { return getToken(MySQLParser.OVER_SYMBOL, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public WindowingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowingClauseContext windowingClause() throws RecognitionException {
		WindowingClauseContext _localctx = new WindowingClauseContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_windowingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5924);
			match(OVER_SYMBOL);
			setState(5927);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,752,_ctx) ) {
			case 1:
				{
				setState(5925);
				windowName();
				}
				break;
			case 2:
				{
				setState(5926);
				windowSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeadLagInfoContext extends ParserRuleContext {
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode PARAM_MARKER() { return getToken(MySQLParser.PARAM_MARKER, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public LeadLagInfoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leadLagInfo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLeadLagInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLeadLagInfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLeadLagInfo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeadLagInfoContext leadLagInfo() throws RecognitionException {
		LeadLagInfoContext _localctx = new LeadLagInfoContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_leadLagInfo);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5929);
			match(COMMA_SYMBOL);
			setState(5932);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				{
				setState(5930);
				ulonglong_number();
				}
				break;
			case PARAM_MARKER:
				{
				setState(5931);
				match(PARAM_MARKER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				setState(5934);
				match(COMMA_SYMBOL);
				setState(5935);
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullTreatmentContext extends ParserRuleContext {
		public TerminalNode NULLS_SYMBOL() { return getToken(MySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode IGNORE_SYMBOL() { return getToken(MySQLParser.IGNORE_SYMBOL, 0); }
		public NullTreatmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullTreatment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNullTreatment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNullTreatment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNullTreatment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullTreatmentContext nullTreatment() throws RecognitionException {
		NullTreatmentContext _localctx = new NullTreatmentContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_nullTreatment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5938);
			_la = _input.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5939);
			match(NULLS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonFunctionContext extends ParserRuleContext {
		public TerminalNode JSON_ARRAYAGG_SYMBOL() { return getToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<InSumExprContext> inSumExpr() {
			return getRuleContexts(InSumExprContext.class);
		}
		public InSumExprContext inSumExpr(int i) {
			return getRuleContext(InSumExprContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowingClauseContext windowingClause() {
			return getRuleContext(WindowingClauseContext.class,0);
		}
		public TerminalNode JSON_OBJECTAGG_SYMBOL() { return getToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0); }
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public JsonFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterJsonFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitJsonFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitJsonFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonFunctionContext jsonFunction() throws RecognitionException {
		JsonFunctionContext _localctx = new JsonFunctionContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_jsonFunction);
		try {
			setState(5957);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JSON_ARRAYAGG_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(5941);
				match(JSON_ARRAYAGG_SYMBOL);
				setState(5942);
				match(OPEN_PAR_SYMBOL);
				setState(5943);
				inSumExpr();
				setState(5944);
				match(CLOSE_PAR_SYMBOL);
				setState(5946);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
				case 1:
					{
					setState(5945);
					windowingClause();
					}
					break;
				}
				}
				break;
			case JSON_OBJECTAGG_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5948);
				match(JSON_OBJECTAGG_SYMBOL);
				setState(5949);
				match(OPEN_PAR_SYMBOL);
				setState(5950);
				inSumExpr();
				setState(5951);
				match(COMMA_SYMBOL);
				setState(5952);
				inSumExpr();
				setState(5953);
				match(CLOSE_PAR_SYMBOL);
				setState(5955);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
				case 1:
					{
					setState(5954);
					windowingClause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InSumExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ALL_SYMBOL() { return getToken(MySQLParser.ALL_SYMBOL, 0); }
		public InSumExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inSumExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInSumExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInSumExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInSumExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InSumExprContext inSumExpr() throws RecognitionException {
		InSumExprContext _localctx = new InSumExprContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_inSumExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,758,_ctx) ) {
			case 1:
				{
				setState(5959);
				match(ALL_SYMBOL);
				}
				break;
			}
			setState(5962);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentListArgContext extends ParserRuleContext {
		public IdentListContext identList() {
			return getRuleContext(IdentListContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentListArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identListArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentListArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentListArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentListArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentListArgContext identListArg() throws RecognitionException {
		IdentListArgContext _localctx = new IdentListArgContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_identListArg);
		try {
			setState(5969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5964);
				identList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5965);
				match(OPEN_PAR_SYMBOL);
				setState(5966);
				identList();
				setState(5967);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentListContext extends ParserRuleContext {
		public List<SimpleIdentifierContext> simpleIdentifier() {
			return getRuleContexts(SimpleIdentifierContext.class);
		}
		public SimpleIdentifierContext simpleIdentifier(int i) {
			return getRuleContext(SimpleIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentListContext identList() throws RecognitionException {
		IdentListContext _localctx = new IdentListContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_identList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5971);
			simpleIdentifier();
			setState(5976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(5972);
				match(COMMA_SYMBOL);
				setState(5973);
				simpleIdentifier();
				}
				}
				setState(5978);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FulltextOptionsContext extends ParserRuleContext {
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode NATURAL_SYMBOL() { return getToken(MySQLParser.NATURAL_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public FulltextOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltextOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFulltextOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFulltextOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFulltextOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FulltextOptionsContext fulltextOptions() throws RecognitionException {
		FulltextOptionsContext _localctx = new FulltextOptionsContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_fulltextOptions);
		int _la;
		try {
			setState(5994);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,762,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5979);
				match(IN_SYMBOL);
				setState(5980);
				match(BOOLEAN_SYMBOL);
				setState(5981);
				match(MODE_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5982);
				match(IN_SYMBOL);
				setState(5983);
				match(NATURAL_SYMBOL);
				setState(5984);
				match(LANGUAGE_SYMBOL);
				setState(5985);
				match(MODE_SYMBOL);
				setState(5989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					setState(5986);
					match(WITH_SYMBOL);
					setState(5987);
					match(QUERY_SYMBOL);
					setState(5988);
					match(EXPANSION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5991);
				match(WITH_SYMBOL);
				setState(5992);
				match(QUERY_SYMBOL);
				setState(5993);
				match(EXPANSION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuntimeFunctionCallContext extends ParserRuleContext {
		public Token name;
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CURRENT_USER_SYMBOL() { return getToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode INSERT_SYMBOL() { return getToken(MySQLParser.INSERT_SYMBOL, 0); }
		public TerminalNode INTERVAL_SYMBOL() { return getToken(MySQLParser.INTERVAL_SYMBOL, 0); }
		public TerminalNode LEFT_SYMBOL() { return getToken(MySQLParser.LEFT_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode RIGHT_SYMBOL() { return getToken(MySQLParser.RIGHT_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TrimFunctionContext trimFunction() {
			return getRuleContext(TrimFunctionContext.class,0);
		}
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode CURDATE_SYMBOL() { return getToken(MySQLParser.CURDATE_SYMBOL, 0); }
		public TerminalNode CURTIME_SYMBOL() { return getToken(MySQLParser.CURTIME_SYMBOL, 0); }
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public TerminalNode DATE_ADD_SYMBOL() { return getToken(MySQLParser.DATE_ADD_SYMBOL, 0); }
		public TerminalNode DATE_SUB_SYMBOL() { return getToken(MySQLParser.DATE_SUB_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode EXTRACT_SYMBOL() { return getToken(MySQLParser.EXTRACT_SYMBOL, 0); }
		public DateTimeTtypeContext dateTimeTtype() {
			return getRuleContext(DateTimeTtypeContext.class,0);
		}
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public TerminalNode NOW_SYMBOL() { return getToken(MySQLParser.NOW_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode POSITION_SYMBOL() { return getToken(MySQLParser.POSITION_SYMBOL, 0); }
		public SubstringFunctionContext substringFunction() {
			return getRuleContext(SubstringFunctionContext.class,0);
		}
		public TerminalNode SYSDATE_SYMBOL() { return getToken(MySQLParser.SYSDATE_SYMBOL, 0); }
		public IntervalTimeStampContext intervalTimeStamp() {
			return getRuleContext(IntervalTimeStampContext.class,0);
		}
		public TerminalNode TIMESTAMP_ADD_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_DIFF_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public TerminalNode UTC_DATE_SYMBOL() { return getToken(MySQLParser.UTC_DATE_SYMBOL, 0); }
		public TerminalNode UTC_TIME_SYMBOL() { return getToken(MySQLParser.UTC_TIME_SYMBOL, 0); }
		public TerminalNode UTC_TIMESTAMP_SYMBOL() { return getToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0); }
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return getRuleContext(ExprListWithParenthesesContext.class,0);
		}
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode DATABASE_SYMBOL() { return getToken(MySQLParser.DATABASE_SYMBOL, 0); }
		public TerminalNode IF_SYMBOL() { return getToken(MySQLParser.IF_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MOD_SYMBOL() { return getToken(MySQLParser.MOD_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode OLD_PASSWORD_SYMBOL() { return getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode REPEAT_SYMBOL() { return getToken(MySQLParser.REPEAT_SYMBOL, 0); }
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public WsNumCodepointsContext wsNumCodepoints() {
			return getRuleContext(WsNumCodepointsContext.class,0);
		}
		public List<Ulong_numberContext> ulong_number() {
			return getRuleContexts(Ulong_numberContext.class);
		}
		public Ulong_numberContext ulong_number(int i) {
			return getRuleContext(Ulong_numberContext.class,i);
		}
		public WeightStringLevelsContext weightStringLevels() {
			return getRuleContext(WeightStringLevelsContext.class,0);
		}
		public GeometryFunctionContext geometryFunction() {
			return getRuleContext(GeometryFunctionContext.class,0);
		}
		public RuntimeFunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_runtimeFunctionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRuntimeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRuntimeFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRuntimeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuntimeFunctionCallContext runtimeFunctionCall() throws RecognitionException {
		RuntimeFunctionCallContext _localctx = new RuntimeFunctionCallContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_runtimeFunctionCall);
		int _la;
		try {
			setState(6269);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5996);
				((RuntimeFunctionCallContext)_localctx).name = match(CHAR_SYMBOL);
				setState(5997);
				match(OPEN_PAR_SYMBOL);
				setState(5998);
				exprList();
				setState(6001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING_SYMBOL) {
					{
					setState(5999);
					match(USING_SYMBOL);
					setState(6000);
					charsetName();
					}
				}

				setState(6003);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6005);
				((RuntimeFunctionCallContext)_localctx).name = match(CURRENT_USER_SYMBOL);
				setState(6007);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
				case 1:
					{
					setState(6006);
					parentheses();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6009);
				((RuntimeFunctionCallContext)_localctx).name = match(DATE_SYMBOL);
				setState(6010);
				exprWithParentheses();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6011);
				((RuntimeFunctionCallContext)_localctx).name = match(DAY_SYMBOL);
				setState(6012);
				exprWithParentheses();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6013);
				((RuntimeFunctionCallContext)_localctx).name = match(HOUR_SYMBOL);
				setState(6014);
				exprWithParentheses();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6015);
				((RuntimeFunctionCallContext)_localctx).name = match(INSERT_SYMBOL);
				setState(6016);
				match(OPEN_PAR_SYMBOL);
				setState(6017);
				expr(0);
				setState(6018);
				match(COMMA_SYMBOL);
				setState(6019);
				expr(0);
				setState(6020);
				match(COMMA_SYMBOL);
				setState(6021);
				expr(0);
				setState(6022);
				match(COMMA_SYMBOL);
				setState(6023);
				expr(0);
				setState(6024);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6026);
				((RuntimeFunctionCallContext)_localctx).name = match(INTERVAL_SYMBOL);
				setState(6027);
				match(OPEN_PAR_SYMBOL);
				setState(6028);
				expr(0);
				setState(6031); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6029);
					match(COMMA_SYMBOL);
					setState(6030);
					expr(0);
					}
					}
					setState(6033); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA_SYMBOL );
				setState(6035);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6037);
				((RuntimeFunctionCallContext)_localctx).name = match(LEFT_SYMBOL);
				setState(6038);
				match(OPEN_PAR_SYMBOL);
				setState(6039);
				expr(0);
				setState(6040);
				match(COMMA_SYMBOL);
				setState(6041);
				expr(0);
				setState(6042);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6044);
				((RuntimeFunctionCallContext)_localctx).name = match(MINUTE_SYMBOL);
				setState(6045);
				exprWithParentheses();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6046);
				((RuntimeFunctionCallContext)_localctx).name = match(MONTH_SYMBOL);
				setState(6047);
				exprWithParentheses();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6048);
				((RuntimeFunctionCallContext)_localctx).name = match(RIGHT_SYMBOL);
				setState(6049);
				match(OPEN_PAR_SYMBOL);
				setState(6050);
				expr(0);
				setState(6051);
				match(COMMA_SYMBOL);
				setState(6052);
				expr(0);
				setState(6053);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6055);
				((RuntimeFunctionCallContext)_localctx).name = match(SECOND_SYMBOL);
				setState(6056);
				exprWithParentheses();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6057);
				((RuntimeFunctionCallContext)_localctx).name = match(TIME_SYMBOL);
				setState(6058);
				exprWithParentheses();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6059);
				((RuntimeFunctionCallContext)_localctx).name = match(TIMESTAMP_SYMBOL);
				setState(6060);
				match(OPEN_PAR_SYMBOL);
				setState(6061);
				expr(0);
				setState(6064);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6062);
					match(COMMA_SYMBOL);
					setState(6063);
					expr(0);
					}
				}

				setState(6066);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6068);
				trimFunction();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6069);
				((RuntimeFunctionCallContext)_localctx).name = match(USER_SYMBOL);
				setState(6070);
				parentheses();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6071);
				((RuntimeFunctionCallContext)_localctx).name = match(VALUES_SYMBOL);
				setState(6072);
				exprWithParentheses();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6073);
				((RuntimeFunctionCallContext)_localctx).name = match(YEAR_SYMBOL);
				setState(6074);
				exprWithParentheses();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6075);
				((RuntimeFunctionCallContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ADDDATE_SYMBOL || _la==SUBDATE_SYMBOL) ) {
					((RuntimeFunctionCallContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6076);
				match(OPEN_PAR_SYMBOL);
				setState(6077);
				expr(0);
				setState(6078);
				match(COMMA_SYMBOL);
				setState(6084);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
				case 1:
					{
					setState(6079);
					expr(0);
					}
					break;
				case 2:
					{
					setState(6080);
					match(INTERVAL_SYMBOL);
					setState(6081);
					expr(0);
					setState(6082);
					interval();
					}
					break;
				}
				setState(6086);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6088);
				((RuntimeFunctionCallContext)_localctx).name = match(CURDATE_SYMBOL);
				setState(6090);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
				case 1:
					{
					setState(6089);
					parentheses();
					}
					break;
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6092);
				((RuntimeFunctionCallContext)_localctx).name = match(CURTIME_SYMBOL);
				setState(6094);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,769,_ctx) ) {
				case 1:
					{
					setState(6093);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6096);
				((RuntimeFunctionCallContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATE_ADD_SYMBOL || _la==DATE_SUB_SYMBOL) ) {
					((RuntimeFunctionCallContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6097);
				match(OPEN_PAR_SYMBOL);
				setState(6098);
				expr(0);
				setState(6099);
				match(COMMA_SYMBOL);
				setState(6100);
				match(INTERVAL_SYMBOL);
				setState(6101);
				expr(0);
				setState(6102);
				interval();
				setState(6103);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6105);
				((RuntimeFunctionCallContext)_localctx).name = match(EXTRACT_SYMBOL);
				setState(6106);
				match(OPEN_PAR_SYMBOL);
				setState(6107);
				interval();
				setState(6108);
				match(FROM_SYMBOL);
				setState(6109);
				expr(0);
				setState(6110);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6112);
				((RuntimeFunctionCallContext)_localctx).name = match(GET_FORMAT_SYMBOL);
				setState(6113);
				match(OPEN_PAR_SYMBOL);
				setState(6114);
				dateTimeTtype();
				setState(6115);
				match(COMMA_SYMBOL);
				setState(6116);
				expr(0);
				setState(6117);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6119);
				((RuntimeFunctionCallContext)_localctx).name = match(NOW_SYMBOL);
				setState(6121);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
				case 1:
					{
					setState(6120);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6123);
				((RuntimeFunctionCallContext)_localctx).name = match(POSITION_SYMBOL);
				setState(6124);
				match(OPEN_PAR_SYMBOL);
				setState(6125);
				bitExpr(0);
				setState(6126);
				match(IN_SYMBOL);
				setState(6127);
				expr(0);
				setState(6128);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6130);
				substringFunction();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6131);
				((RuntimeFunctionCallContext)_localctx).name = match(SYSDATE_SYMBOL);
				setState(6133);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,771,_ctx) ) {
				case 1:
					{
					setState(6132);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6135);
				((RuntimeFunctionCallContext)_localctx).name = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==TIMESTAMP_ADD_SYMBOL || _la==TIMESTAMP_DIFF_SYMBOL) ) {
					((RuntimeFunctionCallContext)_localctx).name = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6136);
				match(OPEN_PAR_SYMBOL);
				setState(6137);
				intervalTimeStamp();
				setState(6138);
				match(COMMA_SYMBOL);
				setState(6139);
				expr(0);
				setState(6140);
				match(COMMA_SYMBOL);
				setState(6141);
				expr(0);
				setState(6142);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6144);
				((RuntimeFunctionCallContext)_localctx).name = match(UTC_DATE_SYMBOL);
				setState(6146);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
				case 1:
					{
					setState(6145);
					parentheses();
					}
					break;
				}
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6148);
				((RuntimeFunctionCallContext)_localctx).name = match(UTC_TIME_SYMBOL);
				setState(6150);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
				case 1:
					{
					setState(6149);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6152);
				((RuntimeFunctionCallContext)_localctx).name = match(UTC_TIMESTAMP_SYMBOL);
				setState(6154);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,774,_ctx) ) {
				case 1:
					{
					setState(6153);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6156);
				((RuntimeFunctionCallContext)_localctx).name = match(ASCII_SYMBOL);
				setState(6157);
				exprWithParentheses();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6158);
				((RuntimeFunctionCallContext)_localctx).name = match(CHARSET_SYMBOL);
				setState(6159);
				exprWithParentheses();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6160);
				((RuntimeFunctionCallContext)_localctx).name = match(COALESCE_SYMBOL);
				setState(6161);
				exprListWithParentheses();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6162);
				((RuntimeFunctionCallContext)_localctx).name = match(COLLATION_SYMBOL);
				setState(6163);
				exprWithParentheses();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6164);
				((RuntimeFunctionCallContext)_localctx).name = match(DATABASE_SYMBOL);
				setState(6165);
				parentheses();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6166);
				((RuntimeFunctionCallContext)_localctx).name = match(IF_SYMBOL);
				setState(6167);
				match(OPEN_PAR_SYMBOL);
				setState(6168);
				expr(0);
				setState(6169);
				match(COMMA_SYMBOL);
				setState(6170);
				expr(0);
				setState(6171);
				match(COMMA_SYMBOL);
				setState(6172);
				expr(0);
				setState(6173);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6175);
				((RuntimeFunctionCallContext)_localctx).name = match(FORMAT_SYMBOL);
				setState(6176);
				match(OPEN_PAR_SYMBOL);
				setState(6177);
				expr(0);
				setState(6178);
				match(COMMA_SYMBOL);
				setState(6179);
				expr(0);
				setState(6182);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6180);
					match(COMMA_SYMBOL);
					setState(6181);
					expr(0);
					}
				}

				setState(6184);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6186);
				((RuntimeFunctionCallContext)_localctx).name = match(MICROSECOND_SYMBOL);
				setState(6187);
				exprWithParentheses();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6188);
				((RuntimeFunctionCallContext)_localctx).name = match(MOD_SYMBOL);
				setState(6189);
				match(OPEN_PAR_SYMBOL);
				setState(6190);
				expr(0);
				setState(6191);
				match(COMMA_SYMBOL);
				setState(6192);
				expr(0);
				setState(6193);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6195);
				if (!(serverVersion < 50607)) throw new FailedPredicateException(this, "serverVersion < 50607");
				setState(6196);
				((RuntimeFunctionCallContext)_localctx).name = match(OLD_PASSWORD_SYMBOL);
				setState(6197);
				match(OPEN_PAR_SYMBOL);
				setState(6198);
				textLiteral();
				setState(6199);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6201);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(6202);
				((RuntimeFunctionCallContext)_localctx).name = match(PASSWORD_SYMBOL);
				setState(6203);
				exprWithParentheses();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(6204);
				((RuntimeFunctionCallContext)_localctx).name = match(QUARTER_SYMBOL);
				setState(6205);
				exprWithParentheses();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(6206);
				((RuntimeFunctionCallContext)_localctx).name = match(REPEAT_SYMBOL);
				setState(6207);
				match(OPEN_PAR_SYMBOL);
				setState(6208);
				expr(0);
				setState(6209);
				match(COMMA_SYMBOL);
				setState(6210);
				expr(0);
				setState(6211);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(6213);
				((RuntimeFunctionCallContext)_localctx).name = match(REPLACE_SYMBOL);
				setState(6214);
				match(OPEN_PAR_SYMBOL);
				setState(6215);
				expr(0);
				setState(6216);
				match(COMMA_SYMBOL);
				setState(6217);
				expr(0);
				setState(6218);
				match(COMMA_SYMBOL);
				setState(6219);
				expr(0);
				setState(6220);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(6222);
				((RuntimeFunctionCallContext)_localctx).name = match(REVERSE_SYMBOL);
				setState(6223);
				exprWithParentheses();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(6224);
				((RuntimeFunctionCallContext)_localctx).name = match(ROW_COUNT_SYMBOL);
				setState(6225);
				parentheses();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(6226);
				((RuntimeFunctionCallContext)_localctx).name = match(TRUNCATE_SYMBOL);
				setState(6227);
				match(OPEN_PAR_SYMBOL);
				setState(6228);
				expr(0);
				setState(6229);
				match(COMMA_SYMBOL);
				setState(6230);
				expr(0);
				setState(6231);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(6233);
				((RuntimeFunctionCallContext)_localctx).name = match(WEEK_SYMBOL);
				setState(6234);
				match(OPEN_PAR_SYMBOL);
				setState(6235);
				expr(0);
				setState(6238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6236);
					match(COMMA_SYMBOL);
					setState(6237);
					expr(0);
					}
				}

				setState(6240);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(6242);
				((RuntimeFunctionCallContext)_localctx).name = match(WEIGHT_STRING_SYMBOL);
				setState(6243);
				match(OPEN_PAR_SYMBOL);
				setState(6244);
				expr(0);
				setState(6264);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,779,_ctx) ) {
				case 1:
					{
					setState(6248);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
					case 1:
						{
						setState(6245);
						match(AS_SYMBOL);
						setState(6246);
						match(CHAR_SYMBOL);
						setState(6247);
						wsNumCodepoints();
						}
						break;
					}
					setState(6252);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
					case 1:
						{
						setState(6250);
						if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
						setState(6251);
						weightStringLevels();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(6254);
					match(AS_SYMBOL);
					setState(6255);
					match(BINARY_SYMBOL);
					setState(6256);
					wsNumCodepoints();
					}
					break;
				case 3:
					{
					setState(6257);
					match(COMMA_SYMBOL);
					setState(6258);
					ulong_number();
					setState(6259);
					match(COMMA_SYMBOL);
					setState(6260);
					ulong_number();
					setState(6261);
					match(COMMA_SYMBOL);
					setState(6262);
					ulong_number();
					}
					break;
				}
				setState(6266);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(6268);
				geometryFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeometryFunctionContext extends ParserRuleContext {
		public Token name;
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public ExprListWithParenthesesContext exprListWithParentheses() {
			return getRuleContext(ExprListWithParenthesesContext.class,0);
		}
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public GeometryFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_geometryFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGeometryFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGeometryFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGeometryFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeometryFunctionContext geometryFunction() throws RecognitionException {
		GeometryFunctionContext _localctx = new GeometryFunctionContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_geometryFunction);
		try {
			setState(6302);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,782,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6271);
				if (!(serverVersion < 50706)) throw new FailedPredicateException(this, "serverVersion < 50706");
				setState(6272);
				((GeometryFunctionContext)_localctx).name = match(CONTAINS_SYMBOL);
				setState(6273);
				match(OPEN_PAR_SYMBOL);
				setState(6274);
				expr(0);
				setState(6275);
				match(COMMA_SYMBOL);
				setState(6276);
				expr(0);
				setState(6277);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6279);
				((GeometryFunctionContext)_localctx).name = match(GEOMETRYCOLLECTION_SYMBOL);
				setState(6280);
				match(OPEN_PAR_SYMBOL);
				setState(6282);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
				case 1:
					{
					setState(6281);
					exprList();
					}
					break;
				}
				setState(6284);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6285);
				((GeometryFunctionContext)_localctx).name = match(LINESTRING_SYMBOL);
				setState(6286);
				exprListWithParentheses();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6287);
				((GeometryFunctionContext)_localctx).name = match(MULTILINESTRING_SYMBOL);
				setState(6288);
				exprListWithParentheses();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6289);
				((GeometryFunctionContext)_localctx).name = match(MULTIPOINT_SYMBOL);
				setState(6290);
				exprListWithParentheses();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6291);
				((GeometryFunctionContext)_localctx).name = match(MULTIPOLYGON_SYMBOL);
				setState(6292);
				exprListWithParentheses();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6293);
				((GeometryFunctionContext)_localctx).name = match(POINT_SYMBOL);
				setState(6294);
				match(OPEN_PAR_SYMBOL);
				setState(6295);
				expr(0);
				setState(6296);
				match(COMMA_SYMBOL);
				setState(6297);
				expr(0);
				setState(6298);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6300);
				((GeometryFunctionContext)_localctx).name = match(POLYGON_SYMBOL);
				setState(6301);
				exprListWithParentheses();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeFunctionParametersContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public FractionalPrecisionContext fractionalPrecision() {
			return getRuleContext(FractionalPrecisionContext.class,0);
		}
		public TimeFunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeFunctionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTimeFunctionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTimeFunctionParameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTimeFunctionParameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeFunctionParametersContext timeFunctionParameters() throws RecognitionException {
		TimeFunctionParametersContext _localctx = new TimeFunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_timeFunctionParameters);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6304);
			match(OPEN_PAR_SYMBOL);
			setState(6306);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
			case 1:
				{
				setState(6305);
				fractionalPrecision();
				}
				break;
			}
			setState(6308);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FractionalPrecisionContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public FractionalPrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fractionalPrecision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFractionalPrecision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFractionalPrecision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFractionalPrecision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FractionalPrecisionContext fractionalPrecision() throws RecognitionException {
		FractionalPrecisionContext _localctx = new FractionalPrecisionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_fractionalPrecision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6310);
			if (!(serverVersion >= 50604)) throw new FailedPredicateException(this, "serverVersion >= 50604");
			setState(6311);
			match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WeightStringLevelsContext extends ParserRuleContext {
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public List<Real_ulong_numberContext> real_ulong_number() {
			return getRuleContexts(Real_ulong_numberContext.class);
		}
		public Real_ulong_numberContext real_ulong_number(int i) {
			return getRuleContext(Real_ulong_numberContext.class,i);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public List<WeightStringLevelListItemContext> weightStringLevelListItem() {
			return getRuleContexts(WeightStringLevelListItemContext.class);
		}
		public WeightStringLevelListItemContext weightStringLevelListItem(int i) {
			return getRuleContext(WeightStringLevelListItemContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public WeightStringLevelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringLevels; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWeightStringLevels(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWeightStringLevels(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWeightStringLevels(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WeightStringLevelsContext weightStringLevels() throws RecognitionException {
		WeightStringLevelsContext _localctx = new WeightStringLevelsContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_weightStringLevels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6313);
			match(LEVEL_SYMBOL);
			setState(6326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
			case 1:
				{
				setState(6314);
				real_ulong_number();
				setState(6315);
				match(MINUS_OPERATOR);
				setState(6316);
				real_ulong_number();
				}
				break;
			case 2:
				{
				setState(6318);
				weightStringLevelListItem();
				setState(6323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6319);
					match(COMMA_SYMBOL);
					setState(6320);
					weightStringLevelListItem();
					}
					}
					setState(6325);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WeightStringLevelListItemContext extends ParserRuleContext {
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ASC_SYMBOL() { return getToken(MySQLParser.ASC_SYMBOL, 0); }
		public TerminalNode DESC_SYMBOL() { return getToken(MySQLParser.DESC_SYMBOL, 0); }
		public WeightStringLevelListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringLevelListItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWeightStringLevelListItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWeightStringLevelListItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWeightStringLevelListItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WeightStringLevelListItemContext weightStringLevelListItem() throws RecognitionException {
		WeightStringLevelListItemContext _localctx = new WeightStringLevelListItemContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_weightStringLevelListItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6328);
			real_ulong_number();
			setState(6334);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASC_SYMBOL:
			case DESC_SYMBOL:
				{
				setState(6329);
				_la = _input.LA(1);
				if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REVERSE_SYMBOL) {
					{
					setState(6330);
					match(REVERSE_SYMBOL);
					}
				}

				}
				break;
			case REVERSE_SYMBOL:
				{
				setState(6333);
				match(REVERSE_SYMBOL);
				}
				break;
			case COMMA_SYMBOL:
			case CLOSE_PAR_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateTimeTtypeContext extends ParserRuleContext {
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public DateTimeTtypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateTimeTtype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDateTimeTtype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDateTimeTtype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDateTimeTtype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DateTimeTtypeContext dateTimeTtype() throws RecognitionException {
		DateTimeTtypeContext _localctx = new DateTimeTtypeContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_dateTimeTtype);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6336);
			_la = _input.LA(1);
			if ( !(_la==DATETIME_SYMBOL || _la==DATE_SYMBOL || _la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrimFunctionContext extends ParserRuleContext {
		public TerminalNode TRIM_SYMBOL() { return getToken(MySQLParser.TRIM_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LEADING_SYMBOL() { return getToken(MySQLParser.LEADING_SYMBOL, 0); }
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode TRAILING_SYMBOL() { return getToken(MySQLParser.TRAILING_SYMBOL, 0); }
		public TerminalNode BOTH_SYMBOL() { return getToken(MySQLParser.BOTH_SYMBOL, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTrimFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTrimFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTrimFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrimFunctionContext trimFunction() throws RecognitionException {
		TrimFunctionContext _localctx = new TrimFunctionContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_trimFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6338);
			match(TRIM_SYMBOL);
			setState(6339);
			match(OPEN_PAR_SYMBOL);
			setState(6363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,792,_ctx) ) {
			case 1:
				{
				setState(6340);
				expr(0);
				setState(6343);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					setState(6341);
					match(FROM_SYMBOL);
					setState(6342);
					expr(0);
					}
				}

				}
				break;
			case 2:
				{
				setState(6345);
				match(LEADING_SYMBOL);
				setState(6347);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
				case 1:
					{
					setState(6346);
					expr(0);
					}
					break;
				}
				setState(6349);
				match(FROM_SYMBOL);
				setState(6350);
				expr(0);
				}
				break;
			case 3:
				{
				setState(6351);
				match(TRAILING_SYMBOL);
				setState(6353);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
				case 1:
					{
					setState(6352);
					expr(0);
					}
					break;
				}
				setState(6355);
				match(FROM_SYMBOL);
				setState(6356);
				expr(0);
				}
				break;
			case 4:
				{
				setState(6357);
				match(BOTH_SYMBOL);
				setState(6359);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
				case 1:
					{
					setState(6358);
					expr(0);
					}
					break;
				}
				setState(6361);
				match(FROM_SYMBOL);
				setState(6362);
				expr(0);
				}
				break;
			}
			setState(6365);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstringFunctionContext extends ParserRuleContext {
		public TerminalNode SUBSTRING_SYMBOL() { return getToken(MySQLParser.SUBSTRING_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public SubstringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substringFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSubstringFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSubstringFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSubstringFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstringFunctionContext substringFunction() throws RecognitionException {
		SubstringFunctionContext _localctx = new SubstringFunctionContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_substringFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6367);
			match(SUBSTRING_SYMBOL);
			setState(6368);
			match(OPEN_PAR_SYMBOL);
			setState(6369);
			expr(0);
			setState(6382);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMA_SYMBOL:
				{
				setState(6370);
				match(COMMA_SYMBOL);
				setState(6371);
				expr(0);
				setState(6374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					setState(6372);
					match(COMMA_SYMBOL);
					setState(6373);
					expr(0);
					}
				}

				}
				break;
			case FROM_SYMBOL:
				{
				setState(6376);
				match(FROM_SYMBOL);
				setState(6377);
				expr(0);
				setState(6380);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					setState(6378);
					match(FOR_SYMBOL);
					setState(6379);
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6384);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public UdfExprListContext udfExprList() {
			return getRuleContext(UdfExprListContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_functionCall);
		try {
			setState(6400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6386);
				pureIdentifier();
				setState(6387);
				match(OPEN_PAR_SYMBOL);
				setState(6389);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
				case 1:
					{
					setState(6388);
					udfExprList();
					}
					break;
				}
				setState(6391);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6393);
				qualifiedIdentifier();
				setState(6394);
				match(OPEN_PAR_SYMBOL);
				setState(6396);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
				case 1:
					{
					setState(6395);
					exprList();
					}
					break;
				}
				setState(6398);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UdfExprListContext extends ParserRuleContext {
		public List<UdfExprContext> udfExpr() {
			return getRuleContexts(UdfExprContext.class);
		}
		public UdfExprContext udfExpr(int i) {
			return getRuleContext(UdfExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UdfExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfExprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUdfExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUdfExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUdfExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UdfExprListContext udfExprList() throws RecognitionException {
		UdfExprListContext _localctx = new UdfExprListContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_udfExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6402);
			udfExpr();
			setState(6407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6403);
				match(COMMA_SYMBOL);
				setState(6404);
				udfExpr();
				}
				}
				setState(6409);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UdfExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public SelectAliasContext selectAlias() {
			return getRuleContext(SelectAliasContext.class,0);
		}
		public UdfExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUdfExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUdfExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUdfExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UdfExprContext udfExpr() throws RecognitionException {
		UdfExprContext _localctx = new UdfExprContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_udfExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6410);
			expr(0);
			setState(6412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
			case 1:
				{
				setState(6411);
				selectAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public UserVariableContext userVariable() {
			return getRuleContext(UserVariableContext.class,0);
		}
		public SystemVariableContext systemVariable() {
			return getRuleContext(SystemVariableContext.class,0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_variable);
		try {
			setState(6416);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN_SYMBOL:
			case AT_TEXT_SUFFIX:
				enterOuterAlt(_localctx, 1);
				{
				setState(6414);
				userVariable();
				}
				break;
			case AT_AT_SIGN_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6415);
				systemVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariableContext extends ParserRuleContext {
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public UserVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUserVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUserVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUserVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserVariableContext userVariable() throws RecognitionException {
		UserVariableContext _localctx = new UserVariableContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_userVariable);
		try {
			setState(6421);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SIGN_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6418);
				match(AT_SIGN_SYMBOL);
				setState(6419);
				textOrIdentifier();
				}
				break;
			case AT_TEXT_SUFFIX:
				enterOuterAlt(_localctx, 2);
				{
				setState(6420);
				match(AT_TEXT_SUFFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SystemVariableContext extends ParserRuleContext {
		public TerminalNode AT_AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public VarIdentTypeContext varIdentType() {
			return getRuleContext(VarIdentTypeContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public SystemVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_systemVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSystemVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSystemVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSystemVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SystemVariableContext systemVariable() throws RecognitionException {
		SystemVariableContext _localctx = new SystemVariableContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_systemVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6423);
			match(AT_AT_SIGN_SYMBOL);
			setState(6425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
			case 1:
				{
				setState(6424);
				varIdentType();
				}
				break;
			}
			setState(6427);
			textOrIdentifier();
			setState(6429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
			case 1:
				{
				setState(6428);
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InternalVariableNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LValueIdentifierContext lValueIdentifier() {
			return getRuleContext(LValueIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public InternalVariableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_internalVariableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInternalVariableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInternalVariableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInternalVariableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InternalVariableNameContext internalVariableName() throws RecognitionException {
		InternalVariableNameContext _localctx = new InternalVariableNameContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_internalVariableName);
		int _la;
		try {
			setState(6445);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6441);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
				case 1:
					{
					setState(6431);
					if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
					setState(6432);
					identifier();
					setState(6434);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						setState(6433);
						dotIdentifier();
						}
					}

					}
					break;
				case 2:
					{
					setState(6436);
					if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
					setState(6437);
					lValueIdentifier();
					setState(6439);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						setState(6438);
						dotIdentifier();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6443);
				match(DEFAULT_SYMBOL);
				setState(6444);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenExpressionContext extends ParserRuleContext {
		public TerminalNode WHEN_SYMBOL() { return getToken(MySQLParser.WHEN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhenExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWhenExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWhenExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWhenExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenExpressionContext whenExpression() throws RecognitionException {
		WhenExpressionContext _localctx = new WhenExpressionContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_whenExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6447);
			match(WHEN_SYMBOL);
			setState(6448);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThenExpressionContext extends ParserRuleContext {
		public TerminalNode THEN_SYMBOL() { return getToken(MySQLParser.THEN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ThenExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_thenExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterThenExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitThenExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitThenExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThenExpressionContext thenExpression() throws RecognitionException {
		ThenExpressionContext _localctx = new ThenExpressionContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_thenExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6450);
			match(THEN_SYMBOL);
			setState(6451);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElseExpressionContext extends ParserRuleContext {
		public TerminalNode ELSE_SYMBOL() { return getToken(MySQLParser.ELSE_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ElseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterElseExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitElseExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitElseExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElseExpressionContext elseExpression() throws RecognitionException {
		ElseExpressionContext _localctx = new ElseExpressionContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_elseExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6453);
			match(ELSE_SYMBOL);
			setState(6454);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastTypeContext extends ParserRuleContext {
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return getRuleContext(CharsetWithOptBinaryContext.class,0);
		}
		public NcharContext nchar() {
			return getRuleContext(NcharContext.class,0);
		}
		public TerminalNode SIGNED_SYMBOL() { return getToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode INT_SYMBOL() { return getToken(MySQLParser.INT_SYMBOL, 0); }
		public TerminalNode UNSIGNED_SYMBOL() { return getToken(MySQLParser.UNSIGNED_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return getRuleContext(TypeDatetimePrecisionContext.class,0);
		}
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return getRuleContext(FloatOptionsContext.class,0);
		}
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public RealTypeContext realType() {
			return getRuleContext(RealTypeContext.class,0);
		}
		public TerminalNode FLOAT_SYMBOL() { return getToken(MySQLParser.FLOAT_SYMBOL, 0); }
		public StandardFloatOptionsContext standardFloatOptions() {
			return getRuleContext(StandardFloatOptionsContext.class,0);
		}
		public CastTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCastType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCastType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCastType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastTypeContext castType() throws RecognitionException {
		CastTypeContext _localctx = new CastTypeContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_castType);
		try {
			setState(6501);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,819,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6456);
				match(BINARY_SYMBOL);
				setState(6458);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
				case 1:
					{
					setState(6457);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6460);
				match(CHAR_SYMBOL);
				setState(6462);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
				case 1:
					{
					setState(6461);
					fieldLength();
					}
					break;
				}
				setState(6465);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,811,_ctx) ) {
				case 1:
					{
					setState(6464);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6467);
				nchar();
				setState(6469);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
				case 1:
					{
					setState(6468);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6471);
				match(SIGNED_SYMBOL);
				setState(6473);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
				case 1:
					{
					setState(6472);
					match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6475);
				match(UNSIGNED_SYMBOL);
				setState(6477);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
				case 1:
					{
					setState(6476);
					match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6479);
				match(DATE_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6480);
				match(TIME_SYMBOL);
				setState(6482);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,815,_ctx) ) {
				case 1:
					{
					setState(6481);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6484);
				match(DATETIME_SYMBOL);
				setState(6486);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
				case 1:
					{
					setState(6485);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6488);
				match(DECIMAL_SYMBOL);
				setState(6490);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
				case 1:
					{
					setState(6489);
					floatOptions();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6492);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(6493);
				match(JSON_SYMBOL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6494);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(6495);
				realType();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6496);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(6497);
				match(FLOAT_SYMBOL);
				setState(6499);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,818,_ctx) ) {
				case 1:
					{
					setState(6498);
					standardFloatOptions();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprListContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprListContext exprList() throws RecognitionException {
		ExprListContext _localctx = new ExprListContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_exprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6503);
			expr(0);
			setState(6508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6504);
				match(COMMA_SYMBOL);
				setState(6505);
				expr(0);
				}
				}
				setState(6510);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetContext extends ParserRuleContext {
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public CharsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCharset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetContext charset() throws RecognitionException {
		CharsetContext _localctx = new CharsetContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_charset);
		try {
			setState(6514);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6511);
				match(CHAR_SYMBOL);
				setState(6512);
				match(SET_SYMBOL);
				}
				break;
			case CHARSET_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6513);
				match(CHARSET_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotRuleContext extends ParserRuleContext {
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode NOT2_SYMBOL() { return getToken(MySQLParser.NOT2_SYMBOL, 0); }
		public NotRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNotRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNotRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNotRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotRuleContext notRule() throws RecognitionException {
		NotRuleContext _localctx = new NotRuleContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_notRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6516);
			_la = _input.LA(1);
			if ( !(_la==NOT_SYMBOL || _la==NOT2_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not2RuleContext extends ParserRuleContext {
		public TerminalNode LOGICAL_NOT_OPERATOR() { return getToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0); }
		public TerminalNode NOT2_SYMBOL() { return getToken(MySQLParser.NOT2_SYMBOL, 0); }
		public Not2RuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not2Rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNot2Rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNot2Rule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNot2Rule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Not2RuleContext not2Rule() throws RecognitionException {
		Not2RuleContext _localctx = new Not2RuleContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_not2Rule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6518);
			_la = _input.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==LOGICAL_NOT_OPERATOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalContext extends ParserRuleContext {
		public IntervalTimeStampContext intervalTimeStamp() {
			return getRuleContext(IntervalTimeStampContext.class,0);
		}
		public TerminalNode SECOND_MICROSECOND_SYMBOL() { return getToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_MICROSECOND_SYMBOL() { return getToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_SECOND_SYMBOL() { return getToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0); }
		public TerminalNode HOUR_MICROSECOND_SYMBOL() { return getToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0); }
		public TerminalNode HOUR_SECOND_SYMBOL() { return getToken(MySQLParser.HOUR_SECOND_SYMBOL, 0); }
		public TerminalNode HOUR_MINUTE_SYMBOL() { return getToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0); }
		public TerminalNode DAY_MICROSECOND_SYMBOL() { return getToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0); }
		public TerminalNode DAY_SECOND_SYMBOL() { return getToken(MySQLParser.DAY_SECOND_SYMBOL, 0); }
		public TerminalNode DAY_MINUTE_SYMBOL() { return getToken(MySQLParser.DAY_MINUTE_SYMBOL, 0); }
		public TerminalNode DAY_HOUR_SYMBOL() { return getToken(MySQLParser.DAY_HOUR_SYMBOL, 0); }
		public TerminalNode YEAR_MONTH_SYMBOL() { return getToken(MySQLParser.YEAR_MONTH_SYMBOL, 0); }
		public IntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalContext interval() throws RecognitionException {
		IntervalContext _localctx = new IntervalContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_interval);
		int _la;
		try {
			setState(6522);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY_SYMBOL:
			case HOUR_SYMBOL:
			case MICROSECOND_SYMBOL:
			case MINUTE_SYMBOL:
			case MONTH_SYMBOL:
			case QUARTER_SYMBOL:
			case SECOND_SYMBOL:
			case WEEK_SYMBOL:
			case YEAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6520);
				intervalTimeStamp();
				}
				break;
			case DAY_HOUR_SYMBOL:
			case DAY_MICROSECOND_SYMBOL:
			case DAY_MINUTE_SYMBOL:
			case DAY_SECOND_SYMBOL:
			case HOUR_MICROSECOND_SYMBOL:
			case HOUR_MINUTE_SYMBOL:
			case HOUR_SECOND_SYMBOL:
			case MINUTE_MICROSECOND_SYMBOL:
			case MINUTE_SECOND_SYMBOL:
			case SECOND_MICROSECOND_SYMBOL:
			case YEAR_MONTH_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6521);
				_la = _input.LA(1);
				if ( !(((((_la - 118)) & ~0x3f) == 0 && ((1L << (_la - 118)) & ((1L << (DAY_HOUR_SYMBOL - 118)) | (1L << (DAY_MICROSECOND_SYMBOL - 118)) | (1L << (DAY_MINUTE_SYMBOL - 118)) | (1L << (DAY_SECOND_SYMBOL - 118)))) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & ((1L << (HOUR_MICROSECOND_SYMBOL - 226)) | (1L << (HOUR_MINUTE_SYMBOL - 226)) | (1L << (HOUR_SECOND_SYMBOL - 226)))) != 0) || _la==MINUTE_MICROSECOND_SYMBOL || _la==MINUTE_SECOND_SYMBOL || _la==SECOND_MICROSECOND_SYMBOL || _la==YEAR_MONTH_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTimeStampContext extends ParserRuleContext {
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public IntervalTimeStampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTimeStamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIntervalTimeStamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIntervalTimeStamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIntervalTimeStamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTimeStampContext intervalTimeStamp() throws RecognitionException {
		IntervalTimeStampContext _localctx = new IntervalTimeStampContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_intervalTimeStamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6524);
			_la = _input.LA(1);
			if ( !(_la==DAY_SYMBOL || _la==HOUR_SYMBOL || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & ((1L << (MICROSECOND_SYMBOL - 337)) | (1L << (MINUTE_SYMBOL - 337)) | (1L << (MONTH_SYMBOL - 337)))) != 0) || _la==QUARTER_SYMBOL || _la==SECOND_SYMBOL || _la==WEEK_SYMBOL || _la==YEAR_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprListWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprListWithParentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprListWithParentheses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprListWithParentheses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprListWithParentheses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprListWithParenthesesContext exprListWithParentheses() throws RecognitionException {
		ExprListWithParenthesesContext _localctx = new ExprListWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_exprListWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6526);
			match(OPEN_PAR_SYMBOL);
			setState(6527);
			exprList();
			setState(6528);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprWithParentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterExprWithParentheses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitExprWithParentheses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitExprWithParentheses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprWithParenthesesContext exprWithParentheses() throws RecognitionException {
		ExprWithParenthesesContext _localctx = new ExprWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_exprWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6530);
			match(OPEN_PAR_SYMBOL);
			setState(6531);
			expr(0);
			setState(6532);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleExprWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExprWithParentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleExprWithParentheses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleExprWithParentheses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleExprWithParentheses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleExprWithParenthesesContext simpleExprWithParentheses() throws RecognitionException {
		SimpleExprWithParenthesesContext _localctx = new SimpleExprWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_simpleExprWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6534);
			match(OPEN_PAR_SYMBOL);
			setState(6535);
			simpleExpr(0);
			setState(6536);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderListContext extends ParserRuleContext {
		public List<OrderExpressionContext> orderExpression() {
			return getRuleContexts(OrderExpressionContext.class);
		}
		public OrderExpressionContext orderExpression(int i) {
			return getRuleContext(OrderExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public OrderListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOrderList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOrderList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOrderList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderListContext orderList() throws RecognitionException {
		OrderListContext _localctx = new OrderListContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_orderList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6538);
			orderExpression();
			setState(6543);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,823,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6539);
					match(COMMA_SYMBOL);
					setState(6540);
					orderExpression();
					}
					} 
				}
				setState(6545);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,823,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderExpressionContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public OrderExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOrderExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOrderExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOrderExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderExpressionContext orderExpression() throws RecognitionException {
		OrderExpressionContext _localctx = new OrderExpressionContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_orderExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6546);
			expr(0);
			setState(6548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,824,_ctx) ) {
			case 1:
				{
				setState(6547);
				direction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupListContext extends ParserRuleContext {
		public List<GroupingExpressionContext> groupingExpression() {
			return getRuleContexts(GroupingExpressionContext.class);
		}
		public GroupingExpressionContext groupingExpression(int i) {
			return getRuleContext(GroupingExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GroupListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGroupList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGroupList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGroupList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupListContext groupList() throws RecognitionException {
		GroupListContext _localctx = new GroupListContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_groupList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6550);
			groupingExpression();
			setState(6555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(6551);
				match(COMMA_SYMBOL);
				setState(6552);
				groupingExpression();
				}
				}
				setState(6557);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingExpressionContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public GroupingExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGroupingExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGroupingExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGroupingExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingExpressionContext groupingExpression() throws RecognitionException {
		GroupingExpressionContext _localctx = new GroupingExpressionContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_groupingExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6558);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelContext extends ParserRuleContext {
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public TextStringNoLinebreakContext textStringNoLinebreak() {
			return getRuleContext(TextStringNoLinebreakContext.class,0);
		}
		public ChannelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterChannel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitChannel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitChannel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelContext channel() throws RecognitionException {
		ChannelContext _localctx = new ChannelContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_channel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6560);
			if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
			setState(6561);
			match(FOR_SYMBOL);
			setState(6562);
			match(CHANNEL_SYMBOL);
			setState(6563);
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementContext extends ParserRuleContext {
		public SimpleStatementContext simpleStatement() {
			return getRuleContext(SimpleStatementContext.class,0);
		}
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public LabeledBlockContext labeledBlock() {
			return getRuleContext(LabeledBlockContext.class,0);
		}
		public UnlabeledBlockContext unlabeledBlock() {
			return getRuleContext(UnlabeledBlockContext.class,0);
		}
		public LabeledControlContext labeledControl() {
			return getRuleContext(LabeledControlContext.class,0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return getRuleContext(UnlabeledControlContext.class,0);
		}
		public LeaveStatementContext leaveStatement() {
			return getRuleContext(LeaveStatementContext.class,0);
		}
		public IterateStatementContext iterateStatement() {
			return getRuleContext(IterateStatementContext.class,0);
		}
		public CursorOpenContext cursorOpen() {
			return getRuleContext(CursorOpenContext.class,0);
		}
		public CursorFetchContext cursorFetch() {
			return getRuleContext(CursorFetchContext.class,0);
		}
		public CursorCloseContext cursorClose() {
			return getRuleContext(CursorCloseContext.class,0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCompoundStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCompoundStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCompoundStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementContext compoundStatement() throws RecognitionException {
		CompoundStatementContext _localctx = new CompoundStatementContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_compoundStatement);
		try {
			setState(6578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6565);
				simpleStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6566);
				returnStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6567);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6568);
				caseStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6569);
				labeledBlock();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6570);
				unlabeledBlock();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6571);
				labeledControl();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6572);
				unlabeledControl();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6573);
				leaveStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6574);
				iterateStatement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6575);
				cursorOpen();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6576);
				cursorFetch();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6577);
				cursorClose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN_SYMBOL() { return getToken(MySQLParser.RETURN_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReturnStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReturnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6580);
			match(RETURN_SYMBOL);
			setState(6581);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public List<TerminalNode> IF_SYMBOL() { return getTokens(MySQLParser.IF_SYMBOL); }
		public TerminalNode IF_SYMBOL(int i) {
			return getToken(MySQLParser.IF_SYMBOL, i);
		}
		public IfBodyContext ifBody() {
			return getRuleContext(IfBodyContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIfStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_ifStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6583);
			match(IF_SYMBOL);
			setState(6584);
			ifBody();
			setState(6585);
			match(END_SYMBOL);
			setState(6586);
			match(IF_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfBodyContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ThenStatementContext thenStatement() {
			return getRuleContext(ThenStatementContext.class,0);
		}
		public TerminalNode ELSEIF_SYMBOL() { return getToken(MySQLParser.ELSEIF_SYMBOL, 0); }
		public IfBodyContext ifBody() {
			return getRuleContext(IfBodyContext.class,0);
		}
		public TerminalNode ELSE_SYMBOL() { return getToken(MySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIfBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIfBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIfBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfBodyContext ifBody() throws RecognitionException {
		IfBodyContext _localctx = new IfBodyContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_ifBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6588);
			expr(0);
			setState(6589);
			thenStatement();
			setState(6594);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELSEIF_SYMBOL:
				{
				setState(6590);
				match(ELSEIF_SYMBOL);
				setState(6591);
				ifBody();
				}
				break;
			case ELSE_SYMBOL:
				{
				setState(6592);
				match(ELSE_SYMBOL);
				setState(6593);
				compoundStatementList();
				}
				break;
			case END_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ThenStatementContext extends ParserRuleContext {
		public TerminalNode THEN_SYMBOL() { return getToken(MySQLParser.THEN_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public ThenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_thenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterThenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitThenStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitThenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ThenStatementContext thenStatement() throws RecognitionException {
		ThenStatementContext _localctx = new ThenStatementContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_thenStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6596);
			match(THEN_SYMBOL);
			setState(6597);
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompoundStatementListContext extends ParserRuleContext {
		public List<CompoundStatementContext> compoundStatement() {
			return getRuleContexts(CompoundStatementContext.class);
		}
		public CompoundStatementContext compoundStatement(int i) {
			return getRuleContext(CompoundStatementContext.class,i);
		}
		public List<TerminalNode> SEMICOLON_SYMBOL() { return getTokens(MySQLParser.SEMICOLON_SYMBOL); }
		public TerminalNode SEMICOLON_SYMBOL(int i) {
			return getToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public CompoundStatementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compoundStatementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCompoundStatementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCompoundStatementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCompoundStatementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompoundStatementListContext compoundStatementList() throws RecognitionException {
		CompoundStatementListContext _localctx = new CompoundStatementListContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_compoundStatementList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6602); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6599);
					compoundStatement();
					setState(6600);
					match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6604); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,828,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE_SYMBOL() { return getTokens(MySQLParser.CASE_SYMBOL); }
		public TerminalNode CASE_SYMBOL(int i) {
			return getToken(MySQLParser.CASE_SYMBOL, i);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public List<WhenExpressionContext> whenExpression() {
			return getRuleContexts(WhenExpressionContext.class);
		}
		public WhenExpressionContext whenExpression(int i) {
			return getRuleContext(WhenExpressionContext.class,i);
		}
		public List<ThenStatementContext> thenStatement() {
			return getRuleContexts(ThenStatementContext.class);
		}
		public ThenStatementContext thenStatement(int i) {
			return getRuleContext(ThenStatementContext.class,i);
		}
		public ElseStatementContext elseStatement() {
			return getRuleContext(ElseStatementContext.class,0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_caseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6606);
			match(CASE_SYMBOL);
			setState(6608);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
			case 1:
				{
				setState(6607);
				expr(0);
				}
				break;
			}
			setState(6613); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6610);
				whenExpression();
				setState(6611);
				thenStatement();
				}
				}
				setState(6615); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN_SYMBOL );
			setState(6618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE_SYMBOL) {
				{
				setState(6617);
				elseStatement();
				}
			}

			setState(6620);
			match(END_SYMBOL);
			setState(6621);
			match(CASE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElseStatementContext extends ParserRuleContext {
		public TerminalNode ELSE_SYMBOL() { return getToken(MySQLParser.ELSE_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterElseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitElseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitElseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElseStatementContext elseStatement() throws RecognitionException {
		ElseStatementContext _localctx = new ElseStatementContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_elseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6623);
			match(ELSE_SYMBOL);
			setState(6624);
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabeledBlockContext extends ParserRuleContext {
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public BeginEndBlockContext beginEndBlock() {
			return getRuleContext(BeginEndBlockContext.class,0);
		}
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LabeledBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLabeledBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLabeledBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLabeledBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabeledBlockContext labeledBlock() throws RecognitionException {
		LabeledBlockContext _localctx = new LabeledBlockContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_labeledBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6626);
			label();
			setState(6627);
			beginEndBlock();
			setState(6629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
			case 1:
				{
				setState(6628);
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlabeledBlockContext extends ParserRuleContext {
		public BeginEndBlockContext beginEndBlock() {
			return getRuleContext(BeginEndBlockContext.class,0);
		}
		public UnlabeledBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlabeledBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUnlabeledBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUnlabeledBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUnlabeledBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlabeledBlockContext unlabeledBlock() throws RecognitionException {
		UnlabeledBlockContext _localctx = new UnlabeledBlockContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_unlabeledBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6631);
			beginEndBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelContext extends ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return getRuleContext(LabelIdentifierContext.class,0);
		}
		public TerminalNode COLON_SYMBOL() { return getToken(MySQLParser.COLON_SYMBOL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabelContext label() throws RecognitionException {
		LabelContext _localctx = new LabelContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_label);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6633);
			labelIdentifier();
			setState(6634);
			match(COLON_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BeginEndBlockContext extends ParserRuleContext {
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public SpDeclarationsContext spDeclarations() {
			return getRuleContext(SpDeclarationsContext.class,0);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public BeginEndBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_beginEndBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterBeginEndBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitBeginEndBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitBeginEndBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BeginEndBlockContext beginEndBlock() throws RecognitionException {
		BeginEndBlockContext _localctx = new BeginEndBlockContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_beginEndBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6636);
			match(BEGIN_SYMBOL);
			setState(6638);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,833,_ctx) ) {
			case 1:
				{
				setState(6637);
				spDeclarations();
				}
				break;
			}
			setState(6641);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
			case 1:
				{
				setState(6640);
				compoundStatementList();
				}
				break;
			}
			setState(6643);
			match(END_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabeledControlContext extends ParserRuleContext {
		public LabelContext label() {
			return getRuleContext(LabelContext.class,0);
		}
		public UnlabeledControlContext unlabeledControl() {
			return getRuleContext(UnlabeledControlContext.class,0);
		}
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LabeledControlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledControl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLabeledControl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLabeledControl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLabeledControl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabeledControlContext labeledControl() throws RecognitionException {
		LabeledControlContext _localctx = new LabeledControlContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_labeledControl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6645);
			label();
			setState(6646);
			unlabeledControl();
			setState(6648);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,835,_ctx) ) {
			case 1:
				{
				setState(6647);
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlabeledControlContext extends ParserRuleContext {
		public LoopBlockContext loopBlock() {
			return getRuleContext(LoopBlockContext.class,0);
		}
		public WhileDoBlockContext whileDoBlock() {
			return getRuleContext(WhileDoBlockContext.class,0);
		}
		public RepeatUntilBlockContext repeatUntilBlock() {
			return getRuleContext(RepeatUntilBlockContext.class,0);
		}
		public UnlabeledControlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlabeledControl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUnlabeledControl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUnlabeledControl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUnlabeledControl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlabeledControlContext unlabeledControl() throws RecognitionException {
		UnlabeledControlContext _localctx = new UnlabeledControlContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_unlabeledControl);
		try {
			setState(6653);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOOP_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6650);
				loopBlock();
				}
				break;
			case WHILE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6651);
				whileDoBlock();
				}
				break;
			case REPEAT_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6652);
				repeatUntilBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopBlockContext extends ParserRuleContext {
		public List<TerminalNode> LOOP_SYMBOL() { return getTokens(MySQLParser.LOOP_SYMBOL); }
		public TerminalNode LOOP_SYMBOL(int i) {
			return getToken(MySQLParser.LOOP_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public LoopBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLoopBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLoopBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLoopBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopBlockContext loopBlock() throws RecognitionException {
		LoopBlockContext _localctx = new LoopBlockContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_loopBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6655);
			match(LOOP_SYMBOL);
			setState(6656);
			compoundStatementList();
			setState(6657);
			match(END_SYMBOL);
			setState(6658);
			match(LOOP_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileDoBlockContext extends ParserRuleContext {
		public List<TerminalNode> WHILE_SYMBOL() { return getTokens(MySQLParser.WHILE_SYMBOL); }
		public TerminalNode WHILE_SYMBOL(int i) {
			return getToken(MySQLParser.WHILE_SYMBOL, i);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public WhileDoBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileDoBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWhileDoBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWhileDoBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWhileDoBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhileDoBlockContext whileDoBlock() throws RecognitionException {
		WhileDoBlockContext _localctx = new WhileDoBlockContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_whileDoBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6660);
			match(WHILE_SYMBOL);
			setState(6661);
			expr(0);
			setState(6662);
			match(DO_SYMBOL);
			setState(6663);
			compoundStatementList();
			setState(6664);
			match(END_SYMBOL);
			setState(6665);
			match(WHILE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatUntilBlockContext extends ParserRuleContext {
		public List<TerminalNode> REPEAT_SYMBOL() { return getTokens(MySQLParser.REPEAT_SYMBOL); }
		public TerminalNode REPEAT_SYMBOL(int i) {
			return getToken(MySQLParser.REPEAT_SYMBOL, i);
		}
		public CompoundStatementListContext compoundStatementList() {
			return getRuleContext(CompoundStatementListContext.class,0);
		}
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public RepeatUntilBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatUntilBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRepeatUntilBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRepeatUntilBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRepeatUntilBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatUntilBlockContext repeatUntilBlock() throws RecognitionException {
		RepeatUntilBlockContext _localctx = new RepeatUntilBlockContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_repeatUntilBlock);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6667);
			match(REPEAT_SYMBOL);
			setState(6668);
			compoundStatementList();
			setState(6669);
			match(UNTIL_SYMBOL);
			setState(6670);
			expr(0);
			setState(6671);
			match(END_SYMBOL);
			setState(6672);
			match(REPEAT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpDeclarationsContext extends ParserRuleContext {
		public List<SpDeclarationContext> spDeclaration() {
			return getRuleContexts(SpDeclarationContext.class);
		}
		public SpDeclarationContext spDeclaration(int i) {
			return getRuleContext(SpDeclarationContext.class,i);
		}
		public List<TerminalNode> SEMICOLON_SYMBOL() { return getTokens(MySQLParser.SEMICOLON_SYMBOL); }
		public TerminalNode SEMICOLON_SYMBOL(int i) {
			return getToken(MySQLParser.SEMICOLON_SYMBOL, i);
		}
		public SpDeclarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spDeclarations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSpDeclarations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSpDeclarations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSpDeclarations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpDeclarationsContext spDeclarations() throws RecognitionException {
		SpDeclarationsContext _localctx = new SpDeclarationsContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_spDeclarations);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6677); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6674);
					spDeclaration();
					setState(6675);
					match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6679); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,837,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpDeclarationContext extends ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return getRuleContext(VariableDeclarationContext.class,0);
		}
		public ConditionDeclarationContext conditionDeclaration() {
			return getRuleContext(ConditionDeclarationContext.class,0);
		}
		public HandlerDeclarationContext handlerDeclaration() {
			return getRuleContext(HandlerDeclarationContext.class,0);
		}
		public CursorDeclarationContext cursorDeclaration() {
			return getRuleContext(CursorDeclarationContext.class,0);
		}
		public SpDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSpDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSpDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSpDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpDeclarationContext spDeclaration() throws RecognitionException {
		SpDeclarationContext _localctx = new SpDeclarationContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_spDeclaration);
		try {
			setState(6685);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,838,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6681);
				variableDeclaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6682);
				conditionDeclaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6683);
				handlerDeclaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6684);
				cursorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterVariableDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitVariableDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitVariableDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableDeclarationContext variableDeclaration() throws RecognitionException {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_variableDeclaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6687);
			match(DECLARE_SYMBOL);
			setState(6688);
			identifierList();
			setState(6689);
			dataType();
			setState(6691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE_SYMBOL) {
				{
				setState(6690);
				collate();
				}
			}

			setState(6695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(6693);
				match(DEFAULT_SYMBOL);
				setState(6694);
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONDITION_SYMBOL() { return getToken(MySQLParser.CONDITION_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public SpConditionContext spCondition() {
			return getRuleContext(SpConditionContext.class,0);
		}
		public ConditionDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterConditionDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitConditionDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitConditionDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionDeclarationContext conditionDeclaration() throws RecognitionException {
		ConditionDeclarationContext _localctx = new ConditionDeclarationContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_conditionDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6697);
			match(DECLARE_SYMBOL);
			setState(6698);
			identifier();
			setState(6699);
			match(CONDITION_SYMBOL);
			setState(6700);
			match(FOR_SYMBOL);
			setState(6701);
			spCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpConditionContext extends ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public SqlstateContext sqlstate() {
			return getRuleContext(SqlstateContext.class,0);
		}
		public SpConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSpCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSpCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSpCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpConditionContext spCondition() throws RecognitionException {
		SpConditionContext _localctx = new SpConditionContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_spCondition);
		try {
			setState(6705);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6703);
				ulong_number();
				}
				break;
			case SQLSTATE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6704);
				sqlstate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlstateContext extends ParserRuleContext {
		public TerminalNode SQLSTATE_SYMBOL() { return getToken(MySQLParser.SQLSTATE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public SqlstateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlstate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSqlstate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSqlstate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSqlstate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlstateContext sqlstate() throws RecognitionException {
		SqlstateContext _localctx = new SqlstateContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_sqlstate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6707);
			match(SQLSTATE_SYMBOL);
			setState(6709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,842,_ctx) ) {
			case 1:
				{
				setState(6708);
				match(VALUE_SYMBOL);
				}
				break;
			}
			setState(6711);
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public List<HandlerConditionContext> handlerCondition() {
			return getRuleContexts(HandlerConditionContext.class);
		}
		public HandlerConditionContext handlerCondition(int i) {
			return getRuleContext(HandlerConditionContext.class,i);
		}
		public CompoundStatementContext compoundStatement() {
			return getRuleContext(CompoundStatementContext.class,0);
		}
		public TerminalNode CONTINUE_SYMBOL() { return getToken(MySQLParser.CONTINUE_SYMBOL, 0); }
		public TerminalNode EXIT_SYMBOL() { return getToken(MySQLParser.EXIT_SYMBOL, 0); }
		public TerminalNode UNDO_SYMBOL() { return getToken(MySQLParser.UNDO_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public HandlerDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHandlerDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHandlerDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHandlerDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerDeclarationContext handlerDeclaration() throws RecognitionException {
		HandlerDeclarationContext _localctx = new HandlerDeclarationContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_handlerDeclaration);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6713);
			match(DECLARE_SYMBOL);
			setState(6714);
			_la = _input.LA(1);
			if ( !(_la==CONTINUE_SYMBOL || _la==EXIT_SYMBOL || _la==UNDO_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6715);
			match(HANDLER_SYMBOL);
			setState(6716);
			match(FOR_SYMBOL);
			setState(6717);
			handlerCondition();
			setState(6722);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6718);
					match(COMMA_SYMBOL);
					setState(6719);
					handlerCondition();
					}
					} 
				}
				setState(6724);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
			}
			setState(6725);
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerConditionContext extends ParserRuleContext {
		public SpConditionContext spCondition() {
			return getRuleContext(SpConditionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SQLWARNING_SYMBOL() { return getToken(MySQLParser.SQLWARNING_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode FOUND_SYMBOL() { return getToken(MySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode SQLEXCEPTION_SYMBOL() { return getToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0); }
		public HandlerConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCondition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterHandlerCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitHandlerCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitHandlerCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerConditionContext handlerCondition() throws RecognitionException {
		HandlerConditionContext _localctx = new HandlerConditionContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_handlerCondition);
		try {
			setState(6734);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6727);
				spCondition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6728);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6729);
				match(SQLWARNING_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6730);
				notRule();
				setState(6731);
				match(FOUND_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6733);
				match(SQLEXCEPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorDeclarationContext extends ParserRuleContext {
		public TerminalNode DECLARE_SYMBOL() { return getToken(MySQLParser.DECLARE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CURSOR_SYMBOL() { return getToken(MySQLParser.CURSOR_SYMBOL, 0); }
		public TerminalNode FOR_SYMBOL() { return getToken(MySQLParser.FOR_SYMBOL, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public CursorDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCursorDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCursorDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCursorDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorDeclarationContext cursorDeclaration() throws RecognitionException {
		CursorDeclarationContext _localctx = new CursorDeclarationContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_cursorDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6736);
			match(DECLARE_SYMBOL);
			setState(6737);
			identifier();
			setState(6738);
			match(CURSOR_SYMBOL);
			setState(6739);
			match(FOR_SYMBOL);
			setState(6740);
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IterateStatementContext extends ParserRuleContext {
		public TerminalNode ITERATE_SYMBOL() { return getToken(MySQLParser.ITERATE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iterateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIterateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIterateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIterateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IterateStatementContext iterateStatement() throws RecognitionException {
		IterateStatementContext _localctx = new IterateStatementContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_iterateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6742);
			match(ITERATE_SYMBOL);
			setState(6743);
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LeaveStatementContext extends ParserRuleContext {
		public TerminalNode LEAVE_SYMBOL() { return getToken(MySQLParser.LEAVE_SYMBOL, 0); }
		public LabelRefContext labelRef() {
			return getRuleContext(LabelRefContext.class,0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_leaveStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLeaveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLeaveStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLeaveStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LeaveStatementContext leaveStatement() throws RecognitionException {
		LeaveStatementContext _localctx = new LeaveStatementContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_leaveStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6745);
			match(LEAVE_SYMBOL);
			setState(6746);
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GetDiagnosticsContext extends ParserRuleContext {
		public TerminalNode GET_SYMBOL() { return getToken(MySQLParser.GET_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public List<StatementInformationItemContext> statementInformationItem() {
			return getRuleContexts(StatementInformationItemContext.class);
		}
		public StatementInformationItemContext statementInformationItem(int i) {
			return getRuleContext(StatementInformationItemContext.class,i);
		}
		public TerminalNode CONDITION_SYMBOL() { return getToken(MySQLParser.CONDITION_SYMBOL, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return getRuleContext(SignalAllowedExprContext.class,0);
		}
		public List<ConditionInformationItemContext> conditionInformationItem() {
			return getRuleContexts(ConditionInformationItemContext.class);
		}
		public ConditionInformationItemContext conditionInformationItem(int i) {
			return getRuleContext(ConditionInformationItemContext.class,i);
		}
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MySQLParser.STACKED_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public GetDiagnosticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_getDiagnostics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGetDiagnostics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGetDiagnostics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGetDiagnostics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GetDiagnosticsContext getDiagnostics() throws RecognitionException {
		GetDiagnosticsContext _localctx = new GetDiagnosticsContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_getDiagnostics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6748);
			match(GET_SYMBOL);
			setState(6752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
			case 1:
				{
				setState(6749);
				match(CURRENT_SYMBOL);
				}
				break;
			case 2:
				{
				setState(6750);
				if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
				setState(6751);
				match(STACKED_SYMBOL);
				}
				break;
			}
			setState(6754);
			match(DIAGNOSTICS_SYMBOL);
			setState(6773);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
			case 1:
				{
				setState(6755);
				statementInformationItem();
				setState(6760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6756);
					match(COMMA_SYMBOL);
					setState(6757);
					statementInformationItem();
					}
					}
					setState(6762);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(6763);
				match(CONDITION_SYMBOL);
				setState(6764);
				signalAllowedExpr();
				setState(6765);
				conditionInformationItem();
				setState(6770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6766);
					match(COMMA_SYMBOL);
					setState(6767);
					conditionInformationItem();
					}
					}
					setState(6772);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalAllowedExprContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public SignalAllowedExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalAllowedExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSignalAllowedExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSignalAllowedExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSignalAllowedExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalAllowedExprContext signalAllowedExpr() throws RecognitionException {
		SignalAllowedExprContext _localctx = new SignalAllowedExprContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_signalAllowedExpr);
		try {
			setState(6778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6775);
				literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6776);
				variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6777);
				qualifiedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementInformationItemContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StatementInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementInformationItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterStatementInformationItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitStatementInformationItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitStatementInformationItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementInformationItemContext statementInformationItem() throws RecognitionException {
		StatementInformationItemContext _localctx = new StatementInformationItemContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_statementInformationItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6782);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
			case 1:
				{
				setState(6780);
				variable();
				}
				break;
			case 2:
				{
				setState(6781);
				identifier();
				}
				break;
			}
			setState(6784);
			match(EQUAL_OPERATOR);
			setState(6785);
			_la = _input.LA(1);
			if ( !(_la==NUMBER_SYMBOL || _la==ROW_COUNT_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionInformationItemContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SignalInformationItemNameContext signalInformationItemName() {
			return getRuleContext(SignalInformationItemNameContext.class,0);
		}
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ConditionInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionInformationItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterConditionInformationItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitConditionInformationItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitConditionInformationItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionInformationItemContext conditionInformationItem() throws RecognitionException {
		ConditionInformationItemContext _localctx = new ConditionInformationItemContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_conditionInformationItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,851,_ctx) ) {
			case 1:
				{
				setState(6787);
				variable();
				}
				break;
			case 2:
				{
				setState(6788);
				identifier();
				}
				break;
			}
			setState(6791);
			match(EQUAL_OPERATOR);
			setState(6794);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CATALOG_NAME_SYMBOL:
			case CLASS_ORIGIN_SYMBOL:
			case COLUMN_NAME_SYMBOL:
			case CONSTRAINT_CATALOG_SYMBOL:
			case CONSTRAINT_NAME_SYMBOL:
			case CONSTRAINT_SCHEMA_SYMBOL:
			case CURSOR_NAME_SYMBOL:
			case MESSAGE_TEXT_SYMBOL:
			case MYSQL_ERRNO_SYMBOL:
			case SCHEMA_NAME_SYMBOL:
			case SUBCLASS_ORIGIN_SYMBOL:
			case TABLE_NAME_SYMBOL:
				{
				setState(6792);
				signalInformationItemName();
				}
				break;
			case RETURNED_SQLSTATE_SYMBOL:
				{
				setState(6793);
				match(RETURNED_SQLSTATE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalInformationItemNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public SignalInformationItemNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformationItemName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSignalInformationItemName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSignalInformationItemName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSignalInformationItemName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalInformationItemNameContext signalInformationItemName() throws RecognitionException {
		SignalInformationItemNameContext _localctx = new SignalInformationItemNameContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_signalInformationItemName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6796);
			_la = _input.LA(1);
			if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (CATALOG_NAME_SYMBOL - 53)) | (1L << (CLASS_ORIGIN_SYMBOL - 53)) | (1L << (COLUMN_NAME_SYMBOL - 53)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 53)) | (1L << (CONSTRAINT_NAME_SYMBOL - 53)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 53)) | (1L << (CURSOR_NAME_SYMBOL - 53)))) != 0) || _la==MESSAGE_TEXT_SYMBOL || _la==MYSQL_ERRNO_SYMBOL || _la==SCHEMA_NAME_SYMBOL || _la==SUBCLASS_ORIGIN_SYMBOL || _la==TABLE_NAME_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL_SYMBOL() { return getToken(MySQLParser.SIGNAL_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SqlstateContext sqlstate() {
			return getRuleContext(SqlstateContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public List<SignalInformationItemContext> signalInformationItem() {
			return getRuleContexts(SignalInformationItemContext.class);
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return getRuleContext(SignalInformationItemContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6798);
			match(SIGNAL_SYMBOL);
			setState(6801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,853,_ctx) ) {
			case 1:
				{
				setState(6799);
				identifier();
				}
				break;
			case 2:
				{
				setState(6800);
				sqlstate();
				}
				break;
			}
			setState(6812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET_SYMBOL) {
				{
				setState(6803);
				match(SET_SYMBOL);
				setState(6804);
				signalInformationItem();
				setState(6809);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6805);
					match(COMMA_SYMBOL);
					setState(6806);
					signalInformationItem();
					}
					}
					setState(6811);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL_SYMBOL() { return getToken(MySQLParser.RESIGNAL_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SqlstateContext sqlstate() {
			return getRuleContext(SqlstateContext.class,0);
		}
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public List<SignalInformationItemContext> signalInformationItem() {
			return getRuleContexts(SignalInformationItemContext.class);
		}
		public SignalInformationItemContext signalInformationItem(int i) {
			return getRuleContext(SignalInformationItemContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6814);
			match(RESIGNAL_SYMBOL);
			setState(6817);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
			case 1:
				{
				setState(6815);
				identifier();
				}
				break;
			case 2:
				{
				setState(6816);
				sqlstate();
				}
				break;
			}
			setState(6828);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET_SYMBOL) {
				{
				setState(6819);
				match(SET_SYMBOL);
				setState(6820);
				signalInformationItem();
				setState(6825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(6821);
					match(COMMA_SYMBOL);
					setState(6822);
					signalInformationItem();
					}
					}
					setState(6827);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalInformationItemContext extends ParserRuleContext {
		public SignalInformationItemNameContext signalInformationItemName() {
			return getRuleContext(SignalInformationItemNameContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public SignalAllowedExprContext signalAllowedExpr() {
			return getRuleContext(SignalAllowedExprContext.class,0);
		}
		public SignalInformationItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalInformationItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSignalInformationItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSignalInformationItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSignalInformationItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalInformationItemContext signalInformationItem() throws RecognitionException {
		SignalInformationItemContext _localctx = new SignalInformationItemContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_signalInformationItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6830);
			signalInformationItemName();
			setState(6831);
			match(EQUAL_OPERATOR);
			setState(6832);
			signalAllowedExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorOpenContext extends ParserRuleContext {
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorOpenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorOpen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCursorOpen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCursorOpen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCursorOpen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorOpenContext cursorOpen() throws RecognitionException {
		CursorOpenContext _localctx = new CursorOpenContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_cursorOpen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6834);
			match(OPEN_SYMBOL);
			setState(6835);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorCloseContext extends ParserRuleContext {
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorCloseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorClose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCursorClose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCursorClose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCursorClose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorCloseContext cursorClose() throws RecognitionException {
		CursorCloseContext _localctx = new CursorCloseContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_cursorClose);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6837);
			match(CLOSE_SYMBOL);
			setState(6838);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorFetchContext extends ParserRuleContext {
		public TerminalNode FETCH_SYMBOL() { return getToken(MySQLParser.FETCH_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INTO_SYMBOL() { return getToken(MySQLParser.INTO_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode FROM_SYMBOL() { return getToken(MySQLParser.FROM_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public CursorFetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorFetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCursorFetch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCursorFetch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCursorFetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorFetchContext cursorFetch() throws RecognitionException {
		CursorFetchContext _localctx = new CursorFetchContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_cursorFetch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6840);
			match(FETCH_SYMBOL);
			setState(6845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
			case 1:
				{
				setState(6842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NEXT_SYMBOL) {
					{
					setState(6841);
					match(NEXT_SYMBOL);
					}
				}

				setState(6844);
				match(FROM_SYMBOL);
				}
				break;
			}
			setState(6847);
			identifier();
			setState(6848);
			match(INTO_SYMBOL);
			setState(6849);
			identifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScheduleContext extends ParserRuleContext {
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode EVERY_SYMBOL() { return getToken(MySQLParser.EVERY_SYMBOL, 0); }
		public IntervalContext interval() {
			return getRuleContext(IntervalContext.class,0);
		}
		public TerminalNode STARTS_SYMBOL() { return getToken(MySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MySQLParser.ENDS_SYMBOL, 0); }
		public ScheduleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schedule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSchedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSchedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSchedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScheduleContext schedule() throws RecognitionException {
		ScheduleContext _localctx = new ScheduleContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_schedule);
		int _la;
		try {
			setState(6864);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6851);
				match(AT_SYMBOL);
				setState(6852);
				expr(0);
				}
				break;
			case EVERY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6853);
				match(EVERY_SYMBOL);
				setState(6854);
				expr(0);
				setState(6855);
				interval();
				setState(6858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTS_SYMBOL) {
					{
					setState(6856);
					match(STARTS_SYMBOL);
					setState(6857);
					expr(0);
					}
				}

				setState(6862);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDS_SYMBOL) {
					{
					setState(6860);
					match(ENDS_SYMBOL);
					setState(6861);
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public FieldDefinitionContext fieldDefinition() {
			return getRuleContext(FieldDefinitionContext.class,0);
		}
		public CheckOrReferencesContext checkOrReferences() {
			return getRuleContext(CheckOrReferencesContext.class,0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_columnDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6866);
			columnName();
			setState(6867);
			fieldDefinition();
			setState(6869);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,864,_ctx) ) {
			case 1:
				{
				setState(6868);
				checkOrReferences();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckOrReferencesContext extends ParserRuleContext {
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ReferencesContext references() {
			return getRuleContext(ReferencesContext.class,0);
		}
		public CheckOrReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOrReferences; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCheckOrReferences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCheckOrReferences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCheckOrReferences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckOrReferencesContext checkOrReferences() throws RecognitionException {
		CheckOrReferencesContext _localctx = new CheckOrReferencesContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_checkOrReferences);
		try {
			setState(6874);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,865,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6871);
				if (!(serverVersion < 80016)) throw new FailedPredicateException(this, "serverVersion < 80016");
				setState(6872);
				checkConstraint();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6873);
				references();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckConstraintContext extends ParserRuleContext {
		public TerminalNode CHECK_SYMBOL() { return getToken(MySQLParser.CHECK_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCheckConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCheckConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCheckConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckConstraintContext checkConstraint() throws RecognitionException {
		CheckConstraintContext _localctx = new CheckConstraintContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_checkConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6876);
			match(CHECK_SYMBOL);
			setState(6877);
			exprWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintEnforcementContext extends ParserRuleContext {
		public TerminalNode ENFORCED_SYMBOL() { return getToken(MySQLParser.ENFORCED_SYMBOL, 0); }
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public ConstraintEnforcementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintEnforcement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterConstraintEnforcement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitConstraintEnforcement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitConstraintEnforcement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintEnforcementContext constraintEnforcement() throws RecognitionException {
		ConstraintEnforcementContext _localctx = new ConstraintEnforcementContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_constraintEnforcement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT_SYMBOL) {
				{
				setState(6879);
				match(NOT_SYMBOL);
				}
			}

			setState(6882);
			match(ENFORCED_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintDefContext extends ParserRuleContext {
		public Token type;
		public KeyListVariantsContext keyListVariants() {
			return getRuleContext(KeyListVariantsContext.class,0);
		}
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IndexNameAndTypeContext indexNameAndType() {
			return getRuleContext(IndexNameAndTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode FULLTEXT_SYMBOL() { return getToken(MySQLParser.FULLTEXT_SYMBOL, 0); }
		public KeyOrIndexContext keyOrIndex() {
			return getRuleContext(KeyOrIndexContext.class,0);
		}
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public List<FulltextIndexOptionContext> fulltextIndexOption() {
			return getRuleContexts(FulltextIndexOptionContext.class);
		}
		public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return getRuleContext(FulltextIndexOptionContext.class,i);
		}
		public TerminalNode SPATIAL_SYMBOL() { return getToken(MySQLParser.SPATIAL_SYMBOL, 0); }
		public List<SpatialIndexOptionContext> spatialIndexOption() {
			return getRuleContexts(SpatialIndexOptionContext.class);
		}
		public SpatialIndexOptionContext spatialIndexOption(int i) {
			return getRuleContext(SpatialIndexOptionContext.class,i);
		}
		public KeyListContext keyList() {
			return getRuleContext(KeyListContext.class,0);
		}
		public ReferencesContext references() {
			return getRuleContext(ReferencesContext.class,0);
		}
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public TerminalNode FOREIGN_SYMBOL() { return getToken(MySQLParser.FOREIGN_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public ConstraintEnforcementContext constraintEnforcement() {
			return getRuleContext(ConstraintEnforcementContext.class,0);
		}
		public TableConstraintDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableConstraintDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableConstraintDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableConstraintDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintDefContext tableConstraintDef() throws RecognitionException {
		TableConstraintDefContext _localctx = new TableConstraintDefContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_tableConstraintDef);
		int _la;
		try {
			int _alt;
			setState(6959);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX_SYMBOL:
			case KEY_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6884);
				((TableConstraintDefContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
					((TableConstraintDefContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6886);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,867,_ctx) ) {
				case 1:
					{
					setState(6885);
					indexNameAndType();
					}
					break;
				}
				setState(6888);
				keyListVariants();
				setState(6892);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,868,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6889);
						indexOption();
						}
						} 
					}
					setState(6894);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,868,_ctx);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6895);
				((TableConstraintDefContext)_localctx).type = match(FULLTEXT_SYMBOL);
				setState(6897);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,869,_ctx) ) {
				case 1:
					{
					setState(6896);
					keyOrIndex();
					}
					break;
				}
				setState(6900);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
				case 1:
					{
					setState(6899);
					indexName();
					}
					break;
				}
				setState(6902);
				keyListVariants();
				setState(6906);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,871,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6903);
						fulltextIndexOption();
						}
						} 
					}
					setState(6908);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,871,_ctx);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6909);
				((TableConstraintDefContext)_localctx).type = match(SPATIAL_SYMBOL);
				setState(6911);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
				case 1:
					{
					setState(6910);
					keyOrIndex();
					}
					break;
				}
				setState(6914);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
				case 1:
					{
					setState(6913);
					indexName();
					}
					break;
				}
				setState(6916);
				keyListVariants();
				setState(6920);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,874,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6917);
						spatialIndexOption();
						}
						} 
					}
					setState(6922);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,874,_ctx);
				}
				}
				break;
			case CHECK_SYMBOL:
			case CONSTRAINT_SYMBOL:
			case FOREIGN_SYMBOL:
			case PRIMARY_SYMBOL:
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(6924);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					setState(6923);
					constraintName();
					}
				}

				setState(6957);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY_SYMBOL:
				case UNIQUE_SYMBOL:
					{
					setState(6932);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PRIMARY_SYMBOL:
						{
						setState(6926);
						((TableConstraintDefContext)_localctx).type = match(PRIMARY_SYMBOL);
						setState(6927);
						match(KEY_SYMBOL);
						}
						break;
					case UNIQUE_SYMBOL:
						{
						setState(6928);
						((TableConstraintDefContext)_localctx).type = match(UNIQUE_SYMBOL);
						setState(6930);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
						case 1:
							{
							setState(6929);
							keyOrIndex();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6935);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
					case 1:
						{
						setState(6934);
						indexNameAndType();
						}
						break;
					}
					setState(6937);
					keyListVariants();
					setState(6941);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,879,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6938);
							indexOption();
							}
							} 
						}
						setState(6943);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,879,_ctx);
					}
					}
					break;
				case FOREIGN_SYMBOL:
					{
					setState(6944);
					((TableConstraintDefContext)_localctx).type = match(FOREIGN_SYMBOL);
					setState(6945);
					match(KEY_SYMBOL);
					setState(6947);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,880,_ctx) ) {
					case 1:
						{
						setState(6946);
						indexName();
						}
						break;
					}
					setState(6949);
					keyList();
					setState(6950);
					references();
					}
					break;
				case CHECK_SYMBOL:
					{
					setState(6952);
					checkConstraint();
					setState(6955);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,881,_ctx) ) {
					case 1:
						{
						setState(6953);
						if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
						setState(6954);
						constraintEnforcement();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintNameContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterConstraintName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitConstraintName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitConstraintName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintNameContext constraintName() throws RecognitionException {
		ConstraintNameContext _localctx = new ConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_constraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6961);
			match(CONSTRAINT_SYMBOL);
			setState(6963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,884,_ctx) ) {
			case 1:
				{
				setState(6962);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public List<ColumnAttributeContext> columnAttribute() {
			return getRuleContexts(ColumnAttributeContext.class);
		}
		public ColumnAttributeContext columnAttribute(int i) {
			return getRuleContext(ColumnAttributeContext.class,i);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TerminalNode GENERATED_SYMBOL() { return getToken(MySQLParser.GENERATED_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode VIRTUAL_SYMBOL() { return getToken(MySQLParser.VIRTUAL_SYMBOL, 0); }
		public TerminalNode STORED_SYMBOL() { return getToken(MySQLParser.STORED_SYMBOL, 0); }
		public List<GcolAttributeContext> gcolAttribute() {
			return getRuleContexts(GcolAttributeContext.class);
		}
		public GcolAttributeContext gcolAttribute(int i) {
			return getRuleContext(GcolAttributeContext.class,i);
		}
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldDefinitionContext fieldDefinition() throws RecognitionException {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_fieldDefinition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6965);
			dataType();
			setState(7001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,892,_ctx) ) {
			case 1:
				{
				setState(6969);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,885,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6966);
						columnAttribute();
						}
						} 
					}
					setState(6971);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,885,_ctx);
				}
				}
				break;
			case 2:
				{
				setState(6972);
				if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
				setState(6974);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					setState(6973);
					collate();
					}
				}

				setState(6978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED_SYMBOL) {
					{
					setState(6976);
					match(GENERATED_SYMBOL);
					setState(6977);
					match(ALWAYS_SYMBOL);
					}
				}

				setState(6980);
				match(AS_SYMBOL);
				setState(6981);
				exprWithParentheses();
				setState(6983);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,888,_ctx) ) {
				case 1:
					{
					setState(6982);
					_la = _input.LA(1);
					if ( !(_la==STORED_SYMBOL || _la==VIRTUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6999);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,891,_ctx) ) {
				case 1:
					{
					setState(6985);
					if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
					setState(6989);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,889,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6986);
							gcolAttribute();
							}
							} 
						}
						setState(6991);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,889,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(6992);
					if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
					setState(6996);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,890,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6993);
							columnAttribute();
							}
							} 
						}
						setState(6998);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,890,_ctx);
					}
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnAttributeContext extends ParserRuleContext {
		public Token value;
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public TerminalNode NOT_SYMBOL() { return getToken(MySQLParser.NOT_SYMBOL, 0); }
		public TerminalNode SECONDARY_SYMBOL() { return getToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public SignedLiteralContext signedLiteral() {
			return getRuleContext(SignedLiteralContext.class,0);
		}
		public TerminalNode NOW_SYMBOL() { return getToken(MySQLParser.NOW_SYMBOL, 0); }
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode ON_SYMBOL() { return getToken(MySQLParser.ON_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public ColumnFormatContext columnFormat() {
			return getRuleContext(ColumnFormatContext.class,0);
		}
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public StorageMediaContext storageMedia() {
			return getRuleContext(StorageMediaContext.class,0);
		}
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode SRID_SYMBOL() { return getToken(MySQLParser.SRID_SYMBOL, 0); }
		public CheckConstraintContext checkConstraint() {
			return getRuleContext(CheckConstraintContext.class,0);
		}
		public ConstraintNameContext constraintName() {
			return getRuleContext(ConstraintNameContext.class,0);
		}
		public ConstraintEnforcementContext constraintEnforcement() {
			return getRuleContext(ConstraintEnforcementContext.class,0);
		}
		public ColumnAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAttribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnAttribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnAttribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnAttribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnAttributeContext columnAttribute() throws RecognitionException {
		ColumnAttributeContext _localctx = new ColumnAttributeContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_columnAttribute);
		int _la;
		try {
			setState(7055);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,900,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7004);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					setState(7003);
					match(NOT_SYMBOL);
					}
				}

				setState(7006);
				nullLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7007);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(7008);
				match(NOT_SYMBOL);
				setState(7009);
				match(SECONDARY_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7010);
				((ColumnAttributeContext)_localctx).value = match(DEFAULT_SYMBOL);
				setState(7018);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,895,_ctx) ) {
				case 1:
					{
					setState(7011);
					signedLiteral();
					}
					break;
				case 2:
					{
					setState(7012);
					match(NOW_SYMBOL);
					setState(7014);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,894,_ctx) ) {
					case 1:
						{
						setState(7013);
						timeFunctionParameters();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(7016);
					if (!(serverVersion >= 80013)) throw new FailedPredicateException(this, "serverVersion >= 80013");
					setState(7017);
					exprWithParentheses();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7020);
				((ColumnAttributeContext)_localctx).value = match(ON_SYMBOL);
				setState(7021);
				match(UPDATE_SYMBOL);
				setState(7022);
				match(NOW_SYMBOL);
				setState(7024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,896,_ctx) ) {
				case 1:
					{
					setState(7023);
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7026);
				((ColumnAttributeContext)_localctx).value = match(AUTO_INCREMENT_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7027);
				((ColumnAttributeContext)_localctx).value = match(SERIAL_SYMBOL);
				setState(7028);
				match(DEFAULT_SYMBOL);
				setState(7029);
				match(VALUE_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					setState(7030);
					match(PRIMARY_SYMBOL);
					}
				}

				setState(7033);
				((ColumnAttributeContext)_localctx).value = match(KEY_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7034);
				((ColumnAttributeContext)_localctx).value = match(UNIQUE_SYMBOL);
				setState(7036);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
				case 1:
					{
					setState(7035);
					match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7038);
				((ColumnAttributeContext)_localctx).value = match(COMMENT_SYMBOL);
				setState(7039);
				textLiteral();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7040);
				collate();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7041);
				((ColumnAttributeContext)_localctx).value = match(COLUMN_FORMAT_SYMBOL);
				setState(7042);
				columnFormat();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7043);
				((ColumnAttributeContext)_localctx).value = match(STORAGE_SYMBOL);
				setState(7044);
				storageMedia();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7045);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(7046);
				((ColumnAttributeContext)_localctx).value = match(SRID_SYMBOL);
				setState(7047);
				real_ulonglong_number();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7048);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(7050);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					setState(7049);
					constraintName();
					}
				}

				setState(7052);
				checkConstraint();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7053);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(7054);
				constraintEnforcement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnFormatContext extends ParserRuleContext {
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public ColumnFormatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnFormat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnFormat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnFormat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnFormat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnFormatContext columnFormat() throws RecognitionException {
		ColumnFormatContext _localctx = new ColumnFormatContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_columnFormat);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7057);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT_SYMBOL || _la==DYNAMIC_SYMBOL || _la==FIXED_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageMediaContext extends ParserRuleContext {
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public StorageMediaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageMedia; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterStorageMedia(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitStorageMedia(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitStorageMedia(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageMediaContext storageMedia() throws RecognitionException {
		StorageMediaContext _localctx = new StorageMediaContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_storageMedia);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7059);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT_SYMBOL || _la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GcolAttributeContext extends ParserRuleContext {
		public TerminalNode UNIQUE_SYMBOL() { return getToken(MySQLParser.UNIQUE_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode PRIMARY_SYMBOL() { return getToken(MySQLParser.PRIMARY_SYMBOL, 0); }
		public GcolAttributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gcolAttribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterGcolAttribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitGcolAttribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitGcolAttribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GcolAttributeContext gcolAttribute() throws RecognitionException {
		GcolAttributeContext _localctx = new GcolAttributeContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_gcolAttribute);
		int _la;
		try {
			setState(7075);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7061);
				match(UNIQUE_SYMBOL);
				setState(7063);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
				case 1:
					{
					setState(7062);
					match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7065);
				match(COMMENT_SYMBOL);
				setState(7066);
				textString();
				}
				break;
			case NOT_SYMBOL:
			case NULL_SYMBOL:
			case NOT2_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT_SYMBOL || _la==NOT2_SYMBOL) {
					{
					setState(7067);
					notRule();
					}
				}

				setState(7070);
				match(NULL_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
			case PRIMARY_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(7072);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					setState(7071);
					match(PRIMARY_SYMBOL);
					}
				}

				setState(7074);
				match(KEY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferencesContext extends ParserRuleContext {
		public Token match;
		public Token option;
		public TerminalNode REFERENCES_SYMBOL() { return getToken(MySQLParser.REFERENCES_SYMBOL, 0); }
		public TableRefContext tableRef() {
			return getRuleContext(TableRefContext.class,0);
		}
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public TerminalNode MATCH_SYMBOL() { return getToken(MySQLParser.MATCH_SYMBOL, 0); }
		public List<TerminalNode> ON_SYMBOL() { return getTokens(MySQLParser.ON_SYMBOL); }
		public TerminalNode ON_SYMBOL(int i) {
			return getToken(MySQLParser.ON_SYMBOL, i);
		}
		public List<DeleteOptionContext> deleteOption() {
			return getRuleContexts(DeleteOptionContext.class);
		}
		public DeleteOptionContext deleteOption(int i) {
			return getRuleContext(DeleteOptionContext.class,i);
		}
		public TerminalNode UPDATE_SYMBOL() { return getToken(MySQLParser.UPDATE_SYMBOL, 0); }
		public TerminalNode DELETE_SYMBOL() { return getToken(MySQLParser.DELETE_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public ReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReferences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReferences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReferences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferencesContext references() throws RecognitionException {
		ReferencesContext _localctx = new ReferencesContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_references);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7077);
			match(REFERENCES_SYMBOL);
			setState(7078);
			tableRef();
			setState(7080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(7079);
				identifierListWithParentheses();
				}
			}

			setState(7084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH_SYMBOL) {
				{
				setState(7082);
				match(MATCH_SYMBOL);
				setState(7083);
				((ReferencesContext)_localctx).match = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL_SYMBOL || _la==PARTIAL_SYMBOL || _la==SIMPLE_SYMBOL) ) {
					((ReferencesContext)_localctx).match = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(7102);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,909,_ctx) ) {
			case 1:
				{
				setState(7086);
				match(ON_SYMBOL);
				setState(7087);
				((ReferencesContext)_localctx).option = match(UPDATE_SYMBOL);
				setState(7088);
				deleteOption();
				setState(7092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(7089);
					match(ON_SYMBOL);
					setState(7090);
					match(DELETE_SYMBOL);
					setState(7091);
					deleteOption();
					}
				}

				}
				break;
			case 2:
				{
				setState(7094);
				match(ON_SYMBOL);
				setState(7095);
				((ReferencesContext)_localctx).option = match(DELETE_SYMBOL);
				setState(7096);
				deleteOption();
				setState(7100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON_SYMBOL) {
					{
					setState(7097);
					match(ON_SYMBOL);
					setState(7098);
					match(UPDATE_SYMBOL);
					setState(7099);
					deleteOption();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteOptionContext extends ParserRuleContext {
		public TerminalNode RESTRICT_SYMBOL() { return getToken(MySQLParser.RESTRICT_SYMBOL, 0); }
		public TerminalNode CASCADE_SYMBOL() { return getToken(MySQLParser.CASCADE_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode ACTION_SYMBOL() { return getToken(MySQLParser.ACTION_SYMBOL, 0); }
		public DeleteOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDeleteOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDeleteOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDeleteOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteOptionContext deleteOption() throws RecognitionException {
		DeleteOptionContext _localctx = new DeleteOptionContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_deleteOption);
		int _la;
		try {
			setState(7109);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE_SYMBOL:
			case RESTRICT_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7104);
				_la = _input.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SET_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7105);
				match(SET_SYMBOL);
				setState(7106);
				nullLiteral();
				}
				break;
			case NO_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7107);
				match(NO_SYMBOL);
				setState(7108);
				match(ACTION_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<KeyPartContext> keyPart() {
			return getRuleContexts(KeyPartContext.class);
		}
		public KeyPartContext keyPart(int i) {
			return getRuleContext(KeyPartContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyListContext keyList() throws RecognitionException {
		KeyListContext _localctx = new KeyListContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_keyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7111);
			match(OPEN_PAR_SYMBOL);
			setState(7112);
			keyPart();
			setState(7117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7113);
				match(COMMA_SYMBOL);
				setState(7114);
				keyPart();
				}
				}
				setState(7119);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7120);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyPartContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public KeyPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyPart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyPartContext keyPart() throws RecognitionException {
		KeyPartContext _localctx = new KeyPartContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_keyPart);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7122);
			identifier();
			setState(7124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(7123);
				fieldLength();
				}
			}

			setState(7127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				setState(7126);
				direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyListWithExpressionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<KeyPartOrExpressionContext> keyPartOrExpression() {
			return getRuleContexts(KeyPartOrExpressionContext.class);
		}
		public KeyPartOrExpressionContext keyPartOrExpression(int i) {
			return getRuleContext(KeyPartOrExpressionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public KeyListWithExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyListWithExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyListWithExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyListWithExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyListWithExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyListWithExpressionContext keyListWithExpression() throws RecognitionException {
		KeyListWithExpressionContext _localctx = new KeyListWithExpressionContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_keyListWithExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7129);
			match(OPEN_PAR_SYMBOL);
			setState(7130);
			keyPartOrExpression();
			setState(7135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7131);
				match(COMMA_SYMBOL);
				setState(7132);
				keyPartOrExpression();
				}
				}
				setState(7137);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7138);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyPartOrExpressionContext extends ParserRuleContext {
		public KeyPartContext keyPart() {
			return getRuleContext(KeyPartContext.class,0);
		}
		public ExprWithParenthesesContext exprWithParentheses() {
			return getRuleContext(ExprWithParenthesesContext.class,0);
		}
		public DirectionContext direction() {
			return getRuleContext(DirectionContext.class,0);
		}
		public KeyPartOrExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyPartOrExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyPartOrExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyPartOrExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyPartOrExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyPartOrExpressionContext keyPartOrExpression() throws RecognitionException {
		KeyPartOrExpressionContext _localctx = new KeyPartOrExpressionContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_keyPartOrExpression);
		int _la;
		try {
			setState(7145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,916,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7140);
				keyPart();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7141);
				exprWithParentheses();
				setState(7143);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
					{
					setState(7142);
					direction();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyListVariantsContext extends ParserRuleContext {
		public KeyListWithExpressionContext keyListWithExpression() {
			return getRuleContext(KeyListWithExpressionContext.class,0);
		}
		public KeyListContext keyList() {
			return getRuleContext(KeyListContext.class,0);
		}
		public KeyListVariantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyListVariants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterKeyListVariants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitKeyListVariants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitKeyListVariants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyListVariantsContext keyListVariants() throws RecognitionException {
		KeyListVariantsContext _localctx = new KeyListVariantsContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_keyListVariants);
		try {
			setState(7151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,917,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7147);
				if (!(serverVersion >= 80013)) throw new FailedPredicateException(this, "serverVersion >= 80013");
				setState(7148);
				keyListWithExpression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7149);
				if (!(serverVersion < 80013)) throw new FailedPredicateException(this, "serverVersion < 80013");
				setState(7150);
				keyList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public Token algorithm;
		public TerminalNode BTREE_SYMBOL() { return getToken(MySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7153);
			((IndexTypeContext)_localctx).algorithm = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==BTREE_SYMBOL || _la==HASH_SYMBOL || _la==RTREE_SYMBOL) ) {
				((IndexTypeContext)_localctx).algorithm = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public IndexTypeClauseContext indexTypeClause() {
			return getRuleContext(IndexTypeClauseContext.class,0);
		}
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_indexOption);
		try {
			setState(7157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,918,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7155);
				commonIndexOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7156);
				indexTypeClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonIndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public VisibilityContext visibility() {
			return getRuleContext(VisibilityContext.class,0);
		}
		public CommonIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonIndexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCommonIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCommonIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCommonIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonIndexOptionContext commonIndexOption() throws RecognitionException {
		CommonIndexOptionContext _localctx = new CommonIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_commonIndexOption);
		int _la;
		try {
			setState(7168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7159);
				match(KEY_BLOCK_SIZE_SYMBOL);
				setState(7161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7160);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7163);
				ulong_number();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7164);
				match(COMMENT_SYMBOL);
				setState(7165);
				textLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7166);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(7167);
				visibility();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VisibilityContext extends ParserRuleContext {
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_visibility; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterVisibility(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitVisibility(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitVisibility(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VisibilityContext visibility() throws RecognitionException {
		VisibilityContext _localctx = new VisibilityContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_visibility);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7170);
			_la = _input.LA(1);
			if ( !(_la==INVISIBLE_SYMBOL || _la==VISIBLE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeClauseContext extends ParserRuleContext {
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode USING_SYMBOL() { return getToken(MySQLParser.USING_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public IndexTypeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexTypeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexTypeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexTypeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexTypeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeClauseContext indexTypeClause() throws RecognitionException {
		IndexTypeClauseContext _localctx = new IndexTypeClauseContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_indexTypeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7172);
			_la = _input.LA(1);
			if ( !(_la==TYPE_SYMBOL || _la==USING_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7173);
			indexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FulltextIndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MySQLParser.PARSER_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FulltextIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltextIndexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFulltextIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFulltextIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFulltextIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FulltextIndexOptionContext fulltextIndexOption() throws RecognitionException {
		FulltextIndexOptionContext _localctx = new FulltextIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_fulltextIndexOption);
		try {
			setState(7179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,921,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7175);
				commonIndexOption();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7176);
				match(WITH_SYMBOL);
				setState(7177);
				match(PARSER_SYMBOL);
				setState(7178);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpatialIndexOptionContext extends ParserRuleContext {
		public CommonIndexOptionContext commonIndexOption() {
			return getRuleContext(CommonIndexOptionContext.class,0);
		}
		public SpatialIndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_spatialIndexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSpatialIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSpatialIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSpatialIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpatialIndexOptionContext spatialIndexOption() throws RecognitionException {
		SpatialIndexOptionContext _localctx = new SpatialIndexOptionContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_spatialIndexOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7181);
			commonIndexOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode EOF() { return getToken(MySQLParser.EOF, 0); }
		public DataTypeDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDataTypeDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDataTypeDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDataTypeDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeDefinitionContext dataTypeDefinition() throws RecognitionException {
		DataTypeDefinitionContext _localctx = new DataTypeDefinitionContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_dataTypeDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7183);
			dataType();
			setState(7184);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode INT_SYMBOL() { return getToken(MySQLParser.INT_SYMBOL, 0); }
		public TerminalNode TINYINT_SYMBOL() { return getToken(MySQLParser.TINYINT_SYMBOL, 0); }
		public TerminalNode SMALLINT_SYMBOL() { return getToken(MySQLParser.SMALLINT_SYMBOL, 0); }
		public TerminalNode MEDIUMINT_SYMBOL() { return getToken(MySQLParser.MEDIUMINT_SYMBOL, 0); }
		public TerminalNode BIGINT_SYMBOL() { return getToken(MySQLParser.BIGINT_SYMBOL, 0); }
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public FieldOptionsContext fieldOptions() {
			return getRuleContext(FieldOptionsContext.class,0);
		}
		public TerminalNode REAL_SYMBOL() { return getToken(MySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DOUBLE_SYMBOL() { return getToken(MySQLParser.DOUBLE_SYMBOL, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode PRECISION_SYMBOL() { return getToken(MySQLParser.PRECISION_SYMBOL, 0); }
		public TerminalNode FLOAT_SYMBOL() { return getToken(MySQLParser.FLOAT_SYMBOL, 0); }
		public TerminalNode DECIMAL_SYMBOL() { return getToken(MySQLParser.DECIMAL_SYMBOL, 0); }
		public TerminalNode NUMERIC_SYMBOL() { return getToken(MySQLParser.NUMERIC_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public FloatOptionsContext floatOptions() {
			return getRuleContext(FloatOptionsContext.class,0);
		}
		public TerminalNode BIT_SYMBOL() { return getToken(MySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return getRuleContext(CharsetWithOptBinaryContext.class,0);
		}
		public NcharContext nchar() {
			return getRuleContext(NcharContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode VARYING_SYMBOL() { return getToken(MySQLParser.VARYING_SYMBOL, 0); }
		public TerminalNode VARCHAR_SYMBOL() { return getToken(MySQLParser.VARCHAR_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode VARBINARY_SYMBOL() { return getToken(MySQLParser.VARBINARY_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return getRuleContext(TypeDatetimePrecisionContext.class,0);
		}
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode TINYBLOB_SYMBOL() { return getToken(MySQLParser.TINYBLOB_SYMBOL, 0); }
		public TerminalNode BLOB_SYMBOL() { return getToken(MySQLParser.BLOB_SYMBOL, 0); }
		public TerminalNode MEDIUMBLOB_SYMBOL() { return getToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0); }
		public TerminalNode LONGBLOB_SYMBOL() { return getToken(MySQLParser.LONGBLOB_SYMBOL, 0); }
		public TerminalNode LONG_SYMBOL() { return getToken(MySQLParser.LONG_SYMBOL, 0); }
		public TerminalNode TINYTEXT_SYMBOL() { return getToken(MySQLParser.TINYTEXT_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode MEDIUMTEXT_SYMBOL() { return getToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0); }
		public TerminalNode LONGTEXT_SYMBOL() { return getToken(MySQLParser.LONGTEXT_SYMBOL, 0); }
		public StringListContext stringList() {
			return getRuleContext(StringListContext.class,0);
		}
		public TerminalNode ENUM_SYMBOL() { return getToken(MySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode SET_SYMBOL() { return getToken(MySQLParser.SET_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_dataType);
		int _la;
		try {
			setState(7333);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,955,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7186);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BIGINT_SYMBOL || _la==INT_SYMBOL || _la==MEDIUMINT_SYMBOL || _la==SMALLINT_SYMBOL || _la==TINYINT_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7188);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,922,_ctx) ) {
				case 1:
					{
					setState(7187);
					fieldLength();
					}
					break;
				}
				setState(7191);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,923,_ctx) ) {
				case 1:
					{
					setState(7190);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7198);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case REAL_SYMBOL:
					{
					setState(7193);
					((DataTypeContext)_localctx).type = match(REAL_SYMBOL);
					}
					break;
				case DOUBLE_SYMBOL:
					{
					setState(7194);
					((DataTypeContext)_localctx).type = match(DOUBLE_SYMBOL);
					setState(7196);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
					case 1:
						{
						setState(7195);
						match(PRECISION_SYMBOL);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7201);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,926,_ctx) ) {
				case 1:
					{
					setState(7200);
					precision();
					}
					break;
				}
				setState(7204);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,927,_ctx) ) {
				case 1:
					{
					setState(7203);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7206);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL_SYMBOL || _la==FIXED_SYMBOL || _la==FLOAT_SYMBOL || _la==NUMERIC_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7208);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,928,_ctx) ) {
				case 1:
					{
					setState(7207);
					floatOptions();
					}
					break;
				}
				setState(7211);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,929,_ctx) ) {
				case 1:
					{
					setState(7210);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7213);
				((DataTypeContext)_localctx).type = match(BIT_SYMBOL);
				setState(7215);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,930,_ctx) ) {
				case 1:
					{
					setState(7214);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7217);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOOLEAN_SYMBOL || _la==BOOL_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7218);
				((DataTypeContext)_localctx).type = match(CHAR_SYMBOL);
				setState(7220);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,931,_ctx) ) {
				case 1:
					{
					setState(7219);
					fieldLength();
					}
					break;
				}
				setState(7223);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
				case 1:
					{
					setState(7222);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7225);
				nchar();
				setState(7227);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,933,_ctx) ) {
				case 1:
					{
					setState(7226);
					fieldLength();
					}
					break;
				}
				setState(7230);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,934,_ctx) ) {
				case 1:
					{
					setState(7229);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7232);
				((DataTypeContext)_localctx).type = match(BINARY_SYMBOL);
				setState(7234);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,935,_ctx) ) {
				case 1:
					{
					setState(7233);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7239);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR_SYMBOL:
					{
					setState(7236);
					((DataTypeContext)_localctx).type = match(CHAR_SYMBOL);
					setState(7237);
					match(VARYING_SYMBOL);
					}
					break;
				case VARCHAR_SYMBOL:
					{
					setState(7238);
					((DataTypeContext)_localctx).type = match(VARCHAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7241);
				fieldLength();
				setState(7243);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,937,_ctx) ) {
				case 1:
					{
					setState(7242);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
				case 1:
					{
					setState(7245);
					((DataTypeContext)_localctx).type = match(NATIONAL_SYMBOL);
					setState(7246);
					match(VARCHAR_SYMBOL);
					}
					break;
				case 2:
					{
					setState(7247);
					((DataTypeContext)_localctx).type = match(NVARCHAR_SYMBOL);
					}
					break;
				case 3:
					{
					setState(7248);
					((DataTypeContext)_localctx).type = match(NCHAR_SYMBOL);
					setState(7249);
					match(VARCHAR_SYMBOL);
					}
					break;
				case 4:
					{
					setState(7250);
					((DataTypeContext)_localctx).type = match(NATIONAL_SYMBOL);
					setState(7251);
					match(CHAR_SYMBOL);
					setState(7252);
					match(VARYING_SYMBOL);
					}
					break;
				case 5:
					{
					setState(7253);
					((DataTypeContext)_localctx).type = match(NCHAR_SYMBOL);
					setState(7254);
					match(VARYING_SYMBOL);
					}
					break;
				}
				setState(7257);
				fieldLength();
				setState(7259);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,939,_ctx) ) {
				case 1:
					{
					setState(7258);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7261);
				((DataTypeContext)_localctx).type = match(VARBINARY_SYMBOL);
				setState(7262);
				fieldLength();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7263);
				((DataTypeContext)_localctx).type = match(YEAR_SYMBOL);
				setState(7265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,940,_ctx) ) {
				case 1:
					{
					setState(7264);
					fieldLength();
					}
					break;
				}
				setState(7268);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
				case 1:
					{
					setState(7267);
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7270);
				((DataTypeContext)_localctx).type = match(DATE_SYMBOL);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7271);
				((DataTypeContext)_localctx).type = match(TIME_SYMBOL);
				setState(7273);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,942,_ctx) ) {
				case 1:
					{
					setState(7272);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7275);
				((DataTypeContext)_localctx).type = match(TIMESTAMP_SYMBOL);
				setState(7277);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
				case 1:
					{
					setState(7276);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7279);
				((DataTypeContext)_localctx).type = match(DATETIME_SYMBOL);
				setState(7281);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,944,_ctx) ) {
				case 1:
					{
					setState(7280);
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7283);
				((DataTypeContext)_localctx).type = match(TINYBLOB_SYMBOL);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7284);
				((DataTypeContext)_localctx).type = match(BLOB_SYMBOL);
				setState(7286);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,945,_ctx) ) {
				case 1:
					{
					setState(7285);
					fieldLength();
					}
					break;
				}
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7288);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LONGBLOB_SYMBOL || _la==MEDIUMBLOB_SYMBOL) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7289);
				((DataTypeContext)_localctx).type = match(LONG_SYMBOL);
				setState(7290);
				match(VARBINARY_SYMBOL);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7291);
				((DataTypeContext)_localctx).type = match(LONG_SYMBOL);
				setState(7295);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,946,_ctx) ) {
				case 1:
					{
					setState(7292);
					match(CHAR_SYMBOL);
					setState(7293);
					match(VARYING_SYMBOL);
					}
					break;
				case 2:
					{
					setState(7294);
					match(VARCHAR_SYMBOL);
					}
					break;
				}
				setState(7298);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,947,_ctx) ) {
				case 1:
					{
					setState(7297);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7300);
				((DataTypeContext)_localctx).type = match(TINYTEXT_SYMBOL);
				setState(7302);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,948,_ctx) ) {
				case 1:
					{
					setState(7301);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7304);
				((DataTypeContext)_localctx).type = match(TEXT_SYMBOL);
				setState(7306);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,949,_ctx) ) {
				case 1:
					{
					setState(7305);
					fieldLength();
					}
					break;
				}
				setState(7309);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,950,_ctx) ) {
				case 1:
					{
					setState(7308);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7311);
				((DataTypeContext)_localctx).type = match(MEDIUMTEXT_SYMBOL);
				setState(7313);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,951,_ctx) ) {
				case 1:
					{
					setState(7312);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7315);
				((DataTypeContext)_localctx).type = match(LONGTEXT_SYMBOL);
				setState(7317);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,952,_ctx) ) {
				case 1:
					{
					setState(7316);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(7319);
				((DataTypeContext)_localctx).type = match(ENUM_SYMBOL);
				setState(7320);
				stringList();
				setState(7322);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,953,_ctx) ) {
				case 1:
					{
					setState(7321);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(7324);
				((DataTypeContext)_localctx).type = match(SET_SYMBOL);
				setState(7325);
				stringList();
				setState(7327);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,954,_ctx) ) {
				case 1:
					{
					setState(7326);
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(7329);
				((DataTypeContext)_localctx).type = match(SERIAL_SYMBOL);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(7330);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(7331);
				((DataTypeContext)_localctx).type = match(JSON_SYMBOL);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(7332);
				((DataTypeContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==GEOMETRYCOLLECTION_SYMBOL || _la==GEOMETRY_SYMBOL || _la==LINESTRING_SYMBOL || ((((_la - 351)) & ~0x3f) == 0 && ((1L << (_la - 351)) & ((1L << (MULTILINESTRING_SYMBOL - 351)) | (1L << (MULTIPOINT_SYMBOL - 351)) | (1L << (MULTIPOLYGON_SYMBOL - 351)) | (1L << (POINT_SYMBOL - 351)) | (1L << (POLYGON_SYMBOL - 351)))) != 0)) ) {
					((DataTypeContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NcharContext extends ParserRuleContext {
		public Token type;
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode CHAR_SYMBOL() { return getToken(MySQLParser.CHAR_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public NcharContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nchar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNchar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNchar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNchar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NcharContext nchar() throws RecognitionException {
		NcharContext _localctx = new NcharContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_nchar);
		try {
			setState(7338);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NCHAR_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7335);
				((NcharContext)_localctx).type = match(NCHAR_SYMBOL);
				}
				break;
			case NATIONAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7336);
				((NcharContext)_localctx).type = match(NATIONAL_SYMBOL);
				setState(7337);
				match(CHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RealTypeContext extends ParserRuleContext {
		public Token type;
		public TerminalNode REAL_SYMBOL() { return getToken(MySQLParser.REAL_SYMBOL, 0); }
		public TerminalNode DOUBLE_SYMBOL() { return getToken(MySQLParser.DOUBLE_SYMBOL, 0); }
		public TerminalNode PRECISION_SYMBOL() { return getToken(MySQLParser.PRECISION_SYMBOL, 0); }
		public RealTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_realType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRealType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRealType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRealType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RealTypeContext realType() throws RecognitionException {
		RealTypeContext _localctx = new RealTypeContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_realType);
		try {
			setState(7345);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REAL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7340);
				((RealTypeContext)_localctx).type = match(REAL_SYMBOL);
				}
				break;
			case DOUBLE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7341);
				((RealTypeContext)_localctx).type = match(DOUBLE_SYMBOL);
				setState(7343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,957,_ctx) ) {
				case 1:
					{
					setState(7342);
					match(PRECISION_SYMBOL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldLengthContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldLengthContext fieldLength() throws RecognitionException {
		FieldLengthContext _localctx = new FieldLengthContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_fieldLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7347);
			match(OPEN_PAR_SYMBOL);
			setState(7350);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,959,_ctx) ) {
			case 1:
				{
				setState(7348);
				real_ulonglong_number();
				}
				break;
			case 2:
				{
				setState(7349);
				match(DECIMAL_NUMBER);
				}
				break;
			}
			setState(7352);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldOptionsContext extends ParserRuleContext {
		public List<TerminalNode> SIGNED_SYMBOL() { return getTokens(MySQLParser.SIGNED_SYMBOL); }
		public TerminalNode SIGNED_SYMBOL(int i) {
			return getToken(MySQLParser.SIGNED_SYMBOL, i);
		}
		public List<TerminalNode> UNSIGNED_SYMBOL() { return getTokens(MySQLParser.UNSIGNED_SYMBOL); }
		public TerminalNode UNSIGNED_SYMBOL(int i) {
			return getToken(MySQLParser.UNSIGNED_SYMBOL, i);
		}
		public List<TerminalNode> ZEROFILL_SYMBOL() { return getTokens(MySQLParser.ZEROFILL_SYMBOL); }
		public TerminalNode ZEROFILL_SYMBOL(int i) {
			return getToken(MySQLParser.ZEROFILL_SYMBOL, i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldOptionsContext fieldOptions() throws RecognitionException {
		FieldOptionsContext _localctx = new FieldOptionsContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_fieldOptions);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7355); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7354);
					_la = _input.LA(1);
					if ( !(_la==SIGNED_SYMBOL || _la==UNSIGNED_SYMBOL || _la==ZEROFILL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7357); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,960,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetWithOptBinaryContext extends ParserRuleContext {
		public AsciiContext ascii() {
			return getRuleContext(AsciiContext.class,0);
		}
		public UnicodeContext unicode() {
			return getRuleContext(UnicodeContext.class,0);
		}
		public TerminalNode BYTE_SYMBOL() { return getToken(MySQLParser.BYTE_SYMBOL, 0); }
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public CharsetWithOptBinaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetWithOptBinary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCharsetWithOptBinary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCharsetWithOptBinary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCharsetWithOptBinary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetWithOptBinaryContext charsetWithOptBinary() throws RecognitionException {
		CharsetWithOptBinaryContext _localctx = new CharsetWithOptBinaryContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_charsetWithOptBinary);
		try {
			setState(7373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,963,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7359);
				ascii();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7360);
				unicode();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7361);
				match(BYTE_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7362);
				charset();
				setState(7363);
				charsetName();
				setState(7365);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,961,_ctx) ) {
				case 1:
					{
					setState(7364);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7367);
				match(BINARY_SYMBOL);
				setState(7371);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,962,_ctx) ) {
				case 1:
					{
					setState(7368);
					charset();
					setState(7369);
					charsetName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsciiContext extends ParserRuleContext {
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public AsciiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ascii; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAscii(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAscii(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAscii(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsciiContext ascii() throws RecognitionException {
		AsciiContext _localctx = new AsciiContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_ascii);
		try {
			setState(7381);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASCII_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7375);
				match(ASCII_SYMBOL);
				setState(7377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,964,_ctx) ) {
				case 1:
					{
					setState(7376);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7379);
				match(BINARY_SYMBOL);
				setState(7380);
				match(ASCII_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnicodeContext extends ParserRuleContext {
		public TerminalNode UNICODE_SYMBOL() { return getToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public UnicodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUnicode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUnicode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUnicode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnicodeContext unicode() throws RecognitionException {
		UnicodeContext _localctx = new UnicodeContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_unicode);
		try {
			setState(7389);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNICODE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7383);
				match(UNICODE_SYMBOL);
				setState(7385);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
				case 1:
					{
					setState(7384);
					match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7387);
				match(BINARY_SYMBOL);
				setState(7388);
				match(UNICODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WsNumCodepointsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public WsNumCodepointsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wsNumCodepoints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWsNumCodepoints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWsNumCodepoints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWsNumCodepoints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WsNumCodepointsContext wsNumCodepoints() throws RecognitionException {
		WsNumCodepointsContext _localctx = new WsNumCodepointsContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_wsNumCodepoints);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7391);
			match(OPEN_PAR_SYMBOL);
			setState(7392);
			real_ulong_number();
			setState(7393);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeDatetimePrecisionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TypeDatetimePrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeDatetimePrecision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTypeDatetimePrecision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTypeDatetimePrecision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTypeDatetimePrecision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeDatetimePrecisionContext typeDatetimePrecision() throws RecognitionException {
		TypeDatetimePrecisionContext _localctx = new TypeDatetimePrecisionContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_typeDatetimePrecision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7395);
			match(OPEN_PAR_SYMBOL);
			setState(7396);
			match(INT_NUMBER);
			setState(7397);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_charsetName);
		try {
			setState(7403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,968,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7399);
				textOrIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7400);
				match(BINARY_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7401);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(7402);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode BINARY_SYMBOL() { return getToken(MySQLParser.BINARY_SYMBOL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_collationName);
		try {
			setState(7410);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,969,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7405);
				textOrIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7406);
				if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
				setState(7407);
				match(DEFAULT_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7408);
				if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
				setState(7409);
				match(BINARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableOptionsContext extends ParserRuleContext {
		public List<CreateTableOptionContext> createTableOption() {
			return getRuleContexts(CreateTableOptionContext.class);
		}
		public CreateTableOptionContext createTableOption(int i) {
			return getRuleContext(CreateTableOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateTableOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateTableOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateTableOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateTableOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableOptionsContext createTableOptions() throws RecognitionException {
		CreateTableOptionsContext _localctx = new CreateTableOptionsContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_createTableOptions);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7412);
			createTableOption();
			setState(7419);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,971,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7414);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,970,_ctx) ) {
					case 1:
						{
						setState(7413);
						match(COMMA_SYMBOL);
						}
						break;
					}
					setState(7416);
					createTableOption();
					}
					} 
				}
				setState(7421);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,971,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableOptionsSpaceSeparatedContext extends ParserRuleContext {
		public List<CreateTableOptionContext> createTableOption() {
			return getRuleContexts(CreateTableOptionContext.class);
		}
		public CreateTableOptionContext createTableOption(int i) {
			return getRuleContext(CreateTableOptionContext.class,i);
		}
		public CreateTableOptionsSpaceSeparatedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOptionsSpaceSeparated; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateTableOptionsSpaceSeparated(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateTableOptionsSpaceSeparated(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateTableOptionsSpaceSeparated(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated() throws RecognitionException {
		CreateTableOptionsSpaceSeparatedContext _localctx = new CreateTableOptionsSpaceSeparatedContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_createTableOptionsSpaceSeparated);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7423); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7422);
					createTableOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7425); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,972,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableOptionContext extends ParserRuleContext {
		public Token option;
		public Token format;
		public Token method;
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode SECONDARY_ENGINE_SYMBOL() { return getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public EqualContext equal() {
			return getRuleContext(EqualContext.class,0);
		}
		public Ulonglong_numberContext ulonglong_number() {
			return getRuleContext(Ulonglong_numberContext.class,0);
		}
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TernaryOptionContext ternaryOption() {
			return getRuleContext(TernaryOptionContext.class,0);
		}
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TableRefListContext tableRefList() {
			return getRuleContext(TableRefListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode UNION_SYMBOL() { return getToken(MySQLParser.UNION_SYMBOL, 0); }
		public DefaultCharsetContext defaultCharset() {
			return getRuleContext(DefaultCharsetContext.class,0);
		}
		public DefaultCollationContext defaultCollation() {
			return getRuleContext(DefaultCollationContext.class,0);
		}
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public CreateTableOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateTableOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateTableOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateTableOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableOptionContext createTableOption() throws RecognitionException {
		CreateTableOptionContext _localctx = new CreateTableOptionContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_createTableOption);
		int _la;
		try {
			setState(7556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,997,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7427);
				((CreateTableOptionContext)_localctx).option = match(ENGINE_SYMBOL);
				setState(7429);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
				case 1:
					{
					setState(7428);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7431);
				engineRef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7432);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(7433);
				((CreateTableOptionContext)_localctx).option = match(SECONDARY_ENGINE_SYMBOL);
				setState(7435);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,974,_ctx) ) {
				case 1:
					{
					setState(7434);
					equal();
					}
					break;
				}
				setState(7439);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,975,_ctx) ) {
				case 1:
					{
					setState(7437);
					match(NULL_SYMBOL);
					}
					break;
				case 2:
					{
					setState(7438);
					textOrIdentifier();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7441);
				((CreateTableOptionContext)_localctx).option = match(MAX_ROWS_SYMBOL);
				setState(7443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7442);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7445);
				ulonglong_number();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7446);
				((CreateTableOptionContext)_localctx).option = match(MIN_ROWS_SYMBOL);
				setState(7448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7447);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7450);
				ulonglong_number();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7451);
				((CreateTableOptionContext)_localctx).option = match(AVG_ROW_LENGTH_SYMBOL);
				setState(7453);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7452);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7455);
				ulong_number();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7456);
				((CreateTableOptionContext)_localctx).option = match(PASSWORD_SYMBOL);
				setState(7458);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,979,_ctx) ) {
				case 1:
					{
					setState(7457);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7460);
				textStringLiteral();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7461);
				((CreateTableOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(7463);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,980,_ctx) ) {
				case 1:
					{
					setState(7462);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7465);
				textStringLiteral();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7466);
				if (!(serverVersion >= 50708)) throw new FailedPredicateException(this, "serverVersion >= 50708");
				setState(7467);
				((CreateTableOptionContext)_localctx).option = match(COMPRESSION_SYMBOL);
				setState(7469);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,981,_ctx) ) {
				case 1:
					{
					setState(7468);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7471);
				textString();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7472);
				if (!(serverVersion >= 50711)) throw new FailedPredicateException(this, "serverVersion >= 50711");
				setState(7473);
				((CreateTableOptionContext)_localctx).option = match(ENCRYPTION_SYMBOL);
				setState(7475);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,982,_ctx) ) {
				case 1:
					{
					setState(7474);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7477);
				textString();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7478);
				((CreateTableOptionContext)_localctx).option = match(AUTO_INCREMENT_SYMBOL);
				setState(7480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7479);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7482);
				ulonglong_number();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7483);
				((CreateTableOptionContext)_localctx).option = match(PACK_KEYS_SYMBOL);
				setState(7485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7484);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7487);
				ternaryOption();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7488);
				((CreateTableOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 544)) & ~0x3f) == 0 && ((1L << (_la - 544)) & ((1L << (STATS_AUTO_RECALC_SYMBOL - 544)) | (1L << (STATS_PERSISTENT_SYMBOL - 544)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 544)))) != 0)) ) {
					((CreateTableOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7489);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7492);
				ternaryOption();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7493);
				((CreateTableOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM_SYMBOL || _la==TABLE_CHECKSUM_SYMBOL) ) {
					((CreateTableOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7495);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7494);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7497);
				ulong_number();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7498);
				((CreateTableOptionContext)_localctx).option = match(DELAY_KEY_WRITE_SYMBOL);
				setState(7500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7499);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7502);
				ulong_number();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7503);
				((CreateTableOptionContext)_localctx).option = match(ROW_FORMAT_SYMBOL);
				setState(7505);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7504);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7507);
				((CreateTableOptionContext)_localctx).format = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (COMPACT_SYMBOL - 78)) | (1L << (COMPRESSED_SYMBOL - 78)) | (1L << (DEFAULT_SYMBOL - 78)))) != 0) || _la==DYNAMIC_SYMBOL || _la==FIXED_SYMBOL || _la==REDUNDANT_SYMBOL) ) {
					((CreateTableOptionContext)_localctx).format = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7508);
				((CreateTableOptionContext)_localctx).option = match(UNION_SYMBOL);
				setState(7510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7509);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7512);
				match(OPEN_PAR_SYMBOL);
				setState(7513);
				tableRefList();
				setState(7514);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7516);
				defaultCharset();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7517);
				defaultCollation();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7518);
				((CreateTableOptionContext)_localctx).option = match(INSERT_METHOD_SYMBOL);
				setState(7520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7519);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7522);
				((CreateTableOptionContext)_localctx).method = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NO_SYMBOL) ) {
					((CreateTableOptionContext)_localctx).method = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7523);
				((CreateTableOptionContext)_localctx).option = match(DATA_SYMBOL);
				setState(7524);
				match(DIRECTORY_SYMBOL);
				setState(7526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,991,_ctx) ) {
				case 1:
					{
					setState(7525);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7528);
				textString();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7529);
				((CreateTableOptionContext)_localctx).option = match(INDEX_SYMBOL);
				setState(7530);
				match(DIRECTORY_SYMBOL);
				setState(7532);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,992,_ctx) ) {
				case 1:
					{
					setState(7531);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7534);
				textString();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7535);
				((CreateTableOptionContext)_localctx).option = match(TABLESPACE_SYMBOL);
				setState(7541);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,994,_ctx) ) {
				case 1:
					{
					setState(7536);
					if (!(serverVersion >= 50707)) throw new FailedPredicateException(this, "serverVersion >= 50707");
					setState(7538);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,993,_ctx) ) {
					case 1:
						{
						setState(7537);
						match(EQUAL_OPERATOR);
						}
						break;
					}
					}
					break;
				case 2:
					{
					}
					break;
				}
				setState(7543);
				identifier();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7544);
				((CreateTableOptionContext)_localctx).option = match(STORAGE_SYMBOL);
				setState(7545);
				_la = _input.LA(1);
				if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7546);
				((CreateTableOptionContext)_localctx).option = match(CONNECTION_SYMBOL);
				setState(7548);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,995,_ctx) ) {
				case 1:
					{
					setState(7547);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7550);
				textString();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7551);
				((CreateTableOptionContext)_localctx).option = match(KEY_BLOCK_SIZE_SYMBOL);
				setState(7553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7552);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7555);
				ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TernaryOptionContext extends ParserRuleContext {
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TernaryOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ternaryOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTernaryOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTernaryOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTernaryOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TernaryOptionContext ternaryOption() throws RecognitionException {
		TernaryOptionContext _localctx = new TernaryOptionContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_ternaryOption);
		try {
			setState(7560);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7558);
				ulong_number();
				}
				break;
			case DEFAULT_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7559);
				match(DEFAULT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultCollationContext extends ParserRuleContext {
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDefaultCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDefaultCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDefaultCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultCollationContext defaultCollation() throws RecognitionException {
		DefaultCollationContext _localctx = new DefaultCollationContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_defaultCollation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(7562);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(7565);
			match(COLLATE_SYMBOL);
			setState(7567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1000,_ctx) ) {
			case 1:
				{
				setState(7566);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(7569);
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultEncryptionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultEncryptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultEncryption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDefaultEncryption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDefaultEncryption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDefaultEncryption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultEncryptionContext defaultEncryption() throws RecognitionException {
		DefaultEncryptionContext _localctx = new DefaultEncryptionContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_defaultEncryption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(7571);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(7574);
			match(ENCRYPTION_SYMBOL);
			setState(7576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1002,_ctx) ) {
			case 1:
				{
				setState(7575);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(7578);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultCharsetContext extends ParserRuleContext {
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public DefaultCharsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultCharset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDefaultCharset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDefaultCharset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDefaultCharset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultCharsetContext defaultCharset() throws RecognitionException {
		DefaultCharsetContext _localctx = new DefaultCharsetContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_defaultCharset);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				setState(7580);
				match(DEFAULT_SYMBOL);
				}
			}

			setState(7583);
			charset();
			setState(7585);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1004,_ctx) ) {
			case 1:
				{
				setState(7584);
				match(EQUAL_OPERATOR);
				}
				break;
			}
			setState(7587);
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public PartitionTypeDefContext partitionTypeDef() {
			return getRuleContext(PartitionTypeDefContext.class,0);
		}
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public SubPartitionsContext subPartitions() {
			return getRuleContext(SubPartitionsContext.class,0);
		}
		public PartitionDefinitionsContext partitionDefinitions() {
			return getRuleContext(PartitionDefinitionsContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7589);
			match(PARTITION_SYMBOL);
			setState(7590);
			match(BY_SYMBOL);
			setState(7591);
			partitionTypeDef();
			setState(7594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1005,_ctx) ) {
			case 1:
				{
				setState(7592);
				match(PARTITIONS_SYMBOL);
				setState(7593);
				real_ulong_number();
				}
				break;
			}
			setState(7597);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1006,_ctx) ) {
			case 1:
				{
				setState(7596);
				subPartitions();
				}
				break;
			}
			setState(7600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
			case 1:
				{
				setState(7599);
				partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionTypeDefContext extends ParserRuleContext {
		public PartitionTypeDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionTypeDef; }
	 
		public PartitionTypeDefContext() { }
		public void copyFrom(PartitionTypeDefContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PartitionDefRangeListContext extends PartitionTypeDefContext {
		public TerminalNode RANGE_SYMBOL() { return getToken(MySQLParser.RANGE_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public PartitionDefRangeListContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionDefRangeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionDefRangeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionDefRangeList(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionDefKeyContext extends PartitionTypeDefContext {
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode LINEAR_SYMBOL() { return getToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return getRuleContext(PartitionKeyAlgorithmContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public PartitionDefKeyContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionDefKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionDefKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionDefKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PartitionDefHashContext extends PartitionTypeDefContext {
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode LINEAR_SYMBOL() { return getToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public PartitionDefHashContext(PartitionTypeDefContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionDefHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionDefHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionDefHash(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionTypeDefContext partitionTypeDef() throws RecognitionException {
		PartitionTypeDefContext _localctx = new PartitionTypeDefContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_partitionTypeDef);
		int _la;
		try {
			setState(7635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1014,_ctx) ) {
			case 1:
				_localctx = new PartitionDefKeyContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(7603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					setState(7602);
					match(LINEAR_SYMBOL);
					}
				}

				setState(7605);
				match(KEY_SYMBOL);
				setState(7607);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1009,_ctx) ) {
				case 1:
					{
					setState(7606);
					partitionKeyAlgorithm();
					}
					break;
				}
				setState(7609);
				match(OPEN_PAR_SYMBOL);
				setState(7611);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1010,_ctx) ) {
				case 1:
					{
					setState(7610);
					identifierList();
					}
					break;
				}
				setState(7613);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				_localctx = new PartitionDefHashContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(7615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					setState(7614);
					match(LINEAR_SYMBOL);
					}
				}

				setState(7617);
				match(HASH_SYMBOL);
				setState(7618);
				match(OPEN_PAR_SYMBOL);
				setState(7619);
				bitExpr(0);
				setState(7620);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				_localctx = new PartitionDefRangeListContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(7622);
				_la = _input.LA(1);
				if ( !(_la==LIST_SYMBOL || _la==RANGE_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7633);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(7623);
					match(OPEN_PAR_SYMBOL);
					setState(7624);
					bitExpr(0);
					setState(7625);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				case COLUMNS_SYMBOL:
					{
					setState(7627);
					match(COLUMNS_SYMBOL);
					setState(7628);
					match(OPEN_PAR_SYMBOL);
					setState(7630);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1012,_ctx) ) {
					case 1:
						{
						setState(7629);
						identifierList();
						}
						break;
					}
					setState(7632);
					match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubPartitionsContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public TerminalNode KEY_SYMBOL() { return getToken(MySQLParser.KEY_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public TerminalNode LINEAR_SYMBOL() { return getToken(MySQLParser.LINEAR_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return getRuleContext(PartitionKeyAlgorithmContext.class,0);
		}
		public SubPartitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subPartitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSubPartitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSubPartitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSubPartitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubPartitionsContext subPartitions() throws RecognitionException {
		SubPartitionsContext _localctx = new SubPartitionsContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_subPartitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7637);
			match(SUBPARTITION_SYMBOL);
			setState(7638);
			match(BY_SYMBOL);
			setState(7640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINEAR_SYMBOL) {
				{
				setState(7639);
				match(LINEAR_SYMBOL);
				}
			}

			setState(7652);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HASH_SYMBOL:
				{
				setState(7642);
				match(HASH_SYMBOL);
				setState(7643);
				match(OPEN_PAR_SYMBOL);
				setState(7644);
				bitExpr(0);
				setState(7645);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
				{
				setState(7647);
				match(KEY_SYMBOL);
				setState(7649);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1016,_ctx) ) {
				case 1:
					{
					setState(7648);
					partitionKeyAlgorithm();
					}
					break;
				}
				setState(7651);
				identifierListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7656);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1018,_ctx) ) {
			case 1:
				{
				setState(7654);
				match(SUBPARTITIONS_SYMBOL);
				setState(7655);
				real_ulong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionKeyAlgorithmContext extends ParserRuleContext {
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public PartitionKeyAlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionKeyAlgorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionKeyAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionKeyAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionKeyAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionKeyAlgorithmContext partitionKeyAlgorithm() throws RecognitionException {
		PartitionKeyAlgorithmContext _localctx = new PartitionKeyAlgorithmContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_partitionKeyAlgorithm);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7658);
			if (!(serverVersion >= 50700)) throw new FailedPredicateException(this, "serverVersion >= 50700");
			setState(7659);
			match(ALGORITHM_SYMBOL);
			setState(7660);
			match(EQUAL_OPERATOR);
			setState(7661);
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionsContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<PartitionDefinitionContext> partitionDefinition() {
			return getRuleContexts(PartitionDefinitionContext.class);
		}
		public PartitionDefinitionContext partitionDefinition(int i) {
			return getRuleContext(PartitionDefinitionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionsContext partitionDefinitions() throws RecognitionException {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_partitionDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7663);
			match(OPEN_PAR_SYMBOL);
			setState(7664);
			partitionDefinition();
			setState(7669);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7665);
				match(COMMA_SYMBOL);
				setState(7666);
				partitionDefinition();
				}
				}
				setState(7671);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7672);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode VALUES_SYMBOL() { return getToken(MySQLParser.VALUES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public PartitionValuesInContext partitionValuesIn() {
			return getRuleContext(PartitionValuesInContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<SubpartitionDefinitionContext> subpartitionDefinition() {
			return getRuleContexts(SubpartitionDefinitionContext.class);
		}
		public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return getRuleContext(SubpartitionDefinitionContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionValueItemListParenContext partitionValueItemListParen() {
			return getRuleContext(PartitionValueItemListParenContext.class,0);
		}
		public TerminalNode MAXVALUE_SYMBOL() { return getToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionDefinitionContext partitionDefinition() throws RecognitionException {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_partitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7674);
			match(PARTITION_SYMBOL);
			setState(7675);
			identifier();
			setState(7686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1021,_ctx) ) {
			case 1:
				{
				setState(7676);
				match(VALUES_SYMBOL);
				setState(7677);
				match(LESS_SYMBOL);
				setState(7678);
				match(THAN_SYMBOL);
				setState(7681);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					setState(7679);
					partitionValueItemListParen();
					}
					break;
				case MAXVALUE_SYMBOL:
					{
					setState(7680);
					match(MAXVALUE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(7683);
				match(VALUES_SYMBOL);
				setState(7684);
				match(IN_SYMBOL);
				setState(7685);
				partitionValuesIn();
				}
				break;
			}
			setState(7691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || _la==INDEX_SYMBOL || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAX_ROWS_SYMBOL - 323)) | (1L << (MIN_ROWS_SYMBOL - 323)) | (1L << (NODEGROUP_SYMBOL - 323)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL) {
				{
				{
				setState(7688);
				partitionOption();
				}
				}
				setState(7693);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				setState(7694);
				match(OPEN_PAR_SYMBOL);
				setState(7695);
				subpartitionDefinition();
				setState(7700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(7696);
					match(COMMA_SYMBOL);
					setState(7697);
					subpartitionDefinition();
					}
					}
					setState(7702);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7703);
				match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValuesInContext extends ParserRuleContext {
		public List<PartitionValueItemListParenContext> partitionValueItemListParen() {
			return getRuleContexts(PartitionValueItemListParenContext.class);
		}
		public PartitionValueItemListParenContext partitionValueItemListParen(int i) {
			return getRuleContext(PartitionValueItemListParenContext.class,i);
		}
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValuesInContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValuesIn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionValuesIn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionValuesIn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionValuesIn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionValuesInContext partitionValuesIn() throws RecognitionException {
		PartitionValuesInContext _localctx = new PartitionValuesInContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_partitionValuesIn);
		int _la;
		try {
			setState(7719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1026,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7707);
				partitionValueItemListParen();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7708);
				match(OPEN_PAR_SYMBOL);
				setState(7709);
				partitionValueItemListParen();
				setState(7714);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					setState(7710);
					match(COMMA_SYMBOL);
					setState(7711);
					partitionValueItemListParen();
					}
					}
					setState(7716);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7717);
				match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionOptionContext extends ParserRuleContext {
		public Token option;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public EngineRefContext engineRef() {
			return getRuleContext(EngineRefContext.class,0);
		}
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public Real_ulong_numberContext real_ulong_number() {
			return getRuleContext(Real_ulong_numberContext.class,0);
		}
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode INDEX_SYMBOL() { return getToken(MySQLParser.INDEX_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public PartitionOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionOptionContext partitionOption() throws RecognitionException {
		PartitionOptionContext _localctx = new PartitionOptionContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_partitionOption);
		int _la;
		try {
			setState(7755);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLESPACE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7721);
				((PartitionOptionContext)_localctx).option = match(TABLESPACE_SYMBOL);
				setState(7723);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1027,_ctx) ) {
				case 1:
					{
					setState(7722);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7725);
				identifier();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7727);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					setState(7726);
					match(STORAGE_SYMBOL);
					}
				}

				setState(7729);
				((PartitionOptionContext)_localctx).option = match(ENGINE_SYMBOL);
				setState(7731);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1029,_ctx) ) {
				case 1:
					{
					setState(7730);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7733);
				engineRef();
				}
				break;
			case NODEGROUP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7734);
				((PartitionOptionContext)_localctx).option = match(NODEGROUP_SYMBOL);
				setState(7736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7735);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7738);
				real_ulong_number();
				}
				break;
			case MAX_ROWS_SYMBOL:
			case MIN_ROWS_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(7739);
				((PartitionOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MAX_ROWS_SYMBOL || _la==MIN_ROWS_SYMBOL) ) {
					((PartitionOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					setState(7740);
					match(EQUAL_OPERATOR);
					}
				}

				setState(7743);
				real_ulong_number();
				}
				break;
			case DATA_SYMBOL:
			case INDEX_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(7744);
				((PartitionOptionContext)_localctx).option = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATA_SYMBOL || _la==INDEX_SYMBOL) ) {
					((PartitionOptionContext)_localctx).option = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7745);
				match(DIRECTORY_SYMBOL);
				setState(7747);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1032,_ctx) ) {
				case 1:
					{
					setState(7746);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7749);
				textLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				enterOuterAlt(_localctx, 6);
				{
				setState(7750);
				((PartitionOptionContext)_localctx).option = match(COMMENT_SYMBOL);
				setState(7752);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1033,_ctx) ) {
				case 1:
					{
					setState(7751);
					match(EQUAL_OPERATOR);
					}
					break;
				}
				setState(7754);
				textLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubpartitionDefinitionContext extends ParserRuleContext {
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public List<PartitionOptionContext> partitionOption() {
			return getRuleContexts(PartitionOptionContext.class);
		}
		public PartitionOptionContext partitionOption(int i) {
			return getRuleContext(PartitionOptionContext.class,i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpartitionDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSubpartitionDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSubpartitionDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSubpartitionDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubpartitionDefinitionContext subpartitionDefinition() throws RecognitionException {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_subpartitionDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7757);
			match(SUBPARTITION_SYMBOL);
			setState(7758);
			textOrIdentifier();
			setState(7762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || _la==INDEX_SYMBOL || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (MAX_ROWS_SYMBOL - 323)) | (1L << (MIN_ROWS_SYMBOL - 323)) | (1L << (NODEGROUP_SYMBOL - 323)))) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL) {
				{
				{
				setState(7759);
				partitionOption();
				}
				}
				setState(7764);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValueItemListParenContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<PartitionValueItemContext> partitionValueItem() {
			return getRuleContexts(PartitionValueItemContext.class);
		}
		public PartitionValueItemContext partitionValueItem(int i) {
			return getRuleContext(PartitionValueItemContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public PartitionValueItemListParenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValueItemListParen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionValueItemListParen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionValueItemListParen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionValueItemListParen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionValueItemListParenContext partitionValueItemListParen() throws RecognitionException {
		PartitionValueItemListParenContext _localctx = new PartitionValueItemListParenContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_partitionValueItemListParen);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7765);
			match(OPEN_PAR_SYMBOL);
			setState(7766);
			partitionValueItem();
			setState(7771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7767);
				match(COMMA_SYMBOL);
				setState(7768);
				partitionValueItem();
				}
				}
				setState(7773);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7774);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionValueItemContext extends ParserRuleContext {
		public BitExprContext bitExpr() {
			return getRuleContext(BitExprContext.class,0);
		}
		public TerminalNode MAXVALUE_SYMBOL() { return getToken(MySQLParser.MAXVALUE_SYMBOL, 0); }
		public PartitionValueItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionValueItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPartitionValueItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPartitionValueItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPartitionValueItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionValueItemContext partitionValueItem() throws RecognitionException {
		PartitionValueItemContext _localctx = new PartitionValueItemContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_partitionValueItem);
		try {
			setState(7778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1037,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7776);
				bitExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7777);
				match(MAXVALUE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinerClauseContext extends ParserRuleContext {
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public DefinerClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definerClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDefinerClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDefinerClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDefinerClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinerClauseContext definerClause() throws RecognitionException {
		DefinerClauseContext _localctx = new DefinerClauseContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_definerClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7780);
			match(DEFINER_SYMBOL);
			setState(7781);
			match(EQUAL_OPERATOR);
			setState(7782);
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF_SYMBOL() { return getToken(MySQLParser.IF_SYMBOL, 0); }
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7784);
			match(IF_SYMBOL);
			setState(7785);
			match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF_SYMBOL() { return getToken(MySQLParser.IF_SYMBOL, 0); }
		public NotRuleContext notRule() {
			return getRuleContext(NotRuleContext.class,0);
		}
		public TerminalNode EXISTS_SYMBOL() { return getToken(MySQLParser.EXISTS_SYMBOL, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7787);
			match(IF_SYMBOL);
			setState(7788);
			notRule();
			setState(7789);
			match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token type;
		public FunctionParameterContext functionParameter() {
			return getRuleContext(FunctionParameterContext.class,0);
		}
		public TerminalNode IN_SYMBOL() { return getToken(MySQLParser.IN_SYMBOL, 0); }
		public TerminalNode OUT_SYMBOL() { return getToken(MySQLParser.OUT_SYMBOL, 0); }
		public TerminalNode INOUT_SYMBOL() { return getToken(MySQLParser.INOUT_SYMBOL, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterProcedureParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitProcedureParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitProcedureParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1038,_ctx) ) {
			case 1:
				{
				setState(7791);
				((ProcedureParameterContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INOUT_SYMBOL || _la==IN_SYMBOL || _la==OUT_SYMBOL) ) {
					((ProcedureParameterContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(7794);
			functionParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public TypeWithOptCollateContext typeWithOptCollate() {
			return getRuleContext(TypeWithOptCollateContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFunctionParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFunctionParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7796);
			parameterName();
			setState(7797);
			typeWithOptCollate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateContext extends ParserRuleContext {
		public TerminalNode COLLATE_SYMBOL() { return getToken(MySQLParser.COLLATE_SYMBOL, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCollate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateContext collate() throws RecognitionException {
		CollateContext _localctx = new CollateContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7799);
			match(COLLATE_SYMBOL);
			setState(7800);
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeWithOptCollateContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public TypeWithOptCollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeWithOptCollate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTypeWithOptCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTypeWithOptCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTypeWithOptCollate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeWithOptCollateContext typeWithOptCollate() throws RecognitionException {
		TypeWithOptCollateContext _localctx = new TypeWithOptCollateContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_typeWithOptCollate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7802);
			dataType();
			setState(7804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1039,_ctx) ) {
			case 1:
				{
				setState(7803);
				collate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaIdentifierPairContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<SchemaRefContext> schemaRef() {
			return getRuleContexts(SchemaRefContext.class);
		}
		public SchemaRefContext schemaRef(int i) {
			return getRuleContext(SchemaRefContext.class,i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public SchemaIdentifierPairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaIdentifierPair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSchemaIdentifierPair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSchemaIdentifierPair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSchemaIdentifierPair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaIdentifierPairContext schemaIdentifierPair() throws RecognitionException {
		SchemaIdentifierPairContext _localctx = new SchemaIdentifierPairContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_schemaIdentifierPair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7806);
			match(OPEN_PAR_SYMBOL);
			setState(7807);
			schemaRef();
			setState(7808);
			match(COMMA_SYMBOL);
			setState(7809);
			schemaRef();
			setState(7810);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewRefListContext extends ParserRuleContext {
		public List<ViewRefContext> viewRef() {
			return getRuleContexts(ViewRefContext.class);
		}
		public ViewRefContext viewRef(int i) {
			return getRuleContext(ViewRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ViewRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewRefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewRefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewRefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewRefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewRefListContext viewRefList() throws RecognitionException {
		ViewRefListContext _localctx = new ViewRefListContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_viewRefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7812);
			viewRef();
			setState(7817);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(7813);
				match(COMMA_SYMBOL);
				setState(7814);
				viewRef();
				}
				}
				setState(7819);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateListContext extends ParserRuleContext {
		public List<UpdateElementContext> updateElement() {
			return getRuleContexts(UpdateElementContext.class);
		}
		public UpdateElementContext updateElement(int i) {
			return getRuleContext(UpdateElementContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UpdateListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUpdateList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUpdateList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUpdateList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateListContext updateList() throws RecognitionException {
		UpdateListContext _localctx = new UpdateListContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_updateList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7820);
			updateElement();
			setState(7825);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1041,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7821);
					match(COMMA_SYMBOL);
					setState(7822);
					updateElement();
					}
					} 
				}
				setState(7827);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1041,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateElementContext extends ParserRuleContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT_SYMBOL() { return getToken(MySQLParser.DEFAULT_SYMBOL, 0); }
		public UpdateElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUpdateElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUpdateElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUpdateElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateElementContext updateElement() throws RecognitionException {
		UpdateElementContext _localctx = new UpdateElementContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_updateElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7828);
			columnRef();
			setState(7829);
			match(EQUAL_OPERATOR);
			setState(7832);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1042,_ctx) ) {
			case 1:
				{
				setState(7830);
				expr(0);
				}
				break;
			case 2:
				{
				setState(7831);
				match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetClauseContext extends ParserRuleContext {
		public CharsetContext charset() {
			return getRuleContext(CharsetContext.class,0);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCharsetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCharsetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCharsetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetClauseContext charsetClause() throws RecognitionException {
		CharsetClauseContext _localctx = new CharsetClauseContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_charsetClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7834);
			charset();
			setState(7835);
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldsClauseContext extends ParserRuleContext {
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public List<FieldTermContext> fieldTerm() {
			return getRuleContexts(FieldTermContext.class);
		}
		public FieldTermContext fieldTerm(int i) {
			return getRuleContext(FieldTermContext.class,i);
		}
		public FieldsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldsClauseContext fieldsClause() throws RecognitionException {
		FieldsClauseContext _localctx = new FieldsClauseContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_fieldsClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7837);
			match(COLUMNS_SYMBOL);
			setState(7839); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7838);
					fieldTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7841); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1043,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldTermContext extends ParserRuleContext {
		public TerminalNode TERMINATED_SYMBOL() { return getToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode ENCLOSED_SYMBOL() { return getToken(MySQLParser.ENCLOSED_SYMBOL, 0); }
		public TerminalNode OPTIONALLY_SYMBOL() { return getToken(MySQLParser.OPTIONALLY_SYMBOL, 0); }
		public TerminalNode ESCAPED_SYMBOL() { return getToken(MySQLParser.ESCAPED_SYMBOL, 0); }
		public FieldTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldTerm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldTermContext fieldTerm() throws RecognitionException {
		FieldTermContext _localctx = new FieldTermContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_fieldTerm);
		int _la;
		try {
			setState(7855);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7843);
				match(TERMINATED_SYMBOL);
				setState(7844);
				match(BY_SYMBOL);
				setState(7845);
				textString();
				}
				break;
			case ENCLOSED_SYMBOL:
			case OPTIONALLY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7847);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY_SYMBOL) {
					{
					setState(7846);
					match(OPTIONALLY_SYMBOL);
					}
				}

				setState(7849);
				match(ENCLOSED_SYMBOL);
				setState(7850);
				match(BY_SYMBOL);
				setState(7851);
				textString();
				}
				break;
			case ESCAPED_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(7852);
				match(ESCAPED_SYMBOL);
				setState(7853);
				match(BY_SYMBOL);
				setState(7854);
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LinesClauseContext extends ParserRuleContext {
		public TerminalNode LINES_SYMBOL() { return getToken(MySQLParser.LINES_SYMBOL, 0); }
		public List<LineTermContext> lineTerm() {
			return getRuleContexts(LineTermContext.class);
		}
		public LineTermContext lineTerm(int i) {
			return getRuleContext(LineTermContext.class,i);
		}
		public LinesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLinesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLinesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLinesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LinesClauseContext linesClause() throws RecognitionException {
		LinesClauseContext _localctx = new LinesClauseContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_linesClause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7857);
			match(LINES_SYMBOL);
			setState(7859); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(7858);
					lineTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7861); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1046,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LineTermContext extends ParserRuleContext {
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode TERMINATED_SYMBOL() { return getToken(MySQLParser.TERMINATED_SYMBOL, 0); }
		public TerminalNode STARTING_SYMBOL() { return getToken(MySQLParser.STARTING_SYMBOL, 0); }
		public LineTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lineTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLineTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLineTerm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLineTerm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LineTermContext lineTerm() throws RecognitionException {
		LineTermContext _localctx = new LineTermContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_lineTerm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7863);
			_la = _input.LA(1);
			if ( !(_la==STARTING_SYMBOL || _la==TERMINATED_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7864);
			match(BY_SYMBOL);
			setState(7865);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserListContext extends ParserRuleContext {
		public List<UserContext> user() {
			return getRuleContexts(UserContext.class);
		}
		public UserContext user(int i) {
			return getRuleContext(UserContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public UserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUserList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUserList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUserList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserListContext userList() throws RecognitionException {
		UserListContext _localctx = new UserListContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_userList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7867);
			user();
			setState(7872);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1047,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7868);
					match(COMMA_SYMBOL);
					setState(7869);
					user();
					}
					} 
				}
				setState(7874);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1047,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserListContext extends ParserRuleContext {
		public List<CreateUserEntryContext> createUserEntry() {
			return getRuleContexts(CreateUserEntryContext.class);
		}
		public CreateUserEntryContext createUserEntry(int i) {
			return getRuleContext(CreateUserEntryContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public CreateUserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateUserList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateUserList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateUserList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserListContext createUserList() throws RecognitionException {
		CreateUserListContext _localctx = new CreateUserListContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_createUserList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7875);
			createUserEntry();
			setState(7880);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1048,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7876);
					match(COMMA_SYMBOL);
					setState(7877);
					createUserEntry();
					}
					} 
				}
				setState(7882);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1048,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserListContext extends ParserRuleContext {
		public List<AlterUserEntryContext> alterUserEntry() {
			return getRuleContexts(AlterUserEntryContext.class);
		}
		public AlterUserEntryContext alterUserEntry(int i) {
			return getRuleContext(AlterUserEntryContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public AlterUserListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterUserList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterUserList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterUserList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserListContext alterUserList() throws RecognitionException {
		AlterUserListContext _localctx = new AlterUserListContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_alterUserList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7883);
			alterUserEntry();
			setState(7888);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1049,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7884);
					match(COMMA_SYMBOL);
					setState(7885);
					alterUserEntry();
					}
					} 
				}
				setState(7890);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1049,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserEntryContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public TerminalNode RANDOM_SYMBOL() { return getToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TextStringHashContext textStringHash() {
			return getRuleContext(TextStringHashContext.class,0);
		}
		public CreateUserEntryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserEntry; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterCreateUserEntry(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitCreateUserEntry(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitCreateUserEntry(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserEntryContext createUserEntry() throws RecognitionException {
		CreateUserEntryContext _localctx = new CreateUserEntryContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_createUserEntry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7891);
			user();
			setState(7918);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1054,_ctx) ) {
			case 1:
				{
				setState(7892);
				match(IDENTIFIED_SYMBOL);
				setState(7916);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1053,_ctx) ) {
				case 1:
					{
					setState(7893);
					match(BY_SYMBOL);
					setState(7896);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1050,_ctx) ) {
					case 1:
						{
						setState(7894);
						if (!(serverVersion < 80011)) throw new FailedPredicateException(this, "serverVersion < 80011");
						setState(7895);
						match(PASSWORD_SYMBOL);
						}
						break;
					}
					setState(7898);
					textString();
					}
					break;
				case 2:
					{
					setState(7899);
					match(WITH_SYMBOL);
					setState(7900);
					textOrIdentifier();
					setState(7906);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1051,_ctx) ) {
					case 1:
						{
						setState(7901);
						match(AS_SYMBOL);
						setState(7902);
						textStringHash();
						}
						break;
					case 2:
						{
						setState(7903);
						if (!(serverVersion >= 50706)) throw new FailedPredicateException(this, "serverVersion >= 50706");
						setState(7904);
						match(BY_SYMBOL);
						setState(7905);
						textString();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(7908);
					if (!(serverVersion >= 80018)) throw new FailedPredicateException(this, "serverVersion >= 80018");
					setState(7911);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH_SYMBOL) {
						{
						setState(7909);
						match(WITH_SYMBOL);
						setState(7910);
						textOrIdentifier();
						}
					}

					setState(7913);
					match(BY_SYMBOL);
					setState(7914);
					match(RANDOM_SYMBOL);
					setState(7915);
					match(PASSWORD_SYMBOL);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserEntryContext extends ParserRuleContext {
		public UserContext user() {
			return getRuleContext(UserContext.class,0);
		}
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode BY_SYMBOL() { return getToken(MySQLParser.BY_SYMBOL, 0); }
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public TerminalNode WITH_SYMBOL() { return getToken(MySQLParser.WITH_SYMBOL, 0); }
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public DiscardOldPasswordContext discardOldPassword() {
			return getRuleContext(DiscardOldPasswordContext.class,0);
		}
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public RetainCurrentPasswordContext retainCurrentPassword() {
			return getRuleContext(RetainCurrentPasswordContext.class,0);
		}
		public TerminalNode AS_SYMBOL() { return getToken(MySQLParser.AS_SYMBOL, 0); }
		public TextStringHashContext textStringHash() {
			return getRuleContext(TextStringHashContext.class,0);
		}
		public AlterUserEntryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserEntry; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterAlterUserEntry(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitAlterUserEntry(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitAlterUserEntry(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserEntryContext alterUserEntry() throws RecognitionException {
		AlterUserEntryContext _localctx = new AlterUserEntryContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_alterUserEntry);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7920);
			user();
			setState(7949);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1062,_ctx) ) {
			case 1:
				{
				setState(7921);
				match(IDENTIFIED_SYMBOL);
				setState(7944);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1060,_ctx) ) {
				case 1:
					{
					setState(7924);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH_SYMBOL) {
						{
						setState(7922);
						match(WITH_SYMBOL);
						setState(7923);
						textOrIdentifier();
						}
					}

					setState(7926);
					match(BY_SYMBOL);
					setState(7927);
					textString();
					setState(7930);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1056,_ctx) ) {
					case 1:
						{
						setState(7928);
						match(REPLACE_SYMBOL);
						setState(7929);
						textString();
						}
						break;
					}
					setState(7933);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1057,_ctx) ) {
					case 1:
						{
						setState(7932);
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(7935);
					match(WITH_SYMBOL);
					setState(7936);
					textOrIdentifier();
					setState(7942);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1059,_ctx) ) {
					case 1:
						{
						setState(7937);
						match(AS_SYMBOL);
						setState(7938);
						textStringHash();
						setState(7940);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1058,_ctx) ) {
						case 1:
							{
							setState(7939);
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(7947);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1061,_ctx) ) {
				case 1:
					{
					setState(7946);
					discardOldPassword();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RetainCurrentPasswordContext extends ParserRuleContext {
		public TerminalNode RETAIN_SYMBOL() { return getToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public RetainCurrentPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_retainCurrentPassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRetainCurrentPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRetainCurrentPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRetainCurrentPassword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RetainCurrentPasswordContext retainCurrentPassword() throws RecognitionException {
		RetainCurrentPasswordContext _localctx = new RetainCurrentPasswordContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_retainCurrentPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7951);
			match(RETAIN_SYMBOL);
			setState(7952);
			match(CURRENT_SYMBOL);
			setState(7953);
			match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiscardOldPasswordContext extends ParserRuleContext {
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode OLD_SYMBOL() { return getToken(MySQLParser.OLD_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public DiscardOldPasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discardOldPassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDiscardOldPassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDiscardOldPassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDiscardOldPassword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiscardOldPasswordContext discardOldPassword() throws RecognitionException {
		DiscardOldPasswordContext _localctx = new DiscardOldPasswordContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_discardOldPassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7955);
			match(DISCARD_SYMBOL);
			setState(7956);
			match(OLD_SYMBOL);
			setState(7957);
			match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplacePasswordContext extends ParserRuleContext {
		public TerminalNode REPLACE_SYMBOL() { return getToken(MySQLParser.REPLACE_SYMBOL, 0); }
		public TextStringContext textString() {
			return getRuleContext(TextStringContext.class,0);
		}
		public ReplacePasswordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replacePassword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReplacePassword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReplacePassword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReplacePassword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplacePasswordContext replacePassword() throws RecognitionException {
		ReplacePasswordContext _localctx = new ReplacePasswordContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_replacePassword);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7959);
			match(REPLACE_SYMBOL);
			setState(7960);
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserIdentifierOrTextContext extends ParserRuleContext {
		public List<TextOrIdentifierContext> textOrIdentifier() {
			return getRuleContexts(TextOrIdentifierContext.class);
		}
		public TextOrIdentifierContext textOrIdentifier(int i) {
			return getRuleContext(TextOrIdentifierContext.class,i);
		}
		public TerminalNode AT_SIGN_SYMBOL() { return getToken(MySQLParser.AT_SIGN_SYMBOL, 0); }
		public TerminalNode AT_TEXT_SUFFIX() { return getToken(MySQLParser.AT_TEXT_SUFFIX, 0); }
		public UserIdentifierOrTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userIdentifierOrText; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUserIdentifierOrText(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUserIdentifierOrText(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUserIdentifierOrText(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserIdentifierOrTextContext userIdentifierOrText() throws RecognitionException {
		UserIdentifierOrTextContext _localctx = new UserIdentifierOrTextContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_userIdentifierOrText);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7962);
			textOrIdentifier();
			setState(7966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1063,_ctx) ) {
			case 1:
				{
				setState(7963);
				match(AT_SIGN_SYMBOL);
				setState(7964);
				textOrIdentifier();
				}
				break;
			case 2:
				{
				setState(7965);
				match(AT_TEXT_SUFFIX);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserContext extends ParserRuleContext {
		public UserIdentifierOrTextContext userIdentifierOrText() {
			return getRuleContext(UserIdentifierOrTextContext.class,0);
		}
		public TerminalNode CURRENT_USER_SYMBOL() { return getToken(MySQLParser.CURRENT_USER_SYMBOL, 0); }
		public ParenthesesContext parentheses() {
			return getRuleContext(ParenthesesContext.class,0);
		}
		public UserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserContext user() throws RecognitionException {
		UserContext _localctx = new UserContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_user);
		try {
			setState(7973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1065,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7968);
				userIdentifierOrText();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7969);
				match(CURRENT_USER_SYMBOL);
				setState(7971);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1064,_ctx) ) {
				case 1:
					{
					setState(7970);
					parentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE_SYMBOL() { return getToken(MySQLParser.LIKE_SYMBOL, 0); }
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public LikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLikeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLikeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikeClauseContext likeClause() throws RecognitionException {
		LikeClauseContext _localctx = new LikeClauseContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_likeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7975);
			match(LIKE_SYMBOL);
			setState(7976);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeOrWhereContext extends ParserRuleContext {
		public LikeClauseContext likeClause() {
			return getRuleContext(LikeClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LikeOrWhereContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeOrWhere; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLikeOrWhere(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLikeOrWhere(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLikeOrWhere(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikeOrWhereContext likeOrWhere() throws RecognitionException {
		LikeOrWhereContext _localctx = new LikeOrWhereContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_likeOrWhere);
		try {
			setState(7980);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7978);
				likeClause();
				}
				break;
			case WHERE_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7979);
				whereClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnlineOptionContext extends ParserRuleContext {
		public TerminalNode ONLINE_SYMBOL() { return getToken(MySQLParser.ONLINE_SYMBOL, 0); }
		public TerminalNode OFFLINE_SYMBOL() { return getToken(MySQLParser.OFFLINE_SYMBOL, 0); }
		public OnlineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onlineOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOnlineOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOnlineOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOnlineOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnlineOptionContext onlineOption() throws RecognitionException {
		OnlineOptionContext _localctx = new OnlineOptionContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_onlineOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7982);
			_la = _input.LA(1);
			if ( !(_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NoWriteToBinLogContext extends ParserRuleContext {
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG_SYMBOL() { return getToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0); }
		public NoWriteToBinLogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noWriteToBinLog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNoWriteToBinLog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNoWriteToBinLog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNoWriteToBinLog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NoWriteToBinLogContext noWriteToBinLog() throws RecognitionException {
		NoWriteToBinLogContext _localctx = new NoWriteToBinLogContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_noWriteToBinLog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7984);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsePartitionContext extends ParserRuleContext {
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return getRuleContext(IdentifierListWithParenthesesContext.class,0);
		}
		public UsePartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usePartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUsePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUsePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUsePartition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsePartitionContext usePartition() throws RecognitionException {
		UsePartitionContext _localctx = new UsePartitionContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_usePartition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7986);
			if (!(serverVersion >= 50602)) throw new FailedPredicateException(this, "serverVersion >= 50602");
			setState(7987);
			match(PARTITION_SYMBOL);
			setState(7988);
			identifierListWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldIdentifierContext extends ParserRuleContext {
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FieldIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFieldIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFieldIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFieldIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldIdentifierContext fieldIdentifier() throws RecognitionException {
		FieldIdentifierContext _localctx = new FieldIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_fieldIdentifier);
		try {
			setState(7995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1068,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7990);
				dotIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7991);
				qualifiedIdentifier();
				setState(7993);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1067,_ctx) ) {
				case 1:
					{
					setState(7992);
					dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_columnName);
		try {
			setState(8001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1069,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7997);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(7998);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7999);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(8000);
				fieldIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnInternalRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColumnInternalRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnInternalRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnInternalRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnInternalRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnInternalRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnInternalRefContext columnInternalRef() throws RecognitionException {
		ColumnInternalRefContext _localctx = new ColumnInternalRefContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_columnInternalRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8003);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnInternalRefListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<ColumnInternalRefContext> columnInternalRef() {
			return getRuleContexts(ColumnInternalRefContext.class);
		}
		public ColumnInternalRefContext columnInternalRef(int i) {
			return getRuleContext(ColumnInternalRefContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public ColumnInternalRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnInternalRefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnInternalRefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnInternalRefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnInternalRefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnInternalRefListContext columnInternalRefList() throws RecognitionException {
		ColumnInternalRefListContext _localctx = new ColumnInternalRefListContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_columnInternalRefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8005);
			match(OPEN_PAR_SYMBOL);
			setState(8006);
			columnInternalRef();
			setState(8011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(8007);
				match(COMMA_SYMBOL);
				setState(8008);
				columnInternalRef();
				}
				}
				setState(8013);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8014);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnRefContext extends ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public ColumnRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterColumnRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitColumnRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitColumnRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnRefContext columnRef() throws RecognitionException {
		ColumnRefContext _localctx = new ColumnRefContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_columnRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8016);
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertIdentifierContext extends ParserRuleContext {
		public ColumnRefContext columnRef() {
			return getRuleContext(ColumnRefContext.class,0);
		}
		public TableWildContext tableWild() {
			return getRuleContext(TableWildContext.class,0);
		}
		public InsertIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterInsertIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitInsertIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitInsertIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertIdentifierContext insertIdentifier() throws RecognitionException {
		InsertIdentifierContext _localctx = new InsertIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_insertIdentifier);
		try {
			setState(8020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1071,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8018);
				columnRef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8019);
				tableWild();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8022);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexRefContext extends ParserRuleContext {
		public FieldIdentifierContext fieldIdentifier() {
			return getRuleContext(FieldIdentifierContext.class,0);
		}
		public IndexRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIndexRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIndexRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIndexRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexRefContext indexRef() throws RecognitionException {
		IndexRefContext _localctx = new IndexRefContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_indexRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8024);
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableWildContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT_SYMBOL() { return getTokens(MySQLParser.DOT_SYMBOL); }
		public TerminalNode DOT_SYMBOL(int i) {
			return getToken(MySQLParser.DOT_SYMBOL, i);
		}
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public TableWildContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableWild; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableWild(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableWild(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableWild(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableWildContext tableWild() throws RecognitionException {
		TableWildContext _localctx = new TableWildContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_tableWild);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8026);
			identifier();
			setState(8027);
			match(DOT_SYMBOL);
			setState(8031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1072,_ctx) ) {
			case 1:
				{
				setState(8028);
				identifier();
				setState(8029);
				match(DOT_SYMBOL);
				}
				break;
			}
			setState(8033);
			match(MULT_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8035);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSchemaRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSchemaRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSchemaRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaRefContext schemaRef() throws RecognitionException {
		SchemaRefContext _localctx = new SchemaRefContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_schemaRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8037);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterProcedureName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitProcedureName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitProcedureName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureNameContext procedureName() throws RecognitionException {
		ProcedureNameContext _localctx = new ProcedureNameContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_procedureName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8039);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public ProcedureRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterProcedureRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitProcedureRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitProcedureRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureRefContext procedureRef() throws RecognitionException {
		ProcedureRefContext _localctx = new ProcedureRefContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_procedureRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8041);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_functionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8043);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public FunctionRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFunctionRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFunctionRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFunctionRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionRefContext functionRef() throws RecognitionException {
		FunctionRefContext _localctx = new FunctionRefContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_functionRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8045);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public TriggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTriggerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTriggerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTriggerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerNameContext triggerName() throws RecognitionException {
		TriggerNameContext _localctx = new TriggerNameContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_triggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8047);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public TriggerRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTriggerRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTriggerRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTriggerRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerRefContext triggerRef() throws RecognitionException {
		TriggerRefContext _localctx = new TriggerRefContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_triggerRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8049);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public ViewNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewNameContext viewName() throws RecognitionException {
		ViewNameContext _localctx = new ViewNameContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_viewName);
		try {
			setState(8053);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1073,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8051);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8052);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public ViewRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterViewRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitViewRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitViewRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewRefContext viewRef() throws RecognitionException {
		ViewRefContext _localctx = new ViewRefContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_viewRef);
		try {
			setState(8057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1074,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8055);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8056);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TablespaceNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTablespaceName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTablespaceName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTablespaceName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceNameContext tablespaceName() throws RecognitionException {
		TablespaceNameContext _localctx = new TablespaceNameContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_tablespaceName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8059);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TablespaceRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTablespaceRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTablespaceRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTablespaceRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceRefContext tablespaceRef() throws RecognitionException {
		TablespaceRefContext _localctx = new TablespaceRefContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_tablespaceRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8061);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LogfileGroupNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLogfileGroupName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLogfileGroupName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLogfileGroupName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogfileGroupNameContext logfileGroupName() throws RecognitionException {
		LogfileGroupNameContext _localctx = new LogfileGroupNameContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_logfileGroupName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8063);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogfileGroupRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LogfileGroupRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logfileGroupRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLogfileGroupRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLogfileGroupRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLogfileGroupRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogfileGroupRefContext logfileGroupRef() throws RecognitionException {
		LogfileGroupRefContext _localctx = new LogfileGroupRefContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_logfileGroupRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8065);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public EventNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterEventName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitEventName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitEventName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventNameContext eventName() throws RecognitionException {
		EventNameContext _localctx = new EventNameContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_eventName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8067);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public EventRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterEventRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitEventRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitEventRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventRefContext eventRef() throws RecognitionException {
		EventRefContext _localctx = new EventRefContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_eventRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8069);
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UdfNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UdfNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udfName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUdfName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUdfName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUdfName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UdfNameContext udfName() throws RecognitionException {
		UdfNameContext _localctx = new UdfNameContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_udfName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8071);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerNameContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterServerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitServerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitServerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerNameContext serverName() throws RecognitionException {
		ServerNameContext _localctx = new ServerNameContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_serverName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8073);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerRefContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public ServerRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterServerRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitServerRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitServerRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerRefContext serverRef() throws RecognitionException {
		ServerRefContext _localctx = new ServerRefContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_serverRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8075);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineRefContext extends ParserRuleContext {
		public TextOrIdentifierContext textOrIdentifier() {
			return getRuleContext(TextOrIdentifierContext.class,0);
		}
		public EngineRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterEngineRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitEngineRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitEngineRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineRefContext engineRef() throws RecognitionException {
		EngineRefContext _localctx = new EngineRefContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_engineRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8077);
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_tableName);
		try {
			setState(8081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1075,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8079);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8080);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterTableRefContext extends ParserRuleContext {
		public SchemaRefContext schemaRef() {
			return getRuleContext(SchemaRefContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public FilterTableRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterTableRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFilterTableRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFilterTableRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFilterTableRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterTableRefContext filterTableRef() throws RecognitionException {
		FilterTableRefContext _localctx = new FilterTableRefContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_filterTableRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8083);
			schemaRef();
			setState(8084);
			dotIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRefWithWildcardContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode MULT_OPERATOR() { return getToken(MySQLParser.MULT_OPERATOR, 0); }
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableRefWithWildcardContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRefWithWildcard; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableRefWithWildcard(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableRefWithWildcard(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableRefWithWildcard(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRefWithWildcardContext tableRefWithWildcard() throws RecognitionException {
		TableRefWithWildcardContext _localctx = new TableRefWithWildcardContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_tableRefWithWildcard);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8086);
			identifier();
			setState(8094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1077,_ctx) ) {
			case 1:
				{
				setState(8087);
				match(DOT_SYMBOL);
				setState(8088);
				match(MULT_OPERATOR);
				}
				break;
			case 2:
				{
				setState(8089);
				dotIdentifier();
				setState(8092);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1076,_ctx) ) {
				case 1:
					{
					setState(8090);
					match(DOT_SYMBOL);
					setState(8091);
					match(MULT_OPERATOR);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRefContext extends ParserRuleContext {
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return getRuleContext(QualifiedIdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public TableRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRefContext tableRef() throws RecognitionException {
		TableRefContext _localctx = new TableRefContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_tableRef);
		try {
			setState(8098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1078,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8096);
				qualifiedIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8097);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableRefListContext extends ParserRuleContext {
		public List<TableRefContext> tableRef() {
			return getRuleContexts(TableRefContext.class);
		}
		public TableRefContext tableRef(int i) {
			return getRuleContext(TableRefContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableRefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableRefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableRefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableRefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableRefListContext tableRefList() throws RecognitionException {
		TableRefListContext _localctx = new TableRefListContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_tableRefList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8100);
			tableRef();
			setState(8105);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1079,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8101);
					match(COMMA_SYMBOL);
					setState(8102);
					tableRef();
					}
					} 
				}
				setState(8107);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1079,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAliasRefListContext extends ParserRuleContext {
		public List<TableRefWithWildcardContext> tableRefWithWildcard() {
			return getRuleContexts(TableRefWithWildcardContext.class);
		}
		public TableRefWithWildcardContext tableRefWithWildcard(int i) {
			return getRuleContext(TableRefWithWildcardContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TableAliasRefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAliasRefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTableAliasRefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTableAliasRefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTableAliasRefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAliasRefListContext tableAliasRefList() throws RecognitionException {
		TableAliasRefListContext _localctx = new TableAliasRefListContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_tableAliasRefList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8108);
			tableRefWithWildcard();
			setState(8113);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1080,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8109);
					match(COMMA_SYMBOL);
					setState(8110);
					tableRefWithWildcard();
					}
					} 
				}
				setState(8115);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1080,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterParameterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitParameterName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitParameterName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterNameContext parameterName() throws RecognitionException {
		ParameterNameContext _localctx = new ParameterNameContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_parameterName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8116);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public LabelKeywordContext labelKeyword() {
			return getRuleContext(LabelKeywordContext.class,0);
		}
		public LabelIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLabelIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLabelIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLabelIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabelIdentifierContext labelIdentifier() throws RecognitionException {
		LabelIdentifierContext _localctx = new LabelIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_labelIdentifier);
		try {
			setState(8120);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1081,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8118);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8119);
				labelKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelRefContext extends ParserRuleContext {
		public LabelIdentifierContext labelIdentifier() {
			return getRuleContext(LabelIdentifierContext.class,0);
		}
		public LabelRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLabelRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLabelRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLabelRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabelRefContext labelRef() throws RecognitionException {
		LabelRefContext _localctx = new LabelRefContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_labelRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8122);
			labelIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public RoleKeywordContext roleKeyword() {
			return getRuleContext(RoleKeywordContext.class,0);
		}
		public RoleIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleIdentifierContext roleIdentifier() throws RecognitionException {
		RoleIdentifierContext _localctx = new RoleIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_roleIdentifier);
		try {
			setState(8126);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1082,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8124);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8125);
				roleKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleRefContext extends ParserRuleContext {
		public RoleIdentifierContext roleIdentifier() {
			return getRuleContext(RoleIdentifierContext.class,0);
		}
		public RoleRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleRefContext roleRef() throws RecognitionException {
		RoleRefContext _localctx = new RoleRefContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_roleRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8128);
			roleIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PluginRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PluginRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pluginRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPluginRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPluginRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPluginRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PluginRefContext pluginRef() throws RecognitionException {
		PluginRefContext _localctx = new PluginRefContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_pluginRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8130);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComponentRefContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public ComponentRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_componentRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterComponentRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitComponentRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitComponentRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComponentRefContext componentRef() throws RecognitionException {
		ComponentRefContext _localctx = new ComponentRefContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_componentRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8132);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResourceGroupRefContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ResourceGroupRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resourceGroupRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterResourceGroupRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitResourceGroupRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitResourceGroupRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResourceGroupRefContext resourceGroupRef() throws RecognitionException {
		ResourceGroupRefContext _localctx = new ResourceGroupRefContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_resourceGroupRef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8134);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8136);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PureIdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER() { return getToken(MySQLParser.IDENTIFIER, 0); }
		public TerminalNode BACK_TICK_QUOTED_ID() { return getToken(MySQLParser.BACK_TICK_QUOTED_ID, 0); }
		public TerminalNode DOUBLE_QUOTED_TEXT() { return getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public PureIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pureIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPureIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPureIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPureIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PureIdentifierContext pureIdentifier() throws RecognitionException {
		PureIdentifierContext _localctx = new PureIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_pureIdentifier);
		int _la;
		try {
			setState(8141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1083,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8138);
				_la = _input.LA(1);
				if ( !(_la==IDENTIFIER || _la==BACK_TICK_QUOTED_ID) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8139);
				if (!(isSqlModeActive(AnsiQuotes))) throw new FailedPredicateException(this, "isSqlModeActive(AnsiQuotes)");
				setState(8140);
				match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public IdentifierKeywordContext identifierKeyword() {
			return getRuleContext(IdentifierKeywordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_identifier);
		try {
			setState(8145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1084,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8143);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8144);
				identifierKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierListContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentifierList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentifierList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentifierList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierListContext identifierList() throws RecognitionException {
		IdentifierListContext _localctx = new IdentifierListContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_identifierList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8147);
			identifier();
			setState(8152);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1085,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8148);
					match(COMMA_SYMBOL);
					setState(8149);
					identifier();
					}
					} 
				}
				setState(8154);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1085,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierListWithParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierListWithParentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentifierListWithParentheses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentifierListWithParentheses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentifierListWithParentheses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierListWithParenthesesContext identifierListWithParentheses() throws RecognitionException {
		IdentifierListWithParenthesesContext _localctx = new IdentifierListWithParenthesesContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_identifierListWithParentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8155);
			match(OPEN_PAR_SYMBOL);
			setState(8156);
			identifierList();
			setState(8157);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DotIdentifierContext dotIdentifier() {
			return getRuleContext(DotIdentifierContext.class,0);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterQualifiedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitQualifiedIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitQualifiedIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedIdentifierContext qualifiedIdentifier() throws RecognitionException {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_qualifiedIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8159);
			identifier();
			setState(8161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1086,_ctx) ) {
			case 1:
				{
				setState(8160);
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<DotIdentifierContext> dotIdentifier() {
			return getRuleContexts(DotIdentifierContext.class);
		}
		public DotIdentifierContext dotIdentifier(int i) {
			return getRuleContext(DotIdentifierContext.class,i);
		}
		public SimpleIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSimpleIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSimpleIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSimpleIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdentifierContext simpleIdentifier() throws RecognitionException {
		SimpleIdentifierContext _localctx = new SimpleIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_simpleIdentifier);
		int _la;
		try {
			setState(8174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1089,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8163);
				identifier();
				setState(8168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					setState(8164);
					dotIdentifier();
					setState(8166);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						setState(8165);
						dotIdentifier();
						}
					}

					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8170);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(8171);
				dotIdentifier();
				setState(8172);
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DotIdentifierContext extends ParserRuleContext {
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DotIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dotIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterDotIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitDotIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitDotIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DotIdentifierContext dotIdentifier() throws RecognitionException {
		DotIdentifierContext _localctx = new DotIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_dotIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8176);
			match(DOT_SYMBOL);
			setState(8177);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ulong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MySQLParser.FLOAT_NUMBER, 0); }
		public Ulong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ulong_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUlong_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUlong_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUlong_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ulong_numberContext ulong_number() throws RecognitionException {
		Ulong_numberContext _localctx = new Ulong_numberContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_ulong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8179);
			_la = _input.LA(1);
			if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (HEX_NUMBER - 747)) | (1L << (DECIMAL_NUMBER - 747)) | (1L << (FLOAT_NUMBER - 747)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Real_ulong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public Real_ulong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_real_ulong_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReal_ulong_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReal_ulong_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReal_ulong_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Real_ulong_numberContext real_ulong_number() throws RecognitionException {
		Real_ulong_numberContext _localctx = new Real_ulong_numberContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_real_ulong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8181);
			_la = _input.LA(1);
			if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (HEX_NUMBER - 747)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ulonglong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MySQLParser.FLOAT_NUMBER, 0); }
		public Ulonglong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ulonglong_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterUlonglong_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitUlonglong_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitUlonglong_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ulonglong_numberContext ulonglong_number() throws RecognitionException {
		Ulonglong_numberContext _localctx = new Ulonglong_numberContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_ulonglong_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8183);
			_la = _input.LA(1);
			if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (DECIMAL_NUMBER - 747)) | (1L << (FLOAT_NUMBER - 747)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Real_ulonglong_numberContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public Real_ulonglong_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_real_ulonglong_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterReal_ulonglong_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitReal_ulonglong_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitReal_ulonglong_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Real_ulonglong_numberContext real_ulonglong_number() throws RecognitionException {
		Real_ulonglong_numberContext _localctx = new Real_ulonglong_numberContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_real_ulonglong_number);
		try {
			setState(8190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1090,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8185);
				match(INT_NUMBER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8186);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(8187);
				match(HEX_NUMBER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8188);
				match(ULONGLONG_NUMBER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8189);
				match(LONG_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralContext extends ParserRuleContext {
		public TextLiteralContext textLiteral() {
			return getRuleContext(TextLiteralContext.class,0);
		}
		public NumLiteralContext numLiteral() {
			return getRuleContext(NumLiteralContext.class,0);
		}
		public TemporalLiteralContext temporalLiteral() {
			return getRuleContext(TemporalLiteralContext.class,0);
		}
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public BoolLiteralContext boolLiteral() {
			return getRuleContext(BoolLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode BIN_NUMBER() { return getToken(MySQLParser.BIN_NUMBER, 0); }
		public TerminalNode UNDERSCORE_CHARSET() { return getToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_literal);
		int _la;
		try {
			setState(8201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1092,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8192);
				textLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8193);
				numLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8194);
				temporalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8195);
				nullLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8196);
				boolLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNDERSCORE_CHARSET) {
					{
					setState(8197);
					match(UNDERSCORE_CHARSET);
					}
				}

				setState(8200);
				_la = _input.LA(1);
				if ( !(_la==HEX_NUMBER || _la==BIN_NUMBER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedLiteralContext extends ParserRuleContext {
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode PLUS_OPERATOR() { return getToken(MySQLParser.PLUS_OPERATOR, 0); }
		public Ulong_numberContext ulong_number() {
			return getRuleContext(Ulong_numberContext.class,0);
		}
		public TerminalNode MINUS_OPERATOR() { return getToken(MySQLParser.MINUS_OPERATOR, 0); }
		public SignedLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSignedLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSignedLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSignedLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignedLiteralContext signedLiteral() throws RecognitionException {
		SignedLiteralContext _localctx = new SignedLiteralContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_signedLiteral);
		try {
			setState(8208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1093,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8203);
				literal();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8204);
				match(PLUS_OPERATOR);
				setState(8205);
				ulong_number();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8206);
				match(MINUS_OPERATOR);
				setState(8207);
				ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringListContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<TextStringContext> textString() {
			return getRuleContexts(TextStringContext.class);
		}
		public TextStringContext textString(int i) {
			return getRuleContext(TextStringContext.class,i);
		}
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public StringListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterStringList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitStringList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitStringList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringListContext stringList() throws RecognitionException {
		StringListContext _localctx = new StringListContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_stringList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8210);
			match(OPEN_PAR_SYMBOL);
			setState(8211);
			textString();
			setState(8216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(8212);
				match(COMMA_SYMBOL);
				setState(8213);
				textString();
				}
				}
				setState(8218);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8219);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringLiteralContext extends ParserRuleContext {
		public Token value;
		public TerminalNode SINGLE_QUOTED_TEXT() { return getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public TerminalNode DOUBLE_QUOTED_TEXT() { return getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0); }
		public TextStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTextStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTextStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTextStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TextStringLiteralContext textStringLiteral() throws RecognitionException {
		TextStringLiteralContext _localctx = new TextStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_textStringLiteral);
		try {
			setState(8224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1095,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8221);
				((TextStringLiteralContext)_localctx).value = match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8222);
				if (!(!isSqlModeActive(AnsiQuotes))) throw new FailedPredicateException(this, "!isSqlModeActive(AnsiQuotes)");
				setState(8223);
				((TextStringLiteralContext)_localctx).value = match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TerminalNode BIN_NUMBER() { return getToken(MySQLParser.BIN_NUMBER, 0); }
		public TextStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTextString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTextString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTextString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TextStringContext textString() throws RecognitionException {
		TextStringContext _localctx = new TextStringContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_textString);
		try {
			setState(8229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1096,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8226);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8227);
				match(HEX_NUMBER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8228);
				match(BIN_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringHashContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TerminalNode HEX_NUMBER() { return getToken(MySQLParser.HEX_NUMBER, 0); }
		public TextStringHashContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringHash; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTextStringHash(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTextStringHash(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTextStringHash(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TextStringHashContext textStringHash() throws RecognitionException {
		TextStringHashContext _localctx = new TextStringHashContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_textStringHash);
		try {
			setState(8234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1097,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8231);
				textStringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8232);
				if (!(serverVersion >= 80017)) throw new FailedPredicateException(this, "serverVersion >= 80017");
				setState(8233);
				match(HEX_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextLiteralContext extends ParserRuleContext {
		public List<TextStringLiteralContext> textStringLiteral() {
			return getRuleContexts(TextStringLiteralContext.class);
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return getRuleContext(TextStringLiteralContext.class,i);
		}
		public TerminalNode NCHAR_TEXT() { return getToken(MySQLParser.NCHAR_TEXT, 0); }
		public TerminalNode UNDERSCORE_CHARSET() { return getToken(MySQLParser.UNDERSCORE_CHARSET, 0); }
		public TextLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTextLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTextLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTextLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TextLiteralContext textLiteral() throws RecognitionException {
		TextLiteralContext _localctx = new TextLiteralContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_textLiteral);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1099,_ctx) ) {
			case 1:
				{
				setState(8237);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1098,_ctx) ) {
				case 1:
					{
					setState(8236);
					match(UNDERSCORE_CHARSET);
					}
					break;
				}
				setState(8239);
				textStringLiteral();
				}
				break;
			case 2:
				{
				setState(8240);
				match(NCHAR_TEXT);
				}
				break;
			}
			setState(8246);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1100,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8243);
					textStringLiteral();
					}
					} 
				}
				setState(8248);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1100,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringNoLinebreakContext extends ParserRuleContext {
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TextStringNoLinebreakContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringNoLinebreak; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTextStringNoLinebreak(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTextStringNoLinebreak(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTextStringNoLinebreak(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TextStringNoLinebreakContext textStringNoLinebreak() throws RecognitionException {
		TextStringNoLinebreakContext _localctx = new TextStringNoLinebreakContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_textStringNoLinebreak);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8249);
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextStringLiteralListContext extends ParserRuleContext {
		public List<TextStringLiteralContext> textStringLiteral() {
			return getRuleContexts(TextStringLiteralContext.class);
		}
		public TextStringLiteralContext textStringLiteral(int i) {
			return getRuleContext(TextStringLiteralContext.class,i);
		}
		public List<TerminalNode> COMMA_SYMBOL() { return getTokens(MySQLParser.COMMA_SYMBOL); }
		public TerminalNode COMMA_SYMBOL(int i) {
			return getToken(MySQLParser.COMMA_SYMBOL, i);
		}
		public TextStringLiteralListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textStringLiteralList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTextStringLiteralList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTextStringLiteralList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTextStringLiteralList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TextStringLiteralListContext textStringLiteralList() throws RecognitionException {
		TextStringLiteralListContext _localctx = new TextStringLiteralListContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_textStringLiteralList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8251);
			textStringLiteral();
			setState(8256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				setState(8252);
				match(COMMA_SYMBOL);
				setState(8253);
				textStringLiteral();
				}
				}
				setState(8258);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumLiteralContext extends ParserRuleContext {
		public TerminalNode INT_NUMBER() { return getToken(MySQLParser.INT_NUMBER, 0); }
		public TerminalNode LONG_NUMBER() { return getToken(MySQLParser.LONG_NUMBER, 0); }
		public TerminalNode ULONGLONG_NUMBER() { return getToken(MySQLParser.ULONGLONG_NUMBER, 0); }
		public TerminalNode DECIMAL_NUMBER() { return getToken(MySQLParser.DECIMAL_NUMBER, 0); }
		public TerminalNode FLOAT_NUMBER() { return getToken(MySQLParser.FLOAT_NUMBER, 0); }
		public NumLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNumLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNumLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNumLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumLiteralContext numLiteral() throws RecognitionException {
		NumLiteralContext _localctx = new NumLiteralContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_numLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8259);
			_la = _input.LA(1);
			if ( !(((((_la - 747)) & ~0x3f) == 0 && ((1L << (_la - 747)) & ((1L << (INT_NUMBER - 747)) | (1L << (LONG_NUMBER - 747)) | (1L << (ULONGLONG_NUMBER - 747)) | (1L << (DECIMAL_NUMBER - 747)) | (1L << (FLOAT_NUMBER - 747)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE_SYMBOL() { return getToken(MySQLParser.TRUE_SYMBOL, 0); }
		public TerminalNode FALSE_SYMBOL() { return getToken(MySQLParser.FALSE_SYMBOL, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterBoolLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitBoolLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitBoolLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolLiteralContext boolLiteral() throws RecognitionException {
		BoolLiteralContext _localctx = new BoolLiteralContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_boolLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8261);
			_la = _input.LA(1);
			if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullLiteralContext extends ParserRuleContext {
		public TerminalNode NULL_SYMBOL() { return getToken(MySQLParser.NULL_SYMBOL, 0); }
		public TerminalNode NULL2_SYMBOL() { return getToken(MySQLParser.NULL2_SYMBOL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterNullLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitNullLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitNullLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullLiteralContext nullLiteral() throws RecognitionException {
		NullLiteralContext _localctx = new NullLiteralContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_nullLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8263);
			_la = _input.LA(1);
			if ( !(_la==NULL_SYMBOL || _la==NULL2_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TemporalLiteralContext extends ParserRuleContext {
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode SINGLE_QUOTED_TEXT() { return getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TemporalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTemporalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTemporalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTemporalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TemporalLiteralContext temporalLiteral() throws RecognitionException {
		TemporalLiteralContext _localctx = new TemporalLiteralContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_temporalLiteral);
		try {
			setState(8271);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8265);
				match(DATE_SYMBOL);
				setState(8266);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIME_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8267);
				match(TIME_SYMBOL);
				setState(8268);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIMESTAMP_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8269);
				match(TIMESTAMP_SYMBOL);
				setState(8270);
				match(SINGLE_QUOTED_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FloatOptionsContext extends ParserRuleContext {
		public FieldLengthContext fieldLength() {
			return getRuleContext(FieldLengthContext.class,0);
		}
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public FloatOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floatOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterFloatOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitFloatOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitFloatOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FloatOptionsContext floatOptions() throws RecognitionException {
		FloatOptionsContext _localctx = new FloatOptionsContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_floatOptions);
		try {
			setState(8275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1103,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8273);
				fieldLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8274);
				precision();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StandardFloatOptionsContext extends ParserRuleContext {
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public StandardFloatOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standardFloatOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterStandardFloatOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitStandardFloatOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitStandardFloatOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StandardFloatOptionsContext standardFloatOptions() throws RecognitionException {
		StandardFloatOptionsContext _localctx = new StandardFloatOptionsContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_standardFloatOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8277);
			precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrecisionContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public List<TerminalNode> INT_NUMBER() { return getTokens(MySQLParser.INT_NUMBER); }
		public TerminalNode INT_NUMBER(int i) {
			return getToken(MySQLParser.INT_NUMBER, i);
		}
		public TerminalNode COMMA_SYMBOL() { return getToken(MySQLParser.COMMA_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterPrecision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitPrecision(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitPrecision(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecisionContext precision() throws RecognitionException {
		PrecisionContext _localctx = new PrecisionContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8279);
			match(OPEN_PAR_SYMBOL);
			setState(8280);
			match(INT_NUMBER);
			setState(8281);
			match(COMMA_SYMBOL);
			setState(8282);
			match(INT_NUMBER);
			setState(8283);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TextOrIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public TextOrIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_textOrIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterTextOrIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitTextOrIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitTextOrIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TextOrIdentifierContext textOrIdentifier() throws RecognitionException {
		TextOrIdentifierContext _localctx = new TextOrIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_textOrIdentifier);
		try {
			setState(8287);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1104,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8285);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8286);
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LValueIdentifierContext extends ParserRuleContext {
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public LValueKeywordContext lValueKeyword() {
			return getRuleContext(LValueKeywordContext.class,0);
		}
		public LValueIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lValueIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLValueIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLValueIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLValueIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LValueIdentifierContext lValueIdentifier() throws RecognitionException {
		LValueIdentifierContext _localctx = new LValueIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_lValueIdentifier);
		try {
			setState(8291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1105,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8289);
				pureIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8290);
				lValueKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleIdentifierOrTextContext extends ParserRuleContext {
		public RoleIdentifierContext roleIdentifier() {
			return getRuleContext(RoleIdentifierContext.class,0);
		}
		public TextStringLiteralContext textStringLiteral() {
			return getRuleContext(TextStringLiteralContext.class,0);
		}
		public RoleIdentifierOrTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleIdentifierOrText; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleIdentifierOrText(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleIdentifierOrText(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleIdentifierOrText(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleIdentifierOrTextContext roleIdentifierOrText() throws RecognitionException {
		RoleIdentifierOrTextContext _localctx = new RoleIdentifierOrTextContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_roleIdentifierOrText);
		try {
			setState(8295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1106,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8293);
				roleIdentifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8294);
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SizeNumberContext extends ParserRuleContext {
		public Real_ulonglong_numberContext real_ulonglong_number() {
			return getRuleContext(Real_ulonglong_numberContext.class,0);
		}
		public PureIdentifierContext pureIdentifier() {
			return getRuleContext(PureIdentifierContext.class,0);
		}
		public SizeNumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sizeNumber; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSizeNumber(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSizeNumber(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSizeNumber(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SizeNumberContext sizeNumber() throws RecognitionException {
		SizeNumberContext _localctx = new SizeNumberContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_sizeNumber);
		try {
			setState(8299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8297);
				real_ulonglong_number();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8298);
				pureIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParenthesesContext extends ParserRuleContext {
		public TerminalNode OPEN_PAR_SYMBOL() { return getToken(MySQLParser.OPEN_PAR_SYMBOL, 0); }
		public TerminalNode CLOSE_PAR_SYMBOL() { return getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0); }
		public ParenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterParentheses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitParentheses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitParentheses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParenthesesContext parentheses() throws RecognitionException {
		ParenthesesContext _localctx = new ParenthesesContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_parentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8301);
			match(OPEN_PAR_SYMBOL);
			setState(8302);
			match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EqualContext extends ParserRuleContext {
		public TerminalNode EQUAL_OPERATOR() { return getToken(MySQLParser.EQUAL_OPERATOR, 0); }
		public TerminalNode ASSIGN_OPERATOR() { return getToken(MySQLParser.ASSIGN_OPERATOR, 0); }
		public EqualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterEqual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitEqual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitEqual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EqualContext equal() throws RecognitionException {
		EqualContext _localctx = new EqualContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_equal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8304);
			_la = _input.LA(1);
			if ( !(_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionTypeContext extends ParserRuleContext {
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public OptionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterOptionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitOptionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitOptionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionTypeContext optionType() throws RecognitionException {
		OptionTypeContext _localctx = new OptionTypeContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_optionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8306);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarIdentTypeContext extends ParserRuleContext {
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public VarIdentTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varIdentType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterVarIdentType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitVarIdentType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitVarIdentType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarIdentTypeContext varIdentType() throws RecognitionException {
		VarIdentTypeContext _localctx = new VarIdentTypeContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_varIdentType);
		try {
			setState(8314);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8308);
				match(GLOBAL_SYMBOL);
				setState(8309);
				match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8310);
				match(LOCAL_SYMBOL);
				setState(8311);
				match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8312);
				match(SESSION_SYMBOL);
				setState(8313);
				match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetVarIdentTypeContext extends ParserRuleContext {
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode DOT_SYMBOL() { return getToken(MySQLParser.DOT_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public SetVarIdentTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setVarIdentType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterSetVarIdentType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitSetVarIdentType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitSetVarIdentType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetVarIdentTypeContext setVarIdentType() throws RecognitionException {
		SetVarIdentTypeContext _localctx = new SetVarIdentTypeContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_setVarIdentType);
		try {
			setState(8326);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PERSIST_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8316);
				match(PERSIST_SYMBOL);
				setState(8317);
				match(DOT_SYMBOL);
				}
				break;
			case PERSIST_ONLY_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8318);
				match(PERSIST_ONLY_SYMBOL);
				setState(8319);
				match(DOT_SYMBOL);
				}
				break;
			case GLOBAL_SYMBOL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8320);
				match(GLOBAL_SYMBOL);
				setState(8321);
				match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				enterOuterAlt(_localctx, 4);
				{
				setState(8322);
				match(LOCAL_SYMBOL);
				setState(8323);
				match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(8324);
				match(SESSION_SYMBOL);
				setState(8325);
				match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordContext extends ParserRuleContext {
		public LabelKeywordContext labelKeyword() {
			return getRuleContext(LabelKeywordContext.class,0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return getRuleContext(RoleOrIdentifierKeywordContext.class,0);
		}
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode RESTART_SYMBOL() { return getToken(MySQLParser.RESTART_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return getRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return getRuleContext(IdentifierKeywordsAmbiguous2LabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return getRuleContext(IdentifierKeywordsAmbiguous3RolesContext.class,0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return getRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext.class,0);
		}
		public IdentifierKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentifierKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentifierKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentifierKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierKeywordContext identifierKeyword() throws RecognitionException {
		IdentifierKeywordContext _localctx = new IdentifierKeywordContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_identifierKeyword);
		try {
			setState(8345);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8328);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(8336);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1110,_ctx) ) {
				case 1:
					{
					setState(8329);
					labelKeyword();
					}
					break;
				case 2:
					{
					setState(8330);
					roleOrIdentifierKeyword();
					}
					break;
				case 3:
					{
					setState(8331);
					match(EXECUTE_SYMBOL);
					}
					break;
				case 4:
					{
					setState(8332);
					if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
					setState(8333);
					match(SHUTDOWN_SYMBOL);
					}
					break;
				case 5:
					{
					setState(8334);
					if (!(serverVersion >= 80011)) throw new FailedPredicateException(this, "serverVersion >= 80011");
					setState(8335);
					match(RESTART_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1111,_ctx) ) {
				case 1:
					{
					setState(8338);
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					setState(8339);
					identifierKeywordsAmbiguous1RolesAndLabels();
					}
					break;
				case 3:
					{
					setState(8340);
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 4:
					{
					setState(8341);
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 5:
					{
					setState(8342);
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsAmbiguous1RolesAndLabelsContext extends ParserRuleContext {
		public TerminalNode EXECUTE_SYMBOL() { return getToken(MySQLParser.EXECUTE_SYMBOL, 0); }
		public TerminalNode RESTART_SYMBOL() { return getToken(MySQLParser.RESTART_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous1RolesAndLabels; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() throws RecognitionException {
		IdentifierKeywordsAmbiguous1RolesAndLabelsContext _localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_identifierKeywordsAmbiguous1RolesAndLabels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8347);
			_la = _input.LA(1);
			if ( !(_la==EXECUTE_SYMBOL || _la==SHUTDOWN_SYMBOL || _la==RESTART_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsAmbiguous2LabelsContext extends ParserRuleContext {
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode BYTE_SYMBOL() { return getToken(MySQLParser.BYTE_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode CLONE_SYMBOL() { return getToken(MySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode HELP_SYMBOL() { return getToken(MySQLParser.HELP_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public TerminalNode INSTALL_SYMBOL() { return getToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public TerminalNode RESET_SYMBOL() { return getToken(MySQLParser.RESET_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public TerminalNode SIGNED_SYMBOL() { return getToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode UNICODE_SYMBOL() { return getToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public TerminalNode XA_SYMBOL() { return getToken(MySQLParser.XA_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous2LabelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous2Labels; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentifierKeywordsAmbiguous2Labels(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentifierKeywordsAmbiguous2Labels(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentifierKeywordsAmbiguous2Labels(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() throws RecognitionException {
		IdentifierKeywordsAmbiguous2LabelsContext _localctx = new IdentifierKeywordsAmbiguous2LabelsContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_identifierKeywordsAmbiguous2Labels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8349);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASCII_SYMBOL) | (1L << BEGIN_SYMBOL) | (1L << BYTE_SYMBOL) | (1L << CACHE_SYMBOL) | (1L << CHARSET_SYMBOL) | (1L << CHECKSUM_SYMBOL))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (COMMENT_SYMBOL - 75)) | (1L << (COMMIT_SYMBOL - 75)) | (1L << (CONTAINS_SYMBOL - 75)) | (1L << (DEALLOCATE_SYMBOL - 75)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (DO_SYMBOL - 147)) | (1L << (END_SYMBOL - 147)) | (1L << (FLUSH_SYMBOL - 147)) | (1L << (FOLLOWS_SYMBOL - 147)))) != 0) || ((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (HANDLER_SYMBOL - 219)) | (1L << (HELP_SYMBOL - 219)) | (1L << (IMPORT_SYMBOL - 219)) | (1L << (INSTALL_SYMBOL - 219)) | (1L << (LANGUAGE_SYMBOL - 219)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (NO_SYMBOL - 373)) | (1L << (PRECEDES_SYMBOL - 373)) | (1L << (PREPARE_SYMBOL - 373)))) != 0) || ((((_la - 455)) & ~0x3f) == 0 && ((1L << (_la - 455)) & ((1L << (REPAIR_SYMBOL - 455)) | (1L << (RESET_SYMBOL - 455)) | (1L << (ROLLBACK_SYMBOL - 455)) | (1L << (SAVEPOINT_SYMBOL - 455)) | (1L << (SIGNED_SYMBOL - 455)) | (1L << (SLAVE_SYMBOL - 455)))) != 0) || ((((_la - 543)) & ~0x3f) == 0 && ((1L << (_la - 543)) & ((1L << (START_SYMBOL - 543)) | (1L << (STOP_SYMBOL - 543)) | (1L << (TRUNCATE_SYMBOL - 543)) | (1L << (UNICODE_SYMBOL - 543)))) != 0) || _la==UNINSTALL_SYMBOL || _la==XA_SYMBOL || _la==CLONE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelKeywordContext extends ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return getRuleContext(RoleOrLabelKeywordContext.class,0);
		}
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return getRuleContext(IdentifierKeywordsAmbiguous3RolesContext.class,0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return getRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext.class,0);
		}
		public LabelKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLabelKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLabelKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLabelKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabelKeywordContext labelKeyword() throws RecognitionException {
		LabelKeywordContext _localctx = new LabelKeywordContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_labelKeyword);
		try {
			setState(8369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8351);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(8362);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1113,_ctx) ) {
				case 1:
					{
					setState(8352);
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					setState(8353);
					match(EVENT_SYMBOL);
					}
					break;
				case 3:
					{
					setState(8354);
					match(FILE_SYMBOL);
					}
					break;
				case 4:
					{
					setState(8355);
					match(NONE_SYMBOL);
					}
					break;
				case 5:
					{
					setState(8356);
					match(PROCESS_SYMBOL);
					}
					break;
				case 6:
					{
					setState(8357);
					match(PROXY_SYMBOL);
					}
					break;
				case 7:
					{
					setState(8358);
					match(RELOAD_SYMBOL);
					}
					break;
				case 8:
					{
					setState(8359);
					match(REPLICATION_SYMBOL);
					}
					break;
				case 9:
					{
					setState(8360);
					match(RESOURCE_SYMBOL);
					}
					break;
				case 10:
					{
					setState(8361);
					match(SUPER_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8367);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1114,_ctx) ) {
				case 1:
					{
					setState(8364);
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					setState(8365);
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 3:
					{
					setState(8366);
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsAmbiguous3RolesContext extends ParserRuleContext {
		public TerminalNode EVENT_SYMBOL() { return getToken(MySQLParser.EVENT_SYMBOL, 0); }
		public TerminalNode FILE_SYMBOL() { return getToken(MySQLParser.FILE_SYMBOL, 0); }
		public TerminalNode NONE_SYMBOL() { return getToken(MySQLParser.NONE_SYMBOL, 0); }
		public TerminalNode PROCESS_SYMBOL() { return getToken(MySQLParser.PROCESS_SYMBOL, 0); }
		public TerminalNode PROXY_SYMBOL() { return getToken(MySQLParser.PROXY_SYMBOL, 0); }
		public TerminalNode RELOAD_SYMBOL() { return getToken(MySQLParser.RELOAD_SYMBOL, 0); }
		public TerminalNode REPLICATION_SYMBOL() { return getToken(MySQLParser.REPLICATION_SYMBOL, 0); }
		public TerminalNode RESOURCE_SYMBOL() { return getToken(MySQLParser.RESOURCE_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous3RolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous3Roles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentifierKeywordsAmbiguous3Roles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentifierKeywordsAmbiguous3Roles(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentifierKeywordsAmbiguous3Roles(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() throws RecognitionException {
		IdentifierKeywordsAmbiguous3RolesContext _localctx = new IdentifierKeywordsAmbiguous3RolesContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_identifierKeywordsAmbiguous3Roles);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8371);
			_la = _input.LA(1);
			if ( !(_la==EVENT_SYMBOL || _la==FILE_SYMBOL || ((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & ((1L << (NONE_SYMBOL - 369)) | (1L << (PROCESS_SYMBOL - 369)) | (1L << (PROXY_SYMBOL - 369)))) != 0) || _la==RELOAD_SYMBOL || _la==REPLICATION_SYMBOL || _la==SUPER_SYMBOL || _la==RESOURCE_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsUnambiguousContext extends ParserRuleContext {
		public TerminalNode ACTION_SYMBOL() { return getToken(MySQLParser.ACTION_SYMBOL, 0); }
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode ACTIVE_SYMBOL() { return getToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode ADMIN_SYMBOL() { return getToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode AGAINST_SYMBOL() { return getToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MySQLParser.ANY_SYMBOL, 0); }
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode BIT_SYMBOL() { return getToken(MySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BLOCK_SYMBOL() { return getToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BTREE_SYMBOL() { return getToken(MySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public TerminalNode CIPHER_SYMBOL() { return getToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode CODE_SYMBOL() { return getToken(MySQLParser.CODE_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode DEFINITION_SYMBOL() { return getToken(MySQLParser.DEFINITION_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode DESCRIPTION_SYMBOL() { return getToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MySQLParser.ENDS_SYMBOL, 0); }
		public TerminalNode ENFORCED_SYMBOL() { return getToken(MySQLParser.ENFORCED_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ENUM_SYMBOL() { return getToken(MySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public TerminalNode EVENTS_SYMBOL() { return getToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public TerminalNode EVERY_SYMBOL() { return getToken(MySQLParser.EVERY_SYMBOL, 0); }
		public TerminalNode EXCHANGE_SYMBOL() { return getToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public TerminalNode EXPIRE_SYMBOL() { return getToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MySQLParser.FILTER_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode FOUND_SYMBOL() { return getToken(MySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public TerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode HOST_SYMBOL() { return getToken(MySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public TerminalNode INACTIVE_SYMBOL() { return getToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MySQLParser.IO_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode LOCKS_SYMBOL() { return getToken(MySQLParser.LOCKS_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode NETWORK_NAMESPACE_SYMBOL() { return getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode MASTER_SERVER_ID_SYMBOL() { return getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode MODIFY_SYMBOL() { return getToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode MUTEX_SYMBOL() { return getToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public TerminalNode NAMES_SYMBOL() { return getToken(MySQLParser.NAMES_SYMBOL, 0); }
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode NDBCLUSTER_SYMBOL() { return getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
		public TerminalNode NESTED_SYMBOL() { return getToken(MySQLParser.NESTED_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode NEW_SYMBOL() { return getToken(MySQLParser.NEW_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TerminalNode NULLS_SYMBOL() { return getToken(MySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public TerminalNode OJ_SYMBOL() { return getToken(MySQLParser.OJ_SYMBOL, 0); }
		public TerminalNode OLD_SYMBOL() { return getToken(MySQLParser.OLD_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode OPTIONAL_SYMBOL() { return getToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public TerminalNode ORGANIZATION_SYMBOL() { return getToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MySQLParser.OWNER_SYMBOL, 0); }
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MySQLParser.PARSER_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode PATH_SYMBOL() { return getToken(MySQLParser.PATH_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MySQLParser.PHASE_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode PORT_SYMBOL() { return getToken(MySQLParser.PORT_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode READ_ONLY_SYMBOL() { return getToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public TerminalNode REBUILD_SYMBOL() { return getToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode REFERENCE_SYMBOL() { return getToken(MySQLParser.REFERENCE_SYMBOL, 0); }
		public TerminalNode RELAY_SYMBOL() { return getToken(MySQLParser.RELAY_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public TerminalNode REMOVE_SYMBOL() { return getToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode RESTORE_SYMBOL() { return getToken(MySQLParser.RESTORE_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode RETAIN_SYMBOL() { return getToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MySQLParser.REUSE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode SECONDARY_ENGINE_SYMBOL() { return getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public TerminalNode SECONDARY_LOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public TerminalNode SECONDARY_SYMBOL() { return getToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public TerminalNode SECONDARY_UNLOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public TerminalNode SKIP_SYMBOL() { return getToken(MySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MySQLParser.SLOW_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public TerminalNode SRID_SYMBOL() { return getToken(MySQLParser.SRID_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MySQLParser.STACKED_SYMBOL, 0); }
		public TerminalNode STARTS_SYMBOL() { return getToken(MySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode STRING_SYMBOL() { return getToken(MySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_ADD_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_DIFF_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode TYPES_SYMBOL() { return getToken(MySQLParser.TYPES_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public TerminalNode VALIDATION_SYMBOL() { return getToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public TerminalNode VCPU_SYMBOL() { return getToken(MySQLParser.VCPU_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode WITHOUT_SYMBOL() { return getToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MySQLParser.X509_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MySQLParser.XID_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MySQLParser.XML_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode ARRAY_SYMBOL() { return getToken(MySQLParser.ARRAY_SYMBOL, 0); }
		public TerminalNode FAILED_LOGIN_ATTEMPTS_SYMBOL() { return getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0); }
		public TerminalNode MEMBER_SYMBOL() { return getToken(MySQLParser.MEMBER_SYMBOL, 0); }
		public TerminalNode OFF_SYMBOL() { return getToken(MySQLParser.OFF_SYMBOL, 0); }
		public TerminalNode PASSWORD_LOCK_TIME_SYMBOL() { return getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0); }
		public TerminalNode RANDOM_SYMBOL() { return getToken(MySQLParser.RANDOM_SYMBOL, 0); }
		public TerminalNode REQUIRE_ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() { return getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0); }
		public TerminalNode STREAM_SYMBOL() { return getToken(MySQLParser.STREAM_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsUnambiguous; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentifierKeywordsUnambiguous(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentifierKeywordsUnambiguous(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentifierKeywordsUnambiguous(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() throws RecognitionException {
		IdentifierKeywordsUnambiguousContext _localctx = new IdentifierKeywordsUnambiguousContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_identifierKeywordsUnambiguous);
		int _la;
		try {
			setState(8376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1116,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8373);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT_SYMBOL) | (1L << ACTION_SYMBOL) | (1L << ADDDATE_SYMBOL) | (1L << AFTER_SYMBOL) | (1L << AGAINST_SYMBOL) | (1L << AGGREGATE_SYMBOL) | (1L << ALGORITHM_SYMBOL) | (1L << ALWAYS_SYMBOL) | (1L << ANY_SYMBOL) | (1L << AT_SYMBOL) | (1L << AUTOEXTEND_SIZE_SYMBOL) | (1L << AUTO_INCREMENT_SYMBOL) | (1L << AVG_ROW_LENGTH_SYMBOL) | (1L << AVG_SYMBOL) | (1L << BACKUP_SYMBOL) | (1L << BINLOG_SYMBOL) | (1L << BIT_SYMBOL) | (1L << BLOCK_SYMBOL) | (1L << BOOLEAN_SYMBOL) | (1L << BOOL_SYMBOL) | (1L << BTREE_SYMBOL) | (1L << CASCADED_SYMBOL) | (1L << CATALOG_NAME_SYMBOL) | (1L << CHAIN_SYMBOL) | (1L << CHANGED_SYMBOL) | (1L << CHANNEL_SYMBOL) | (1L << CIPHER_SYMBOL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS_ORIGIN_SYMBOL - 64)) | (1L << (CLIENT_SYMBOL - 64)) | (1L << (CLOSE_SYMBOL - 64)) | (1L << (COALESCE_SYMBOL - 64)) | (1L << (CODE_SYMBOL - 64)) | (1L << (COLLATION_SYMBOL - 64)) | (1L << (COLUMNS_SYMBOL - 64)) | (1L << (COLUMN_NAME_SYMBOL - 64)) | (1L << (COLUMN_FORMAT_SYMBOL - 64)) | (1L << (COMMITTED_SYMBOL - 64)) | (1L << (COMPACT_SYMBOL - 64)) | (1L << (COMPLETION_SYMBOL - 64)) | (1L << (COMPRESSED_SYMBOL - 64)) | (1L << (COMPRESSION_SYMBOL - 64)) | (1L << (CONCURRENT_SYMBOL - 64)) | (1L << (CONNECTION_SYMBOL - 64)) | (1L << (CONSISTENT_SYMBOL - 64)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 64)) | (1L << (CONSTRAINT_NAME_SYMBOL - 64)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 64)) | (1L << (CONTEXT_SYMBOL - 64)) | (1L << (CPU_SYMBOL - 64)) | (1L << (CURRENT_SYMBOL - 64)) | (1L << (CURSOR_NAME_SYMBOL - 64)) | (1L << (DATAFILE_SYMBOL - 64)) | (1L << (DATA_SYMBOL - 64)) | (1L << (DATETIME_SYMBOL - 64)) | (1L << (DATE_SYMBOL - 64)) | (1L << (DAY_SYMBOL - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULT_AUTH_SYMBOL - 129)) | (1L << (DEFINER_SYMBOL - 129)) | (1L << (DELAY_KEY_WRITE_SYMBOL - 129)) | (1L << (DIAGNOSTICS_SYMBOL - 129)) | (1L << (DIRECTORY_SYMBOL - 129)) | (1L << (DISABLE_SYMBOL - 129)) | (1L << (DISCARD_SYMBOL - 129)) | (1L << (DISK_SYMBOL - 129)) | (1L << (DUMPFILE_SYMBOL - 129)) | (1L << (DUPLICATE_SYMBOL - 129)) | (1L << (DYNAMIC_SYMBOL - 129)) | (1L << (ENABLE_SYMBOL - 129)) | (1L << (ENCRYPTION_SYMBOL - 129)) | (1L << (ENDS_SYMBOL - 129)) | (1L << (ENGINES_SYMBOL - 129)) | (1L << (ENGINE_SYMBOL - 129)) | (1L << (ENUM_SYMBOL - 129)) | (1L << (ERROR_SYMBOL - 129)) | (1L << (ERRORS_SYMBOL - 129)) | (1L << (ESCAPE_SYMBOL - 129)) | (1L << (EVENTS_SYMBOL - 129)) | (1L << (EVERY_SYMBOL - 129)) | (1L << (EXCHANGE_SYMBOL - 129)) | (1L << (EXPANSION_SYMBOL - 129)) | (1L << (EXPIRE_SYMBOL - 129)) | (1L << (EXPORT_SYMBOL - 129)) | (1L << (EXTENDED_SYMBOL - 129)) | (1L << (EXTENT_SIZE_SYMBOL - 129)) | (1L << (FAST_SYMBOL - 129)) | (1L << (FAULTS_SYMBOL - 129)) | (1L << (FILE_BLOCK_SIZE_SYMBOL - 129)) | (1L << (FILTER_SYMBOL - 129)) | (1L << (FIRST_SYMBOL - 129)) | (1L << (FIXED_SYMBOL - 129)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (FORMAT_SYMBOL - 201)) | (1L << (FOUND_SYMBOL - 201)) | (1L << (FULL_SYMBOL - 201)) | (1L << (GENERAL_SYMBOL - 201)) | (1L << (GROUP_REPLICATION_SYMBOL - 201)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 201)) | (1L << (GEOMETRY_SYMBOL - 201)) | (1L << (GET_FORMAT_SYMBOL - 201)) | (1L << (GRANTS_SYMBOL - 201)) | (1L << (HASH_SYMBOL - 201)) | (1L << (HOST_SYMBOL - 201)) | (1L << (HOSTS_SYMBOL - 201)) | (1L << (HOUR_SYMBOL - 201)) | (1L << (IDENTIFIED_SYMBOL - 201)) | (1L << (IGNORE_SERVER_IDS_SYMBOL - 201)) | (1L << (INDEXES_SYMBOL - 201)) | (1L << (INITIAL_SIZE_SYMBOL - 201)) | (1L << (INSERT_METHOD_SYMBOL - 201)) | (1L << (INSTANCE_SYMBOL - 201)) | (1L << (INVOKER_SYMBOL - 201)) | (1L << (IO_SYMBOL - 201)) | (1L << (IPC_SYMBOL - 201)) | (1L << (ISOLATION_SYMBOL - 201)) | (1L << (ISSUER_SYMBOL - 201)) | (1L << (JSON_SYMBOL - 201)) | (1L << (KEY_BLOCK_SIZE_SYMBOL - 201)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (LAST_SYMBOL - 268)) | (1L << (LEAVES_SYMBOL - 268)) | (1L << (LESS_SYMBOL - 268)) | (1L << (LEVEL_SYMBOL - 268)) | (1L << (LINESTRING_SYMBOL - 268)) | (1L << (LIST_SYMBOL - 268)) | (1L << (LOCKS_SYMBOL - 268)) | (1L << (LOGFILE_SYMBOL - 268)) | (1L << (LOGS_SYMBOL - 268)) | (1L << (MASTER_AUTO_POSITION_SYMBOL - 268)) | (1L << (MASTER_CONNECT_RETRY_SYMBOL - 268)) | (1L << (MASTER_DELAY_SYMBOL - 268)) | (1L << (MASTER_HOST_SYMBOL - 268)) | (1L << (MASTER_LOG_FILE_SYMBOL - 268)) | (1L << (MASTER_LOG_POS_SYMBOL - 268)) | (1L << (MASTER_PASSWORD_SYMBOL - 268)) | (1L << (MASTER_PORT_SYMBOL - 268)) | (1L << (MASTER_RETRY_COUNT_SYMBOL - 268)) | (1L << (MASTER_SERVER_ID_SYMBOL - 268)) | (1L << (MASTER_SSL_CAPATH_SYMBOL - 268)) | (1L << (MASTER_SSL_CA_SYMBOL - 268)) | (1L << (MASTER_SSL_CERT_SYMBOL - 268)) | (1L << (MASTER_SSL_CIPHER_SYMBOL - 268)) | (1L << (MASTER_SSL_CRL_SYMBOL - 268)) | (1L << (MASTER_SSL_CRLPATH_SYMBOL - 268)) | (1L << (MASTER_SSL_KEY_SYMBOL - 268)) | (1L << (MASTER_SSL_SYMBOL - 268)) | (1L << (MASTER_SYMBOL - 268)) | (1L << (MASTER_TLS_VERSION_SYMBOL - 268)) | (1L << (MASTER_USER_SYMBOL - 268)) | (1L << (MASTER_HEARTBEAT_PERIOD_SYMBOL - 268)) | (1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_ROWS_SYMBOL - 268)) | (1L << (MAX_SIZE_SYMBOL - 268)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 268)))) != 0) || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & ((1L << (MEDIUM_SYMBOL - 333)) | (1L << (MEMORY_SYMBOL - 333)) | (1L << (MERGE_SYMBOL - 333)) | (1L << (MESSAGE_TEXT_SYMBOL - 333)) | (1L << (MICROSECOND_SYMBOL - 333)) | (1L << (MIGRATE_SYMBOL - 333)) | (1L << (MINUTE_SYMBOL - 333)) | (1L << (MIN_ROWS_SYMBOL - 333)) | (1L << (MODE_SYMBOL - 333)) | (1L << (MODIFY_SYMBOL - 333)) | (1L << (MONTH_SYMBOL - 333)) | (1L << (MULTILINESTRING_SYMBOL - 333)) | (1L << (MULTIPOINT_SYMBOL - 333)) | (1L << (MULTIPOLYGON_SYMBOL - 333)) | (1L << (MUTEX_SYMBOL - 333)) | (1L << (MYSQL_ERRNO_SYMBOL - 333)) | (1L << (NAMES_SYMBOL - 333)) | (1L << (NAME_SYMBOL - 333)) | (1L << (NATIONAL_SYMBOL - 333)) | (1L << (NCHAR_SYMBOL - 333)) | (1L << (NDBCLUSTER_SYMBOL - 333)) | (1L << (NEVER_SYMBOL - 333)) | (1L << (NEW_SYMBOL - 333)) | (1L << (NEXT_SYMBOL - 333)) | (1L << (NODEGROUP_SYMBOL - 333)) | (1L << (NO_WAIT_SYMBOL - 333)) | (1L << (NUMBER_SYMBOL - 333)) | (1L << (NVARCHAR_SYMBOL - 333)) | (1L << (OFFSET_SYMBOL - 333)) | (1L << (ONE_SYMBOL - 333)) | (1L << (ONLY_SYMBOL - 333)) | (1L << (OPEN_SYMBOL - 333)) | (1L << (OPTIONS_SYMBOL - 333)))) != 0) || ((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (OWNER_SYMBOL - 398)) | (1L << (PACK_KEYS_SYMBOL - 398)) | (1L << (PAGE_SYMBOL - 398)) | (1L << (PARSER_SYMBOL - 398)) | (1L << (PARTIAL_SYMBOL - 398)) | (1L << (PARTITIONING_SYMBOL - 398)) | (1L << (PARTITIONS_SYMBOL - 398)) | (1L << (PASSWORD_SYMBOL - 398)) | (1L << (PHASE_SYMBOL - 398)) | (1L << (PLUGINS_SYMBOL - 398)) | (1L << (PLUGIN_DIR_SYMBOL - 398)) | (1L << (PLUGIN_SYMBOL - 398)) | (1L << (POINT_SYMBOL - 398)) | (1L << (POLYGON_SYMBOL - 398)) | (1L << (PORT_SYMBOL - 398)) | (1L << (PRESERVE_SYMBOL - 398)) | (1L << (PREV_SYMBOL - 398)) | (1L << (PRIVILEGES_SYMBOL - 398)) | (1L << (PROCESSLIST_SYMBOL - 398)) | (1L << (PROFILE_SYMBOL - 398)) | (1L << (PROFILES_SYMBOL - 398)) | (1L << (QUARTER_SYMBOL - 398)) | (1L << (QUERY_SYMBOL - 398)) | (1L << (QUICK_SYMBOL - 398)) | (1L << (READ_ONLY_SYMBOL - 398)) | (1L << (REBUILD_SYMBOL - 398)) | (1L << (RECOVER_SYMBOL - 398)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 398)) | (1L << (REDUNDANT_SYMBOL - 398)) | (1L << (RELAY_SYMBOL - 398)) | (1L << (RELAYLOG_SYMBOL - 398)) | (1L << (RELAY_LOG_FILE_SYMBOL - 398)) | (1L << (RELAY_LOG_POS_SYMBOL - 398)) | (1L << (RELAY_THREAD_SYMBOL - 398)) | (1L << (REMOVE_SYMBOL - 398)) | (1L << (REORGANIZE_SYMBOL - 398)) | (1L << (REPEATABLE_SYMBOL - 398)) | (1L << (REPLICATE_DO_DB_SYMBOL - 398)) | (1L << (REPLICATE_IGNORE_DB_SYMBOL - 398)))) != 0) || ((((_la - 462)) & ~0x3f) == 0 && ((1L << (_la - 462)) & ((1L << (REPLICATE_DO_TABLE_SYMBOL - 462)) | (1L << (REPLICATE_IGNORE_TABLE_SYMBOL - 462)) | (1L << (REPLICATE_WILD_DO_TABLE_SYMBOL - 462)) | (1L << (REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 462)) | (1L << (REPLICATE_REWRITE_DB_SYMBOL - 462)) | (1L << (RESTORE_SYMBOL - 462)) | (1L << (RESUME_SYMBOL - 462)) | (1L << (RETURNED_SQLSTATE_SYMBOL - 462)) | (1L << (RETURNS_SYMBOL - 462)) | (1L << (REVERSE_SYMBOL - 462)) | (1L << (ROLLUP_SYMBOL - 462)) | (1L << (ROTATE_SYMBOL - 462)) | (1L << (ROUTINE_SYMBOL - 462)) | (1L << (ROW_COUNT_SYMBOL - 462)) | (1L << (ROW_FORMAT_SYMBOL - 462)) | (1L << (RTREE_SYMBOL - 462)) | (1L << (SCHEDULE_SYMBOL - 462)) | (1L << (SCHEMA_NAME_SYMBOL - 462)) | (1L << (SECOND_SYMBOL - 462)) | (1L << (SECURITY_SYMBOL - 462)) | (1L << (SERIALIZABLE_SYMBOL - 462)) | (1L << (SERIAL_SYMBOL - 462)) | (1L << (SERVER_SYMBOL - 462)) | (1L << (SHARE_SYMBOL - 462)) | (1L << (SIMPLE_SYMBOL - 462)) | (1L << (SLOW_SYMBOL - 462)) | (1L << (SNAPSHOT_SYMBOL - 462)) | (1L << (SOCKET_SYMBOL - 462)) | (1L << (SONAME_SYMBOL - 462)) | (1L << (SOUNDS_SYMBOL - 462)) | (1L << (SOURCE_SYMBOL - 462)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (SQL_AFTER_GTIDS_SYMBOL - 528)) | (1L << (SQL_AFTER_MTS_GAPS_SYMBOL - 528)) | (1L << (SQL_BEFORE_GTIDS_SYMBOL - 528)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 528)) | (1L << (SQL_NO_CACHE_SYMBOL - 528)) | (1L << (SQL_THREAD_SYMBOL - 528)) | (1L << (STACKED_SYMBOL - 528)) | (1L << (STARTS_SYMBOL - 528)) | (1L << (STATS_AUTO_RECALC_SYMBOL - 528)) | (1L << (STATS_PERSISTENT_SYMBOL - 528)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 528)) | (1L << (STATUS_SYMBOL - 528)) | (1L << (STORAGE_SYMBOL - 528)) | (1L << (STRING_SYMBOL - 528)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 528)) | (1L << (SUBDATE_SYMBOL - 528)) | (1L << (SUBJECT_SYMBOL - 528)) | (1L << (SUBPARTITIONS_SYMBOL - 528)) | (1L << (SUBPARTITION_SYMBOL - 528)) | (1L << (SUSPEND_SYMBOL - 528)) | (1L << (SWAPS_SYMBOL - 528)) | (1L << (SWITCHES_SYMBOL - 528)) | (1L << (TABLES_SYMBOL - 528)) | (1L << (TABLESPACE_SYMBOL - 528)) | (1L << (TABLE_CHECKSUM_SYMBOL - 528)) | (1L << (TABLE_NAME_SYMBOL - 528)) | (1L << (TEMPORARY_SYMBOL - 528)) | (1L << (TEMPTABLE_SYMBOL - 528)) | (1L << (TEXT_SYMBOL - 528)) | (1L << (THAN_SYMBOL - 528)) | (1L << (TIMESTAMP_SYMBOL - 528)) | (1L << (TIMESTAMP_ADD_SYMBOL - 528)) | (1L << (TIMESTAMP_DIFF_SYMBOL - 528)) | (1L << (TIME_SYMBOL - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (TRANSACTION_SYMBOL - 592)) | (1L << (TRIGGERS_SYMBOL - 592)) | (1L << (TYPES_SYMBOL - 592)) | (1L << (TYPE_SYMBOL - 592)) | (1L << (UNCOMMITTED_SYMBOL - 592)) | (1L << (UNDEFINED_SYMBOL - 592)) | (1L << (UNDOFILE_SYMBOL - 592)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 592)) | (1L << (UNKNOWN_SYMBOL - 592)) | (1L << (UNTIL_SYMBOL - 592)) | (1L << (UPGRADE_SYMBOL - 592)) | (1L << (USER_RESOURCES_SYMBOL - 592)) | (1L << (USER_SYMBOL - 592)) | (1L << (USE_FRM_SYMBOL - 592)) | (1L << (VALIDATION_SYMBOL - 592)) | (1L << (VALUE_SYMBOL - 592)) | (1L << (VARIABLES_SYMBOL - 592)) | (1L << (VIEW_SYMBOL - 592)) | (1L << (WAIT_SYMBOL - 592)) | (1L << (WARNINGS_SYMBOL - 592)) | (1L << (WEEK_SYMBOL - 592)) | (1L << (WEIGHT_STRING_SYMBOL - 592)) | (1L << (WITHOUT_SYMBOL - 592)) | (1L << (WORK_SYMBOL - 592)) | (1L << (WRAPPER_SYMBOL - 592)) | (1L << (X509_SYMBOL - 592)) | (1L << (XID_SYMBOL - 592)) | (1L << (XML_SYMBOL - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (YEAR_SYMBOL - 656)) | (1L << (ROLE_SYMBOL - 656)) | (1L << (ADMIN_SYMBOL - 656)) | (1L << (INVISIBLE_SYMBOL - 656)) | (1L << (VISIBLE_SYMBOL - 656)) | (1L << (COMPONENT_SYMBOL - 656)) | (1L << (SKIP_SYMBOL - 656)) | (1L << (LOCKED_SYMBOL - 656)) | (1L << (NOWAIT_SYMBOL - 656)) | (1L << (HISTOGRAM_SYMBOL - 656)) | (1L << (BUCKETS_SYMBOL - 656)) | (1L << (EXCLUDE_SYMBOL - 656)) | (1L << (FOLLOWING_SYMBOL - 656)) | (1L << (NULLS_SYMBOL - 656)) | (1L << (OTHERS_SYMBOL - 656)) | (1L << (PRECEDING_SYMBOL - 656)) | (1L << (RESPECT_SYMBOL - 656)) | (1L << (TIES_SYMBOL - 656)) | (1L << (UNBOUNDED_SYMBOL - 656)) | (1L << (NESTED_SYMBOL - 656)) | (1L << (ORDINALITY_SYMBOL - 656)) | (1L << (PATH_SYMBOL - 656)) | (1L << (HISTORY_SYMBOL - 656)) | (1L << (REUSE_SYMBOL - 656)) | (1L << (SRID_SYMBOL - 656)) | (1L << (THREAD_PRIORITY_SYMBOL - 656)) | (1L << (VCPU_SYMBOL - 656)) | (1L << (MASTER_PUBLIC_KEY_PATH_SYMBOL - 656)) | (1L << (GET_MASTER_PUBLIC_KEY_SYMBOL - 656)) | (1L << (DEFINITION_SYMBOL - 656)) | (1L << (DESCRIPTION_SYMBOL - 656)) | (1L << (ORGANIZATION_SYMBOL - 656)) | (1L << (REFERENCE_SYMBOL - 656)) | (1L << (OPTIONAL_SYMBOL - 656)))) != 0) || ((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (SECONDARY_SYMBOL - 720)) | (1L << (SECONDARY_ENGINE_SYMBOL - 720)) | (1L << (SECONDARY_LOAD_SYMBOL - 720)) | (1L << (SECONDARY_UNLOAD_SYMBOL - 720)) | (1L << (ACTIVE_SYMBOL - 720)) | (1L << (INACTIVE_SYMBOL - 720)) | (1L << (RETAIN_SYMBOL - 720)) | (1L << (OLD_SYMBOL - 720)) | (1L << (NETWORK_NAMESPACE_SYMBOL - 720)) | (1L << (ENFORCED_SYMBOL - 720)) | (1L << (OJ_SYMBOL - 720)) | (1L << (MASTER_COMPRESSION_ALGORITHM_SYMBOL - 720)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 720)) | (1L << (PRIVILEGE_CHECKS_USER_SYMBOL - 720)) | (1L << (MASTER_TLS_CIPHERSUITES_SYMBOL - 720)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8374);
				if (!(serverVersion >= 80019)) throw new FailedPredicateException(this, "serverVersion >= 80019");
				setState(8375);
				_la = _input.LA(1);
				if ( !(_la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL || ((((_la - 731)) & ~0x3f) == 0 && ((1L << (_la - 731)) & ((1L << (ARRAY_SYMBOL - 731)) | (1L << (MEMBER_SYMBOL - 731)) | (1L << (RANDOM_SYMBOL - 731)) | (1L << (MASTER_COMPRESSION_ALGORITHM_SYMBOL - 731)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL - 731)) | (1L << (PRIVILEGE_CHECKS_USER_SYMBOL - 731)) | (1L << (MASTER_TLS_CIPHERSUITES_SYMBOL - 731)) | (1L << (REQUIRE_ROW_FORMAT_SYMBOL - 731)) | (1L << (PASSWORD_LOCK_TIME_SYMBOL - 731)) | (1L << (FAILED_LOGIN_ATTEMPTS_SYMBOL - 731)) | (1L << (REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL - 731)) | (1L << (STREAM_SYMBOL - 731)) | (1L << (OFF_SYMBOL - 731)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleKeywordContext extends ParserRuleContext {
		public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return getRuleContext(RoleOrLabelKeywordContext.class,0);
		}
		public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return getRuleContext(RoleOrIdentifierKeywordContext.class,0);
		}
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return getRuleContext(IdentifierKeywordsAmbiguous2LabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return getRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext.class,0);
		}
		public RoleKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleKeywordContext roleKeyword() throws RecognitionException {
		RoleKeywordContext _localctx = new RoleKeywordContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_roleKeyword);
		try {
			setState(8388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8378);
				if (!(serverVersion < 80017)) throw new FailedPredicateException(this, "serverVersion < 80017");
				setState(8381);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1117,_ctx) ) {
				case 1:
					{
					setState(8379);
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					setState(8380);
					roleOrIdentifierKeyword();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8386);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1118,_ctx) ) {
				case 1:
					{
					setState(8383);
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					setState(8384);
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 3:
					{
					setState(8385);
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LValueKeywordContext extends ParserRuleContext {
		public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return getRuleContext(IdentifierKeywordsUnambiguousContext.class,0);
		}
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return getRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return getRuleContext(IdentifierKeywordsAmbiguous2LabelsContext.class,0);
		}
		public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return getRuleContext(IdentifierKeywordsAmbiguous3RolesContext.class,0);
		}
		public LValueKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lValueKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterLValueKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitLValueKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitLValueKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LValueKeywordContext lValueKeyword() throws RecognitionException {
		LValueKeywordContext _localctx = new LValueKeywordContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_lValueKeyword);
		try {
			setState(8394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1120,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8390);
				identifierKeywordsUnambiguous();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8391);
				identifierKeywordsAmbiguous1RolesAndLabels();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8392);
				identifierKeywordsAmbiguous2Labels();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8393);
				identifierKeywordsAmbiguous3Roles();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierKeywordsAmbiguous4SystemVariablesContext extends ParserRuleContext {
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode PERSIST_SYMBOL() { return getToken(MySQLParser.PERSIST_SYMBOL, 0); }
		public TerminalNode PERSIST_ONLY_SYMBOL() { return getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous4SystemVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierKeywordsAmbiguous4SystemVariables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitIdentifierKeywordsAmbiguous4SystemVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() throws RecognitionException {
		IdentifierKeywordsAmbiguous4SystemVariablesContext _localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_identifierKeywordsAmbiguous4SystemVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8396);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrIdentifierKeywordContext extends ParserRuleContext {
		public TerminalNode ACCOUNT_SYMBOL() { return getToken(MySQLParser.ACCOUNT_SYMBOL, 0); }
		public TerminalNode ASCII_SYMBOL() { return getToken(MySQLParser.ASCII_SYMBOL, 0); }
		public TerminalNode ALWAYS_SYMBOL() { return getToken(MySQLParser.ALWAYS_SYMBOL, 0); }
		public TerminalNode BACKUP_SYMBOL() { return getToken(MySQLParser.BACKUP_SYMBOL, 0); }
		public TerminalNode BEGIN_SYMBOL() { return getToken(MySQLParser.BEGIN_SYMBOL, 0); }
		public TerminalNode BYTE_SYMBOL() { return getToken(MySQLParser.BYTE_SYMBOL, 0); }
		public TerminalNode CACHE_SYMBOL() { return getToken(MySQLParser.CACHE_SYMBOL, 0); }
		public TerminalNode CHARSET_SYMBOL() { return getToken(MySQLParser.CHARSET_SYMBOL, 0); }
		public TerminalNode CHECKSUM_SYMBOL() { return getToken(MySQLParser.CHECKSUM_SYMBOL, 0); }
		public TerminalNode CLONE_SYMBOL() { return getToken(MySQLParser.CLONE_SYMBOL, 0); }
		public TerminalNode CLOSE_SYMBOL() { return getToken(MySQLParser.CLOSE_SYMBOL, 0); }
		public TerminalNode COMMENT_SYMBOL() { return getToken(MySQLParser.COMMENT_SYMBOL, 0); }
		public TerminalNode COMMIT_SYMBOL() { return getToken(MySQLParser.COMMIT_SYMBOL, 0); }
		public TerminalNode CONTAINS_SYMBOL() { return getToken(MySQLParser.CONTAINS_SYMBOL, 0); }
		public TerminalNode DEALLOCATE_SYMBOL() { return getToken(MySQLParser.DEALLOCATE_SYMBOL, 0); }
		public TerminalNode DO_SYMBOL() { return getToken(MySQLParser.DO_SYMBOL, 0); }
		public TerminalNode END_SYMBOL() { return getToken(MySQLParser.END_SYMBOL, 0); }
		public TerminalNode FLUSH_SYMBOL() { return getToken(MySQLParser.FLUSH_SYMBOL, 0); }
		public TerminalNode FOLLOWS_SYMBOL() { return getToken(MySQLParser.FOLLOWS_SYMBOL, 0); }
		public TerminalNode FORMAT_SYMBOL() { return getToken(MySQLParser.FORMAT_SYMBOL, 0); }
		public TerminalNode GROUP_REPLICATION_SYMBOL() { return getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0); }
		public TerminalNode HANDLER_SYMBOL() { return getToken(MySQLParser.HANDLER_SYMBOL, 0); }
		public TerminalNode HELP_SYMBOL() { return getToken(MySQLParser.HELP_SYMBOL, 0); }
		public TerminalNode HOST_SYMBOL() { return getToken(MySQLParser.HOST_SYMBOL, 0); }
		public TerminalNode INSTALL_SYMBOL() { return getToken(MySQLParser.INSTALL_SYMBOL, 0); }
		public TerminalNode INVISIBLE_SYMBOL() { return getToken(MySQLParser.INVISIBLE_SYMBOL, 0); }
		public TerminalNode LANGUAGE_SYMBOL() { return getToken(MySQLParser.LANGUAGE_SYMBOL, 0); }
		public TerminalNode NO_SYMBOL() { return getToken(MySQLParser.NO_SYMBOL, 0); }
		public TerminalNode OPEN_SYMBOL() { return getToken(MySQLParser.OPEN_SYMBOL, 0); }
		public TerminalNode OPTIONS_SYMBOL() { return getToken(MySQLParser.OPTIONS_SYMBOL, 0); }
		public TerminalNode OWNER_SYMBOL() { return getToken(MySQLParser.OWNER_SYMBOL, 0); }
		public TerminalNode PARSER_SYMBOL() { return getToken(MySQLParser.PARSER_SYMBOL, 0); }
		public TerminalNode PARTITION_SYMBOL() { return getToken(MySQLParser.PARTITION_SYMBOL, 0); }
		public TerminalNode PORT_SYMBOL() { return getToken(MySQLParser.PORT_SYMBOL, 0); }
		public TerminalNode PRECEDES_SYMBOL() { return getToken(MySQLParser.PRECEDES_SYMBOL, 0); }
		public TerminalNode PREPARE_SYMBOL() { return getToken(MySQLParser.PREPARE_SYMBOL, 0); }
		public TerminalNode REMOVE_SYMBOL() { return getToken(MySQLParser.REMOVE_SYMBOL, 0); }
		public TerminalNode REPAIR_SYMBOL() { return getToken(MySQLParser.REPAIR_SYMBOL, 0); }
		public TerminalNode RESET_SYMBOL() { return getToken(MySQLParser.RESET_SYMBOL, 0); }
		public TerminalNode RESTORE_SYMBOL() { return getToken(MySQLParser.RESTORE_SYMBOL, 0); }
		public TerminalNode ROLE_SYMBOL() { return getToken(MySQLParser.ROLE_SYMBOL, 0); }
		public TerminalNode ROLLBACK_SYMBOL() { return getToken(MySQLParser.ROLLBACK_SYMBOL, 0); }
		public TerminalNode SAVEPOINT_SYMBOL() { return getToken(MySQLParser.SAVEPOINT_SYMBOL, 0); }
		public TerminalNode SECONDARY_SYMBOL() { return getToken(MySQLParser.SECONDARY_SYMBOL, 0); }
		public TerminalNode SECONDARY_ENGINE_SYMBOL() { return getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0); }
		public TerminalNode SECONDARY_LOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0); }
		public TerminalNode SECONDARY_UNLOAD_SYMBOL() { return getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public TerminalNode SECURITY_SYMBOL() { return getToken(MySQLParser.SECURITY_SYMBOL, 0); }
		public TerminalNode SERVER_SYMBOL() { return getToken(MySQLParser.SERVER_SYMBOL, 0); }
		public TerminalNode SIGNED_SYMBOL() { return getToken(MySQLParser.SIGNED_SYMBOL, 0); }
		public TerminalNode SOCKET_SYMBOL() { return getToken(MySQLParser.SOCKET_SYMBOL, 0); }
		public TerminalNode SLAVE_SYMBOL() { return getToken(MySQLParser.SLAVE_SYMBOL, 0); }
		public TerminalNode SONAME_SYMBOL() { return getToken(MySQLParser.SONAME_SYMBOL, 0); }
		public TerminalNode START_SYMBOL() { return getToken(MySQLParser.START_SYMBOL, 0); }
		public TerminalNode STOP_SYMBOL() { return getToken(MySQLParser.STOP_SYMBOL, 0); }
		public TerminalNode TRUNCATE_SYMBOL() { return getToken(MySQLParser.TRUNCATE_SYMBOL, 0); }
		public TerminalNode UNICODE_SYMBOL() { return getToken(MySQLParser.UNICODE_SYMBOL, 0); }
		public TerminalNode UNINSTALL_SYMBOL() { return getToken(MySQLParser.UNINSTALL_SYMBOL, 0); }
		public TerminalNode UPGRADE_SYMBOL() { return getToken(MySQLParser.UPGRADE_SYMBOL, 0); }
		public TerminalNode VISIBLE_SYMBOL() { return getToken(MySQLParser.VISIBLE_SYMBOL, 0); }
		public TerminalNode WRAPPER_SYMBOL() { return getToken(MySQLParser.WRAPPER_SYMBOL, 0); }
		public TerminalNode XA_SYMBOL() { return getToken(MySQLParser.XA_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public RoleOrIdentifierKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrIdentifierKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleOrIdentifierKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleOrIdentifierKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleOrIdentifierKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() throws RecognitionException {
		RoleOrIdentifierKeywordContext _localctx = new RoleOrIdentifierKeywordContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_roleOrIdentifierKeyword);
		int _la;
		try {
			setState(8403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1121,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8398);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCOUNT_SYMBOL) | (1L << ALWAYS_SYMBOL) | (1L << ASCII_SYMBOL) | (1L << BACKUP_SYMBOL) | (1L << BEGIN_SYMBOL) | (1L << BYTE_SYMBOL) | (1L << CACHE_SYMBOL) | (1L << CHARSET_SYMBOL) | (1L << CHECKSUM_SYMBOL))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CLOSE_SYMBOL - 66)) | (1L << (COMMENT_SYMBOL - 66)) | (1L << (COMMIT_SYMBOL - 66)) | (1L << (CONTAINS_SYMBOL - 66)) | (1L << (DEALLOCATE_SYMBOL - 66)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (DO_SYMBOL - 147)) | (1L << (END_SYMBOL - 147)) | (1L << (FLUSH_SYMBOL - 147)) | (1L << (FOLLOWS_SYMBOL - 147)) | (1L << (FORMAT_SYMBOL - 147)) | (1L << (GROUP_REPLICATION_SYMBOL - 147)))) != 0) || ((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (HANDLER_SYMBOL - 219)) | (1L << (HELP_SYMBOL - 219)) | (1L << (HOST_SYMBOL - 219)) | (1L << (INSTALL_SYMBOL - 219)) | (1L << (LANGUAGE_SYMBOL - 219)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (NO_SYMBOL - 373)) | (1L << (OPEN_SYMBOL - 373)) | (1L << (OPTIONS_SYMBOL - 373)) | (1L << (OWNER_SYMBOL - 373)) | (1L << (PARSER_SYMBOL - 373)) | (1L << (PARTITION_SYMBOL - 373)) | (1L << (PORT_SYMBOL - 373)) | (1L << (PRECEDES_SYMBOL - 373)) | (1L << (PREPARE_SYMBOL - 373)))) != 0) || ((((_la - 452)) & ~0x3f) == 0 && ((1L << (_la - 452)) & ((1L << (REMOVE_SYMBOL - 452)) | (1L << (REPAIR_SYMBOL - 452)) | (1L << (RESET_SYMBOL - 452)) | (1L << (RESTORE_SYMBOL - 452)) | (1L << (ROLLBACK_SYMBOL - 452)) | (1L << (SAVEPOINT_SYMBOL - 452)) | (1L << (SECURITY_SYMBOL - 452)) | (1L << (SERVER_SYMBOL - 452)) | (1L << (SIGNED_SYMBOL - 452)) | (1L << (SLAVE_SYMBOL - 452)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (SOCKET_SYMBOL - 519)) | (1L << (SONAME_SYMBOL - 519)) | (1L << (START_SYMBOL - 519)) | (1L << (STOP_SYMBOL - 519)))) != 0) || ((((_la - 597)) & ~0x3f) == 0 && ((1L << (_la - 597)) & ((1L << (TRUNCATE_SYMBOL - 597)) | (1L << (UNICODE_SYMBOL - 597)) | (1L << (UNINSTALL_SYMBOL - 597)) | (1L << (UPGRADE_SYMBOL - 597)) | (1L << (WRAPPER_SYMBOL - 597)) | (1L << (XA_SYMBOL - 597)) | (1L << (ROLE_SYMBOL - 597)))) != 0) || ((((_la - 661)) & ~0x3f) == 0 && ((1L << (_la - 661)) & ((1L << (INVISIBLE_SYMBOL - 661)) | (1L << (VISIBLE_SYMBOL - 661)) | (1L << (CLONE_SYMBOL - 661)) | (1L << (SECONDARY_SYMBOL - 661)) | (1L << (SECONDARY_ENGINE_SYMBOL - 661)) | (1L << (SECONDARY_LOAD_SYMBOL - 661)) | (1L << (SECONDARY_UNLOAD_SYMBOL - 661)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8399);
				if (!(serverVersion >= 50709)) throw new FailedPredicateException(this, "serverVersion >= 50709");
				setState(8400);
				match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8401);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(8402);
				match(IMPORT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleOrLabelKeywordContext extends ParserRuleContext {
		public TerminalNode ACTION_SYMBOL() { return getToken(MySQLParser.ACTION_SYMBOL, 0); }
		public TerminalNode ACTIVE_SYMBOL() { return getToken(MySQLParser.ACTIVE_SYMBOL, 0); }
		public TerminalNode ADDDATE_SYMBOL() { return getToken(MySQLParser.ADDDATE_SYMBOL, 0); }
		public TerminalNode AFTER_SYMBOL() { return getToken(MySQLParser.AFTER_SYMBOL, 0); }
		public TerminalNode AGAINST_SYMBOL() { return getToken(MySQLParser.AGAINST_SYMBOL, 0); }
		public TerminalNode AGGREGATE_SYMBOL() { return getToken(MySQLParser.AGGREGATE_SYMBOL, 0); }
		public TerminalNode ALGORITHM_SYMBOL() { return getToken(MySQLParser.ALGORITHM_SYMBOL, 0); }
		public TerminalNode ANALYSE_SYMBOL() { return getToken(MySQLParser.ANALYSE_SYMBOL, 0); }
		public TerminalNode ANY_SYMBOL() { return getToken(MySQLParser.ANY_SYMBOL, 0); }
		public TerminalNode AT_SYMBOL() { return getToken(MySQLParser.AT_SYMBOL, 0); }
		public TerminalNode AUTHORS_SYMBOL() { return getToken(MySQLParser.AUTHORS_SYMBOL, 0); }
		public TerminalNode AUTO_INCREMENT_SYMBOL() { return getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0); }
		public TerminalNode AUTOEXTEND_SIZE_SYMBOL() { return getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		public TerminalNode AVG_ROW_LENGTH_SYMBOL() { return getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		public TerminalNode AVG_SYMBOL() { return getToken(MySQLParser.AVG_SYMBOL, 0); }
		public TerminalNode BINLOG_SYMBOL() { return getToken(MySQLParser.BINLOG_SYMBOL, 0); }
		public TerminalNode BIT_SYMBOL() { return getToken(MySQLParser.BIT_SYMBOL, 0); }
		public TerminalNode BLOCK_SYMBOL() { return getToken(MySQLParser.BLOCK_SYMBOL, 0); }
		public TerminalNode BOOL_SYMBOL() { return getToken(MySQLParser.BOOL_SYMBOL, 0); }
		public TerminalNode BOOLEAN_SYMBOL() { return getToken(MySQLParser.BOOLEAN_SYMBOL, 0); }
		public TerminalNode BTREE_SYMBOL() { return getToken(MySQLParser.BTREE_SYMBOL, 0); }
		public TerminalNode BUCKETS_SYMBOL() { return getToken(MySQLParser.BUCKETS_SYMBOL, 0); }
		public TerminalNode CASCADED_SYMBOL() { return getToken(MySQLParser.CASCADED_SYMBOL, 0); }
		public TerminalNode CATALOG_NAME_SYMBOL() { return getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0); }
		public TerminalNode CHAIN_SYMBOL() { return getToken(MySQLParser.CHAIN_SYMBOL, 0); }
		public TerminalNode CHANGED_SYMBOL() { return getToken(MySQLParser.CHANGED_SYMBOL, 0); }
		public TerminalNode CHANNEL_SYMBOL() { return getToken(MySQLParser.CHANNEL_SYMBOL, 0); }
		public TerminalNode CIPHER_SYMBOL() { return getToken(MySQLParser.CIPHER_SYMBOL, 0); }
		public TerminalNode CLIENT_SYMBOL() { return getToken(MySQLParser.CLIENT_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode COALESCE_SYMBOL() { return getToken(MySQLParser.COALESCE_SYMBOL, 0); }
		public TerminalNode CODE_SYMBOL() { return getToken(MySQLParser.CODE_SYMBOL, 0); }
		public TerminalNode COLLATION_SYMBOL() { return getToken(MySQLParser.COLLATION_SYMBOL, 0); }
		public TerminalNode COLUMN_NAME_SYMBOL() { return getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0); }
		public TerminalNode COLUMN_FORMAT_SYMBOL() { return getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0); }
		public TerminalNode COLUMNS_SYMBOL() { return getToken(MySQLParser.COLUMNS_SYMBOL, 0); }
		public TerminalNode COMMITTED_SYMBOL() { return getToken(MySQLParser.COMMITTED_SYMBOL, 0); }
		public TerminalNode COMPACT_SYMBOL() { return getToken(MySQLParser.COMPACT_SYMBOL, 0); }
		public TerminalNode COMPLETION_SYMBOL() { return getToken(MySQLParser.COMPLETION_SYMBOL, 0); }
		public TerminalNode COMPONENT_SYMBOL() { return getToken(MySQLParser.COMPONENT_SYMBOL, 0); }
		public TerminalNode COMPRESSED_SYMBOL() { return getToken(MySQLParser.COMPRESSED_SYMBOL, 0); }
		public TerminalNode COMPRESSION_SYMBOL() { return getToken(MySQLParser.COMPRESSION_SYMBOL, 0); }
		public TerminalNode CONCURRENT_SYMBOL() { return getToken(MySQLParser.CONCURRENT_SYMBOL, 0); }
		public TerminalNode CONNECTION_SYMBOL() { return getToken(MySQLParser.CONNECTION_SYMBOL, 0); }
		public TerminalNode CONSISTENT_SYMBOL() { return getToken(MySQLParser.CONSISTENT_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_CATALOG_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		public TerminalNode CONSTRAINT_NAME_SYMBOL() { return getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0); }
		public TerminalNode CONTEXT_SYMBOL() { return getToken(MySQLParser.CONTEXT_SYMBOL, 0); }
		public TerminalNode CONTRIBUTORS_SYMBOL() { return getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0); }
		public TerminalNode CPU_SYMBOL() { return getToken(MySQLParser.CPU_SYMBOL, 0); }
		public TerminalNode CURRENT_SYMBOL() { return getToken(MySQLParser.CURRENT_SYMBOL, 0); }
		public TerminalNode CURSOR_NAME_SYMBOL() { return getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0); }
		public TerminalNode DATA_SYMBOL() { return getToken(MySQLParser.DATA_SYMBOL, 0); }
		public TerminalNode DATAFILE_SYMBOL() { return getToken(MySQLParser.DATAFILE_SYMBOL, 0); }
		public TerminalNode DATETIME_SYMBOL() { return getToken(MySQLParser.DATETIME_SYMBOL, 0); }
		public TerminalNode DATE_SYMBOL() { return getToken(MySQLParser.DATE_SYMBOL, 0); }
		public TerminalNode DAY_SYMBOL() { return getToken(MySQLParser.DAY_SYMBOL, 0); }
		public TerminalNode DEFAULT_AUTH_SYMBOL() { return getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0); }
		public TerminalNode DEFINER_SYMBOL() { return getToken(MySQLParser.DEFINER_SYMBOL, 0); }
		public TerminalNode DELAY_KEY_WRITE_SYMBOL() { return getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		public TerminalNode DES_KEY_FILE_SYMBOL() { return getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0); }
		public TerminalNode DESCRIPTION_SYMBOL() { return getToken(MySQLParser.DESCRIPTION_SYMBOL, 0); }
		public TerminalNode DIAGNOSTICS_SYMBOL() { return getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0); }
		public TerminalNode DIRECTORY_SYMBOL() { return getToken(MySQLParser.DIRECTORY_SYMBOL, 0); }
		public TerminalNode DISABLE_SYMBOL() { return getToken(MySQLParser.DISABLE_SYMBOL, 0); }
		public TerminalNode DISCARD_SYMBOL() { return getToken(MySQLParser.DISCARD_SYMBOL, 0); }
		public TerminalNode DISK_SYMBOL() { return getToken(MySQLParser.DISK_SYMBOL, 0); }
		public TerminalNode DUMPFILE_SYMBOL() { return getToken(MySQLParser.DUMPFILE_SYMBOL, 0); }
		public TerminalNode DUPLICATE_SYMBOL() { return getToken(MySQLParser.DUPLICATE_SYMBOL, 0); }
		public TerminalNode DYNAMIC_SYMBOL() { return getToken(MySQLParser.DYNAMIC_SYMBOL, 0); }
		public TerminalNode ENCRYPTION_SYMBOL() { return getToken(MySQLParser.ENCRYPTION_SYMBOL, 0); }
		public TerminalNode ENDS_SYMBOL() { return getToken(MySQLParser.ENDS_SYMBOL, 0); }
		public TerminalNode ENUM_SYMBOL() { return getToken(MySQLParser.ENUM_SYMBOL, 0); }
		public TerminalNode ENGINE_SYMBOL() { return getToken(MySQLParser.ENGINE_SYMBOL, 0); }
		public TerminalNode ENGINES_SYMBOL() { return getToken(MySQLParser.ENGINES_SYMBOL, 0); }
		public TerminalNode ERROR_SYMBOL() { return getToken(MySQLParser.ERROR_SYMBOL, 0); }
		public TerminalNode ERRORS_SYMBOL() { return getToken(MySQLParser.ERRORS_SYMBOL, 0); }
		public TerminalNode ESCAPE_SYMBOL() { return getToken(MySQLParser.ESCAPE_SYMBOL, 0); }
		public TerminalNode EVENTS_SYMBOL() { return getToken(MySQLParser.EVENTS_SYMBOL, 0); }
		public TerminalNode EVERY_SYMBOL() { return getToken(MySQLParser.EVERY_SYMBOL, 0); }
		public TerminalNode EXCLUDE_SYMBOL() { return getToken(MySQLParser.EXCLUDE_SYMBOL, 0); }
		public TerminalNode EXPANSION_SYMBOL() { return getToken(MySQLParser.EXPANSION_SYMBOL, 0); }
		public TerminalNode EXPORT_SYMBOL() { return getToken(MySQLParser.EXPORT_SYMBOL, 0); }
		public TerminalNode EXTENDED_SYMBOL() { return getToken(MySQLParser.EXTENDED_SYMBOL, 0); }
		public TerminalNode EXTENT_SIZE_SYMBOL() { return getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0); }
		public TerminalNode FAULTS_SYMBOL() { return getToken(MySQLParser.FAULTS_SYMBOL, 0); }
		public TerminalNode FAST_SYMBOL() { return getToken(MySQLParser.FAST_SYMBOL, 0); }
		public TerminalNode FOLLOWING_SYMBOL() { return getToken(MySQLParser.FOLLOWING_SYMBOL, 0); }
		public TerminalNode FOUND_SYMBOL() { return getToken(MySQLParser.FOUND_SYMBOL, 0); }
		public TerminalNode ENABLE_SYMBOL() { return getToken(MySQLParser.ENABLE_SYMBOL, 0); }
		public TerminalNode FULL_SYMBOL() { return getToken(MySQLParser.FULL_SYMBOL, 0); }
		public TerminalNode FILE_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode FILTER_SYMBOL() { return getToken(MySQLParser.FILTER_SYMBOL, 0); }
		public TerminalNode FIRST_SYMBOL() { return getToken(MySQLParser.FIRST_SYMBOL, 0); }
		public TerminalNode FIXED_SYMBOL() { return getToken(MySQLParser.FIXED_SYMBOL, 0); }
		public TerminalNode GENERAL_SYMBOL() { return getToken(MySQLParser.GENERAL_SYMBOL, 0); }
		public TerminalNode GEOMETRY_SYMBOL() { return getToken(MySQLParser.GEOMETRY_SYMBOL, 0); }
		public TerminalNode GEOMETRYCOLLECTION_SYMBOL() { return getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public TerminalNode GET_FORMAT_SYMBOL() { return getToken(MySQLParser.GET_FORMAT_SYMBOL, 0); }
		public TerminalNode GRANTS_SYMBOL() { return getToken(MySQLParser.GRANTS_SYMBOL, 0); }
		public TerminalNode GLOBAL_SYMBOL() { return getToken(MySQLParser.GLOBAL_SYMBOL, 0); }
		public TerminalNode HASH_SYMBOL() { return getToken(MySQLParser.HASH_SYMBOL, 0); }
		public TerminalNode HISTOGRAM_SYMBOL() { return getToken(MySQLParser.HISTOGRAM_SYMBOL, 0); }
		public TerminalNode HISTORY_SYMBOL() { return getToken(MySQLParser.HISTORY_SYMBOL, 0); }
		public TerminalNode HOSTS_SYMBOL() { return getToken(MySQLParser.HOSTS_SYMBOL, 0); }
		public TerminalNode HOUR_SYMBOL() { return getToken(MySQLParser.HOUR_SYMBOL, 0); }
		public TerminalNode IDENTIFIED_SYMBOL() { return getToken(MySQLParser.IDENTIFIED_SYMBOL, 0); }
		public TerminalNode IGNORE_SERVER_IDS_SYMBOL() { return getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		public TerminalNode INVOKER_SYMBOL() { return getToken(MySQLParser.INVOKER_SYMBOL, 0); }
		public TerminalNode INDEXES_SYMBOL() { return getToken(MySQLParser.INDEXES_SYMBOL, 0); }
		public TerminalNode INITIAL_SIZE_SYMBOL() { return getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0); }
		public TerminalNode INSTANCE_SYMBOL() { return getToken(MySQLParser.INSTANCE_SYMBOL, 0); }
		public TerminalNode INACTIVE_SYMBOL() { return getToken(MySQLParser.INACTIVE_SYMBOL, 0); }
		public TerminalNode IO_SYMBOL() { return getToken(MySQLParser.IO_SYMBOL, 0); }
		public TerminalNode IPC_SYMBOL() { return getToken(MySQLParser.IPC_SYMBOL, 0); }
		public TerminalNode ISOLATION_SYMBOL() { return getToken(MySQLParser.ISOLATION_SYMBOL, 0); }
		public TerminalNode ISSUER_SYMBOL() { return getToken(MySQLParser.ISSUER_SYMBOL, 0); }
		public TerminalNode INSERT_METHOD_SYMBOL() { return getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0); }
		public TerminalNode JSON_SYMBOL() { return getToken(MySQLParser.JSON_SYMBOL, 0); }
		public TerminalNode KEY_BLOCK_SIZE_SYMBOL() { return getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		public TerminalNode LAST_SYMBOL() { return getToken(MySQLParser.LAST_SYMBOL, 0); }
		public TerminalNode LEAVES_SYMBOL() { return getToken(MySQLParser.LEAVES_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySQLParser.LESS_SYMBOL, 0); }
		public TerminalNode LEVEL_SYMBOL() { return getToken(MySQLParser.LEVEL_SYMBOL, 0); }
		public TerminalNode LINESTRING_SYMBOL() { return getToken(MySQLParser.LINESTRING_SYMBOL, 0); }
		public TerminalNode LIST_SYMBOL() { return getToken(MySQLParser.LIST_SYMBOL, 0); }
		public TerminalNode LOCAL_SYMBOL() { return getToken(MySQLParser.LOCAL_SYMBOL, 0); }
		public TerminalNode LOCKED_SYMBOL() { return getToken(MySQLParser.LOCKED_SYMBOL, 0); }
		public TerminalNode LOCKS_SYMBOL() { return getToken(MySQLParser.LOCKS_SYMBOL, 0); }
		public TerminalNode LOGFILE_SYMBOL() { return getToken(MySQLParser.LOGFILE_SYMBOL, 0); }
		public TerminalNode LOGS_SYMBOL() { return getToken(MySQLParser.LOGS_SYMBOL, 0); }
		public TerminalNode MAX_ROWS_SYMBOL() { return getToken(MySQLParser.MAX_ROWS_SYMBOL, 0); }
		public TerminalNode MASTER_SYMBOL() { return getToken(MySQLParser.MASTER_SYMBOL, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public TerminalNode MASTER_HOST_SYMBOL() { return getToken(MySQLParser.MASTER_HOST_SYMBOL, 0); }
		public TerminalNode MASTER_PORT_SYMBOL() { return getToken(MySQLParser.MASTER_PORT_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_FILE_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0); }
		public TerminalNode MASTER_LOG_POS_SYMBOL() { return getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0); }
		public TerminalNode MASTER_USER_SYMBOL() { return getToken(MySQLParser.MASTER_USER_SYMBOL, 0); }
		public TerminalNode MASTER_PASSWORD_SYMBOL() { return getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public TerminalNode MASTER_SERVER_ID_SYMBOL() { return getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0); }
		public TerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		public TerminalNode MASTER_RETRY_COUNT_SYMBOL() { return getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		public TerminalNode MASTER_DELAY_SYMBOL() { return getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CA_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CAPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		public TerminalNode MASTER_TLS_VERSION_SYMBOL() { return getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CERT_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CIPHER_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRL_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		public TerminalNode MASTER_SSL_KEY_SYMBOL() { return getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0); }
		public TerminalNode MASTER_AUTO_POSITION_SYMBOL() { return getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_STATEMENT_TIME_SYMBOL() { return getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0); }
		public TerminalNode MAX_SIZE_SYMBOL() { return getToken(MySQLParser.MAX_SIZE_SYMBOL, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		public TerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public TerminalNode MEDIUM_SYMBOL() { return getToken(MySQLParser.MEDIUM_SYMBOL, 0); }
		public TerminalNode MEMORY_SYMBOL() { return getToken(MySQLParser.MEMORY_SYMBOL, 0); }
		public TerminalNode MERGE_SYMBOL() { return getToken(MySQLParser.MERGE_SYMBOL, 0); }
		public TerminalNode MESSAGE_TEXT_SYMBOL() { return getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0); }
		public TerminalNode MICROSECOND_SYMBOL() { return getToken(MySQLParser.MICROSECOND_SYMBOL, 0); }
		public TerminalNode MIGRATE_SYMBOL() { return getToken(MySQLParser.MIGRATE_SYMBOL, 0); }
		public TerminalNode MINUTE_SYMBOL() { return getToken(MySQLParser.MINUTE_SYMBOL, 0); }
		public TerminalNode MIN_ROWS_SYMBOL() { return getToken(MySQLParser.MIN_ROWS_SYMBOL, 0); }
		public TerminalNode MODIFY_SYMBOL() { return getToken(MySQLParser.MODIFY_SYMBOL, 0); }
		public TerminalNode MODE_SYMBOL() { return getToken(MySQLParser.MODE_SYMBOL, 0); }
		public TerminalNode MONTH_SYMBOL() { return getToken(MySQLParser.MONTH_SYMBOL, 0); }
		public TerminalNode MULTILINESTRING_SYMBOL() { return getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0); }
		public TerminalNode MULTIPOINT_SYMBOL() { return getToken(MySQLParser.MULTIPOINT_SYMBOL, 0); }
		public TerminalNode MULTIPOLYGON_SYMBOL() { return getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0); }
		public TerminalNode MUTEX_SYMBOL() { return getToken(MySQLParser.MUTEX_SYMBOL, 0); }
		public TerminalNode MYSQL_ERRNO_SYMBOL() { return getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0); }
		public TerminalNode NAME_SYMBOL() { return getToken(MySQLParser.NAME_SYMBOL, 0); }
		public TerminalNode NAMES_SYMBOL() { return getToken(MySQLParser.NAMES_SYMBOL, 0); }
		public TerminalNode NATIONAL_SYMBOL() { return getToken(MySQLParser.NATIONAL_SYMBOL, 0); }
		public TerminalNode NCHAR_SYMBOL() { return getToken(MySQLParser.NCHAR_SYMBOL, 0); }
		public TerminalNode NDBCLUSTER_SYMBOL() { return getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0); }
		public TerminalNode NESTED_SYMBOL() { return getToken(MySQLParser.NESTED_SYMBOL, 0); }
		public TerminalNode NEVER_SYMBOL() { return getToken(MySQLParser.NEVER_SYMBOL, 0); }
		public TerminalNode NEXT_SYMBOL() { return getToken(MySQLParser.NEXT_SYMBOL, 0); }
		public TerminalNode NEW_SYMBOL() { return getToken(MySQLParser.NEW_SYMBOL, 0); }
		public TerminalNode NO_WAIT_SYMBOL() { return getToken(MySQLParser.NO_WAIT_SYMBOL, 0); }
		public TerminalNode NODEGROUP_SYMBOL() { return getToken(MySQLParser.NODEGROUP_SYMBOL, 0); }
		public TerminalNode NULLS_SYMBOL() { return getToken(MySQLParser.NULLS_SYMBOL, 0); }
		public TerminalNode NOWAIT_SYMBOL() { return getToken(MySQLParser.NOWAIT_SYMBOL, 0); }
		public TerminalNode NUMBER_SYMBOL() { return getToken(MySQLParser.NUMBER_SYMBOL, 0); }
		public TerminalNode NVARCHAR_SYMBOL() { return getToken(MySQLParser.NVARCHAR_SYMBOL, 0); }
		public TerminalNode OFFSET_SYMBOL() { return getToken(MySQLParser.OFFSET_SYMBOL, 0); }
		public TerminalNode OLD_SYMBOL() { return getToken(MySQLParser.OLD_SYMBOL, 0); }
		public TerminalNode OLD_PASSWORD_SYMBOL() { return getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0); }
		public TerminalNode ONE_SYMBOL() { return getToken(MySQLParser.ONE_SYMBOL, 0); }
		public TerminalNode OPTIONAL_SYMBOL() { return getToken(MySQLParser.OPTIONAL_SYMBOL, 0); }
		public TerminalNode ORDINALITY_SYMBOL() { return getToken(MySQLParser.ORDINALITY_SYMBOL, 0); }
		public TerminalNode ORGANIZATION_SYMBOL() { return getToken(MySQLParser.ORGANIZATION_SYMBOL, 0); }
		public TerminalNode OTHERS_SYMBOL() { return getToken(MySQLParser.OTHERS_SYMBOL, 0); }
		public TerminalNode PACK_KEYS_SYMBOL() { return getToken(MySQLParser.PACK_KEYS_SYMBOL, 0); }
		public TerminalNode PAGE_SYMBOL() { return getToken(MySQLParser.PAGE_SYMBOL, 0); }
		public TerminalNode PARTIAL_SYMBOL() { return getToken(MySQLParser.PARTIAL_SYMBOL, 0); }
		public TerminalNode PARTITIONING_SYMBOL() { return getToken(MySQLParser.PARTITIONING_SYMBOL, 0); }
		public TerminalNode PARTITIONS_SYMBOL() { return getToken(MySQLParser.PARTITIONS_SYMBOL, 0); }
		public TerminalNode PASSWORD_SYMBOL() { return getToken(MySQLParser.PASSWORD_SYMBOL, 0); }
		public TerminalNode PATH_SYMBOL() { return getToken(MySQLParser.PATH_SYMBOL, 0); }
		public TerminalNode PHASE_SYMBOL() { return getToken(MySQLParser.PHASE_SYMBOL, 0); }
		public TerminalNode PLUGIN_DIR_SYMBOL() { return getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0); }
		public TerminalNode PLUGIN_SYMBOL() { return getToken(MySQLParser.PLUGIN_SYMBOL, 0); }
		public TerminalNode PLUGINS_SYMBOL() { return getToken(MySQLParser.PLUGINS_SYMBOL, 0); }
		public TerminalNode POINT_SYMBOL() { return getToken(MySQLParser.POINT_SYMBOL, 0); }
		public TerminalNode POLYGON_SYMBOL() { return getToken(MySQLParser.POLYGON_SYMBOL, 0); }
		public TerminalNode PRECEDING_SYMBOL() { return getToken(MySQLParser.PRECEDING_SYMBOL, 0); }
		public TerminalNode PRESERVE_SYMBOL() { return getToken(MySQLParser.PRESERVE_SYMBOL, 0); }
		public TerminalNode PREV_SYMBOL() { return getToken(MySQLParser.PREV_SYMBOL, 0); }
		public TerminalNode THREAD_PRIORITY_SYMBOL() { return getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0); }
		public TerminalNode PRIVILEGES_SYMBOL() { return getToken(MySQLParser.PRIVILEGES_SYMBOL, 0); }
		public TerminalNode PROCESSLIST_SYMBOL() { return getToken(MySQLParser.PROCESSLIST_SYMBOL, 0); }
		public TerminalNode PROFILE_SYMBOL() { return getToken(MySQLParser.PROFILE_SYMBOL, 0); }
		public TerminalNode PROFILES_SYMBOL() { return getToken(MySQLParser.PROFILES_SYMBOL, 0); }
		public TerminalNode QUARTER_SYMBOL() { return getToken(MySQLParser.QUARTER_SYMBOL, 0); }
		public TerminalNode QUERY_SYMBOL() { return getToken(MySQLParser.QUERY_SYMBOL, 0); }
		public TerminalNode QUICK_SYMBOL() { return getToken(MySQLParser.QUICK_SYMBOL, 0); }
		public TerminalNode READ_ONLY_SYMBOL() { return getToken(MySQLParser.READ_ONLY_SYMBOL, 0); }
		public TerminalNode REBUILD_SYMBOL() { return getToken(MySQLParser.REBUILD_SYMBOL, 0); }
		public TerminalNode RECOVER_SYMBOL() { return getToken(MySQLParser.RECOVER_SYMBOL, 0); }
		public TerminalNode REDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode REDOFILE_SYMBOL() { return getToken(MySQLParser.REDOFILE_SYMBOL, 0); }
		public TerminalNode REDUNDANT_SYMBOL() { return getToken(MySQLParser.REDUNDANT_SYMBOL, 0); }
		public TerminalNode RELAY_SYMBOL() { return getToken(MySQLParser.RELAY_SYMBOL, 0); }
		public TerminalNode RELAYLOG_SYMBOL() { return getToken(MySQLParser.RELAYLOG_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_FILE_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0); }
		public TerminalNode RELAY_LOG_POS_SYMBOL() { return getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0); }
		public TerminalNode RELAY_THREAD_SYMBOL() { return getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0); }
		public TerminalNode REMOTE_SYMBOL() { return getToken(MySQLParser.REMOTE_SYMBOL, 0); }
		public TerminalNode REORGANIZE_SYMBOL() { return getToken(MySQLParser.REORGANIZE_SYMBOL, 0); }
		public TerminalNode REPEATABLE_SYMBOL() { return getToken(MySQLParser.REPEATABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		public TerminalNode REPLICATE_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		public TerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		public TerminalNode USER_RESOURCES_SYMBOL() { return getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0); }
		public TerminalNode RESPECT_SYMBOL() { return getToken(MySQLParser.RESPECT_SYMBOL, 0); }
		public TerminalNode RESUME_SYMBOL() { return getToken(MySQLParser.RESUME_SYMBOL, 0); }
		public TerminalNode RETAIN_SYMBOL() { return getToken(MySQLParser.RETAIN_SYMBOL, 0); }
		public TerminalNode RETURNED_SQLSTATE_SYMBOL() { return getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public TerminalNode RETURNS_SYMBOL() { return getToken(MySQLParser.RETURNS_SYMBOL, 0); }
		public TerminalNode REUSE_SYMBOL() { return getToken(MySQLParser.REUSE_SYMBOL, 0); }
		public TerminalNode REVERSE_SYMBOL() { return getToken(MySQLParser.REVERSE_SYMBOL, 0); }
		public TerminalNode ROLLUP_SYMBOL() { return getToken(MySQLParser.ROLLUP_SYMBOL, 0); }
		public TerminalNode ROTATE_SYMBOL() { return getToken(MySQLParser.ROTATE_SYMBOL, 0); }
		public TerminalNode ROUTINE_SYMBOL() { return getToken(MySQLParser.ROUTINE_SYMBOL, 0); }
		public TerminalNode ROW_COUNT_SYMBOL() { return getToken(MySQLParser.ROW_COUNT_SYMBOL, 0); }
		public TerminalNode ROW_FORMAT_SYMBOL() { return getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0); }
		public TerminalNode RTREE_SYMBOL() { return getToken(MySQLParser.RTREE_SYMBOL, 0); }
		public TerminalNode SCHEDULE_SYMBOL() { return getToken(MySQLParser.SCHEDULE_SYMBOL, 0); }
		public TerminalNode SCHEMA_NAME_SYMBOL() { return getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0); }
		public TerminalNode SECOND_SYMBOL() { return getToken(MySQLParser.SECOND_SYMBOL, 0); }
		public TerminalNode SERIAL_SYMBOL() { return getToken(MySQLParser.SERIAL_SYMBOL, 0); }
		public TerminalNode SERIALIZABLE_SYMBOL() { return getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0); }
		public TerminalNode SESSION_SYMBOL() { return getToken(MySQLParser.SESSION_SYMBOL, 0); }
		public TerminalNode SHARE_SYMBOL() { return getToken(MySQLParser.SHARE_SYMBOL, 0); }
		public TerminalNode SIMPLE_SYMBOL() { return getToken(MySQLParser.SIMPLE_SYMBOL, 0); }
		public TerminalNode SKIP_SYMBOL() { return getToken(MySQLParser.SKIP_SYMBOL, 0); }
		public TerminalNode SLOW_SYMBOL() { return getToken(MySQLParser.SLOW_SYMBOL, 0); }
		public TerminalNode SNAPSHOT_SYMBOL() { return getToken(MySQLParser.SNAPSHOT_SYMBOL, 0); }
		public TerminalNode SOUNDS_SYMBOL() { return getToken(MySQLParser.SOUNDS_SYMBOL, 0); }
		public TerminalNode SOURCE_SYMBOL() { return getToken(MySQLParser.SOURCE_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		public TerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		public TerminalNode SQL_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_BUFFER_RESULT_SYMBOL() { return getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		public TerminalNode SQL_NO_CACHE_SYMBOL() { return getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0); }
		public TerminalNode SQL_THREAD_SYMBOL() { return getToken(MySQLParser.SQL_THREAD_SYMBOL, 0); }
		public TerminalNode SRID_SYMBOL() { return getToken(MySQLParser.SRID_SYMBOL, 0); }
		public TerminalNode STACKED_SYMBOL() { return getToken(MySQLParser.STACKED_SYMBOL, 0); }
		public TerminalNode STARTS_SYMBOL() { return getToken(MySQLParser.STARTS_SYMBOL, 0); }
		public TerminalNode STATS_AUTO_RECALC_SYMBOL() { return getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		public TerminalNode STATS_PERSISTENT_SYMBOL() { return getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0); }
		public TerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		public TerminalNode STATUS_SYMBOL() { return getToken(MySQLParser.STATUS_SYMBOL, 0); }
		public TerminalNode STORAGE_SYMBOL() { return getToken(MySQLParser.STORAGE_SYMBOL, 0); }
		public TerminalNode STRING_SYMBOL() { return getToken(MySQLParser.STRING_SYMBOL, 0); }
		public TerminalNode SUBCLASS_ORIGIN_SYMBOL() { return getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		public TerminalNode SUBDATE_SYMBOL() { return getToken(MySQLParser.SUBDATE_SYMBOL, 0); }
		public TerminalNode SUBJECT_SYMBOL() { return getToken(MySQLParser.SUBJECT_SYMBOL, 0); }
		public TerminalNode SUBPARTITION_SYMBOL() { return getToken(MySQLParser.SUBPARTITION_SYMBOL, 0); }
		public TerminalNode SUBPARTITIONS_SYMBOL() { return getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0); }
		public TerminalNode SUPER_SYMBOL() { return getToken(MySQLParser.SUPER_SYMBOL, 0); }
		public TerminalNode SUSPEND_SYMBOL() { return getToken(MySQLParser.SUSPEND_SYMBOL, 0); }
		public TerminalNode SWAPS_SYMBOL() { return getToken(MySQLParser.SWAPS_SYMBOL, 0); }
		public TerminalNode SWITCHES_SYMBOL() { return getToken(MySQLParser.SWITCHES_SYMBOL, 0); }
		public TerminalNode TABLE_NAME_SYMBOL() { return getToken(MySQLParser.TABLE_NAME_SYMBOL, 0); }
		public TerminalNode TABLES_SYMBOL() { return getToken(MySQLParser.TABLES_SYMBOL, 0); }
		public TerminalNode TABLE_CHECKSUM_SYMBOL() { return getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0); }
		public TerminalNode TABLESPACE_SYMBOL() { return getToken(MySQLParser.TABLESPACE_SYMBOL, 0); }
		public TerminalNode TEMPORARY_SYMBOL() { return getToken(MySQLParser.TEMPORARY_SYMBOL, 0); }
		public TerminalNode TEMPTABLE_SYMBOL() { return getToken(MySQLParser.TEMPTABLE_SYMBOL, 0); }
		public TerminalNode TEXT_SYMBOL() { return getToken(MySQLParser.TEXT_SYMBOL, 0); }
		public TerminalNode THAN_SYMBOL() { return getToken(MySQLParser.THAN_SYMBOL, 0); }
		public TerminalNode TIES_SYMBOL() { return getToken(MySQLParser.TIES_SYMBOL, 0); }
		public TerminalNode TRANSACTION_SYMBOL() { return getToken(MySQLParser.TRANSACTION_SYMBOL, 0); }
		public TerminalNode TRIGGERS_SYMBOL() { return getToken(MySQLParser.TRIGGERS_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_ADD_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0); }
		public TerminalNode TIMESTAMP_DIFF_SYMBOL() { return getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0); }
		public TerminalNode TIME_SYMBOL() { return getToken(MySQLParser.TIME_SYMBOL, 0); }
		public TerminalNode TYPES_SYMBOL() { return getToken(MySQLParser.TYPES_SYMBOL, 0); }
		public TerminalNode TYPE_SYMBOL() { return getToken(MySQLParser.TYPE_SYMBOL, 0); }
		public TerminalNode UDF_RETURNS_SYMBOL() { return getToken(MySQLParser.UDF_RETURNS_SYMBOL, 0); }
		public TerminalNode UNBOUNDED_SYMBOL() { return getToken(MySQLParser.UNBOUNDED_SYMBOL, 0); }
		public TerminalNode UNCOMMITTED_SYMBOL() { return getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0); }
		public TerminalNode UNDEFINED_SYMBOL() { return getToken(MySQLParser.UNDEFINED_SYMBOL, 0); }
		public TerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		public TerminalNode UNDOFILE_SYMBOL() { return getToken(MySQLParser.UNDOFILE_SYMBOL, 0); }
		public TerminalNode UNKNOWN_SYMBOL() { return getToken(MySQLParser.UNKNOWN_SYMBOL, 0); }
		public TerminalNode UNTIL_SYMBOL() { return getToken(MySQLParser.UNTIL_SYMBOL, 0); }
		public TerminalNode USER_SYMBOL() { return getToken(MySQLParser.USER_SYMBOL, 0); }
		public TerminalNode USE_FRM_SYMBOL() { return getToken(MySQLParser.USE_FRM_SYMBOL, 0); }
		public TerminalNode VARIABLES_SYMBOL() { return getToken(MySQLParser.VARIABLES_SYMBOL, 0); }
		public TerminalNode VCPU_SYMBOL() { return getToken(MySQLParser.VCPU_SYMBOL, 0); }
		public TerminalNode VIEW_SYMBOL() { return getToken(MySQLParser.VIEW_SYMBOL, 0); }
		public TerminalNode VALUE_SYMBOL() { return getToken(MySQLParser.VALUE_SYMBOL, 0); }
		public TerminalNode WARNINGS_SYMBOL() { return getToken(MySQLParser.WARNINGS_SYMBOL, 0); }
		public TerminalNode WAIT_SYMBOL() { return getToken(MySQLParser.WAIT_SYMBOL, 0); }
		public TerminalNode WEEK_SYMBOL() { return getToken(MySQLParser.WEEK_SYMBOL, 0); }
		public TerminalNode WORK_SYMBOL() { return getToken(MySQLParser.WORK_SYMBOL, 0); }
		public TerminalNode WEIGHT_STRING_SYMBOL() { return getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0); }
		public TerminalNode X509_SYMBOL() { return getToken(MySQLParser.X509_SYMBOL, 0); }
		public TerminalNode XID_SYMBOL() { return getToken(MySQLParser.XID_SYMBOL, 0); }
		public TerminalNode XML_SYMBOL() { return getToken(MySQLParser.XML_SYMBOL, 0); }
		public TerminalNode YEAR_SYMBOL() { return getToken(MySQLParser.YEAR_SYMBOL, 0); }
		public TerminalNode SHUTDOWN_SYMBOL() { return getToken(MySQLParser.SHUTDOWN_SYMBOL, 0); }
		public TerminalNode CUBE_SYMBOL() { return getToken(MySQLParser.CUBE_SYMBOL, 0); }
		public TerminalNode IMPORT_SYMBOL() { return getToken(MySQLParser.IMPORT_SYMBOL, 0); }
		public TerminalNode FUNCTION_SYMBOL() { return getToken(MySQLParser.FUNCTION_SYMBOL, 0); }
		public TerminalNode ROWS_SYMBOL() { return getToken(MySQLParser.ROWS_SYMBOL, 0); }
		public TerminalNode ROW_SYMBOL() { return getToken(MySQLParser.ROW_SYMBOL, 0); }
		public TerminalNode EXCHANGE_SYMBOL() { return getToken(MySQLParser.EXCHANGE_SYMBOL, 0); }
		public TerminalNode EXPIRE_SYMBOL() { return getToken(MySQLParser.EXPIRE_SYMBOL, 0); }
		public TerminalNode ONLY_SYMBOL() { return getToken(MySQLParser.ONLY_SYMBOL, 0); }
		public TerminalNode VALIDATION_SYMBOL() { return getToken(MySQLParser.VALIDATION_SYMBOL, 0); }
		public TerminalNode WITHOUT_SYMBOL() { return getToken(MySQLParser.WITHOUT_SYMBOL, 0); }
		public TerminalNode ADMIN_SYMBOL() { return getToken(MySQLParser.ADMIN_SYMBOL, 0); }
		public RoleOrLabelKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleOrLabelKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).enterRoleOrLabelKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySQLParserListener ) ((MySQLParserListener)listener).exitRoleOrLabelKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySQLParserVisitor ) return ((MySQLParserVisitor<? extends T>)visitor).visitRoleOrLabelKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleOrLabelKeywordContext roleOrLabelKeyword() throws RecognitionException {
		RoleOrLabelKeywordContext _localctx = new RoleOrLabelKeywordContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_roleOrLabelKeyword);
		int _la;
		try {
			setState(8414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8405);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACTION_SYMBOL) | (1L << ADDDATE_SYMBOL) | (1L << AFTER_SYMBOL) | (1L << AGAINST_SYMBOL) | (1L << AGGREGATE_SYMBOL) | (1L << ALGORITHM_SYMBOL) | (1L << ANALYSE_SYMBOL) | (1L << ANY_SYMBOL) | (1L << AT_SYMBOL) | (1L << AUTHORS_SYMBOL) | (1L << AUTOEXTEND_SIZE_SYMBOL) | (1L << AUTO_INCREMENT_SYMBOL) | (1L << AVG_ROW_LENGTH_SYMBOL) | (1L << AVG_SYMBOL) | (1L << BINLOG_SYMBOL) | (1L << BIT_SYMBOL) | (1L << BLOCK_SYMBOL) | (1L << BOOLEAN_SYMBOL) | (1L << BOOL_SYMBOL) | (1L << BTREE_SYMBOL) | (1L << CASCADED_SYMBOL) | (1L << CATALOG_NAME_SYMBOL) | (1L << CHAIN_SYMBOL) | (1L << CHANGED_SYMBOL) | (1L << CHANNEL_SYMBOL) | (1L << CIPHER_SYMBOL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CLASS_ORIGIN_SYMBOL - 64)) | (1L << (CLIENT_SYMBOL - 64)) | (1L << (COALESCE_SYMBOL - 64)) | (1L << (CODE_SYMBOL - 64)) | (1L << (COLLATION_SYMBOL - 64)) | (1L << (COLUMNS_SYMBOL - 64)) | (1L << (COLUMN_NAME_SYMBOL - 64)) | (1L << (COLUMN_FORMAT_SYMBOL - 64)) | (1L << (COMMITTED_SYMBOL - 64)) | (1L << (COMPACT_SYMBOL - 64)) | (1L << (COMPLETION_SYMBOL - 64)) | (1L << (COMPRESSED_SYMBOL - 64)) | (1L << (COMPRESSION_SYMBOL - 64)) | (1L << (CONCURRENT_SYMBOL - 64)) | (1L << (CONNECTION_SYMBOL - 64)) | (1L << (CONSISTENT_SYMBOL - 64)) | (1L << (CONSTRAINT_CATALOG_SYMBOL - 64)) | (1L << (CONSTRAINT_NAME_SYMBOL - 64)) | (1L << (CONSTRAINT_SCHEMA_SYMBOL - 64)) | (1L << (CONTEXT_SYMBOL - 64)) | (1L << (CONTRIBUTORS_SYMBOL - 64)) | (1L << (CPU_SYMBOL - 64)) | (1L << (CURRENT_SYMBOL - 64)) | (1L << (CURSOR_NAME_SYMBOL - 64)) | (1L << (DATAFILE_SYMBOL - 64)) | (1L << (DATA_SYMBOL - 64)) | (1L << (DATETIME_SYMBOL - 64)) | (1L << (DATE_SYMBOL - 64)) | (1L << (DAY_SYMBOL - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (DEFAULT_AUTH_SYMBOL - 129)) | (1L << (DEFINER_SYMBOL - 129)) | (1L << (DELAY_KEY_WRITE_SYMBOL - 129)) | (1L << (DES_KEY_FILE_SYMBOL - 129)) | (1L << (DIAGNOSTICS_SYMBOL - 129)) | (1L << (DIRECTORY_SYMBOL - 129)) | (1L << (DISABLE_SYMBOL - 129)) | (1L << (DISCARD_SYMBOL - 129)) | (1L << (DISK_SYMBOL - 129)) | (1L << (DUMPFILE_SYMBOL - 129)) | (1L << (DUPLICATE_SYMBOL - 129)) | (1L << (DYNAMIC_SYMBOL - 129)) | (1L << (ENABLE_SYMBOL - 129)) | (1L << (ENCRYPTION_SYMBOL - 129)) | (1L << (ENDS_SYMBOL - 129)) | (1L << (ENGINES_SYMBOL - 129)) | (1L << (ENGINE_SYMBOL - 129)) | (1L << (ENUM_SYMBOL - 129)) | (1L << (ERROR_SYMBOL - 129)) | (1L << (ERRORS_SYMBOL - 129)) | (1L << (ESCAPE_SYMBOL - 129)) | (1L << (EVENTS_SYMBOL - 129)) | (1L << (EVERY_SYMBOL - 129)) | (1L << (EXPANSION_SYMBOL - 129)) | (1L << (EXPORT_SYMBOL - 129)) | (1L << (EXTENDED_SYMBOL - 129)) | (1L << (EXTENT_SIZE_SYMBOL - 129)) | (1L << (FAST_SYMBOL - 129)) | (1L << (FAULTS_SYMBOL - 129)) | (1L << (FILE_BLOCK_SIZE_SYMBOL - 129)) | (1L << (FILTER_SYMBOL - 129)) | (1L << (FIRST_SYMBOL - 129)) | (1L << (FIXED_SYMBOL - 129)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (FOUND_SYMBOL - 202)) | (1L << (FULL_SYMBOL - 202)) | (1L << (GENERAL_SYMBOL - 202)) | (1L << (GEOMETRYCOLLECTION_SYMBOL - 202)) | (1L << (GEOMETRY_SYMBOL - 202)) | (1L << (GET_FORMAT_SYMBOL - 202)) | (1L << (GLOBAL_SYMBOL - 202)) | (1L << (GRANTS_SYMBOL - 202)) | (1L << (HASH_SYMBOL - 202)) | (1L << (HOSTS_SYMBOL - 202)) | (1L << (HOUR_SYMBOL - 202)) | (1L << (IDENTIFIED_SYMBOL - 202)) | (1L << (IGNORE_SERVER_IDS_SYMBOL - 202)) | (1L << (INDEXES_SYMBOL - 202)) | (1L << (INITIAL_SIZE_SYMBOL - 202)) | (1L << (INSERT_METHOD_SYMBOL - 202)) | (1L << (INSTANCE_SYMBOL - 202)) | (1L << (INVOKER_SYMBOL - 202)) | (1L << (IO_SYMBOL - 202)) | (1L << (IPC_SYMBOL - 202)) | (1L << (ISOLATION_SYMBOL - 202)) | (1L << (ISSUER_SYMBOL - 202)) | (1L << (JSON_SYMBOL - 202)) | (1L << (KEY_BLOCK_SIZE_SYMBOL - 202)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (LAST_SYMBOL - 268)) | (1L << (LEAVES_SYMBOL - 268)) | (1L << (LESS_SYMBOL - 268)) | (1L << (LEVEL_SYMBOL - 268)) | (1L << (LINESTRING_SYMBOL - 268)) | (1L << (LIST_SYMBOL - 268)) | (1L << (LOCAL_SYMBOL - 268)) | (1L << (LOCKS_SYMBOL - 268)) | (1L << (LOGFILE_SYMBOL - 268)) | (1L << (LOGS_SYMBOL - 268)) | (1L << (MASTER_AUTO_POSITION_SYMBOL - 268)) | (1L << (MASTER_CONNECT_RETRY_SYMBOL - 268)) | (1L << (MASTER_DELAY_SYMBOL - 268)) | (1L << (MASTER_HOST_SYMBOL - 268)) | (1L << (MASTER_LOG_FILE_SYMBOL - 268)) | (1L << (MASTER_LOG_POS_SYMBOL - 268)) | (1L << (MASTER_PASSWORD_SYMBOL - 268)) | (1L << (MASTER_PORT_SYMBOL - 268)) | (1L << (MASTER_RETRY_COUNT_SYMBOL - 268)) | (1L << (MASTER_SERVER_ID_SYMBOL - 268)) | (1L << (MASTER_SSL_CAPATH_SYMBOL - 268)) | (1L << (MASTER_SSL_CA_SYMBOL - 268)) | (1L << (MASTER_SSL_CERT_SYMBOL - 268)) | (1L << (MASTER_SSL_CIPHER_SYMBOL - 268)) | (1L << (MASTER_SSL_CRL_SYMBOL - 268)) | (1L << (MASTER_SSL_CRLPATH_SYMBOL - 268)) | (1L << (MASTER_SSL_KEY_SYMBOL - 268)) | (1L << (MASTER_SSL_SYMBOL - 268)) | (1L << (MASTER_SYMBOL - 268)) | (1L << (MASTER_TLS_VERSION_SYMBOL - 268)) | (1L << (MASTER_USER_SYMBOL - 268)) | (1L << (MASTER_HEARTBEAT_PERIOD_SYMBOL - 268)) | (1L << (MAX_CONNECTIONS_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_QUERIES_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_ROWS_SYMBOL - 268)) | (1L << (MAX_SIZE_SYMBOL - 268)) | (1L << (MAX_STATEMENT_TIME_SYMBOL - 268)) | (1L << (MAX_UPDATES_PER_HOUR_SYMBOL - 268)) | (1L << (MAX_USER_CONNECTIONS_SYMBOL - 268)))) != 0) || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & ((1L << (MEDIUM_SYMBOL - 333)) | (1L << (MEMORY_SYMBOL - 333)) | (1L << (MERGE_SYMBOL - 333)) | (1L << (MESSAGE_TEXT_SYMBOL - 333)) | (1L << (MICROSECOND_SYMBOL - 333)) | (1L << (MIGRATE_SYMBOL - 333)) | (1L << (MINUTE_SYMBOL - 333)) | (1L << (MIN_ROWS_SYMBOL - 333)) | (1L << (MODE_SYMBOL - 333)) | (1L << (MODIFY_SYMBOL - 333)) | (1L << (MONTH_SYMBOL - 333)) | (1L << (MULTILINESTRING_SYMBOL - 333)) | (1L << (MULTIPOINT_SYMBOL - 333)) | (1L << (MULTIPOLYGON_SYMBOL - 333)) | (1L << (MUTEX_SYMBOL - 333)) | (1L << (MYSQL_ERRNO_SYMBOL - 333)) | (1L << (NAMES_SYMBOL - 333)) | (1L << (NAME_SYMBOL - 333)) | (1L << (NATIONAL_SYMBOL - 333)) | (1L << (NCHAR_SYMBOL - 333)) | (1L << (NDBCLUSTER_SYMBOL - 333)) | (1L << (NEVER_SYMBOL - 333)) | (1L << (NEW_SYMBOL - 333)) | (1L << (NEXT_SYMBOL - 333)) | (1L << (NODEGROUP_SYMBOL - 333)) | (1L << (NO_WAIT_SYMBOL - 333)) | (1L << (NUMBER_SYMBOL - 333)) | (1L << (NVARCHAR_SYMBOL - 333)) | (1L << (OFFSET_SYMBOL - 333)) | (1L << (OLD_PASSWORD_SYMBOL - 333)) | (1L << (ONE_SYMBOL - 333)))) != 0) || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (PACK_KEYS_SYMBOL - 399)) | (1L << (PAGE_SYMBOL - 399)) | (1L << (PARTIAL_SYMBOL - 399)) | (1L << (PARTITIONING_SYMBOL - 399)) | (1L << (PARTITIONS_SYMBOL - 399)) | (1L << (PASSWORD_SYMBOL - 399)) | (1L << (PHASE_SYMBOL - 399)) | (1L << (PLUGINS_SYMBOL - 399)) | (1L << (PLUGIN_DIR_SYMBOL - 399)) | (1L << (PLUGIN_SYMBOL - 399)) | (1L << (POINT_SYMBOL - 399)) | (1L << (POLYGON_SYMBOL - 399)) | (1L << (PRESERVE_SYMBOL - 399)) | (1L << (PREV_SYMBOL - 399)) | (1L << (PRIVILEGES_SYMBOL - 399)) | (1L << (PROCESSLIST_SYMBOL - 399)) | (1L << (PROFILE_SYMBOL - 399)) | (1L << (PROFILES_SYMBOL - 399)) | (1L << (QUARTER_SYMBOL - 399)) | (1L << (QUERY_SYMBOL - 399)) | (1L << (QUICK_SYMBOL - 399)) | (1L << (READ_ONLY_SYMBOL - 399)) | (1L << (REBUILD_SYMBOL - 399)) | (1L << (RECOVER_SYMBOL - 399)) | (1L << (REDOFILE_SYMBOL - 399)) | (1L << (REDO_BUFFER_SIZE_SYMBOL - 399)) | (1L << (REDUNDANT_SYMBOL - 399)) | (1L << (RELAY_SYMBOL - 399)) | (1L << (RELAYLOG_SYMBOL - 399)) | (1L << (RELAY_LOG_FILE_SYMBOL - 399)) | (1L << (RELAY_LOG_POS_SYMBOL - 399)) | (1L << (RELAY_THREAD_SYMBOL - 399)) | (1L << (REORGANIZE_SYMBOL - 399)) | (1L << (REPEATABLE_SYMBOL - 399)) | (1L << (REPLICATE_DO_DB_SYMBOL - 399)) | (1L << (REPLICATE_IGNORE_DB_SYMBOL - 399)) | (1L << (REPLICATE_DO_TABLE_SYMBOL - 399)))) != 0) || ((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (REPLICATE_IGNORE_TABLE_SYMBOL - 463)) | (1L << (REPLICATE_WILD_DO_TABLE_SYMBOL - 463)) | (1L << (REPLICATE_WILD_IGNORE_TABLE_SYMBOL - 463)) | (1L << (REPLICATE_REWRITE_DB_SYMBOL - 463)) | (1L << (RESUME_SYMBOL - 463)) | (1L << (RETURNED_SQLSTATE_SYMBOL - 463)) | (1L << (RETURNS_SYMBOL - 463)) | (1L << (REVERSE_SYMBOL - 463)) | (1L << (ROLLUP_SYMBOL - 463)) | (1L << (ROTATE_SYMBOL - 463)) | (1L << (ROUTINE_SYMBOL - 463)) | (1L << (ROW_COUNT_SYMBOL - 463)) | (1L << (ROW_FORMAT_SYMBOL - 463)) | (1L << (RTREE_SYMBOL - 463)) | (1L << (SCHEDULE_SYMBOL - 463)) | (1L << (SCHEMA_NAME_SYMBOL - 463)) | (1L << (SECOND_SYMBOL - 463)) | (1L << (SERIALIZABLE_SYMBOL - 463)) | (1L << (SERIAL_SYMBOL - 463)) | (1L << (SESSION_SYMBOL - 463)) | (1L << (SHARE_SYMBOL - 463)) | (1L << (SIMPLE_SYMBOL - 463)) | (1L << (SLOW_SYMBOL - 463)) | (1L << (SNAPSHOT_SYMBOL - 463)) | (1L << (SOUNDS_SYMBOL - 463)) | (1L << (SOURCE_SYMBOL - 463)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (SQL_AFTER_GTIDS_SYMBOL - 528)) | (1L << (SQL_AFTER_MTS_GAPS_SYMBOL - 528)) | (1L << (SQL_BEFORE_GTIDS_SYMBOL - 528)) | (1L << (SQL_BUFFER_RESULT_SYMBOL - 528)) | (1L << (SQL_CACHE_SYMBOL - 528)) | (1L << (SQL_NO_CACHE_SYMBOL - 528)) | (1L << (SQL_THREAD_SYMBOL - 528)) | (1L << (STACKED_SYMBOL - 528)) | (1L << (STARTS_SYMBOL - 528)) | (1L << (STATS_AUTO_RECALC_SYMBOL - 528)) | (1L << (STATS_PERSISTENT_SYMBOL - 528)) | (1L << (STATS_SAMPLE_PAGES_SYMBOL - 528)) | (1L << (STATUS_SYMBOL - 528)) | (1L << (STORAGE_SYMBOL - 528)) | (1L << (STRING_SYMBOL - 528)) | (1L << (SUBCLASS_ORIGIN_SYMBOL - 528)) | (1L << (SUBDATE_SYMBOL - 528)) | (1L << (SUBJECT_SYMBOL - 528)) | (1L << (SUBPARTITIONS_SYMBOL - 528)) | (1L << (SUBPARTITION_SYMBOL - 528)) | (1L << (SUPER_SYMBOL - 528)) | (1L << (SUSPEND_SYMBOL - 528)) | (1L << (SWAPS_SYMBOL - 528)) | (1L << (SWITCHES_SYMBOL - 528)) | (1L << (TABLES_SYMBOL - 528)) | (1L << (TABLESPACE_SYMBOL - 528)) | (1L << (TABLE_CHECKSUM_SYMBOL - 528)) | (1L << (TABLE_NAME_SYMBOL - 528)) | (1L << (TEMPORARY_SYMBOL - 528)) | (1L << (TEMPTABLE_SYMBOL - 528)) | (1L << (TEXT_SYMBOL - 528)) | (1L << (THAN_SYMBOL - 528)) | (1L << (TIMESTAMP_SYMBOL - 528)) | (1L << (TIMESTAMP_ADD_SYMBOL - 528)) | (1L << (TIMESTAMP_DIFF_SYMBOL - 528)) | (1L << (TIME_SYMBOL - 528)))) != 0) || ((((_la - 592)) & ~0x3f) == 0 && ((1L << (_la - 592)) & ((1L << (TRANSACTION_SYMBOL - 592)) | (1L << (TRIGGERS_SYMBOL - 592)) | (1L << (TYPES_SYMBOL - 592)) | (1L << (TYPE_SYMBOL - 592)) | (1L << (UDF_RETURNS_SYMBOL - 592)) | (1L << (UNCOMMITTED_SYMBOL - 592)) | (1L << (UNDEFINED_SYMBOL - 592)) | (1L << (UNDOFILE_SYMBOL - 592)) | (1L << (UNDO_BUFFER_SIZE_SYMBOL - 592)) | (1L << (UNKNOWN_SYMBOL - 592)) | (1L << (UNTIL_SYMBOL - 592)) | (1L << (USER_RESOURCES_SYMBOL - 592)) | (1L << (USER_SYMBOL - 592)) | (1L << (USE_FRM_SYMBOL - 592)) | (1L << (VALUE_SYMBOL - 592)) | (1L << (VARIABLES_SYMBOL - 592)) | (1L << (VIEW_SYMBOL - 592)) | (1L << (WAIT_SYMBOL - 592)) | (1L << (WARNINGS_SYMBOL - 592)) | (1L << (WEEK_SYMBOL - 592)) | (1L << (WEIGHT_STRING_SYMBOL - 592)) | (1L << (WORK_SYMBOL - 592)) | (1L << (X509_SYMBOL - 592)) | (1L << (XID_SYMBOL - 592)) | (1L << (XML_SYMBOL - 592)))) != 0) || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (YEAR_SYMBOL - 656)) | (1L << (COMPONENT_SYMBOL - 656)) | (1L << (SKIP_SYMBOL - 656)) | (1L << (LOCKED_SYMBOL - 656)) | (1L << (NOWAIT_SYMBOL - 656)) | (1L << (HISTOGRAM_SYMBOL - 656)) | (1L << (BUCKETS_SYMBOL - 656)) | (1L << (REMOTE_SYMBOL - 656)) | (1L << (EXCLUDE_SYMBOL - 656)) | (1L << (FOLLOWING_SYMBOL - 656)) | (1L << (NULLS_SYMBOL - 656)) | (1L << (OTHERS_SYMBOL - 656)) | (1L << (PRECEDING_SYMBOL - 656)) | (1L << (RESPECT_SYMBOL - 656)) | (1L << (TIES_SYMBOL - 656)) | (1L << (UNBOUNDED_SYMBOL - 656)) | (1L << (NESTED_SYMBOL - 656)) | (1L << (ORDINALITY_SYMBOL - 656)) | (1L << (PATH_SYMBOL - 656)) | (1L << (HISTORY_SYMBOL - 656)) | (1L << (REUSE_SYMBOL - 656)) | (1L << (SRID_SYMBOL - 656)) | (1L << (THREAD_PRIORITY_SYMBOL - 656)) | (1L << (VCPU_SYMBOL - 656)) | (1L << (MASTER_PUBLIC_KEY_PATH_SYMBOL - 656)) | (1L << (DESCRIPTION_SYMBOL - 656)) | (1L << (ORGANIZATION_SYMBOL - 656)) | (1L << (OPTIONAL_SYMBOL - 656)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (ACTIVE_SYMBOL - 724)) | (1L << (INACTIVE_SYMBOL - 724)) | (1L << (RETAIN_SYMBOL - 724)) | (1L << (OLD_SYMBOL - 724)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8406);
				if (!(serverVersion < 50709)) throw new FailedPredicateException(this, "serverVersion < 50709");
				setState(8407);
				match(SHUTDOWN_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8408);
				if (!(serverVersion < 80000)) throw new FailedPredicateException(this, "serverVersion < 80000");
				setState(8409);
				_la = _input.LA(1);
				if ( !(_la==CUBE_SYMBOL || _la==FUNCTION_SYMBOL || _la==IMPORT_SYMBOL || _la==ROWS_SYMBOL || _la==ROW_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8410);
				if (!(serverVersion >= 80000)) throw new FailedPredicateException(this, "serverVersion >= 80000");
				setState(8411);
				_la = _input.LA(1);
				if ( !(_la==EXCHANGE_SYMBOL || _la==EXPIRE_SYMBOL || _la==ONLY_SYMBOL || _la==SUPER_SYMBOL || _la==VALIDATION_SYMBOL || _la==WITHOUT_SYMBOL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8412);
				if (!(serverVersion >= 80014)) throw new FailedPredicateException(this, "serverVersion >= 80014");
				setState(8413);
				match(ADMIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1:
			return simpleStatement_sempred((SimpleStatementContext)_localctx, predIndex);
		case 2:
			return alterStatement_sempred((AlterStatementContext)_localctx, predIndex);
		case 3:
			return alterDatabase_sempred((AlterDatabaseContext)_localctx, predIndex);
		case 9:
			return alterTable_sempred((AlterTableContext)_localctx, predIndex);
		case 13:
			return standaloneAlterCommands_sempred((StandaloneAlterCommandsContext)_localctx, predIndex);
		case 14:
			return alterPartition_sempred((AlterPartitionContext)_localctx, predIndex);
		case 17:
			return alterListItem_sempred((AlterListItemContext)_localctx, predIndex);
		case 24:
			return withValidation_sempred((WithValidationContext)_localctx, predIndex);
		case 27:
			return alterTablespace_sempred((AlterTablespaceContext)_localctx, predIndex);
		case 38:
			return createStatement_sempred((CreateStatementContext)_localctx, predIndex);
		case 40:
			return createDatabaseOption_sempred((CreateDatabaseOptionContext)_localctx, predIndex);
		case 53:
			return createIndex_sempred((CreateIndexContext)_localctx, predIndex);
		case 64:
			return tsDataFileName_sempred((TsDataFileNameContext)_localctx, predIndex);
		case 67:
			return tablespaceOption_sempred((TablespaceOptionContext)_localctx, predIndex);
		case 84:
			return triggerFollowsPrecedesClause_sempred((TriggerFollowsPrecedesClauseContext)_localctx, predIndex);
		case 89:
			return dropStatement_sempred((DropStatementContext)_localctx, predIndex);
		case 110:
			return deleteStatement_sempred((DeleteStatementContext)_localctx, predIndex);
		case 111:
			return partitionDelete_sempred((PartitionDeleteContext)_localctx, predIndex);
		case 113:
			return doStatement_sempred((DoStatementContext)_localctx, predIndex);
		case 116:
			return insertStatement_sempred((InsertStatementContext)_localctx, predIndex);
		case 135:
			return queryExpression_sempred((QueryExpressionContext)_localctx, predIndex);
		case 138:
			return queryPrimary_sempred((QueryPrimaryContext)_localctx, predIndex);
		case 139:
			return querySpecification_sempred((QuerySpecificationContext)_localctx, predIndex);
		case 163:
			return olapOption_sempred((OlapOptionContext)_localctx, predIndex);
		case 171:
			return selectOption_sempred((SelectOptionContext)_localctx, predIndex);
		case 173:
			return lockingClause_sempred((LockingClauseContext)_localctx, predIndex);
		case 174:
			return lockStrengh_sempred((LockStrenghContext)_localctx, predIndex);
		case 180:
			return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		case 186:
			return tableFactor_sempred((TableFactorContext)_localctx, predIndex);
		case 189:
			return derivedTable_sempred((DerivedTableContext)_localctx, predIndex);
		case 193:
			return jtColumn_sempred((JtColumnContext)_localctx, predIndex);
		case 199:
			return tableAlias_sempred((TableAliasContext)_localctx, predIndex);
		case 208:
			return updateStatement_sempred((UpdateStatementContext)_localctx, predIndex);
		case 212:
			return transactionCharacteristic_sempred((TransactionCharacteristicContext)_localctx, predIndex);
		case 214:
			return lockStatement_sempred((LockStatementContext)_localctx, predIndex);
		case 218:
			return xaConvert_sempred((XaConvertContext)_localctx, predIndex);
		case 220:
			return replicationStatement_sempred((ReplicationStatementContext)_localctx, predIndex);
		case 221:
			return resetOption_sempred((ResetOptionContext)_localctx, predIndex);
		case 222:
			return masterResetOptions_sempred((MasterResetOptionsContext)_localctx, predIndex);
		case 232:
			return changeReplication_sempred((ChangeReplicationContext)_localctx, predIndex);
		case 240:
			return slaveUntilOptions_sempred((SlaveUntilOptionsContext)_localctx, predIndex);
		case 241:
			return slaveConnectionOptions_sempred((SlaveConnectionOptionsContext)_localctx, predIndex);
		case 248:
			return cloneStatement_sempred((CloneStatementContext)_localctx, predIndex);
		case 251:
			return accountManagementStatement_sempred((AccountManagementStatementContext)_localctx, predIndex);
		case 252:
			return alterUser_sempred((AlterUserContext)_localctx, predIndex);
		case 253:
			return alterUserTail_sempred((AlterUserTailContext)_localctx, predIndex);
		case 255:
			return createUser_sempred((CreateUserContext)_localctx, predIndex);
		case 256:
			return createUserTail_sempred((CreateUserTailContext)_localctx, predIndex);
		case 257:
			return defaultRoleClause_sempred((DefaultRoleClauseContext)_localctx, predIndex);
		case 260:
			return accountLockPasswordExpireOptions_sempred((AccountLockPasswordExpireOptionsContext)_localctx, predIndex);
		case 261:
			return dropUser_sempred((DropUserContext)_localctx, predIndex);
		case 262:
			return grant_sempred((GrantContext)_localctx, predIndex);
		case 263:
			return grantTargetList_sempred((GrantTargetListContext)_localctx, predIndex);
		case 264:
			return grantOptions_sempred((GrantOptionsContext)_localctx, predIndex);
		case 268:
			return versionedRequireClause_sempred((VersionedRequireClauseContext)_localctx, predIndex);
		case 270:
			return revoke_sempred((RevokeContext)_localctx, predIndex);
		case 271:
			return onTypeTo_sempred((OnTypeToContext)_localctx, predIndex);
		case 274:
			return roleOrPrivilege_sempred((RoleOrPrivilegeContext)_localctx, predIndex);
		case 275:
			return grantIdentifier_sempred((GrantIdentifierContext)_localctx, predIndex);
		case 282:
			return tableAdministrationStatement_sempred((TableAdministrationStatementContext)_localctx, predIndex);
		case 288:
			return startOptionValueList_sempred((StartOptionValueListContext)_localctx, predIndex);
		case 293:
			return optionValueNoOptionType_sempred((OptionValueNoOptionTypeContext)_localctx, predIndex);
		case 298:
			return setExprOrDefault_sempred((SetExprOrDefaultContext)_localctx, predIndex);
		case 299:
			return showStatement_sempred((ShowStatementContext)_localctx, predIndex);
		case 300:
			return showCommandType_sempred((ShowCommandTypeContext)_localctx, predIndex);
		case 301:
			return nonBlocking_sempred((NonBlockingContext)_localctx, predIndex);
		case 305:
			return otherAdministrativeStatement_sempred((OtherAdministrativeStatementContext)_localctx, predIndex);
		case 313:
			return flushOption_sempred((FlushOptionContext)_localctx, predIndex);
		case 316:
			return flushTablesOptions_sempred((FlushTablesOptionsContext)_localctx, predIndex);
		case 331:
			return utilityStatement_sempred((UtilityStatementContext)_localctx, predIndex);
		case 333:
			return explainStatement_sempred((ExplainStatementContext)_localctx, predIndex);
		case 334:
			return explainableStatement_sempred((ExplainableStatementContext)_localctx, predIndex);
		case 338:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 339:
			return boolPri_sempred((BoolPriContext)_localctx, predIndex);
		case 341:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 343:
			return bitExpr_sempred((BitExprContext)_localctx, predIndex);
		case 344:
			return simpleExpr_sempred((SimpleExprContext)_localctx, predIndex);
		case 345:
			return arrayCast_sempred((ArrayCastContext)_localctx, predIndex);
		case 346:
			return jsonOperator_sempred((JsonOperatorContext)_localctx, predIndex);
		case 347:
			return sumExpr_sempred((SumExprContext)_localctx, predIndex);
		case 358:
			return runtimeFunctionCall_sempred((RuntimeFunctionCallContext)_localctx, predIndex);
		case 359:
			return geometryFunction_sempred((GeometryFunctionContext)_localctx, predIndex);
		case 361:
			return fractionalPrecision_sempred((FractionalPrecisionContext)_localctx, predIndex);
		case 373:
			return internalVariableName_sempred((InternalVariableNameContext)_localctx, predIndex);
		case 377:
			return castType_sempred((CastTypeContext)_localctx, predIndex);
		case 391:
			return channel_sempred((ChannelContext)_localctx, predIndex);
		case 420:
			return getDiagnostics_sempred((GetDiagnosticsContext)_localctx, predIndex);
		case 433:
			return checkOrReferences_sempred((CheckOrReferencesContext)_localctx, predIndex);
		case 436:
			return tableConstraintDef_sempred((TableConstraintDefContext)_localctx, predIndex);
		case 438:
			return fieldDefinition_sempred((FieldDefinitionContext)_localctx, predIndex);
		case 439:
			return columnAttribute_sempred((ColumnAttributeContext)_localctx, predIndex);
		case 449:
			return keyListVariants_sempred((KeyListVariantsContext)_localctx, predIndex);
		case 452:
			return commonIndexOption_sempred((CommonIndexOptionContext)_localctx, predIndex);
		case 458:
			return dataType_sempred((DataTypeContext)_localctx, predIndex);
		case 468:
			return charsetName_sempred((CharsetNameContext)_localctx, predIndex);
		case 469:
			return collationName_sempred((CollationNameContext)_localctx, predIndex);
		case 472:
			return createTableOption_sempred((CreateTableOptionContext)_localctx, predIndex);
		case 480:
			return partitionKeyAlgorithm_sempred((PartitionKeyAlgorithmContext)_localctx, predIndex);
		case 507:
			return createUserEntry_sempred((CreateUserEntryContext)_localctx, predIndex);
		case 518:
			return usePartition_sempred((UsePartitionContext)_localctx, predIndex);
		case 520:
			return columnName_sempred((ColumnNameContext)_localctx, predIndex);
		case 563:
			return pureIdentifier_sempred((PureIdentifierContext)_localctx, predIndex);
		case 568:
			return simpleIdentifier_sempred((SimpleIdentifierContext)_localctx, predIndex);
		case 573:
			return real_ulonglong_number_sempred((Real_ulonglong_numberContext)_localctx, predIndex);
		case 577:
			return textStringLiteral_sempred((TextStringLiteralContext)_localctx, predIndex);
		case 579:
			return textStringHash_sempred((TextStringHashContext)_localctx, predIndex);
		case 599:
			return identifierKeyword_sempred((IdentifierKeywordContext)_localctx, predIndex);
		case 602:
			return labelKeyword_sempred((LabelKeywordContext)_localctx, predIndex);
		case 604:
			return identifierKeywordsUnambiguous_sempred((IdentifierKeywordsUnambiguousContext)_localctx, predIndex);
		case 605:
			return roleKeyword_sempred((RoleKeywordContext)_localctx, predIndex);
		case 608:
			return roleOrIdentifierKeyword_sempred((RoleOrIdentifierKeywordContext)_localctx, predIndex);
		case 609:
			return roleOrLabelKeyword_sempred((RoleOrLabelKeywordContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean simpleStatement_sempred(SimpleStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return serverVersion >= 80000;
		case 1:
			return serverVersion >= 80000;
		case 2:
			return serverVersion >= 80000;
		case 3:
			return serverVersion >= 50604;
		}
		return true;
	}
	private boolean alterStatement_sempred(AlterStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4:
			return serverVersion >= 80014;
		case 5:
			return serverVersion >= 50713;
		}
		return true;
	}
	private boolean alterDatabase_sempred(AlterDatabaseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean alterTable_sempred(AlterTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return serverVersion < 50700;
		}
		return true;
	}
	private boolean standaloneAlterCommands_sempred(StandaloneAlterCommandsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean alterPartition_sempred(AlterPartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return serverVersion >= 50704;
		case 10:
			return serverVersion >= 50704;
		}
		return true;
	}
	private boolean alterListItem_sempred(AlterListItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return serverVersion >= 50700;
		case 12:
			return serverVersion < 50700;
		case 13:
			return serverVersion >= 80017;
		case 14:
			return serverVersion >= 80019;
		case 15:
			return serverVersion >= 80014;
		case 16:
			return serverVersion >= 80000;
		case 17:
			return serverVersion >= 80017;
		case 18:
			return serverVersion >= 80019;
		case 19:
			return serverVersion >= 80000;
		case 20:
			return serverVersion >= 50700;
		case 21:
			return serverVersion >= 80014;
		case 22:
			return serverVersion >= 50708 && serverVersion < 80000;
		}
		return true;
	}
	private boolean withValidation_sempred(WithValidationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean alterTablespace_sempred(AlterTablespaceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24:
			return serverVersion < 80000;
		case 25:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean createStatement_sempred(CreateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26:
			return serverVersion >= 80000;
		case 27:
			return serverVersion >= 80011;
		case 28:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean createDatabaseOption_sempred(CreateDatabaseOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29:
			return serverVersion >= 80016;
		}
		return true;
	}
	private boolean createIndex_sempred(CreateIndexContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean tsDataFileName_sempred(TsDataFileNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean tablespaceOption_sempred(TablespaceOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32:
			return serverVersion >= 50707;
		case 33:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean triggerFollowsPrecedesClause_sempred(TriggerFollowsPrecedesClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean dropStatement_sempred(DropStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35:
			return serverVersion >= 80000;
		case 36:
			return serverVersion >= 80011;
		case 37:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean deleteStatement_sempred(DeleteStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38:
			return serverVersion >= 80000;
		case 39:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean partitionDelete_sempred(PartitionDeleteContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40:
			return serverVersion >= 50602;
		}
		return true;
	}
	private boolean doStatement_sempred(DoStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41:
			return serverVersion < 50709;
		case 42:
			return serverVersion >= 50709;
		}
		return true;
	}
	private boolean insertStatement_sempred(InsertStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43:
			return  serverVersion >= 80018;
		case 44:
			return  serverVersion >= 80018;
		}
		return true;
	}
	private boolean queryExpression_sempred(QueryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45:
			return serverVersion >= 80000;
		case 46:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean queryPrimary_sempred(QueryPrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47:
			return serverVersion >= 80019;
		case 48:
			return serverVersion >= 80019;
		}
		return true;
	}
	private boolean querySpecification_sempred(QuerySpecificationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean olapOption_sempred(OlapOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean selectOption_sempred(SelectOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51:
			return serverVersion < 80000;
		case 52:
			return serverVersion >= 50704 && serverVersion < 50708;
		}
		return true;
	}
	private boolean lockingClause_sempred(LockingClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53:
			return serverVersion >= 80000;
		case 54:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean lockStrengh_sempred(LockStrenghContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56:
			return serverVersion < 80017;
		}
		return true;
	}
	private boolean tableFactor_sempred(TableFactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57:
			return serverVersion >= 80004;
		}
		return true;
	}
	private boolean derivedTable_sempred(DerivedTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58:
			return serverVersion >= 80000;
		case 59:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean jtColumn_sempred(JtColumnContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean tableAlias_sempred(TableAliasContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61:
			return serverVersion < 80017;
		}
		return true;
	}
	private boolean updateStatement_sempred(UpdateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean transactionCharacteristic_sempred(TransactionCharacteristicContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63:
			return serverVersion >= 50605;
		}
		return true;
	}
	private boolean lockStatement_sempred(LockStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64:
			return serverVersion >= 80000;
		case 65:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean xaConvert_sempred(XaConvertContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66:
			return serverVersion >= 50704;
		}
		return true;
	}
	private boolean replicationStatement_sempred(ReplicationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67:
			return serverVersion > 80000;
		case 68:
			return serverVersion >= 50700;
		case 69:
			return serverVersion > 50706;
		}
		return true;
	}
	private boolean resetOption_sempred(ResetOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean masterResetOptions_sempred(MasterResetOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71:
			return serverVersion >= 80000;
		case 72:
			return serverVersion < 80017;
		case 73:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean changeReplication_sempred(ChangeReplicationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean slaveUntilOptions_sempred(SlaveUntilOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75:
			return serverVersion >= 50606;
		case 76:
			return serverVersion >= 50606;
		}
		return true;
	}
	private boolean slaveConnectionOptions_sempred(SlaveConnectionOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77:
			return serverVersion >= 50604;
		}
		return true;
	}
	private boolean cloneStatement_sempred(CloneStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean accountManagementStatement_sempred(AccountManagementStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79:
			return serverVersion >= 50606;
		case 80:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean alterUser_sempred(AlterUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean alterUserTail_sempred(AlterUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 82:
			return serverVersion < 80014;
		case 83:
			return serverVersion >= 80014;
		case 84:
			return serverVersion >= 50706;
		case 85:
			return serverVersion >= 80014;
		case 86:
			return serverVersion >= 80014;
		case 87:
			return serverVersion >= 80014;
		case 88:
			return serverVersion >= 80000;
		case 89:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean createUser_sempred(CreateUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 90:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean createUserTail_sempred(CreateUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 91:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean defaultRoleClause_sempred(DefaultRoleClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 92:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean accountLockPasswordExpireOptions_sempred(AccountLockPasswordExpireOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 93:
			return serverVersion >= 80014;
		}
		return true;
	}
	private boolean dropUser_sempred(DropUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 94:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean grant_sempred(GrantContext _localctx, int predIndex) {
		switch (predIndex) {
		case 95:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean grantTargetList_sempred(GrantTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 96:
			return serverVersion < 80011;
		case 97:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean grantOptions_sempred(GrantOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 98:
			return serverVersion < 80011;
		case 99:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean versionedRequireClause_sempred(VersionedRequireClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 100:
			return serverVersion < 80011;
		}
		return true;
	}
	private boolean revoke_sempred(RevokeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 101:
			return serverVersion >= 80000;
		case 102:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean onTypeTo_sempred(OnTypeToContext _localctx, int predIndex) {
		switch (predIndex) {
		case 103:
			return serverVersion < 80000;
		case 104:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean roleOrPrivilege_sempred(RoleOrPrivilegeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 105:
			return serverVersion > 80000;
		case 106:
			return serverVersion > 80000;
		}
		return true;
	}
	private boolean grantIdentifier_sempred(GrantIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 107:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean tableAdministrationStatement_sempred(TableAdministrationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 108:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean startOptionValueList_sempred(StartOptionValueListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 109:
			return serverVersion < 50706;
		case 110:
			return serverVersion < 80014;
		case 111:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean optionValueNoOptionType_sempred(OptionValueNoOptionTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 112:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean setExprOrDefault_sempred(SetExprOrDefaultContext _localctx, int predIndex) {
		switch (predIndex) {
		case 113:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean showStatement_sempred(ShowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 114:
			return serverVersion < 50700;
		case 115:
			return serverVersion >= 80000;
		case 116:
			return serverVersion < 50700;
		case 117:
			return serverVersion >= 50704;
		}
		return true;
	}
	private boolean showCommandType_sempred(ShowCommandTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 118:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean nonBlocking_sempred(NonBlockingContext _localctx, int predIndex) {
		switch (predIndex) {
		case 119:
			return serverVersion >= 50700 && serverVersion < 50706;
		}
		return true;
	}
	private boolean otherAdministrativeStatement_sempred(OtherAdministrativeStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 120:
			return serverVersion >= 50709;
		}
		return true;
	}
	private boolean flushOption_sempred(FlushOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 121:
			return serverVersion < 80000;
		case 122:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean flushTablesOptions_sempred(FlushTablesOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 123:
			return serverVersion >= 50606;
		}
		return true;
	}
	private boolean utilityStatement_sempred(UtilityStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 124:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean explainStatement_sempred(ExplainStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 125:
			return serverVersion < 80000;
		case 126:
			return serverVersion < 80000;
		case 127:
			return serverVersion >= 50605;
		case 128:
			return serverVersion >= 80018;
		case 129:
			return serverVersion >= 80019;
		}
		return true;
	}
	private boolean explainableStatement_sempred(ExplainableStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 130:
			return serverVersion >= 50603;
		case 131:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 132:
			return precpred(_ctx, 3);
		case 133:
			return precpred(_ctx, 2);
		case 134:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean boolPri_sempred(BoolPriContext _localctx, int predIndex) {
		switch (predIndex) {
		case 135:
			return precpred(_ctx, 3);
		case 136:
			return precpred(_ctx, 2);
		case 137:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 138:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean bitExpr_sempred(BitExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 139:
			return precpred(_ctx, 7);
		case 140:
			return precpred(_ctx, 6);
		case 141:
			return precpred(_ctx, 5);
		case 142:
			return precpred(_ctx, 3);
		case 143:
			return precpred(_ctx, 2);
		case 144:
			return precpred(_ctx, 1);
		case 145:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean simpleExpr_sempred(SimpleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 146:
			return serverVersion >= 80000;
		case 147:
			return serverVersion >= 80000;
		case 148:
			return precpred(_ctx, 15);
		case 149:
			return precpred(_ctx, 21);
		}
		return true;
	}
	private boolean arrayCast_sempred(ArrayCastContext _localctx, int predIndex) {
		switch (predIndex) {
		case 150:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean jsonOperator_sempred(JsonOperatorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 151:
			return serverVersion >= 50708;
		case 152:
			return serverVersion >= 50713;
		}
		return true;
	}
	private boolean sumExpr_sempred(SumExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 153:
			return serverVersion >= 80000;
		case 154:
			return serverVersion >= 80000;
		case 155:
			return serverVersion >= 80000;
		case 156:
			return serverVersion >= 80000;
		case 157:
			return serverVersion >= 80000;
		case 158:
			return serverVersion >= 80000;
		case 159:
			return serverVersion >= 80000;
		case 160:
			return serverVersion >= 80000;
		case 161:
			return serverVersion >= 80000;
		case 162:
			return serverVersion >= 80000;
		case 163:
			return serverVersion >= 80000;
		case 164:
			return serverVersion >= 80000;
		case 165:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean runtimeFunctionCall_sempred(RuntimeFunctionCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 166:
			return serverVersion < 50607;
		case 167:
			return serverVersion < 80011;
		case 168:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean geometryFunction_sempred(GeometryFunctionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 169:
			return serverVersion < 50706;
		}
		return true;
	}
	private boolean fractionalPrecision_sempred(FractionalPrecisionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 170:
			return serverVersion >= 50604;
		}
		return true;
	}
	private boolean internalVariableName_sempred(InternalVariableNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 171:
			return serverVersion < 80017;
		case 172:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean castType_sempred(CastTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 173:
			return serverVersion >= 50708;
		case 174:
			return serverVersion >= 80017;
		case 175:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean channel_sempred(ChannelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 176:
			return serverVersion >= 50706;
		}
		return true;
	}
	private boolean getDiagnostics_sempred(GetDiagnosticsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 177:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean checkOrReferences_sempred(CheckOrReferencesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 178:
			return serverVersion < 80016;
		}
		return true;
	}
	private boolean tableConstraintDef_sempred(TableConstraintDefContext _localctx, int predIndex) {
		switch (predIndex) {
		case 179:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean fieldDefinition_sempred(FieldDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 180:
			return serverVersion >= 50707;
		case 181:
			return serverVersion < 80000;
		case 182:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean columnAttribute_sempred(ColumnAttributeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 183:
			return serverVersion >= 80014;
		case 184:
			return serverVersion >= 80013;
		case 185:
			return serverVersion >= 80000;
		case 186:
			return serverVersion >= 80017;
		case 187:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean keyListVariants_sempred(KeyListVariantsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 188:
			return serverVersion >= 80013;
		case 189:
			return serverVersion < 80013;
		}
		return true;
	}
	private boolean commonIndexOption_sempred(CommonIndexOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 190:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean dataType_sempred(DataTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 191:
			return serverVersion >= 50708;
		}
		return true;
	}
	private boolean charsetName_sempred(CharsetNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 192:
			return serverVersion < 80011;
		}
		return true;
	}
	private boolean collationName_sempred(CollationNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 193:
			return serverVersion < 80011;
		case 194:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean createTableOption_sempred(CreateTableOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 195:
			return serverVersion >= 80014;
		case 196:
			return serverVersion >= 50708;
		case 197:
			return serverVersion >= 50711;
		case 198:
			return serverVersion >= 50707;
		}
		return true;
	}
	private boolean partitionKeyAlgorithm_sempred(PartitionKeyAlgorithmContext _localctx, int predIndex) {
		switch (predIndex) {
		case 199:
			return serverVersion >= 50700;
		}
		return true;
	}
	private boolean createUserEntry_sempred(CreateUserEntryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 200:
			return serverVersion < 80011;
		case 201:
			return serverVersion >= 50706;
		case 202:
			return serverVersion >= 80018;
		}
		return true;
	}
	private boolean usePartition_sempred(UsePartitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 203:
			return serverVersion >= 50602;
		}
		return true;
	}
	private boolean columnName_sempred(ColumnNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 204:
			return serverVersion >= 80000;
		case 205:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean pureIdentifier_sempred(PureIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 206:
			return isSqlModeActive(AnsiQuotes);
		}
		return true;
	}
	private boolean simpleIdentifier_sempred(SimpleIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 207:
			return serverVersion < 80000;
		}
		return true;
	}
	private boolean real_ulonglong_number_sempred(Real_ulonglong_numberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 208:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean textStringLiteral_sempred(TextStringLiteralContext _localctx, int predIndex) {
		switch (predIndex) {
		case 209:
			return !isSqlModeActive(AnsiQuotes);
		}
		return true;
	}
	private boolean textStringHash_sempred(TextStringHashContext _localctx, int predIndex) {
		switch (predIndex) {
		case 210:
			return serverVersion >= 80017;
		}
		return true;
	}
	private boolean identifierKeyword_sempred(IdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 211:
			return serverVersion < 80017;
		case 212:
			return serverVersion >= 50709;
		case 213:
			return serverVersion >= 80011;
		}
		return true;
	}
	private boolean labelKeyword_sempred(LabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 214:
			return serverVersion < 80017;
		}
		return true;
	}
	private boolean identifierKeywordsUnambiguous_sempred(IdentifierKeywordsUnambiguousContext _localctx, int predIndex) {
		switch (predIndex) {
		case 215:
			return serverVersion >= 80019;
		}
		return true;
	}
	private boolean roleKeyword_sempred(RoleKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 216:
			return serverVersion < 80017;
		}
		return true;
	}
	private boolean roleOrIdentifierKeyword_sempred(RoleOrIdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 217:
			return serverVersion >= 50709;
		case 218:
			return serverVersion >= 80000;
		}
		return true;
	}
	private boolean roleOrLabelKeyword_sempred(RoleOrLabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 219:
			return serverVersion < 50709;
		case 220:
			return serverVersion < 80000;
		case 221:
			return serverVersion >= 80000;
		case 222:
			return serverVersion >= 80014;
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0328\u20e3\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260\t\u0260\4\u0261\t\u0261\4\u0262"+
		"\t\u0262\4\u0263\t\u0263\3\2\3\2\3\2\5\2\u04ca\n\2\3\2\3\2\5\2\u04ce\n"+
		"\2\3\2\5\2\u04d1\n\2\5\2\u04d3\n\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u04f7\n\3\3\4\3\4\3\4\3\4\3\4\3\4\5"+
		"\4\u04ff\n\4\3\4\3\4\3\4\5\4\u0504\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0514\n\4\3\5\3\5\3\5\6\5\u0519\n\5\r\5\16"+
		"\5\u051a\3\5\3\5\3\5\3\5\3\5\5\5\u0522\n\5\3\6\5\6\u0525\n\6\3\6\3\6\3"+
		"\6\3\6\3\6\5\6\u052c\n\6\3\6\3\6\3\6\5\6\u0531\n\6\3\6\5\6\u0534\n\6\3"+
		"\6\3\6\3\6\5\6\u0539\n\6\3\6\3\6\3\6\3\6\5\6\u053f\n\6\5\6\u0541\n\6\3"+
		"\6\3\6\5\6\u0545\n\6\3\6\3\6\5\6\u0549\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\5\7\u0552\n\7\3\b\3\b\5\b\u0556\n\b\3\b\7\b\u0559\n\b\f\b\16\b\u055c"+
		"\13\b\3\t\3\t\3\t\5\t\u0561\n\t\3\n\3\n\3\n\3\n\3\13\5\13\u0568\n\13\3"+
		"\13\3\13\5\13\u056c\n\13\3\13\3\13\3\13\5\13\u0571\n\13\3\f\3\f\3\f\5"+
		"\f\u0576\n\f\3\f\3\f\3\f\3\f\3\f\5\f\u057d\n\f\3\f\5\f\u0580\n\f\3\r\3"+
		"\r\3\r\3\r\5\r\u0586\n\r\3\r\5\r\u0589\n\r\3\16\3\16\3\16\7\16\u058e\n"+
		"\16\f\16\16\16\u0591\13\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u059a"+
		"\n\17\3\20\3\20\3\20\5\20\u059f\n\20\3\20\3\20\3\20\5\20\u05a4\n\20\3"+
		"\20\3\20\3\20\3\20\3\20\3\20\5\20\u05ac\n\20\3\20\3\20\3\20\3\20\5\20"+
		"\u05b2\n\20\3\20\3\20\5\20\u05b6\n\20\3\20\3\20\3\20\5\20\u05bb\n\20\3"+
		"\20\3\20\3\20\3\20\3\20\7\20\u05c2\n\20\f\20\16\20\u05c5\13\20\3\20\3"+
		"\20\3\20\5\20\u05ca\n\20\3\20\3\20\7\20\u05ce\n\20\f\20\16\20\u05d1\13"+
		"\20\3\20\3\20\3\20\5\20\u05d6\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\5\20\u05df\n\20\3\20\3\20\3\20\3\20\5\20\u05e5\n\20\3\20\3\20\3\20\3"+
		"\20\3\20\3\20\3\20\5\20\u05ee\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\5\20\u05fc\n\20\3\21\3\21\5\21\u0600\n\21\3"+
		"\21\3\21\3\21\3\21\5\21\u0606\n\21\7\21\u0608\n\21\f\21\16\21\u060b\13"+
		"\21\3\22\3\22\3\22\5\22\u0610\n\22\3\23\3\23\5\23\u0614\n\23\3\23\3\23"+
		"\3\23\5\23\u0619\n\23\3\23\5\23\u061c\n\23\3\23\3\23\3\23\3\23\5\23\u0622"+
		"\n\23\3\23\3\23\3\23\3\23\5\23\u0628\n\23\3\23\3\23\3\23\3\23\5\23\u062e"+
		"\n\23\3\23\3\23\5\23\u0632\n\23\3\23\3\23\3\23\5\23\u0637\n\23\3\23\3"+
		"\23\5\23\u063b\n\23\3\23\3\23\5\23\u063f\n\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\5\23\u0647\n\23\5\23\u0649\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3"+
		"\23\3\23\3\23\3\23\3\23\5\23\u0656\n\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\5\23\u065e\n\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0666\n\23\3\23\3"+
		"\23\5\23\u066a\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\5\23\u0687\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0697\n\23\3\23\5\23\u069a\n\23\3"+
		"\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u06a3\n\23\3\24\3\24\3\24\5\24"+
		"\u06a8\n\24\3\25\3\25\3\26\3\26\5\26\u06ae\n\26\3\26\3\26\3\26\5\26\u06b3"+
		"\n\26\7\26\u06b5\n\26\f\26\16\26\u06b8\13\26\3\27\3\27\5\27\u06bc\n\27"+
		"\3\27\3\27\5\27\u06c0\n\27\3\30\3\30\5\30\u06c4\n\30\3\30\3\30\5\30\u06c8"+
		"\n\30\3\31\3\31\5\31\u06cc\n\31\3\31\3\31\5\31\u06d0\n\31\5\31\u06d2\n"+
		"\31\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\5\34\u06dd\n\34\3\35"+
		"\3\35\3\35\3\35\3\35\3\35\5\35\u06e5\n\35\3\35\3\35\3\35\3\35\3\35\3\35"+
		"\3\35\5\35\u06ee\n\35\3\35\7\35\u06f1\n\35\f\35\16\35\u06f4\13\35\5\35"+
		"\u06f6\n\35\3\35\3\35\3\35\5\35\u06fb\n\35\3\35\3\35\3\35\3\35\3\35\5"+
		"\35\u0702\n\35\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u070a\n\36\3\37\3\37"+
		"\5\37\u070e\n\37\3\37\7\37\u0711\n\37\f\37\16\37\u0714\13\37\3 \3 \3!"+
		"\3!\5!\u071a\n!\3!\7!\u071d\n!\f!\16!\u0720\13!\3\"\3\"\5\"\u0724\n\""+
		"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u072c\n\"\3#\3#\5#\u0730\n#\3#\3#\3#\5#\u0735"+
		"\n#\3$\5$\u0738\n$\3$\5$\u073b\n$\3$\5$\u073e\n$\3$\3$\3$\3$\3%\5%\u0745"+
		"\n%\3%\3%\3%\3&\3&\5&\u074c\n&\3\'\3\'\5\'\u0750\n\'\3\'\3\'\3\'\3(\3"+
		"(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0768\n(\3)\3"+
		")\5)\u076c\n)\3)\3)\7)\u0770\n)\f)\16)\u0773\13)\3*\3*\3*\3*\5*\u0779"+
		"\n*\3+\5+\u077c\n+\3+\3+\5+\u0780\n+\3+\3+\3+\3+\3+\5+\u0787\n+\3+\5+"+
		"\u078a\n+\3+\5+\u078d\n+\3+\5+\u0790\n+\3+\3+\3+\3+\3+\3+\3+\5+\u0799"+
		"\n+\3,\3,\3,\7,\u079e\n,\f,\16,\u07a1\13,\3-\3-\5-\u07a5\n-\3.\5.\u07a8"+
		"\n.\3.\5.\u07ab\n.\3.\3.\3/\3/\5/\u07b1\n/\3\60\3\60\3\60\3\60\5\60\u07b7"+
		"\n\60\3\60\5\60\u07ba\n\60\3\60\3\60\3\61\5\61\u07bf\n\61\3\61\3\61\3"+
		"\61\3\61\3\61\3\61\7\61\u07c7\n\61\f\61\16\61\u07ca\13\61\5\61\u07cc\n"+
		"\61\3\61\3\61\7\61\u07d0\n\61\f\61\16\61\u07d3\13\61\3\61\3\61\3\62\5"+
		"\62\u07d8\n\62\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u07e0\n\62\f\62\16\62"+
		"\u07e3\13\62\5\62\u07e5\n\62\3\62\3\62\3\62\3\62\7\62\u07eb\n\62\f\62"+
		"\16\62\u07ee\13\62\3\62\3\62\3\63\5\63\u07f3\n\63\3\63\3\63\3\63\3\63"+
		"\3\63\3\63\3\63\3\64\3\64\5\64\u07fe\n\64\3\64\5\64\u0801\n\64\3\65\6"+
		"\65\u0804\n\65\r\65\16\65\u0805\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u0819\n\66\3\67\5\67"+
		"\u081c\n\67\3\67\5\67\u081f\n\67\3\67\3\67\3\67\3\67\5\67\u0825\n\67\3"+
		"\67\5\67\u0828\n\67\5\67\u082a\n\67\3\67\3\67\7\67\u082e\n\67\f\67\16"+
		"\67\u0831\13\67\3\67\3\67\3\67\3\67\3\67\7\67\u0838\n\67\f\67\16\67\u083b"+
		"\13\67\3\67\3\67\3\67\3\67\3\67\7\67\u0842\n\67\f\67\16\67\u0845\13\67"+
		"\5\67\u0847\n\67\3\67\5\67\u084a\n\67\38\38\38\58\u084f\n8\38\38\38\3"+
		"8\58\u0855\n8\39\39\39\39\3:\3:\3:\3:\3:\3:\3:\5:\u0862\n:\3;\3;\5;\u0866"+
		"\n;\3;\7;\u0869\n;\f;\16;\u086c\13;\3<\3<\3<\3<\3<\3<\5<\u0874\n<\3=\3"+
		"=\3=\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>\7>\u0883\n>\f>\16>\u0886\13>\3>\3>"+
		"\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u0898\n?\3@\3@\3@\3@\3@"+
		"\3@\3@\5@\u08a1\n@\3@\5@\u08a4\n@\3A\3A\3A\3A\3A\3A\5A\u08ac\nA\3B\3B"+
		"\3B\5B\u08b1\nB\3B\3B\5B\u08b5\nB\3C\3C\3C\3D\3D\5D\u08bc\nD\3D\7D\u08bf"+
		"\nD\fD\16D\u08c2\13D\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u08d0\nE\3"+
		"F\3F\5F\u08d4\nF\3F\3F\3G\3G\5G\u08da\nG\3G\3G\3H\3H\5H\u08e0\nH\3H\3"+
		"H\3I\3I\5I\u08e6\nI\3I\3I\3J\3J\5J\u08ec\nJ\3J\3J\3K\3K\5K\u08f2\nK\3"+
		"K\3K\3L\5L\u08f7\nL\3L\3L\5L\u08fb\nL\3L\3L\3M\3M\3N\3N\5N\u0903\nN\3"+
		"N\3N\3O\3O\5O\u0909\nO\3O\3O\3P\3P\5P\u090f\nP\3P\3P\3Q\5Q\u0914\nQ\3"+
		"Q\5Q\u0917\nQ\3Q\5Q\u091a\nQ\3Q\3Q\3Q\3Q\3R\3R\3R\5R\u0923\nR\3R\5R\u0926"+
		"\nR\3S\3S\3S\3S\3T\3T\3T\3T\3U\5U\u0931\nU\3U\3U\3U\3U\3U\3U\3U\3U\3U"+
		"\3U\5U\u093d\nU\3U\3U\3V\3V\3V\3V\3W\5W\u0946\nW\3W\3W\5W\u094a\nW\3W"+
		"\3W\3W\3W\3W\3W\3W\5W\u0953\nW\3W\5W\u0956\nW\3W\3W\3W\3W\5W\u095c\nW"+
		"\5W\u095e\nW\3W\3W\5W\u0962\nW\3W\3W\3W\3X\3X\5X\u0969\nX\3X\3X\3Y\3Y"+
		"\3Y\3Y\3Y\3Y\3Y\7Y\u0974\nY\fY\16Y\u0977\13Y\3Y\3Y\3Y\3Y\5Y\u097d\nY\3"+
		"Y\3Y\7Y\u0981\nY\fY\16Y\u0984\13Y\5Y\u0986\nY\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z"+
		"\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0997\nZ\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3[\3["+
		"\3[\3[\3[\3[\3[\3[\5[\u09ab\n[\3\\\3\\\5\\\u09af\n\\\3\\\3\\\3]\3]\5]"+
		"\u09b5\n]\3]\3]\3^\3^\5^\u09bb\n^\3^\3^\3_\3_\5_\u09c1\n_\3_\3_\3`\5`"+
		"\u09c6\n`\3`\3`\3`\3`\3`\5`\u09cd\n`\3a\3a\3a\3a\3a\5a\u09d4\na\3a\7a"+
		"\u09d7\na\fa\16a\u09da\13a\5a\u09dc\na\3b\3b\5b\u09e0\nb\3c\3c\5c\u09e4"+
		"\nc\3c\3c\3d\5d\u09e9\nd\3d\3d\5d\u09ed\nd\3d\3d\5d\u09f1\nd\3e\3e\3e"+
		"\3e\5e\u09f7\ne\3e\7e\u09fa\ne\fe\16e\u09fd\13e\5e\u09ff\ne\3f\3f\5f\u0a03"+
		"\nf\3f\3f\3g\3g\5g\u0a09\ng\3g\3g\5g\u0a0d\ng\3h\3h\5h\u0a11\nh\3h\3h"+
		"\3i\3i\3i\3i\5i\u0a19\ni\3i\3i\3j\3j\3j\3j\5j\u0a21\nj\3k\3k\3k\3k\3k"+
		"\7k\u0a28\nk\fk\16k\u0a2b\13k\3l\3l\3l\3l\3m\3m\5m\u0a33\nm\3m\3m\3n\3"+
		"n\3n\3n\3n\3o\3o\3o\3o\5o\u0a40\no\3o\5o\u0a43\no\3p\3p\5p\u0a47\np\3"+
		"p\3p\7p\u0a4b\np\fp\16p\u0a4e\13p\3p\3p\3p\3p\3p\5p\u0a55\np\3p\3p\3p"+
		"\5p\u0a5a\np\3p\5p\u0a5d\np\3p\5p\u0a60\np\3p\5p\u0a63\np\3p\5p\u0a66"+
		"\np\5p\u0a68\np\3p\3p\3p\3p\5p\u0a6e\np\5p\u0a70\np\3q\3q\3q\3q\3q\3q"+
		"\3r\3r\3s\3s\3s\3s\3s\5s\u0a7f\ns\3t\3t\3t\3t\5t\u0a85\nt\3t\3t\3t\3t"+
		"\3t\5t\u0a8c\nt\3t\5t\u0a8f\nt\5t\u0a91\nt\5t\u0a93\nt\3u\3u\3u\3u\3u"+
		"\3u\3u\3u\5u\u0a9d\nu\5u\u0a9f\nu\3v\3v\5v\u0aa3\nv\3v\5v\u0aa6\nv\3v"+
		"\5v\u0aa9\nv\3v\3v\5v\u0aad\nv\3v\3v\3v\5v\u0ab2\nv\3v\3v\3v\3v\5v\u0ab8"+
		"\nv\3v\5v\u0abb\nv\3v\5v\u0abe\nv\3w\3w\3x\3x\5x\u0ac4\nx\3x\5x\u0ac7"+
		"\nx\3x\3x\3y\3y\3y\7y\u0ace\ny\fy\16y\u0ad1\13y\3z\3z\3z\3{\3{\3{\5{\u0ad9"+
		"\n{\3{\3{\5{\u0add\n{\3|\3|\5|\u0ae1\n|\3|\3|\3|\3|\5|\u0ae7\n|\3|\7|"+
		"\u0aea\n|\f|\16|\u0aed\13|\3}\3}\5}\u0af1\n}\3}\3}\3}\5}\u0af6\n}\7}\u0af8"+
		"\n}\f}\16}\u0afb\13}\3~\3~\3~\5~\u0b00\n~\3\177\3\177\3\177\3\177\3\177"+
		"\3\177\3\u0080\3\u0080\3\u0080\5\u0080\u0b0b\n\u0080\3\u0080\5\u0080\u0b0e"+
		"\n\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0b13\n\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\5\u0080\u0b19\n\u0080\3\u0080\5\u0080\u0b1c\n\u0080\3"+
		"\u0080\5\u0080\u0b1f\n\u0080\3\u0080\5\u0080\u0b22\n\u0080\3\u0080\5\u0080"+
		"\u0b25\n\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082"+
		"\3\u0082\3\u0082\3\u0083\3\u0083\3\u0083\5\u0083\u0b33\n\u0083\3\u0083"+
		"\5\u0083\u0b36\n\u0083\3\u0083\3\u0083\5\u0083\u0b3a\n\u0083\3\u0084\3"+
		"\u0084\5\u0084\u0b3e\n\u0084\3\u0084\3\u0084\3\u0085\3\u0085\5\u0085\u0b44"+
		"\n\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0b49\n\u0085\7\u0085\u0b4b\n"+
		"\u0085\f\u0085\16\u0085\u0b4e\13\u0085\3\u0086\3\u0086\5\u0086\u0b52\n"+
		"\u0086\3\u0086\5\u0086\u0b55\n\u0086\3\u0086\3\u0086\5\u0086\u0b59\n\u0086"+
		"\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0b5f\n\u0086\3\u0087\3\u0087"+
		"\5\u0087\u0b63\n\u0087\3\u0087\3\u0087\5\u0087\u0b67\n\u0087\3\u0088\3"+
		"\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u0b70\n\u0088\3"+
		"\u0088\3\u0088\3\u0088\5\u0088\u0b75\n\u0088\3\u0089\3\u0089\5\u0089\u0b79"+
		"\n\u0089\3\u0089\3\u0089\5\u0089\u0b7d\n\u0089\3\u0089\5\u0089\u0b80\n"+
		"\u0089\3\u0089\3\u0089\5\u0089\u0b84\n\u0089\3\u0089\5\u0089\u0b87\n\u0089"+
		"\5\u0089\u0b89\n\u0089\3\u0089\3\u0089\5\u0089\u0b8d\n\u0089\3\u008a\3"+
		"\u008a\3\u008a\3\u008a\5\u008a\u0b93\n\u008a\3\u008a\3\u008a\5\u008a\u0b97"+
		"\n\u008a\5\u008a\u0b99\n\u008a\3\u008a\3\u008a\5\u008a\u0b9d\n\u008a\3"+
		"\u008a\3\u008a\5\u008a\u0ba1\n\u008a\7\u008a\u0ba3\n\u008a\f\u008a\16"+
		"\u008a\u0ba6\13\u008a\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0bac\n"+
		"\u008b\5\u008b\u0bae\n\u008b\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\3"+
		"\u008c\3\u008c\5\u008c\u0bb7\n\u008c\3\u008d\3\u008d\7\u008d\u0bbb\n\u008d"+
		"\f\u008d\16\u008d\u0bbe\13\u008d\3\u008d\3\u008d\5\u008d\u0bc2\n\u008d"+
		"\3\u008d\5\u008d\u0bc5\n\u008d\3\u008d\5\u008d\u0bc8\n\u008d\3\u008d\5"+
		"\u008d\u0bcb\n\u008d\3\u008d\5\u008d\u0bce\n\u008d\3\u008d\3\u008d\5\u008d"+
		"\u0bd2\n\u008d\3\u008e\3\u008e\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090"+
		"\3\u0091\3\u0091\3\u0091\3\u0092\3\u0092\3\u0092\5\u0092\u0be1\n\u0092"+
		"\3\u0093\3\u0093\5\u0093\u0be5\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\5\u0094\u0beb\n\u0094\3\u0094\5\u0094\u0bee\n\u0094\3\u0094\5\u0094\u0bf1"+
		"\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0bf7\n\u0094\3\u0094"+
		"\3\u0094\3\u0094\5\u0094\u0bfc\n\u0094\7\u0094\u0bfe\n\u0094\f\u0094\16"+
		"\u0094\u0c01\13\u0094\5\u0094\u0c03\n\u0094\3\u0095\3\u0095\3\u0095\3"+
		"\u0095\3\u0095\3\u0095\5\u0095\u0c0b\n\u0095\5\u0095\u0c0d\n\u0095\3\u0095"+
		"\3\u0095\3\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097"+
		"\u0c18\n\u0097\f\u0097\16\u0097\u0c1b\13\u0097\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u009a\5\u009a\u0c26\n\u009a"+
		"\3\u009a\3\u009a\3\u009a\5\u009a\u0c2b\n\u009a\3\u009a\5\u009a\u0c2e\n"+
		"\u009a\3\u009a\5\u009a\u0c31\n\u009a\3\u009b\3\u009b\3\u009b\5\u009b\u0c36"+
		"\n\u009b\3\u009c\3\u009c\3\u009d\3\u009d\5\u009d\u0c3c\n\u009d\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0c4c\n\u009e\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0c60"+
		"\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1"+
		"\u0c69\n\u00a1\3\u00a2\3\u00a2\5\u00a2\u0c6d\n\u00a2\3\u00a2\3\u00a2\3"+
		"\u00a2\7\u00a2\u0c72\n\u00a2\f\u00a2\16\u00a2\u0c75\13\u00a2\3\u00a3\3"+
		"\u00a3\5\u00a3\u0c79\n\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3"+
		"\u00a4\3\u00a4\5\u00a4\u0c82\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3"+
		"\u00a5\5\u00a5\u0c89\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3"+
		"\u00a7\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0c94\n\u00a8\3\u00a9\3\u00a9\3"+
		"\u00a9\7\u00a9\u0c99\n\u00a9\f\u00a9\16\u00a9\u0c9c\13\u00a9\3\u00aa\3"+
		"\u00aa\3\u00aa\3\u00aa\7\u00aa\u0ca2\n\u00aa\f\u00aa\16\u00aa\u0ca5\13"+
		"\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0cad\n"+
		"\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\5\u00ad\u0cb9\n\u00ad\3\u00ae\6\u00ae\u0cbc\n\u00ae\r"+
		"\u00ae\16\u00ae\u0cbd\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af"+
		"\u0cc5\n\u00af\3\u00af\3\u00af\5\u00af\u0cc9\n\u00af\3\u00af\3\u00af\3"+
		"\u00af\3\u00af\5\u00af\u0ccf\n\u00af\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0cd4"+
		"\n\u00b0\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0cd9\n\u00b1\3\u00b2\3\u00b2"+
		"\5\u00b2\u0cdd\n\u00b2\3\u00b2\3\u00b2\7\u00b2\u0ce1\n\u00b2\f\u00b2\16"+
		"\u00b2\u0ce4\13\u00b2\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0ce9\n\u00b3\5"+
		"\u00b3\u0ceb\n\u00b3\3\u00b4\5\u00b4\u0cee\n\u00b4\3\u00b4\3\u00b4\5\u00b4"+
		"\u0cf2\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\5\u00b6\u0cfc\n\u00b6\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0d01\n"+
		"\u00b6\3\u00b6\7\u00b6\u0d04\n\u00b6\f\u00b6\16\u00b6\u0d07\13\u00b6\3"+
		"\u00b7\3\u00b7\7\u00b7\u0d0b\n\u00b7\f\u00b7\16\u00b7\u0d0e\13\u00b7\3"+
		"\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0d16\n\u00b8\3"+
		"\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0d1e\n\u00b8\3"+
		"\u00b8\3\u00b8\3\u00b8\5\u00b8\u0d23\n\u00b8\3\u00b9\3\u00b9\5\u00b9\u0d27"+
		"\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0d2d\n\u00b9\3\u00b9"+
		"\5\u00b9\u0d30\n\u00b9\3\u00ba\5\u00ba\u0d33\n\u00ba\3\u00ba\3\u00ba\5"+
		"\u00ba\u0d37\n\u00ba\3\u00bb\3\u00bb\5\u00bb\u0d3b\n\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0d45\n\u00bc"+
		"\3\u00bd\3\u00bd\5\u00bd\u0d49\n\u00bd\3\u00bd\5\u00bd\u0d4c\n\u00bd\3"+
		"\u00bd\5\u00bd\u0d4f\n\u00bd\3\u00be\3\u00be\3\u00be\5\u00be\u0d54\n\u00be"+
		"\3\u00be\3\u00be\3\u00bf\3\u00bf\5\u00bf\u0d5a\n\u00bf\3\u00bf\3\u00bf"+
		"\5\u00bf\u0d5e\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u0d64\n"+
		"\u00bf\3\u00bf\5\u00bf\u0d67\n\u00bf\5\u00bf\u0d69\n\u00bf\3\u00c0\3\u00c0"+
		"\3\u00c0\5\u00c0\u0d6e\n\u00c0\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u0d7a\n\u00c1\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u0d81\n\u00c2\f\u00c2\16\u00c2"+
		"\u0d84\13\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0d90\n\u00c3\3\u00c3\5\u00c3\u0d93\n"+
		"\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0d98\n\u00c3\3\u00c3\3\u00c3\3"+
		"\u00c3\3\u00c3\3\u00c3\5\u00c3\u0d9f\n\u00c3\3\u00c4\3\u00c4\5\u00c4\u0da3"+
		"\n\u00c4\3\u00c4\3\u00c4\5\u00c4\u0da7\n\u00c4\5\u00c4\u0da9\n\u00c4\3"+
		"\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0db7\n\u00c7\3\u00c8\3\u00c8\3\u00c9"+
		"\3\u00c9\3\u00c9\5\u00c9\u0dbe\n\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca"+
		"\3\u00ca\7\u00ca\u0dc5\n\u00ca\f\u00ca\16\u00ca\u0dc8\13\u00ca\3\u00cb"+
		"\3\u00cb\3\u00cb\5\u00cb\u0dcd\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0dd6\n\u00cb\3\u00cb\3\u00cb\5\u00cb"+
		"\u0dda\n\u00cb\3\u00cb\3\u00cb\5\u00cb\u0dde\n\u00cb\3\u00cc\3\u00cc\3"+
		"\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0de8\n\u00ce\5"+
		"\u00ce\u0dea\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5"+
		"\u00cf\u0df2\n\u00cf\3\u00d0\3\u00d0\3\u00d0\7\u00d0\u0df7\n\u00d0\f\u00d0"+
		"\16\u00d0\u0dfa\13\u00d0\3\u00d1\3\u00d1\5\u00d1\u0dfe\n\u00d1\3\u00d2"+
		"\3\u00d2\5\u00d2\u0e02\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u0e06\n\u00d2\3"+
		"\u00d2\5\u00d2\u0e09\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u0e0f"+
		"\n\u00d2\3\u00d2\5\u00d2\u0e12\n\u00d2\3\u00d2\5\u00d2\u0e15\n\u00d2\3"+
		"\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0e1b\n\u00d3\3\u00d4\3\u00d4\3"+
		"\u00d4\7\u00d4\u0e20\n\u00d4\f\u00d4\16\u00d4\u0e23\13\u00d4\3\u00d4\3"+
		"\u00d4\5\u00d4\u0e27\n\u00d4\3\u00d4\3\u00d4\5\u00d4\u0e2b\n\u00d4\3\u00d4"+
		"\5\u00d4\u0e2e\n\u00d4\3\u00d4\5\u00d4\u0e31\n\u00d4\3\u00d4\5\u00d4\u0e34"+
		"\n\u00d4\5\u00d4\u0e36\n\u00d4\3\u00d5\3\u00d5\5\u00d5\u0e3a\n\u00d5\3"+
		"\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u0e42\n\u00d6\3"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u0e48\n\u00d7\3\u00d7\3\u00d7\5"+
		"\u00d7\u0e4c\n\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u0e51\n\u00d7\3\u00d7"+
		"\5\u00d7\u0e54\n\u00d7\3\u00d7\5\u00d7\u0e57\n\u00d7\3\u00d7\5\u00d7\u0e5a"+
		"\n\u00d7\5\u00d7\u0e5c\n\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u0e61\n"+
		"\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u0e68\n\u00d8\f"+
		"\u00d8\16\u00d8\u0e6b\13\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u0e77\n\u00d8\5\u00d8"+
		"\u0e79\n\u00d8\3\u00d9\3\u00d9\5\u00d9\u0e7d\n\u00d9\3\u00d9\3\u00d9\3"+
		"\u00da\3\u00da\5\u00da\u0e83\n\u00da\3\u00da\5\u00da\u0e86\n\u00da\3\u00da"+
		"\5\u00da\u0e89\n\u00da\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u0e8f\n"+
		"\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u0e96\n\u00db\5"+
		"\u00db\u0e98\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5"+
		"\u00db\u0ea0\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u0ea6\n\u00db"+
		"\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u0eab\n\u00dc\3\u00dc\5\u00dc\u0eae\n"+
		"\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u0eb5\n\u00dd\5"+
		"\u00dd\u0eb7\n\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3"+
		"\u00de\5\u00de\u0ec0\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\7"+
		"\u00de\u0ec7\n\u00de\f\u00de\16\u00de\u0eca\13\u00de\3\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u0ed2\n\u00de\3\u00de\3\u00de\3"+
		"\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u0eda\n\u00de\3\u00df\3\u00df\5"+
		"\u00df\u0ede\n\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u0ee5"+
		"\n\u00df\3\u00df\5\u00df\u0ee8\n\u00df\5\u00df\u0eea\n\u00df\3\u00e0\3"+
		"\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0ef2\n\u00e0\3\u00e1\3"+
		"\u00e1\3\u00e1\3\u00e1\5\u00e1\u0ef8\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3"+
		"\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0f02\n\u00e2\3\u00e3\3"+
		"\u00e3\3\u00e3\7\u00e3\u0f07\n\u00e3\f\u00e3\16\u00e3\u0f0a\13\u00e3\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\5\u00e4\u0f67\n\u00e4\3\u00e5\3\u00e5\5\u00e5\u0f6b\n\u00e5\3"+
		"\u00e6\3\u00e6\3\u00e7\3\u00e7\5\u00e7\u0f71\n\u00e7\3\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\5\u00e8\u0f7f\n\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\7\u00e9"+
		"\u0f85\n\u00e9\f\u00e9\16\u00e9\u0f88\13\u00e9\5\u00e9\u0f8a\n\u00e9\3"+
		"\u00e9\3\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\7\u00ea"+
		"\u0f94\n\u00ea\f\u00ea\16\u00ea\u0f97\13\u00ea\3\u00ea\3\u00ea\5\u00ea"+
		"\u0f9b\n\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u0fa1\n\u00eb\3"+
		"\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u0fa8\n\u00eb\3\u00eb\3"+
		"\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u0faf\n\u00eb\3\u00eb\3\u00eb\3"+
		"\u00eb\3\u00eb\3\u00eb\5\u00eb\u0fb6\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3"+
		"\u00eb\3\u00eb\5\u00eb\u0fbd\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3"+
		"\u00eb\5\u00eb\u0fc4\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5"+
		"\u00eb\u0fcb\n\u00eb\3\u00eb\5\u00eb\u0fce\n\u00eb\3\u00ec\3\u00ec\3\u00ec"+
		"\7\u00ec\u0fd3\n\u00ec\f\u00ec\16\u00ec\u0fd6\13\u00ec\3\u00ed\3\u00ed"+
		"\3\u00ed\7\u00ed\u0fdb\n\u00ed\f\u00ed\16\u00ed\u0fde\13\u00ed\3\u00ee"+
		"\3\u00ee\3\u00ee\7\u00ee\u0fe3\n\u00ee\f\u00ee\16\u00ee\u0fe6\13\u00ee"+
		"\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0\7\u00f0\u0fed\n\u00f0\f\u00f0"+
		"\16\u00f0\u0ff0\13\u00f0\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u0ff5\n\u00f1"+
		"\3\u00f1\3\u00f1\5\u00f1\u0ff9\n\u00f1\3\u00f1\3\u00f1\5\u00f1\u0ffd\n"+
		"\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u1002\n\u00f1\3\u00f1\5\u00f1\u1005"+
		"\n\u00f1\5\u00f1\u1007\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\3\u00f2\5\u00f2\u1010\n\u00f2\3\u00f2\3\u00f2\7\u00f2\u1014\n"+
		"\u00f2\f\u00f2\16\u00f2\u1017\13\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\5\u00f3\u101d\n\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1022\n\u00f3\3"+
		"\u00f3\3\u00f3\3\u00f3\5\u00f3\u1027\n\u00f3\3\u00f3\3\u00f3\3\u00f3\5"+
		"\u00f3\u102c\n\u00f3\3\u00f3\5\u00f3\u102f\n\u00f3\3\u00f4\3\u00f4\3\u00f4"+
		"\7\u00f4\u1034\n\u00f4\f\u00f4\16\u00f4\u1037\13\u00f4\3\u00f5\3\u00f5"+
		"\3\u00f6\3\u00f6\3\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7"+
		"\u1043\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u1049\n\u00f7\3"+
		"\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u104f\n\u00f8\3\u00f9\3\u00f9\3"+
		"\u00f9\7\u00f9\u1054\n\u00f9\f\u00f9\16\u00f9\u1057\13\u00f9\3\u00fa\3"+
		"\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u105e\n\u00fa\3\u00fa\3\u00fa\3"+
		"\u00fa\3\u00fa\5\u00fa\u1064\n\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3"+
		"\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u1070\n\u00fa\5"+
		"\u00fa\u1072\n\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u1078\n\u00fb"+
		"\3\u00fb\3\u00fb\5\u00fb\u107c\n\u00fb\5\u00fb\u107e\n\u00fb\3\u00fc\3"+
		"\u00fc\5\u00fc\u1082\n\u00fc\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3"+
		"\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u108f\n\u00fd\3"+
		"\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u1095\n\u00fe\3\u00fe\3\u00fe\3"+
		"\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u109d\n\u00ff\3\u00ff\3\u00ff\3"+
		"\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u10a8\n"+
		"\u00ff\3\u00ff\3\u00ff\5\u00ff\u10ac\n\u00ff\3\u00ff\3\u00ff\3\u00ff\3"+
		"\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff"+
		"\u10b9\n\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u10c0\n"+
		"\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u10c6\n\u00ff\3\u00ff\3"+
		"\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u10cd\n\u00ff\5\u00ff\u10cf\n\u00ff"+
		"\3\u0100\3\u0100\3\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101"+
		"\u10d9\n\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0102\3\u0102\5\u0102"+
		"\u10e1\n\u0102\3\u0102\5\u0102\u10e4\n\u0102\3\u0102\7\u0102\u10e7\n\u0102"+
		"\f\u0102\16\u0102\u10ea\13\u0102\3\u0102\5\u0102\u10ed\n\u0102\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\5\u0103\u10f3\n\u0103\3\u0103\5\u0103\u10f6\n"+
		"\u0103\3\u0104\3\u0104\3\u0104\5\u0104\u10fb\n\u0104\3\u0105\3\u0105\3"+
		"\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\6\u0105\u1106\n"+
		"\u0105\r\u0105\16\u0105\u1107\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u1114\n\u0106\3\u0106"+
		"\3\u0106\3\u0106\5\u0106\u1119\n\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\3\u0106\5\u0106\u1121\n\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\5\u0106\u1127\n\u0106\5\u0106\u1129\n\u0106\5\u0106\u112b\n\u0106\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\5\u0107\u1131\n\u0107\3\u0107\3\u0107\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u113d"+
		"\n\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u1142\n\u0108\5\u0108\u1144\n"+
		"\u0108\3\u0108\3\u0108\5\u0108\u1148\n\u0108\3\u0108\3\u0108\3\u0108\3"+
		"\u0108\5\u0108\u114e\n\u0108\3\u0108\5\u0108\u1151\n\u0108\3\u0108\5\u0108"+
		"\u1154\n\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\5\u0108\u115e\n\u0108\5\u0108\u1160\n\u0108\3\u0109\3\u0109\3"+
		"\u0109\3\u0109\5\u0109\u1166\n\u0109\3\u010a\3\u010a\3\u010a\6\u010a\u116b"+
		"\n\u010a\r\u010a\16\u010a\u116c\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a"+
		"\u1173\n\u010a\3\u010b\3\u010b\3\u010b\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\5\u010c\u117d\n\u010c\3\u010c\3\u010c\5\u010c\u1181\n\u010c\3"+
		"\u010d\3\u010d\3\u010d\5\u010d\u1186\n\u010d\3\u010e\3\u010e\3\u010e\3"+
		"\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\7\u010f\u1195\n\u010f\f\u010f\16\u010f\u1198\13\u010f\3\u0110"+
		"\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\3\u0110\3\u0110\3\u0110\5\u0110\u11a7\n\u0110\3\u0110\3\u0110\3\u0110"+
		"\5\u0110\u11ac\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\5\u0110\u11b4\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\5\u0110\u11bc\n\u0110\3\u0111\3\u0111\3\u0111\5\u0111\u11c1\n\u0111\3"+
		"\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u11c7\n\u0111\3\u0111\5\u0111\u11ca"+
		"\n\u0111\5\u0111\u11cc\n\u0111\3\u0112\3\u0112\3\u0113\3\u0113\3\u0113"+
		"\7\u0113\u11d3\n\u0113\f\u0113\16\u0113\u11d6\13\u0113\3\u0114\3\u0114"+
		"\3\u0114\5\u0114\u11db\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114"+
		"\u11e1\n\u0114\5\u0114\u11e3\n\u0114\3\u0114\3\u0114\5\u0114\u11e7\n\u0114"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\5\u0114\u11f2\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\5\u0114\u11fc\n\u0114\3\u0114\3\u0114\3\u0114\5\u0114"+
		"\u1201\n\u0114\3\u0115\3\u0115\3\u0115\5\u0115\u1206\n\u0115\3\u0115\3"+
		"\u0115\3\u0115\5\u0115\u120b\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3"+
		"\u0115\3\u0115\5\u0115\u1213\n\u0115\3\u0116\3\u0116\5\u0116\u1217\n\u0116"+
		"\3\u0116\7\u0116\u121a\n\u0116\f\u0116\16\u0116\u121d\13\u0116\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u1225\n\u0117\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\5\u0118\u1231\n\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u123f\n\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u1248"+
		"\n\u0119\5\u0119\u124a\n\u0119\3\u011a\3\u011a\3\u011a\7\u011a\u124f\n"+
		"\u011a\f\u011a\16\u011a\u1252\13\u011a\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\5\u011b\u1258\n\u011b\3\u011c\3\u011c\5\u011c\u125c\n\u011c\3\u011c\3"+
		"\u011c\3\u011c\3\u011c\5\u011c\u1262\n\u011c\3\u011c\3\u011c\3\u011c\3"+
		"\u011c\7\u011c\u1268\n\u011c\f\u011c\16\u011c\u126b\13\u011c\3\u011c\3"+
		"\u011c\3\u011c\3\u011c\5\u011c\u1271\n\u011c\3\u011c\3\u011c\5\u011c\u1275"+
		"\n\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u127b\n\u011c\3\u011c"+
		"\3\u011c\3\u011c\7\u011c\u1280\n\u011c\f\u011c\16\u011c\u1283\13\u011c"+
		"\5\u011c\u1285\n\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\5\u011d\u128e\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d"+
		"\u1294\n\u011d\3\u011e\3\u011e\3\u011e\5\u011e\u1299\n\u011e\3\u011f\3"+
		"\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\7\u0120\u12ae\n\u0120\f\u0120\16\u0120\u12b1\13\u0120\5\u0120\u12b3\n"+
		"\u0120\3\u0121\3\u0121\3\u0121\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u12c3\n\u0122"+
		"\3\u0122\3\u0122\3\u0122\5\u0122\u12c8\n\u0122\3\u0122\5\u0122\u12cb\n"+
		"\u0122\3\u0122\3\u0122\5\u0122\u12cf\n\u0122\3\u0122\5\u0122\u12d2\n\u0122"+
		"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\3\u0122\3\u0122\5\u0122\u12e0\n\u0122\3\u0122\3\u0122\3\u0122"+
		"\3\u0122\5\u0122\u12e6\n\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u12eb\n"+
		"\u0122\3\u0122\5\u0122\u12ee\n\u0122\5\u0122\u12f0\n\u0122\3\u0123\3\u0123"+
		"\5\u0123\u12f4\n\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u12f9\n\u0123\5"+
		"\u0123\u12fb\n\u0123\3\u0124\3\u0124\3\u0124\3\u0125\3\u0125\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1307\n\u0125\3\u0126\3\u0126\7"+
		"\u0126\u130b\n\u0126\f\u0126\16\u0126\u130e\13\u0126\3\u0127\3\u0127\3"+
		"\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127"+
		"\u1323\n\u0127\3\u0127\3\u0127\5\u0127\u1327\n\u0127\5\u0127\u1329\n\u0127"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1331\n\u0128"+
		"\3\u0129\3\u0129\5\u0129\u1335\n\u0129\3\u0129\3\u0129\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\5\u012a\u133e\n\u012a\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1348\n\u012c\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u134f\n\u012d\3\u012d\5\u012d"+
		"\u1352\n\u012d\3\u012d\3\u012d\5\u012d\u1356\n\u012d\3\u012d\5\u012d\u1359"+
		"\n\u012d\3\u012d\5\u012d\u135c\n\u012d\3\u012d\3\u012d\5\u012d\u1360\n"+
		"\u012d\3\u012d\5\u012d\u1363\n\u012d\3\u012d\3\u012d\5\u012d\u1367\n\u012d"+
		"\3\u012d\5\u012d\u136a\n\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u136f\n"+
		"\u012d\3\u012d\5\u012d\u1372\n\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u1377"+
		"\n\u012d\3\u012d\5\u012d\u137a\n\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\5\u012d\u1380\n\u012d\3\u012d\3\u012d\5\u012d\u1384\n\u012d\3\u012d\3"+
		"\u012d\3\u012d\3\u012d\5\u012d\u138a\n\u012d\3\u012d\5\u012d\u138d\n\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u1396"+
		"\n\u012d\5\u012d\u1398\n\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d"+
		"\u139e\n\u012d\3\u012d\3\u012d\5\u012d\u13a2\n\u012d\3\u012d\5\u012d\u13a5"+
		"\n\u012d\3\u012d\5\u012d\u13a8\n\u012d\3\u012d\3\u012d\5\u012d\u13ac\n"+
		"\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u13b2\n\u012d\3\u012d\5"+
		"\u012d\u13b5\n\u012d\3\u012d\5\u012d\u13b8\n\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u13c2\n\u012d\3\u012d"+
		"\3\u012d\5\u012d\u13c6\n\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\7\u012d\u13cd\n\u012d\f\u012d\16\u012d\u13d0\13\u012d\5\u012d\u13d2\n"+
		"\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u13d7\n\u012d\3\u012d\5\u012d\u13da"+
		"\n\u012d\3\u012d\5\u012d\u13dd\n\u012d\3\u012d\3\u012d\5\u012d\u13e1\n"+
		"\u012d\3\u012d\5\u012d\u13e4\n\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u13e9"+
		"\n\u012d\3\u012d\3\u012d\5\u012d\u13ed\n\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\5\u012d\u13f5\n\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d"+
		"\u1402\n\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\5\u012d\u1414\n\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u1419\n\u012d\3"+
		"\u012d\3\u012d\3\u012d\5\u012d\u141e\n\u012d\3\u012d\3\u012d\3\u012d\3"+
		"\u012d\3\u012d\3\u012d\5\u012d\u1426\n\u012d\3\u012e\3\u012e\3\u012e\3"+
		"\u012e\5\u012e\u142c\n\u012e\5\u012e\u142e\n\u012e\3\u012f\3\u012f\5\u012f"+
		"\u1432\n\u012f\3\u012f\5\u012f\u1435\n\u012f\3\u0130\3\u0130\3\u0131\3"+
		"\u0131\3\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\5\u0132\u1443\n\u0132\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133"+
		"\3\u0133\3\u0133\5\u0133\u144d\n\u0133\3\u0133\3\u0133\5\u0133\u1451\n"+
		"\u0133\3\u0133\3\u0133\3\u0133\3\u0133\7\u0133\u1457\n\u0133\f\u0133\16"+
		"\u0133\u145a\13\u0133\5\u0133\u145c\n\u0133\3\u0133\3\u0133\5\u0133\u1460"+
		"\n\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133"+
		"\5\u0133\u146a\n\u0133\3\u0134\3\u0134\5\u0134\u146e\n\u0134\3\u0135\3"+
		"\u0135\3\u0135\7\u0135\u1473\n\u0135\f\u0135\16\u0135\u1476\13\u0135\3"+
		"\u0136\3\u0136\5\u0136\u147a\n\u0136\3\u0137\3\u0137\3\u0137\3\u0137\3"+
		"\u0137\3\u0137\5\u0137\u1482\n\u0137\3\u0138\3\u0138\3\u0138\5\u0138\u1487"+
		"\n\u0138\3\u0138\3\u0138\3\u0139\3\u0139\5\u0139\u148d\n\u0139\3\u013a"+
		"\3\u013a\3\u013a\7\u013a\u1492\n\u013a\f\u013a\16\u013a\u1495\13\u013a"+
		"\3\u013b\3\u013b\5\u013b\u1499\n\u013b\3\u013b\3\u013b\3\u013b\3\u013b"+
		"\5\u013b\u149f\n\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b"+
		"\u14a6\n\u013b\3\u013c\3\u013c\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\5\u013d\u14b0\n\u013d\5\u013d\u14b2\n\u013d\3\u013e\3\u013e\3"+
		"\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u14ba\n\u013e\3\u013f\3\u013f\3"+
		"\u013f\5\u013f\u14bf\n\u013f\3\u013f\3\u013f\5\u013f\u14c3\n\u013f\3\u013f"+
		"\5\u013f\u14c6\n\u013f\3\u0140\3\u0140\3\u0140\7\u0140\u14cb\n\u0140\f"+
		"\u0140\16\u0140\u14ce\13\u0140\3\u0141\3\u0141\5\u0141\u14d2\n\u0141\3"+
		"\u0141\3\u0141\5\u0141\u14d6\n\u0141\3\u0142\3\u0142\3\u0142\3\u0142\3"+
		"\u0142\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u14e1\n\u0143\3\u0144\3"+
		"\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u14e9\n\u0144\3\u0144\3"+
		"\u0144\5\u0144\u14ed\n\u0144\3\u0144\5\u0144\u14f0\n\u0144\3\u0144\5\u0144"+
		"\u14f3\n\u0144\3\u0145\3\u0145\5\u0145\u14f7\n\u0145\3\u0145\3\u0145\5"+
		"\u0145\u14fb\n\u0145\3\u0145\7\u0145\u14fe\n\u0145\f\u0145\16\u0145\u1501"+
		"\13\u0145\3\u0146\3\u0146\3\u0146\5\u0146\u1506\n\u0146\3\u0147\3\u0147"+
		"\5\u0147\u150a\n\u0147\3\u0147\3\u0147\3\u0148\3\u0148\3\u0149\3\u0149"+
		"\3\u0149\3\u0149\3\u0149\5\u0149\u1515\n\u0149\3\u0149\5\u0149\u1518\n"+
		"\u0149\3\u0149\5\u0149\u151b\n\u0149\3\u0149\5\u0149\u151e\n\u0149\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u1526\n\u014a\3\u014b"+
		"\3\u014b\5\u014b\u152a\n\u014b\3\u014b\7\u014b\u152d\n\u014b\f\u014b\16"+
		"\u014b\u1530\13\u014b\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\5\u014c"+
		"\u1537\n\u014c\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\5\u014d"+
		"\u153f\n\u014d\3\u014e\3\u014e\3\u014e\3\u014e\5\u014e\u1545\n\u014e\3"+
		"\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f"+
		"\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\5\u014f\u1557"+
		"\n\u014f\3\u014f\3\u014f\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150"+
		"\5\u0150\u1561\n\u0150\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150\u1567\n"+
		"\u0150\3\u0151\3\u0151\3\u0151\3\u0152\3\u0152\3\u0152\3\u0153\3\u0153"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u1575\n\u0154\3\u0154\5\u0154"+
		"\u1578\n\u0154\3\u0154\3\u0154\5\u0154\u157c\n\u0154\3\u0154\3\u0154\3"+
		"\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\7\u0154\u1587\n"+
		"\u0154\f\u0154\16\u0154\u158a\13\u0154\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\5\u0155\u1592\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\7\u0155\u159e\n\u0155"+
		"\f\u0155\16\u0155\u15a1\13\u0155\3\u0156\3\u0156\3\u0157\3\u0157\5\u0157"+
		"\u15a7\n\u0157\3\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u15ad\n\u0157\3"+
		"\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u15b3\n\u0157\3\u0158\3\u0158\3"+
		"\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u15bb\n\u0158\3\u0158\3\u0158\3"+
		"\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u15c6\n"+
		"\u0158\3\u0158\3\u0158\5\u0158\u15ca\n\u0158\3\u0159\3\u0159\3\u0159\3"+
		"\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\7\u0159\u15e7\n\u0159"+
		"\f\u0159\16\u0159\u15ea\13\u0159\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\5\u015a\u15f1\n\u015a\3\u015a\3\u015a\5\u015a\u15f5\n\u015a\3\u015a\3"+
		"\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u1606\n\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u160d\n\u015a\3\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\5\u015a\u161b\n\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u1627\n\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\5\u015a\u162d\n\u015a\3\u015a\3\u015a\3\u015a"+
		"\6\u015a\u1632\n\u015a\r\u015a\16\u015a\u1633\3\u015a\5\u015a\u1637\n"+
		"\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u1659\n\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\7\u015a\u1661\n\u015a"+
		"\f\u015a\16\u015a\u1664\13\u015a\3\u015b\3\u015b\3\u015b\3\u015c\3\u015c"+
		"\3\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u166f\n\u015c\3\u015d\3\u015d"+
		"\3\u015d\5\u015d\u1674\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d"+
		"\u167a\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d"+
		"\u1682\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u1689\n"+
		"\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u168f\n\u015d\3\u015d\3"+
		"\u015d\3\u015d\5\u015d\u1694\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5"+
		"\u015d\u169a\n\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u169f\n\u015d\3\u015d"+
		"\3\u015d\3\u015d\5\u015d\u16a4\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d"+
		"\5\u015d\u16aa\n\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16af\n\u015d\3"+
		"\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16b5\n\u015d\3\u015d\3\u015d\3"+
		"\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16bd\n\u015d\3\u015d\3\u015d\3"+
		"\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16c5\n\u015d\3\u015d\3\u015d\3"+
		"\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16cd\n\u015d\3\u015d\3\u015d\3"+
		"\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16d5\n\u015d\3\u015d\3\u015d\3"+
		"\u015d\5\u015d\u16da\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16e0"+
		"\n\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u16e5\n\u015d\3\u015d\3\u015d"+
		"\5\u015d\u16e9\n\u015d\3\u015d\3\u015d\5\u015d\u16ed\n\u015d\3\u015d\3"+
		"\u015d\3\u015d\5\u015d\u16f2\n\u015d\5\u015d\u16f4\n\u015d\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f"+
		"\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\5\u015f\u1707\n\u015f"+
		"\3\u015f\3\u015f\5\u015f\u170b\n\u015f\3\u015f\3\u015f\3\u015f\3\u015f"+
		"\3\u015f\5\u015f\u1712\n\u015f\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f"+
		"\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\5\u015f\u171e\n\u015f\3\u015f"+
		"\5\u015f\u1721\n\u015f\3\u015f\3\u015f\5\u015f\u1725\n\u015f\3\u0160\3"+
		"\u0160\3\u0160\5\u0160\u172a\n\u0160\3\u0161\3\u0161\3\u0161\5\u0161\u172f"+
		"\n\u0161\3\u0161\3\u0161\5\u0161\u1733\n\u0161\3\u0162\3\u0162\3\u0162"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u173d\n\u0163\3\u0163"+
		"\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163\u1746\n\u0163"+
		"\5\u0163\u1748\n\u0163\3\u0164\5\u0164\u174b\n\u0164\3\u0164\3\u0164\3"+
		"\u0165\3\u0165\3\u0165\3\u0165\3\u0165\5\u0165\u1754\n\u0165\3\u0166\3"+
		"\u0166\3\u0166\7\u0166\u1759\n\u0166\f\u0166\16\u0166\u175c\13\u0166\3"+
		"\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\5\u0167\u1768\n\u0167\3\u0167\3\u0167\3\u0167\5\u0167\u176d\n"+
		"\u0167\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u1774\n\u0168\3"+
		"\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u177a\n\u0168\3\u0168\3\u0168\3"+
		"\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\6\u0168\u1792\n\u0168\r\u0168\16\u0168\u1793\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\5\u0168\u17b3\n\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u17c7\n\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\5\u0168\u17cd\n\u0168\3\u0168\3\u0168\5\u0168\u17d1\n"+
		"\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168"+
		"\u17ec\n\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\5\u0168\u17f8\n\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168"+
		"\u1805\n\u0168\3\u0168\3\u0168\5\u0168\u1809\n\u0168\3\u0168\3\u0168\5"+
		"\u0168\u180d\n\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3"+
		"\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\5\u0168\u1829\n\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u1861\n\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u186b"+
		"\n\u0168\3\u0168\3\u0168\5\u0168\u186f\n\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u187b"+
		"\n\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u1880\n\u0168\3\u0169\3\u0169"+
		"\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169"+
		"\5\u0169\u188d\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169"+
		"\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169"+
		"\3\u0169\3\u0169\3\u0169\5\u0169\u18a1\n\u0169\3\u016a\3\u016a\5\u016a"+
		"\u18a5\n\u016a\3\u016a\3\u016a\3\u016b\3\u016b\3\u016b\3\u016c\3\u016c"+
		"\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\7\u016c\u18b4\n\u016c"+
		"\f\u016c\16\u016c\u18b7\13\u016c\5\u016c\u18b9\n\u016c\3\u016d\3\u016d"+
		"\3\u016d\5\u016d\u18be\n\u016d\3\u016d\5\u016d\u18c1\n\u016d\3\u016e\3"+
		"\u016e\3\u016f\3\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u18ca\n\u016f\3"+
		"\u016f\3\u016f\5\u016f\u18ce\n\u016f\3\u016f\3\u016f\3\u016f\3\u016f\5"+
		"\u016f\u18d4\n\u016f\3\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u18da\n\u016f"+
		"\3\u016f\3\u016f\5\u016f\u18de\n\u016f\3\u016f\3\u016f\3\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\5\u0170\u18e9\n\u0170\3\u0170"+
		"\3\u0170\3\u0170\3\u0170\5\u0170\u18ef\n\u0170\5\u0170\u18f1\n\u0170\3"+
		"\u0170\3\u0170\3\u0171\3\u0171\3\u0171\5\u0171\u18f8\n\u0171\3\u0171\3"+
		"\u0171\3\u0171\3\u0171\3\u0171\5\u0171\u18ff\n\u0171\3\u0171\3\u0171\5"+
		"\u0171\u1903\n\u0171\3\u0172\3\u0172\3\u0172\7\u0172\u1908\n\u0172\f\u0172"+
		"\16\u0172\u190b\13\u0172\3\u0173\3\u0173\5\u0173\u190f\n\u0173\3\u0174"+
		"\3\u0174\5\u0174\u1913\n\u0174\3\u0175\3\u0175\3\u0175\5\u0175\u1918\n"+
		"\u0175\3\u0176\3\u0176\5\u0176\u191c\n\u0176\3\u0176\3\u0176\5\u0176\u1920"+
		"\n\u0176\3\u0177\3\u0177\3\u0177\5\u0177\u1925\n\u0177\3\u0177\3\u0177"+
		"\3\u0177\5\u0177\u192a\n\u0177\5\u0177\u192c\n\u0177\3\u0177\3\u0177\5"+
		"\u0177\u1930\n\u0177\3\u0178\3\u0178\3\u0178\3\u0179\3\u0179\3\u0179\3"+
		"\u017a\3\u017a\3\u017a\3\u017b\3\u017b\5\u017b\u193d\n\u017b\3\u017b\3"+
		"\u017b\5\u017b\u1941\n\u017b\3\u017b\5\u017b\u1944\n\u017b\3\u017b\3\u017b"+
		"\5\u017b\u1948\n\u017b\3\u017b\3\u017b\5\u017b\u194c\n\u017b\3\u017b\3"+
		"\u017b\5\u017b\u1950\n\u017b\3\u017b\3\u017b\3\u017b\5\u017b\u1955\n\u017b"+
		"\3\u017b\3\u017b\5\u017b\u1959\n\u017b\3\u017b\3\u017b\5\u017b\u195d\n"+
		"\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\5\u017b"+
		"\u1966\n\u017b\5\u017b\u1968\n\u017b\3\u017c\3\u017c\3\u017c\7\u017c\u196d"+
		"\n\u017c\f\u017c\16\u017c\u1970\13\u017c\3\u017d\3\u017d\3\u017d\5\u017d"+
		"\u1975\n\u017d\3\u017e\3\u017e\3\u017f\3\u017f\3\u0180\3\u0180\5\u0180"+
		"\u197d\n\u0180\3\u0181\3\u0181\3\u0182\3\u0182\3\u0182\3\u0182\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0184\3\u0184\3\u0184\3\u0184\3\u0185\3\u0185"+
		"\3\u0185\7\u0185\u1990\n\u0185\f\u0185\16\u0185\u1993\13\u0185\3\u0186"+
		"\3\u0186\5\u0186\u1997\n\u0186\3\u0187\3\u0187\3\u0187\7\u0187\u199c\n"+
		"\u0187\f\u0187\16\u0187\u199f\13\u0187\3\u0188\3\u0188\3\u0189\3\u0189"+
		"\3\u0189\3\u0189\3\u0189\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a"+
		"\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\3\u018a\5\u018a\u19b5"+
		"\n\u018a\3\u018b\3\u018b\3\u018b\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\5\u018d\u19c5\n\u018d"+
		"\3\u018e\3\u018e\3\u018e\3\u018f\3\u018f\3\u018f\6\u018f\u19cd\n\u018f"+
		"\r\u018f\16\u018f\u19ce\3\u0190\3\u0190\5\u0190\u19d3\n\u0190\3\u0190"+
		"\3\u0190\3\u0190\6\u0190\u19d8\n\u0190\r\u0190\16\u0190\u19d9\3\u0190"+
		"\5\u0190\u19dd\n\u0190\3\u0190\3\u0190\3\u0190\3\u0191\3\u0191\3\u0191"+
		"\3\u0192\3\u0192\3\u0192\5\u0192\u19e8\n\u0192\3\u0193\3\u0193\3\u0194"+
		"\3\u0194\3\u0194\3\u0195\3\u0195\5\u0195\u19f1\n\u0195\3\u0195\5\u0195"+
		"\u19f4\n\u0195\3\u0195\3\u0195\3\u0196\3\u0196\3\u0196\5\u0196\u19fb\n"+
		"\u0196\3\u0197\3\u0197\3\u0197\5\u0197\u1a00\n\u0197\3\u0198\3\u0198\3"+
		"\u0198\3\u0198\3\u0198\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019b"+
		"\3\u019b\3\u019b\6\u019b\u1a18\n\u019b\r\u019b\16\u019b\u1a19\3\u019c"+
		"\3\u019c\3\u019c\3\u019c\5\u019c\u1a20\n\u019c\3\u019d\3\u019d\3\u019d"+
		"\3\u019d\5\u019d\u1a26\n\u019d\3\u019d\3\u019d\5\u019d\u1a2a\n\u019d\3"+
		"\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019f\3\u019f\5\u019f"+
		"\u1a34\n\u019f\3\u01a0\3\u01a0\5\u01a0\u1a38\n\u01a0\3\u01a0\3\u01a0\3"+
		"\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\7\u01a1\u1a43\n"+
		"\u01a1\f\u01a1\16\u01a1\u1a46\13\u01a1\3\u01a1\3\u01a1\3\u01a2\3\u01a2"+
		"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\3\u01a2\5\u01a2\u1a51\n\u01a2\3\u01a3"+
		"\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a4\3\u01a4\3\u01a4\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a6\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u1a63\n\u01a6"+
		"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\7\u01a6\u1a69\n\u01a6\f\u01a6\16\u01a6"+
		"\u1a6c\13\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\7\u01a6\u1a73"+
		"\n\u01a6\f\u01a6\16\u01a6\u1a76\13\u01a6\5\u01a6\u1a78\n\u01a6\3\u01a7"+
		"\3\u01a7\3\u01a7\5\u01a7\u1a7d\n\u01a7\3\u01a8\3\u01a8\5\u01a8\u1a81\n"+
		"\u01a8\3\u01a8\3\u01a8\3\u01a8\3\u01a9\3\u01a9\5\u01a9\u1a88\n\u01a9\3"+
		"\u01a9\3\u01a9\3\u01a9\5\u01a9\u1a8d\n\u01a9\3\u01aa\3\u01aa\3\u01ab\3"+
		"\u01ab\3\u01ab\5\u01ab\u1a94\n\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\7"+
		"\u01ab\u1a9a\n\u01ab\f\u01ab\16\u01ab\u1a9d\13\u01ab\5\u01ab\u1a9f\n\u01ab"+
		"\3\u01ac\3\u01ac\3\u01ac\5\u01ac\u1aa4\n\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\7\u01ac\u1aaa\n\u01ac\f\u01ac\16\u01ac\u1aad\13\u01ac\5\u01ac"+
		"\u1aaf\n\u01ac\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ae\3\u01ae\3\u01ae"+
		"\3\u01af\3\u01af\3\u01af\3\u01b0\3\u01b0\5\u01b0\u1abd\n\u01b0\3\u01b0"+
		"\5\u01b0\u1ac0\n\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b1\3\u01b1"+
		"\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b1\5\u01b1\u1acd\n\u01b1\3\u01b1"+
		"\3\u01b1\5\u01b1\u1ad1\n\u01b1\5\u01b1\u1ad3\n\u01b1\3\u01b2\3\u01b2\3"+
		"\u01b2\5\u01b2\u1ad8\n\u01b2\3\u01b3\3\u01b3\3\u01b3\5\u01b3\u1add\n\u01b3"+
		"\3\u01b4\3\u01b4\3\u01b4\3\u01b5\5\u01b5\u1ae3\n\u01b5\3\u01b5\3\u01b5"+
		"\3\u01b6\3\u01b6\5\u01b6\u1ae9\n\u01b6\3\u01b6\3\u01b6\7\u01b6\u1aed\n"+
		"\u01b6\f\u01b6\16\u01b6\u1af0\13\u01b6\3\u01b6\3\u01b6\5\u01b6\u1af4\n"+
		"\u01b6\3\u01b6\5\u01b6\u1af7\n\u01b6\3\u01b6\3\u01b6\7\u01b6\u1afb\n\u01b6"+
		"\f\u01b6\16\u01b6\u1afe\13\u01b6\3\u01b6\3\u01b6\5\u01b6\u1b02\n\u01b6"+
		"\3\u01b6\5\u01b6\u1b05\n\u01b6\3\u01b6\3\u01b6\7\u01b6\u1b09\n\u01b6\f"+
		"\u01b6\16\u01b6\u1b0c\13\u01b6\3\u01b6\5\u01b6\u1b0f\n\u01b6\3\u01b6\3"+
		"\u01b6\3\u01b6\3\u01b6\5\u01b6\u1b15\n\u01b6\5\u01b6\u1b17\n\u01b6\3\u01b6"+
		"\5\u01b6\u1b1a\n\u01b6\3\u01b6\3\u01b6\7\u01b6\u1b1e\n\u01b6\f\u01b6\16"+
		"\u01b6\u1b21\13\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6\u1b26\n\u01b6\3"+
		"\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6\u1b2e\n\u01b6\5"+
		"\u01b6\u1b30\n\u01b6\5\u01b6\u1b32\n\u01b6\3\u01b7\3\u01b7\5\u01b7\u1b36"+
		"\n\u01b7\3\u01b8\3\u01b8\7\u01b8\u1b3a\n\u01b8\f\u01b8\16\u01b8\u1b3d"+
		"\13\u01b8\3\u01b8\3\u01b8\5\u01b8\u1b41\n\u01b8\3\u01b8\3\u01b8\5\u01b8"+
		"\u1b45\n\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u1b4a\n\u01b8\3\u01b8\3"+
		"\u01b8\7\u01b8\u1b4e\n\u01b8\f\u01b8\16\u01b8\u1b51\13\u01b8\3\u01b8\3"+
		"\u01b8\7\u01b8\u1b55\n\u01b8\f\u01b8\16\u01b8\u1b58\13\u01b8\5\u01b8\u1b5a"+
		"\n\u01b8\5\u01b8\u1b5c\n\u01b8\3\u01b9\5\u01b9\u1b5f\n\u01b9\3\u01b9\3"+
		"\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b69\n"+
		"\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b6d\n\u01b9\3\u01b9\3\u01b9\3\u01b9\3"+
		"\u01b9\5\u01b9\u1b73\n\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5"+
		"\u01b9\u1b7a\n\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1b7f\n\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\5\u01b9\u1b8d\n\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9"+
		"\u1b92\n\u01b9\3\u01ba\3\u01ba\3\u01bb\3\u01bb\3\u01bc\3\u01bc\5\u01bc"+
		"\u1b9a\n\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u1b9f\n\u01bc\3\u01bc\3"+
		"\u01bc\5\u01bc\u1ba3\n\u01bc\3\u01bc\5\u01bc\u1ba6\n\u01bc\3\u01bd\3\u01bd"+
		"\3\u01bd\5\u01bd\u1bab\n\u01bd\3\u01bd\3\u01bd\5\u01bd\u1baf\n\u01bd\3"+
		"\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u1bb7\n\u01bd\3"+
		"\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u1bbf\n\u01bd\5"+
		"\u01bd\u1bc1\n\u01bd\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\5\u01be\u1bc8"+
		"\n\u01be\3\u01bf\3\u01bf\3\u01bf\3\u01bf\7\u01bf\u1bce\n\u01bf\f\u01bf"+
		"\16\u01bf\u1bd1\13\u01bf\3\u01bf\3\u01bf\3\u01c0\3\u01c0\5\u01c0\u1bd7"+
		"\n\u01c0\3\u01c0\5\u01c0\u1bda\n\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c1"+
		"\7\u01c1\u1be0\n\u01c1\f\u01c1\16\u01c1\u1be3\13\u01c1\3\u01c1\3\u01c1"+
		"\3\u01c2\3\u01c2\3\u01c2\5\u01c2\u1bea\n\u01c2\5\u01c2\u1bec\n\u01c2\3"+
		"\u01c3\3\u01c3\3\u01c3\3\u01c3\5\u01c3\u1bf2\n\u01c3\3\u01c4\3\u01c4\3"+
		"\u01c5\3\u01c5\5\u01c5\u1bf8\n\u01c5\3\u01c6\3\u01c6\5\u01c6\u1bfc\n\u01c6"+
		"\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u1c03\n\u01c6\3\u01c7"+
		"\3\u01c7\3\u01c8\3\u01c8\3\u01c8\3\u01c9\3\u01c9\3\u01c9\3\u01c9\5\u01c9"+
		"\u1c0e\n\u01c9\3\u01ca\3\u01ca\3\u01cb\3\u01cb\3\u01cb\3\u01cc\3\u01cc"+
		"\5\u01cc\u1c17\n\u01cc\3\u01cc\5\u01cc\u1c1a\n\u01cc\3\u01cc\3\u01cc\3"+
		"\u01cc\5\u01cc\u1c1f\n\u01cc\5\u01cc\u1c21\n\u01cc\3\u01cc\5\u01cc\u1c24"+
		"\n\u01cc\3\u01cc\5\u01cc\u1c27\n\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c2b\n"+
		"\u01cc\3\u01cc\5\u01cc\u1c2e\n\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c32\n\u01cc"+
		"\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c37\n\u01cc\3\u01cc\5\u01cc\u1c3a\n"+
		"\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c3e\n\u01cc\3\u01cc\5\u01cc\u1c41\n\u01cc"+
		"\3\u01cc\3\u01cc\5\u01cc\u1c45\n\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc"+
		"\u1c4a\n\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c4e\n\u01cc\3\u01cc\3\u01cc\3"+
		"\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc"+
		"\u1c5a\n\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c5e\n\u01cc\3\u01cc\3\u01cc\3"+
		"\u01cc\3\u01cc\5\u01cc\u1c64\n\u01cc\3\u01cc\5\u01cc\u1c67\n\u01cc\3\u01cc"+
		"\3\u01cc\3\u01cc\5\u01cc\u1c6c\n\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c70\n"+
		"\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c74\n\u01cc\3\u01cc\3\u01cc\3\u01cc\5"+
		"\u01cc\u1c79\n\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3\u01cc\3"+
		"\u01cc\5\u01cc\u1c82\n\u01cc\3\u01cc\5\u01cc\u1c85\n\u01cc\3\u01cc\3\u01cc"+
		"\5\u01cc\u1c89\n\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c8d\n\u01cc\3\u01cc\5"+
		"\u01cc\u1c90\n\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c94\n\u01cc\3\u01cc\3\u01cc"+
		"\5\u01cc\u1c98\n\u01cc\3\u01cc\3\u01cc\3\u01cc\5\u01cc\u1c9d\n\u01cc\3"+
		"\u01cc\3\u01cc\3\u01cc\5\u01cc\u1ca2\n\u01cc\3\u01cc\3\u01cc\3\u01cc\3"+
		"\u01cc\5\u01cc\u1ca8\n\u01cc\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1cad\n\u01cd"+
		"\3\u01ce\3\u01ce\3\u01ce\5\u01ce\u1cb2\n\u01ce\5\u01ce\u1cb4\n\u01ce\3"+
		"\u01cf\3\u01cf\3\u01cf\5\u01cf\u1cb9\n\u01cf\3\u01cf\3\u01cf\3\u01d0\6"+
		"\u01d0\u1cbe\n\u01d0\r\u01d0\16\u01d0\u1cbf\3\u01d1\3\u01d1\3\u01d1\3"+
		"\u01d1\3\u01d1\3\u01d1\5\u01d1\u1cc8\n\u01d1\3\u01d1\3\u01d1\3\u01d1\3"+
		"\u01d1\5\u01d1\u1cce\n\u01d1\5\u01d1\u1cd0\n\u01d1\3\u01d2\3\u01d2\5\u01d2"+
		"\u1cd4\n\u01d2\3\u01d2\3\u01d2\5\u01d2\u1cd8\n\u01d2\3\u01d3\3\u01d3\5"+
		"\u01d3\u1cdc\n\u01d3\3\u01d3\3\u01d3\5\u01d3\u1ce0\n\u01d3\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d6\3\u01d6\3\u01d6"+
		"\3\u01d6\5\u01d6\u1cee\n\u01d6\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7"+
		"\5\u01d7\u1cf5\n\u01d7\3\u01d8\3\u01d8\5\u01d8\u1cf9\n\u01d8\3\u01d8\7"+
		"\u01d8\u1cfc\n\u01d8\f\u01d8\16\u01d8\u1cff\13\u01d8\3\u01d9\6\u01d9\u1d02"+
		"\n\u01d9\r\u01d9\16\u01d9\u1d03\3\u01da\3\u01da\5\u01da\u1d08\n\u01da"+
		"\3\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d0e\n\u01da\3\u01da\3\u01da"+
		"\5\u01da\u1d12\n\u01da\3\u01da\3\u01da\5\u01da\u1d16\n\u01da\3\u01da\3"+
		"\u01da\3\u01da\5\u01da\u1d1b\n\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d20"+
		"\n\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d25\n\u01da\3\u01da\3\u01da"+
		"\3\u01da\5\u01da\u1d2a\n\u01da\3\u01da\3\u01da\3\u01da\3\u01da\5\u01da"+
		"\u1d30\n\u01da\3\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d36\n\u01da\3"+
		"\u01da\3\u01da\3\u01da\5\u01da\u1d3b\n\u01da\3\u01da\3\u01da\3\u01da\5"+
		"\u01da\u1d40\n\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d45\n\u01da\3\u01da"+
		"\3\u01da\3\u01da\5\u01da\u1d4a\n\u01da\3\u01da\3\u01da\3\u01da\5\u01da"+
		"\u1d4f\n\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d54\n\u01da\3\u01da\3"+
		"\u01da\3\u01da\5\u01da\u1d59\n\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3"+
		"\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d63\n\u01da\3\u01da\3\u01da\3"+
		"\u01da\3\u01da\5\u01da\u1d69\n\u01da\3\u01da\3\u01da\3\u01da\3\u01da\5"+
		"\u01da\u1d6f\n\u01da\3\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d75\n\u01da"+
		"\3\u01da\5\u01da\u1d78\n\u01da\3\u01da\3\u01da\3\u01da\3\u01da\3\u01da"+
		"\5\u01da\u1d7f\n\u01da\3\u01da\3\u01da\3\u01da\5\u01da\u1d84\n\u01da\3"+
		"\u01da\5\u01da\u1d87\n\u01da\3\u01db\3\u01db\5\u01db\u1d8b\n\u01db\3\u01dc"+
		"\5\u01dc\u1d8e\n\u01dc\3\u01dc\3\u01dc\5\u01dc\u1d92\n\u01dc\3\u01dc\3"+
		"\u01dc\3\u01dd\5\u01dd\u1d97\n\u01dd\3\u01dd\3\u01dd\5\u01dd\u1d9b\n\u01dd"+
		"\3\u01dd\3\u01dd\3\u01de\5\u01de\u1da0\n\u01de\3\u01de\3\u01de\5\u01de"+
		"\u1da4\n\u01de\3\u01de\3\u01de\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df"+
		"\5\u01df\u1dad\n\u01df\3\u01df\5\u01df\u1db0\n\u01df\3\u01df\5\u01df\u1db3"+
		"\n\u01df\3\u01e0\5\u01e0\u1db6\n\u01e0\3\u01e0\3\u01e0\5\u01e0\u1dba\n"+
		"\u01e0\3\u01e0\3\u01e0\5\u01e0\u1dbe\n\u01e0\3\u01e0\3\u01e0\5\u01e0\u1dc2"+
		"\n\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0"+
		"\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\5\u01e0\u1dd1\n\u01e0\3\u01e0"+
		"\5\u01e0\u1dd4\n\u01e0\5\u01e0\u1dd6\n\u01e0\3\u01e1\3\u01e1\3\u01e1\5"+
		"\u01e1\u1ddb\n\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3"+
		"\u01e1\5\u01e1\u1de4\n\u01e1\3\u01e1\5\u01e1\u1de7\n\u01e1\3\u01e1\3\u01e1"+
		"\5\u01e1\u1deb\n\u01e1\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e3"+
		"\3\u01e3\3\u01e3\3\u01e3\7\u01e3\u1df6\n\u01e3\f\u01e3\16\u01e3\u1df9"+
		"\13\u01e3\3\u01e3\3\u01e3\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4\3\u01e4"+
		"\3\u01e4\5\u01e4\u1e04\n\u01e4\3\u01e4\3\u01e4\3\u01e4\5\u01e4\u1e09\n"+
		"\u01e4\3\u01e4\7\u01e4\u1e0c\n\u01e4\f\u01e4\16\u01e4\u1e0f\13\u01e4\3"+
		"\u01e4\3\u01e4\3\u01e4\3\u01e4\7\u01e4\u1e15\n\u01e4\f\u01e4\16\u01e4"+
		"\u1e18\13\u01e4\3\u01e4\3\u01e4\5\u01e4\u1e1c\n\u01e4\3\u01e5\3\u01e5"+
		"\3\u01e5\3\u01e5\3\u01e5\7\u01e5\u1e23\n\u01e5\f\u01e5\16\u01e5\u1e26"+
		"\13\u01e5\3\u01e5\3\u01e5\5\u01e5\u1e2a\n\u01e5\3\u01e6\3\u01e6\5\u01e6"+
		"\u1e2e\n\u01e6\3\u01e6\3\u01e6\5\u01e6\u1e32\n\u01e6\3\u01e6\3\u01e6\5"+
		"\u01e6\u1e36\n\u01e6\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u1e3b\n\u01e6\3\u01e6"+
		"\3\u01e6\3\u01e6\5\u01e6\u1e40\n\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6"+
		"\5\u01e6\u1e46\n\u01e6\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u1e4b\n\u01e6\3"+
		"\u01e6\5\u01e6\u1e4e\n\u01e6\3\u01e7\3\u01e7\3\u01e7\7\u01e7\u1e53\n\u01e7"+
		"\f\u01e7\16\u01e7\u1e56\13\u01e7\3\u01e8\3\u01e8\3\u01e8\3\u01e8\7\u01e8"+
		"\u1e5c\n\u01e8\f\u01e8\16\u01e8\u1e5f\13\u01e8\3\u01e8\3\u01e8\3\u01e9"+
		"\3\u01e9\5\u01e9\u1e65\n\u01e9\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01eb"+
		"\3\u01eb\3\u01eb\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ed\5\u01ed\u1e73"+
		"\n\u01ed\3\u01ed\3\u01ed\3\u01ee\3\u01ee\3\u01ee\3\u01ef\3\u01ef\3\u01ef"+
		"\3\u01f0\3\u01f0\5\u01f0\u1e7f\n\u01f0\3\u01f1\3\u01f1\3\u01f1\3\u01f1"+
		"\3\u01f1\3\u01f1\3\u01f2\3\u01f2\3\u01f2\7\u01f2\u1e8a\n\u01f2\f\u01f2"+
		"\16\u01f2\u1e8d\13\u01f2\3\u01f3\3\u01f3\3\u01f3\7\u01f3\u1e92\n\u01f3"+
		"\f\u01f3\16\u01f3\u1e95\13\u01f3\3\u01f4\3\u01f4\3\u01f4\3\u01f4\5\u01f4"+
		"\u1e9b\n\u01f4\3\u01f5\3\u01f5\3\u01f5\3\u01f6\3\u01f6\6\u01f6\u1ea2\n"+
		"\u01f6\r\u01f6\16\u01f6\u1ea3\3\u01f7\3\u01f7\3\u01f7\3\u01f7\5\u01f7"+
		"\u1eaa\n\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f7\5\u01f7"+
		"\u1eb2\n\u01f7\3\u01f8\3\u01f8\6\u01f8\u1eb6\n\u01f8\r\u01f8\16\u01f8"+
		"\u1eb7\3\u01f9\3\u01f9\3\u01f9\3\u01f9\3\u01fa\3\u01fa\3\u01fa\7\u01fa"+
		"\u1ec1\n\u01fa\f\u01fa\16\u01fa\u1ec4\13\u01fa\3\u01fb\3\u01fb\3\u01fb"+
		"\7\u01fb\u1ec9\n\u01fb\f\u01fb\16\u01fb\u1ecc\13\u01fb\3\u01fc\3\u01fc"+
		"\3\u01fc\7\u01fc\u1ed1\n\u01fc\f\u01fc\16\u01fc\u1ed4\13\u01fc\3\u01fd"+
		"\3\u01fd\3\u01fd\3\u01fd\3\u01fd\5\u01fd\u1edb\n\u01fd\3\u01fd\3\u01fd"+
		"\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fd\5\u01fd\u1ee5\n\u01fd"+
		"\3\u01fd\3\u01fd\3\u01fd\5\u01fd\u1eea\n\u01fd\3\u01fd\3\u01fd\3\u01fd"+
		"\5\u01fd\u1eef\n\u01fd\5\u01fd\u1ef1\n\u01fd\3\u01fe\3\u01fe\3\u01fe\3"+
		"\u01fe\5\u01fe\u1ef7\n\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe\5\u01fe\u1efd"+
		"\n\u01fe\3\u01fe\5\u01fe\u1f00\n\u01fe\3\u01fe\3\u01fe\3\u01fe\3\u01fe"+
		"\3\u01fe\5\u01fe\u1f07\n\u01fe\5\u01fe\u1f09\n\u01fe\5\u01fe\u1f0b\n\u01fe"+
		"\3\u01fe\5\u01fe\u1f0e\n\u01fe\5\u01fe\u1f10\n\u01fe\3\u01ff\3\u01ff\3"+
		"\u01ff\3\u01ff\3\u0200\3\u0200\3\u0200\3\u0200\3\u0201\3\u0201\3\u0201"+
		"\3\u0202\3\u0202\3\u0202\3\u0202\5\u0202\u1f21\n\u0202\3\u0203\3\u0203"+
		"\3\u0203\5\u0203\u1f26\n\u0203\5\u0203\u1f28\n\u0203\3\u0204\3\u0204\3"+
		"\u0204\3\u0205\3\u0205\5\u0205\u1f2f\n\u0205\3\u0206\3\u0206\3\u0207\3"+
		"\u0207\3\u0208\3\u0208\3\u0208\3\u0208\3\u0209\3\u0209\3\u0209\5\u0209"+
		"\u1f3c\n\u0209\5\u0209\u1f3e\n\u0209\3\u020a\3\u020a\3\u020a\3\u020a\5"+
		"\u020a\u1f44\n\u020a\3\u020b\3\u020b\3\u020c\3\u020c\3\u020c\3\u020c\7"+
		"\u020c\u1f4c\n\u020c\f\u020c\16\u020c\u1f4f\13\u020c\3\u020c\3\u020c\3"+
		"\u020d\3\u020d\3\u020e\3\u020e\5\u020e\u1f57\n\u020e\3\u020f\3\u020f\3"+
		"\u0210\3\u0210\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\5\u0211\u1f62\n"+
		"\u0211\3\u0211\3\u0211\3\u0212\3\u0212\3\u0213\3\u0213\3\u0214\3\u0214"+
		"\3\u0215\3\u0215\3\u0216\3\u0216\3\u0217\3\u0217\3\u0218\3\u0218\3\u0219"+
		"\3\u0219\3\u021a\3\u021a\5\u021a\u1f78\n\u021a\3\u021b\3\u021b\5\u021b"+
		"\u1f7c\n\u021b\3\u021c\3\u021c\3\u021d\3\u021d\3\u021e\3\u021e\3\u021f"+
		"\3\u021f\3\u0220\3\u0220\3\u0221\3\u0221\3\u0222\3\u0222\3\u0223\3\u0223"+
		"\3\u0224\3\u0224\3\u0225\3\u0225\3\u0226\3\u0226\5\u0226\u1f94\n\u0226"+
		"\3\u0227\3\u0227\3\u0227\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\5\u0228\u1f9f\n\u0228\5\u0228\u1fa1\n\u0228\3\u0229\3\u0229\5\u0229\u1fa5"+
		"\n\u0229\3\u022a\3\u022a\3\u022a\7\u022a\u1faa\n\u022a\f\u022a\16\u022a"+
		"\u1fad\13\u022a\3\u022b\3\u022b\3\u022b\7\u022b\u1fb2\n\u022b\f\u022b"+
		"\16\u022b\u1fb5\13\u022b\3\u022c\3\u022c\3\u022d\3\u022d\5\u022d\u1fbb"+
		"\n\u022d\3\u022e\3\u022e\3\u022f\3\u022f\5\u022f\u1fc1\n\u022f\3\u0230"+
		"\3\u0230\3\u0231\3\u0231\3\u0232\3\u0232\3\u0233\3\u0233\3\u0234\3\u0234"+
		"\3\u0235\3\u0235\3\u0235\5\u0235\u1fd0\n\u0235\3\u0236\3\u0236\5\u0236"+
		"\u1fd4\n\u0236\3\u0237\3\u0237\3\u0237\7\u0237\u1fd9\n\u0237\f\u0237\16"+
		"\u0237\u1fdc\13\u0237\3\u0238\3\u0238\3\u0238\3\u0238\3\u0239\3\u0239"+
		"\5\u0239\u1fe4\n\u0239\3\u023a\3\u023a\3\u023a\5\u023a\u1fe9\n\u023a\5"+
		"\u023a\u1feb\n\u023a\3\u023a\3\u023a\3\u023a\3\u023a\5\u023a\u1ff1\n\u023a"+
		"\3\u023b\3\u023b\3\u023b\3\u023c\3\u023c\3\u023d\3\u023d\3\u023e\3\u023e"+
		"\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\5\u023f\u2001\n\u023f\3\u0240"+
		"\3\u0240\3\u0240\3\u0240\3\u0240\3\u0240\5\u0240\u2009\n\u0240\3\u0240"+
		"\5\u0240\u200c\n\u0240\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\5\u0241"+
		"\u2013\n\u0241\3\u0242\3\u0242\3\u0242\3\u0242\7\u0242\u2019\n\u0242\f"+
		"\u0242\16\u0242\u201c\13\u0242\3\u0242\3\u0242\3\u0243\3\u0243\3\u0243"+
		"\5\u0243\u2023\n\u0243\3\u0244\3\u0244\3\u0244\5\u0244\u2028\n\u0244\3"+
		"\u0245\3\u0245\3\u0245\5\u0245\u202d\n\u0245\3\u0246\5\u0246\u2030\n\u0246"+
		"\3\u0246\3\u0246\5\u0246\u2034\n\u0246\3\u0246\7\u0246\u2037\n\u0246\f"+
		"\u0246\16\u0246\u203a\13\u0246\3\u0247\3\u0247\3\u0248\3\u0248\3\u0248"+
		"\7\u0248\u2041\n\u0248\f\u0248\16\u0248\u2044\13\u0248\3\u0249\3\u0249"+
		"\3\u024a\3\u024a\3\u024b\3\u024b\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c"+
		"\3\u024c\5\u024c\u2052\n\u024c\3\u024d\3\u024d\5\u024d\u2056\n\u024d\3"+
		"\u024e\3\u024e\3\u024f\3\u024f\3\u024f\3\u024f\3\u024f\3\u024f\3\u0250"+
		"\3\u0250\5\u0250\u2062\n\u0250\3\u0251\3\u0251\5\u0251\u2066\n\u0251\3"+
		"\u0252\3\u0252\5\u0252\u206a\n\u0252\3\u0253\3\u0253\5\u0253\u206e\n\u0253"+
		"\3\u0254\3\u0254\3\u0254\3\u0255\3\u0255\3\u0256\3\u0256\3\u0257\3\u0257"+
		"\3\u0257\3\u0257\3\u0257\3\u0257\5\u0257\u207d\n\u0257\3\u0258\3\u0258"+
		"\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\5\u0258"+
		"\u2089\n\u0258\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259"+
		"\3\u0259\5\u0259\u2093\n\u0259\3\u0259\3\u0259\3\u0259\3\u0259\3\u0259"+
		"\5\u0259\u209a\n\u0259\5\u0259\u209c\n\u0259\3\u025a\3\u025a\3\u025b\3"+
		"\u025b\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c\3\u025c"+
		"\3\u025c\3\u025c\3\u025c\5\u025c\u20ad\n\u025c\3\u025c\3\u025c\3\u025c"+
		"\5\u025c\u20b2\n\u025c\5\u025c\u20b4\n\u025c\3\u025d\3\u025d\3\u025e\3"+
		"\u025e\3\u025e\5\u025e\u20bb\n\u025e\3\u025f\3\u025f\3\u025f\5\u025f\u20c0"+
		"\n\u025f\3\u025f\3\u025f\3\u025f\5\u025f\u20c5\n\u025f\5\u025f\u20c7\n"+
		"\u025f\3\u0260\3\u0260\3\u0260\3\u0260\5\u0260\u20cd\n\u0260\3\u0261\3"+
		"\u0261\3\u0262\3\u0262\3\u0262\3\u0262\3\u0262\5\u0262\u20d6\n\u0262\3"+
		"\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263\3\u0263"+
		"\5\u0263\u20e1\n\u0263\3\u0263\2\6\u02a6\u02a8\u02b0\u02b2\u0264\2\4\6"+
		"\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRT"+
		"VXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e"+
		"\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6"+
		"\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be"+
		"\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6"+
		"\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee"+
		"\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106"+
		"\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e"+
		"\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136"+
		"\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e"+
		"\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166"+
		"\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e"+
		"\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196"+
		"\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae"+
		"\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6"+
		"\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de"+
		"\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6"+
		"\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e"+
		"\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226"+
		"\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e"+
		"\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256"+
		"\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e"+
		"\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286"+
		"\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e"+
		"\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6"+
		"\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce"+
		"\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6"+
		"\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe"+
		"\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316"+
		"\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e"+
		"\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346"+
		"\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e"+
		"\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376"+
		"\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e"+
		"\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6"+
		"\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be"+
		"\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6"+
		"\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee"+
		"\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406"+
		"\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418\u041a\u041c\u041e"+
		"\u0420\u0422\u0424\u0426\u0428\u042a\u042c\u042e\u0430\u0432\u0434\u0436"+
		"\u0438\u043a\u043c\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c\u044e"+
		"\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460\u0462\u0464\u0466"+
		"\u0468\u046a\u046c\u046e\u0470\u0472\u0474\u0476\u0478\u047a\u047c\u047e"+
		"\u0480\u0482\u0484\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494\u0496"+
		"\u0498\u049a\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae"+
		"\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba\u04bc\u04be\u04c0\u04c2\u04c4\2\u0094"+
		"\3\2\u02d4\u02d5\4\2\23\23\u0250\u0250\4\2\63\63\u01d9\u01d9\3\2\u0287"+
		"\u0288\4\2\6\6\u0096\u0096\4\2\u01b4\u01b4\u01b6\u01b6\3\2\u02d6\u02d7"+
		"\4\2\64\64\u011e\u011e\4\2\u00ea\u00ea\u01cc\u01cc\6\2\u0080\u0080\u00fb"+
		"\u00fb\u01b7\u01b7\u022e\u022e\4\2\u0084\u0084\u00fc\u00fc\4\2\u01ba\u01ba"+
		"\u025d\u025d\4\2\u01bb\u01bb\u025e\u025e\4\2\u0178\u0178\u0280\u0280\5"+
		"\2\u0151\u0151\u0244\u0244\u025c\u025c\4\2\b\b\36\36\5\2\u0087\u0087\u00f4"+
		"\u00f4\u0268\u0268\4\2\u00c7\u00c7\u01a1\u01a1\4\2\u023d\u023d\u0240\u0240"+
		"\5\2\u00ea\u00ea\u0129\u0129\u01b1\u01b1\4\2\u00c1\u00c1\u0171\u0171\6"+
		"\2\u00c1\u00c1\u010e\u010e\u0171\u0171\u01a5\u01a5\4\2\u02f0\u02f0\u02f3"+
		"\u02f6\5\2\u0085\u0085\u00e1\u00e1\u0129\u0129\3\2\u0274\u0275\4\2TT\u0129"+
		"\u0129\4\2rr\u028f\u028f\4\2\u0118\u0118\u01e6\u01e6\4\2\u0085\u0085\u0129"+
		"\u0129\t\2\f\f\u0091\u0091\u00e1\u00e1\u0215\u0216\u0218\u0218\u021a\u021a"+
		"\u022d\u022d\4\2\u017f\u017f\u0307\u0307\4\2\u02ed\u02ef\u0315\u0315\5"+
		"\2\u01b2\u01b2\u01e6\u01e6\u02ad\u02ad\4\2\24\24\u0088\u0088\4\2\u0112"+
		"\u0112\u01e0\u01e0\4\2dd\u00f1\u00f1\4\2\f\f\u0091\u0091\4\2\u00c8\u00c8"+
		"\u00ea\u00ea\4\2\u00ee\u00ee\u010b\u010b\4\2\u0184\u0184\u028b\u028b\4"+
		"\2\37\37\u0221\u0221\4\2\u0107\u0107\u01da\u01da\4\2\"\"\u013e\u013e\4"+
		"\2\u0181\u0181\u02e9\u02ea\4\2\u0212\u0212\u0214\u0214\4\2\u01c3\u01c3"+
		"\u021c\u021c\4\2\u0221\u0221\u022a\u022a\4\2}}\u0096\u0096\5\2\u0173\u0173"+
		"\u021d\u021d\u028c\u028c\4\2\u0121\u0121\u0265\u0265\4\2\u0082\u0082\u02d1"+
		"\u02d1\5\2\u00d0\u00d0\u01a8\u01a8\u0240\u0240\6\2\u00f4\u00f4\u01bd\u01bd"+
		"\u01f3\u01f3\u0268\u0268\17\2\u0087\u0087\u0096\u0096\u00ac\u00ac\u00af"+
		"\u00af\u00be\u00be\u00ee\u00ee\u01a9\u01a9\u01ad\u01ad\u01c5\u01c5\u0200"+
		"\u0200\u0237\u0237\u0254\u0254\u026a\u026a\6\2\u01e5\u01e5\u023e\u023e"+
		"\u026c\u026c\u027e\u027e\4\2CC\u0204\u0204\4\2cc\u0096\u0096\4\2\u0082"+
		"\u0082\u0173\u0173\4\2\u00b6\u00b6\u01b1\u01b1\7\2::\u00b6\u00b6\u00ba"+
		"\u00ba\u014f\u014f\u01b1\u01b1\5\2\u00b6\u00b6\u01b1\u01b1\u026d\u026d"+
		"\4\2NN\u025b\u025b\6\2\f\f\"\"\u0082\u0082\u0181\u0181\4\2\u01e9\u01e9"+
		"\u02c8\u02c8\5\2\u0123\u0123\u0164\u0164\u0225\u0225\4\2\u00cd\u00cd\u00fd"+
		"\u00fd\4\2##\u01c0\u01c0\4\2\u00ed\u00ee\u0109\u0109\4\2\u00a8\u00a8\u0281"+
		"\u0281\4\2\u0225\u0225\u0279\u0279\b\2\f\fbb\u0102\u0102\u0150\u0150\u020c"+
		"\u020c\u0239\u0239\4\2VV\u01b0\u01b0\7\2\u008a\u008a\u00e3\u00e3\u01a7"+
		"\u01a7\u0225\u0225\u026b\u026b\7\2\"\"\u00a5\u00a5\u00a7\u00a7\u00d2\u00d2"+
		"\u0205\u0205\4\2\u026c\u026c\u02c8\u02c8\4\2\u008e\u008e\u009e\u009e\4"+
		"\2\u0088\u0089\u00b4\u00b4\5\2\u00b9\u00b9\u0256\u0256\u0264\u0264\4\2"+
		"\21\21\u0301\u0301\4\2\u018c\u018c\u0304\u0304\4\2\f\f\22\22\4\2\u02f0"+
		"\u02f0\u02f2\u02f7\5\2\u0093\u0093\u015f\u015f\u02fa\u02fc\3\2\u02f8\u02f9"+
		"\3\2\u02ff\u0300\4\2\u02f8\u02f9\u02fe\u02fe\4\2%&((\6\2\u02a8\u02a9\u02b6"+
		"\u02b6\u02b8\u02b8\u02ba\u02ba\4\2\u02ae\u02ae\u02b0\u02b0\4\2\u02ab\u02ab"+
		"\u02af\u02af\4\2\u00c1\u00c1\u010e\u010e\4\2\u00ea\u00ea\u02b9\u02b9\4"+
		"\2\7\7\u0230\u0230\3\2tu\3\2\u024a\u024b\6\2ssvv\u0249\u0249\u024c\u024c"+
		"\4\2\u0175\u0175\u02eb\u02eb\4\2\u02eb\u02eb\u02fd\u02fd\7\2x{\u00e4\u00e6"+
		"\u0157\u0158\u01f0\u01f0\u0291\u0291\13\2||\u00e7\u00e7\u0153\u0153\u0159"+
		"\u0159\u0160\u0160\u01af\u01af\u01f1\u01f1\u0282\u0282\u0292\u0292\5\2"+
		"^^\u00b1\u00b1\u025f\u025f\4\2\u017b\u017b\u01e7\u01e7\f\2\67\67BBKKY"+
		"[mm\u0152\u0152\u0165\u0165\u01ee\u01ee\u022f\u022f\u0242\u0242\4\2\u022c"+
		"\u022c\u027f\u027f\5\2\u0082\u0082\u009a\u009a\u00c2\u00c2\5\2\u0082\u0082"+
		"\u0090\u0090\u0150\u0150\5\2\u00ce\u00ce\u0194\u0194\u0203\u0203\5\2."+
		".\u00de\u00de\u01ea\u01ea\3\2\u0297\u0298\4\2\u0259\u0259\u026f\u026f"+
		"\7\2!!\u00fb\u00fb\u014d\u014d\u0206\u0206\u024e\u024e\6\2\u0080\u0080"+
		"\u00c2\u00c2\u00c5\u00c5\u017c\u017c\3\2+,\4\2\u0124\u0124\u014c\u014c"+
		"\6\2\u00d5\u00d6\u0119\u0119\u0161\u0163\u019d\u019e\5\2\u0202\u0202\u0266"+
		"\u0266\u0293\u0293\3\2\u0222\u0224\4\2??\u0241\u0241\b\2PPRR\u0082\u0082"+
		"\u009a\u009a\u00c2\u00c2\u01bc\u01bc\5\2\u00c1\u00c1\u010e\u010e\u0177"+
		"\u0177\4\2\u0090\u0090\u0150\u0150\4\2\u011a\u011a\u01b2\u01b2\4\2\u0145"+
		"\u0145\u015a\u015a\4\2rr\u00ee\u00ee\5\2\u00f2\u00f2\u00fd\u00fd\u018f"+
		"\u018f\4\2\u021f\u021f\u0245\u0245\4\2\u017e\u017e\u0183\u0183\4\2\u011e"+
		"\u011e\u0179\u0179\4\2\u031d\u031d\u031f\u031f\5\2\u02ed\u02ef\u0316\u0316"+
		"\u0318\u0319\4\2\u02ed\u02ef\u0316\u0316\4\2\u02ed\u02ef\u0318\u0319\3"+
		"\2\u0316\u0317\4\2\u00b9\u00b9\u0256\u0256\4\2\u017a\u017a\u0314\u0314"+
		"\3\2\u02f0\u02f1\7\2\u00d8\u00d8\u011e\u011e\u01f8\u01f8\u0294\u0294\u02a3"+
		"\u02a3\5\2\u00af\u00af\u0200\u0200\u02cc\u02cc\"\2\25\25\37\37\60\61<"+
		"<??MMOO\\\\}}\u0095\u0095\u00a1\u00a1\u00c6\u00c7\u00dd\u00dd\u00e0\u00e0"+
		"\u00ec\u00ec\u00f7\u00f7\u010d\u010d\u0177\u0177\u01a1\u01a1\u01a3\u01a3"+
		"\u01c9\u01c9\u01d6\u01d6\u01e2\u01e2\u01eb\u01eb\u0202\u0202\u0204\u0204"+
		"\u0221\u0221\u022a\u022a\u0257\u0257\u0260\u0261\u028d\u028d\u02a7\u02a7"+
		"\13\2\u00ac\u00ac\u00be\u00be\u0173\u0173\u01a9\u01a9\u01ad\u01ad\u01c5"+
		"\u01c5\u01cd\u01cd\u0237\u0237\u02c7\u02c7\u00a3\2\4\5\7\13\16\16\22\22"+
		"\27\27\31\35##\'\'*,..\64\64\678:;AFHIKLNNPTVWY[]]bbggmmqsvv||\u0083\u0084"+
		"\u0086\u0086\u008c\u0090\u0098\u009a\u009e\u009e\u00a0\u00a0\u00a2\u00a2"+
		"\u00a4\u00a8\u00aa\u00ab\u00ad\u00ae\u00b2\u00b3\u00b5\u00b7\u00ba\u00bb"+
		"\u00bf\u00c2\u00cb\u00cc\u00ce\u00ce\u00d2\u00d2\u00d4\u00d7\u00da\u00da"+
		"\u00de\u00de\u00e2\u00e3\u00e7\u00e8\u00eb\u00eb\u00ed\u00ed\u00f0\u00f0"+
		"\u00f5\u00f6\u00fc\u00fc\u0101\u0102\u0104\u0105\u0108\u0108\u010a\u010a"+
		"\u010e\u010e\u0110\u0110\u0113\u0114\u0119\u011a\u0120\u0120\u0122\u0123"+
		"\u012a\u012a\u012c\u013c\u013e\u0141\u0143\u0146\u0149\u014a\u014f\u0153"+
		"\u0156\u0156\u0159\u015a\u015c\u015c\u015e\u015e\u0160\u0168\u016b\u016b"+
		"\u016d\u016d\u016f\u0172\u0178\u0178\u017b\u017b\u017d\u017d\u017f\u017f"+
		"\u0182\u0182\u0184\u0185\u0188\u0188\u0190\u0196\u0198\u019f\u01a4\u01a5"+
		"\u01a7\u01a7\u01aa\u01ac\u01af\u01b1\u01b4\u01b4\u01b8\u01b9\u01bb\u01bc"+
		"\u01bf\u01c3\u01c6\u01c6\u01c8\u01c8\u01ca\u01ca\u01ce\u01d4\u01d8\u01d8"+
		"\u01da\u01dc\u01de\u01de\u01e3\u01e5\u01e7\u01e8\u01ea\u01ea\u01ec\u01ec"+
		"\u01ee\u01ee\u01f1\u01f2\u01f6\u01f7\u01f9\u01f9\u01fe\u01fe\u0203\u0203"+
		"\u0205\u0205\u0207\u0207\u0209\u020c\u0212\u0214\u0216\u0216\u0219\u0219"+
		"\u021c\u021c\u021e\u021e\u0220\u0220\u0222\u0225\u022b\u022b\u022e\u0233"+
		"\u0238\u023a\u023d\u023e\u0241\u0244\u0246\u0247\u0249\u024c\u0252\u0253"+
		"\u0258\u0259\u025b\u025e\u0264\u0264\u0267\u0267\u0269\u0269\u026b\u026d"+
		"\u0273\u0273\u0275\u0275\u0279\u0279\u027e\u027e\u0280\u0283\u0288\u028a"+
		"\u028c\u028c\u028e\u028f\u0292\u0292\u0295\u0298\u029a\u029a\u029f\u02a1"+
		"\u02a4\u02a5\u02aa\u02aa\u02ac\u02ac\u02b3\u02b4\u02b7\u02b7\u02b9\u02b9"+
		"\u02bb\u02bc\u02c0\u02c6\u02c9\u02cb\u02cd\u02d7\u02d9\u02dc\u02de\u02de"+
		"\u02e1\u02e4\6\2\u0249\u0249\u024c\u024c\u02dd\u02dd\u02df\u02ea8\2\4"+
		"\4\16\16\25\25\35\35\37\37\60\61<<??DDMMOO\\\\}}\u0095\u0095\u00a1\u00a1"+
		"\u00c6\u00c7\u00cb\u00cb\u00d4\u00d4\u00dd\u00dd\u00e0\u00e0\u00e2\u00e2"+
		"\u00f7\u00f7\u010d\u010d\u0177\u0177\u0185\u0185\u0188\u0188\u0190\u0190"+
		"\u0193\u0193\u0197\u0197\u019f\u019f\u01a1\u01a1\u01a3\u01a3\u01c6\u01c6"+
		"\u01c9\u01c9\u01d6\u01d6\u01d8\u01d8\u01e2\u01e2\u01eb\u01eb\u01f2\u01f2"+
		"\u01f9\u01f9\u0202\u0202\u0204\u0204\u0209\u020a\u0221\u0221\u022a\u022a"+
		"\u0257\u0257\u0260\u0261\u0269\u0269\u028a\u028a\u028d\u028d\u0295\u0295"+
		"\u0297\u0298\u02a7\u02a7\u02d2\u02d5\u009d\2\5\5\7\13\17\17\22\22\27\34"+
		"##\'\'*,..\64\64\678:;ACEFHIKLNNPTVWY[]]__bbggmmqsvv||\u0083\u0084\u0086"+
		"\u0086\u008a\u008a\u008c\u0090\u0098\u009a\u009e\u009e\u00a0\u00a0\u00a2"+
		"\u00a2\u00a4\u00a8\u00aa\u00ab\u00ad\u00ad\u00b2\u00b2\u00b5\u00b7\u00ba"+
		"\u00bb\u00bf\u00c2\u00cc\u00cc\u00ce\u00ce\u00d2\u00d2\u00d5\u00d8\u00da"+
		"\u00da\u00de\u00de\u00e3\u00e3\u00e7\u00e8\u00eb\u00eb\u00ed\u00ed\u00f0"+
		"\u00f0\u00f5\u00f6\u00fc\u00fc\u0101\u0102\u0104\u0105\u0108\u0108\u010a"+
		"\u010a\u010e\u010e\u0110\u0110\u0113\u0114\u0119\u011a\u011e\u011e\u0120"+
		"\u0120\u0122\u0123\u012a\u012a\u012c\u013c\u013e\u0141\u0143\u0147\u0149"+
		"\u014a\u014f\u0153\u0156\u0156\u0159\u015a\u015c\u015c\u015e\u015e\u0160"+
		"\u0168\u016b\u016b\u016d\u016d\u016f\u0172\u0178\u0178\u017b\u017b\u017d"+
		"\u017d\u017f\u0180\u0182\u0182\u0191\u0192\u0194\u0196\u0198\u019e\u01a4"+
		"\u01a5\u01a7\u01a7\u01aa\u01ac\u01af\u01b1\u01b4\u01b4\u01b8\u01bc\u01bf"+
		"\u01c3\u01c8\u01c8\u01ca\u01ca\u01ce\u01d4\u01da\u01dc\u01de\u01de\u01e3"+
		"\u01e5\u01e7\u01e8\u01ea\u01ea\u01ec\u01ec\u01ee\u01ee\u01f1\u01f1\u01f6"+
		"\u01f8\u01fe\u01fe\u0203\u0203\u0205\u0205\u0207\u0207\u020b\u020c\u0212"+
		"\u0214\u0216\u0217\u0219\u0219\u021c\u021c\u021e\u021e\u0220\u0220\u0222"+
		"\u0225\u022b\u022b\u022e\u0233\u0237\u023a\u023d\u023e\u0241\u0244\u0246"+
		"\u0247\u0249\u024c\u0252\u0253\u0258\u025e\u0264\u0264\u0267\u0267\u026b"+
		"\u026d\u0275\u0275\u0279\u0279\u027e\u027e\u0280\u0283\u0289\u0289\u028c"+
		"\u028c\u028e\u028f\u0292\u0292\u029a\u029a\u029f\u02a1\u02a4\u02a6\u02aa"+
		"\u02aa\u02ac\u02ac\u02b3\u02b4\u02b7\u02b7\u02b9\u02b9\u02bb\u02bc\u02c0"+
		"\u02c6\u02c9\u02ca\u02ce\u02cf\u02d1\u02d1\u02d6\u02d7\u02d9\u02da\7\2"+
		"ee\u00d0\u00d0\u00ec\u00ec\u01e6\u01e6\u01e9\u01e9\b\2\u00ae\u00ae\u00b3"+
		"\u00b3\u0184\u0184\u0237\u0237\u0273\u0273\u0288\u0288\2\u2542\2\u04d2"+
		"\3\2\2\2\4\u04f6\3\2\2\2\6\u04f8\3\2\2\2\b\u0515\3\2\2\2\n\u0524\3\2\2"+
		"\2\f\u054a\3\2\2\2\16\u0553\3\2\2\2\20\u0560\3\2\2\2\22\u0562\3\2\2\2"+
		"\24\u0567\3\2\2\2\26\u057f\3\2\2\2\30\u0588\3\2\2\2\32\u058a\3\2\2\2\34"+
		"\u0599\3\2\2\2\36\u05fb\3\2\2\2 \u05ff\3\2\2\2\"\u060f\3\2\2\2$\u06a2"+
		"\3\2\2\2&\u06a7\3\2\2\2(\u06a9\3\2\2\2*\u06ab\3\2\2\2,\u06b9\3\2\2\2."+
		"\u06c1\3\2\2\2\60\u06d1\3\2\2\2\62\u06d3\3\2\2\2\64\u06d7\3\2\2\2\66\u06dc"+
		"\3\2\2\28\u06de\3\2\2\2:\u0703\3\2\2\2<\u070b\3\2\2\2>\u0715\3\2\2\2@"+
		"\u0717\3\2\2\2B\u072b\3\2\2\2D\u0734\3\2\2\2F\u0737\3\2\2\2H\u0744\3\2"+
		"\2\2J\u0749\3\2\2\2L\u074d\3\2\2\2N\u0754\3\2\2\2P\u0769\3\2\2\2R\u0778"+
		"\3\2\2\2T\u077b\3\2\2\2V\u079a\3\2\2\2X\u07a4\3\2\2\2Z\u07a7\3\2\2\2\\"+
		"\u07b0\3\2\2\2^\u07b2\3\2\2\2`\u07be\3\2\2\2b\u07d7\3\2\2\2d\u07f2\3\2"+
		"\2\2f\u0800\3\2\2\2h\u0803\3\2\2\2j\u0818\3\2\2\2l\u081b\3\2\2\2n\u0854"+
		"\3\2\2\2p\u0856\3\2\2\2r\u085a\3\2\2\2t\u0863\3\2\2\2v\u0873\3\2\2\2x"+
		"\u0875\3\2\2\2z\u087d\3\2\2\2|\u0897\3\2\2\2~\u0899\3\2\2\2\u0080\u08a5"+
		"\3\2\2\2\u0082\u08b4\3\2\2\2\u0084\u08b6\3\2\2\2\u0086\u08b9\3\2\2\2\u0088"+
		"\u08cf\3\2\2\2\u008a\u08d1\3\2\2\2\u008c\u08d7\3\2\2\2\u008e\u08dd\3\2"+
		"\2\2\u0090\u08e3\3\2\2\2\u0092\u08e9\3\2\2\2\u0094\u08ef\3\2\2\2\u0096"+
		"\u08f6\3\2\2\2\u0098\u08fe\3\2\2\2\u009a\u0900\3\2\2\2\u009c\u0906\3\2"+
		"\2\2\u009e\u090c\3\2\2\2\u00a0\u0913\3\2\2\2\u00a2\u0925\3\2\2\2\u00a4"+
		"\u0927\3\2\2\2\u00a6\u092b\3\2\2\2\u00a8\u0930\3\2\2\2\u00aa\u0940\3\2"+
		"\2\2\u00ac\u0945\3\2\2\2\u00ae\u0966\3\2\2\2\u00b0\u0985\3\2\2\2\u00b2"+
		"\u0996\3\2\2\2\u00b4\u0998\3\2\2\2\u00b6\u09ac\3\2\2\2\u00b8\u09b2\3\2"+
		"\2\2\u00ba\u09b8\3\2\2\2\u00bc\u09be\3\2\2\2\u00be\u09c5\3\2\2\2\u00c0"+
		"\u09ce\3\2\2\2\u00c2\u09df\3\2\2\2\u00c4\u09e1\3\2\2\2\u00c6\u09e8\3\2"+
		"\2\2\u00c8\u09f2\3\2\2\2\u00ca\u0a00\3\2\2\2\u00cc\u0a06\3\2\2\2\u00ce"+
		"\u0a0e\3\2\2\2\u00d0\u0a14\3\2\2\2\u00d2\u0a1c\3\2\2\2\u00d4\u0a22\3\2"+
		"\2\2\u00d6\u0a2c\3\2\2\2\u00d8\u0a30\3\2\2\2\u00da\u0a36\3\2\2\2\u00dc"+
		"\u0a3b\3\2\2\2\u00de\u0a46\3\2\2\2\u00e0\u0a71\3\2\2\2\u00e2\u0a77\3\2"+
		"\2\2\u00e4\u0a79\3\2\2\2\u00e6\u0a80\3\2\2\2\u00e8\u0a9e\3\2\2\2\u00ea"+
		"\u0aa0\3\2\2\2\u00ec\u0abf\3\2\2\2\u00ee\u0ac6\3\2\2\2\u00f0\u0aca\3\2"+
		"\2\2\u00f2\u0ad2\3\2\2\2\u00f4\u0adc\3\2\2\2\u00f6\u0ade\3\2\2\2\u00f8"+
		"\u0af0\3\2\2\2\u00fa\u0afc\3\2\2\2\u00fc\u0b01\3\2\2\2\u00fe\u0b07\3\2"+
		"\2\2\u0100\u0b28\3\2\2\2\u0102\u0b2a\3\2\2\2\u0104\u0b32\3\2\2\2\u0106"+
		"\u0b3b\3\2\2\2\u0108\u0b43\3\2\2\2\u010a\u0b4f\3\2\2\2\u010c\u0b66\3\2"+
		"\2\2\u010e\u0b74\3\2\2\2\u0110\u0b78\3\2\2\2\u0112\u0b98\3\2\2\2\u0114"+
		"\u0ba7\3\2\2\2\u0116\u0bb6\3\2\2\2\u0118\u0bb8\3\2\2\2\u011a\u0bd3\3\2"+
		"\2\2\u011c\u0bd5\3\2\2\2\u011e\u0bd7\3\2\2\2\u0120\u0bda\3\2\2\2\u0122"+
		"\u0bdd\3\2\2\2\u0124\u0be4\3\2\2\2\u0126\u0be6\3\2\2\2\u0128\u0c04\3\2"+
		"\2\2\u012a\u0c10\3\2\2\2\u012c\u0c13\3\2\2\2\u012e\u0c1c\3\2\2\2\u0130"+
		"\u0c20\3\2\2\2\u0132\u0c25\3\2\2\2\u0134\u0c32\3\2\2\2\u0136\u0c37\3\2"+
		"\2\2\u0138\u0c3b\3\2\2\2\u013a\u0c4b\3\2\2\2\u013c\u0c4d\3\2\2\2\u013e"+
		"\u0c5f\3\2\2\2\u0140\u0c61\3\2\2\2\u0142\u0c6a\3\2\2\2\u0144\u0c76\3\2"+
		"\2\2\u0146\u0c7d\3\2\2\2\u0148\u0c88\3\2\2\2\u014a\u0c8a\3\2\2\2\u014c"+
		"\u0c8e\3\2\2\2\u014e\u0c90\3\2\2\2\u0150\u0c95\3\2\2\2\u0152\u0c9d\3\2"+
		"\2\2\u0154\u0ca6\3\2\2\2\u0156\u0ca9\3\2\2\2\u0158\u0cb8\3\2\2\2\u015a"+
		"\u0cbb\3\2\2\2\u015c\u0cce\3\2\2\2\u015e\u0cd3\3\2\2\2\u0160\u0cd8\3\2"+
		"\2\2\u0162\u0cdc\3\2\2\2\u0164\u0cea\3\2\2\2\u0166\u0ced\3\2\2\2\u0168"+
		"\u0cf3\3\2\2\2\u016a\u0d00\3\2\2\2\u016c\u0d08\3\2\2\2\u016e\u0d22\3\2"+
		"\2\2\u0170\u0d2f\3\2\2\2\u0172\u0d36\3\2\2\2\u0174\u0d38\3\2\2\2\u0176"+
		"\u0d44\3\2\2\2\u0178\u0d46\3\2\2\2\u017a\u0d50\3\2\2\2\u017c\u0d68\3\2"+
		"\2\2\u017e\u0d6a\3\2\2\2\u0180\u0d71\3\2\2\2\u0182\u0d7b\3\2\2\2\u0184"+
		"\u0d9e\3\2\2\2\u0186\u0da8\3\2\2\2\u0188\u0daa\3\2\2\2\u018a\u0dae\3\2"+
		"\2\2\u018c\u0db6\3\2\2\2\u018e\u0db8\3\2\2\2\u0190\u0dbd\3\2\2\2\u0192"+
		"\u0dc1\3\2\2\2\u0194\u0ddd\3\2\2\2\u0196\u0ddf\3\2\2\2\u0198\u0de1\3\2"+
		"\2\2\u019a\u0de9\3\2\2\2\u019c\u0deb\3\2\2\2\u019e\u0df3\3\2\2\2\u01a0"+
		"\u0dfd\3\2\2\2\u01a2\u0e01\3\2\2\2\u01a4\u0e1a\3\2\2\2\u01a6\u0e35\3\2"+
		"\2\2\u01a8\u0e37";
	private static final String _serializedATNSegment1 =
		"\3\2\2\2\u01aa\u0e41\3\2\2\2\u01ac\u0e60\3\2\2\2\u01ae\u0e78\3\2\2\2\u01b0"+
		"\u0e7a\3\2\2\2\u01b2\u0e88\3\2\2\2\u01b4\u0e8a\3\2\2\2\u01b6\u0ead\3\2"+
		"\2\2\u01b8\u0eaf\3\2\2\2\u01ba\u0ed9\3\2\2\2\u01bc\u0ee9\3\2\2\2\u01be"+
		"\u0eeb\3\2\2\2\u01c0\u0ef3\3\2\2\2\u01c2\u0efc\3\2\2\2\u01c4\u0f03\3\2"+
		"\2\2\u01c6\u0f66\3\2\2\2\u01c8\u0f6a\3\2\2\2\u01ca\u0f6c\3\2\2\2\u01cc"+
		"\u0f70\3\2\2\2\u01ce\u0f7e\3\2\2\2\u01d0\u0f80\3\2\2\2\u01d2\u0f8d\3\2"+
		"\2\2\u01d4\u0fcd\3\2\2\2\u01d6\u0fcf\3\2\2\2\u01d8\u0fd7\3\2\2\2\u01da"+
		"\u0fdf\3\2\2\2\u01dc\u0fe7\3\2\2\2\u01de\u0fe9\3\2\2\2\u01e0\u1006\3\2"+
		"\2\2\u01e2\u100f\3\2\2\2\u01e4\u102e\3\2\2\2\u01e6\u1030\3\2\2\2\u01e8"+
		"\u1038\3\2\2\2\u01ea\u103a\3\2\2\2\u01ec\u1048\3\2\2\2\u01ee\u104a\3\2"+
		"\2\2\u01f0\u1050\3\2\2\2\u01f2\u1058\3\2\2\2\u01f4\u107d\3\2\2\2\u01f6"+
		"\u107f\3\2\2\2\u01f8\u108e\3\2\2\2\u01fa\u1090\3\2\2\2\u01fc\u10ce\3\2"+
		"\2\2\u01fe\u10d0\3\2\2\2\u0200\u10d3\3\2\2\2\u0202\u10ec\3\2\2\2\u0204"+
		"\u10f5\3\2\2\2\u0206\u10f7\3\2\2\2\u0208\u10fc\3\2\2\2\u020a\u112a\3\2"+
		"\2\2\u020c\u112c\3\2\2\2\u020e\u1134\3\2\2\2\u0210\u1165\3\2\2\2\u0212"+
		"\u1172\3\2\2\2\u0214\u1174\3\2\2\2\u0216\u1177\3\2\2\2\u0218\u1182\3\2"+
		"\2\2\u021a\u1187\3\2\2\2\u021c\u118a\3\2\2\2\u021e\u1199\3\2\2\2\u0220"+
		"\u11cb\3\2\2\2\u0222\u11cd\3\2\2\2\u0224\u11cf\3\2\2\2\u0226\u1200\3\2"+
		"\2\2\u0228\u1212\3\2\2\2\u022a\u1214\3\2\2\2\u022c\u1224\3\2\2\2\u022e"+
		"\u1230\3\2\2\2\u0230\u1249\3\2\2\2\u0232\u124b\3\2\2\2\u0234\u1253\3\2"+
		"\2\2\u0236\u1284\3\2\2\2\u0238\u1293\3\2\2\2\u023a\u1298\3\2\2\2\u023c"+
		"\u129a\3\2\2\2\u023e\u12b2\3\2\2\2\u0240\u12b4\3\2\2\2\u0242\u12ef\3\2"+
		"\2\2\u0244\u12fa\3\2\2\2\u0246\u12fc\3\2\2\2\u0248\u12ff\3\2\2\2\u024a"+
		"\u130c\3\2\2\2\u024c\u1328\3\2\2\2\u024e\u1330\3\2\2\2\u0250\u1332\3\2"+
		"\2\2\u0252\u133d\3\2\2\2\u0254\u133f\3\2\2\2\u0256\u1347\3\2\2\2\u0258"+
		"\u1349\3\2\2\2\u025a\u142d\3\2\2\2\u025c\u1434\3\2\2\2\u025e\u1436\3\2"+
		"\2\2\u0260\u1438\3\2\2\2\u0262\u1442\3\2\2\2\u0264\u1469\3\2\2\2\u0266"+
		"\u146d\3\2\2\2\u0268\u146f\3\2\2\2\u026a\u1477\3\2\2\2\u026c\u147b\3\2"+
		"\2\2\u026e\u1483\3\2\2\2\u0270\u148c\3\2\2\2\u0272\u148e\3\2\2\2\u0274"+
		"\u14a5\3\2\2\2\u0276\u14a7\3\2\2\2\u0278\u14a9\3\2\2\2\u027a\u14b9\3\2"+
		"\2\2\u027c\u14c5\3\2\2\2\u027e\u14c7\3\2\2\2\u0280\u14cf\3\2\2\2\u0282"+
		"\u14d7\3\2\2\2\u0284\u14e0\3\2\2\2\u0286\u14e2\3\2\2\2\u0288\u14f4\3\2"+
		"\2\2\u028a\u1502\3\2\2\2\u028c\u1507\3\2\2\2\u028e\u150d\3\2\2\2\u0290"+
		"\u150f\3\2\2\2\u0292\u151f\3\2\2\2\u0294\u1527\3\2\2\2\u0296\u1531\3\2"+
		"\2\2\u0298\u153e\3\2\2\2\u029a\u1540\3\2\2\2\u029c\u1546\3\2\2\2\u029e"+
		"\u1566\3\2\2\2\u02a0\u1568\3\2\2\2\u02a2\u156b\3\2\2\2\u02a4\u156e\3\2"+
		"\2\2\u02a6\u157b\3\2\2\2\u02a8\u158b\3\2\2\2\u02aa\u15a2\3\2\2\2\u02ac"+
		"\u15a4\3\2\2\2\u02ae\u15c9\3\2\2\2\u02b0\u15cb\3\2\2\2\u02b2\u1658\3\2"+
		"\2\2\u02b4\u1665\3\2\2\2\u02b6\u166e\3\2\2\2\u02b8\u16f3\3\2\2\2\u02ba"+
		"\u16f5\3\2\2\2\u02bc\u1724\3\2\2\2\u02be\u1726\3\2\2\2\u02c0\u172b\3\2"+
		"\2\2\u02c2\u1734\3\2\2\2\u02c4\u1747\3\2\2\2\u02c6\u174a\3\2\2\2\u02c8"+
		"\u1753\3\2\2\2\u02ca\u1755\3\2\2\2\u02cc\u176c\3\2\2\2\u02ce\u187f\3\2"+
		"\2\2\u02d0\u18a0\3\2\2\2\u02d2\u18a2\3\2\2\2\u02d4\u18a8\3\2\2\2\u02d6"+
		"\u18ab\3\2\2\2\u02d8\u18ba\3\2\2\2\u02da\u18c2\3\2\2\2\u02dc\u18c4\3\2"+
		"\2\2\u02de\u18e1\3\2\2\2\u02e0\u1902\3\2\2\2\u02e2\u1904\3\2\2\2\u02e4"+
		"\u190c\3\2\2\2\u02e6\u1912\3\2\2\2\u02e8\u1917\3\2\2\2\u02ea\u1919\3\2"+
		"\2\2\u02ec\u192f\3\2\2\2\u02ee\u1931\3\2\2\2\u02f0\u1934\3\2\2\2\u02f2"+
		"\u1937\3\2\2\2\u02f4\u1967\3\2\2\2\u02f6\u1969\3\2\2\2\u02f8\u1974\3\2"+
		"\2\2\u02fa\u1976\3\2\2\2\u02fc\u1978\3\2\2\2\u02fe\u197c\3\2\2\2\u0300"+
		"\u197e\3\2\2\2\u0302\u1980\3\2\2\2\u0304\u1984\3\2\2\2\u0306\u1988\3\2"+
		"\2\2\u0308\u198c\3\2\2\2\u030a\u1994\3\2\2\2\u030c\u1998\3\2\2\2\u030e"+
		"\u19a0\3\2\2\2\u0310\u19a2\3\2\2\2\u0312\u19b4\3\2\2\2\u0314\u19b6\3\2"+
		"\2\2\u0316\u19b9\3\2\2\2\u0318\u19be\3\2\2\2\u031a\u19c6\3\2\2\2\u031c"+
		"\u19cc\3\2\2\2\u031e\u19d0\3\2\2\2\u0320\u19e1\3\2\2\2\u0322\u19e4\3\2"+
		"\2\2\u0324\u19e9\3\2\2\2\u0326\u19eb\3\2\2\2\u0328\u19ee\3\2\2\2\u032a"+
		"\u19f7\3\2\2\2\u032c\u19ff\3\2\2\2\u032e\u1a01\3\2\2\2\u0330\u1a06\3\2"+
		"\2\2\u0332\u1a0d\3\2\2\2\u0334\u1a17\3\2\2\2\u0336\u1a1f\3\2\2\2\u0338"+
		"\u1a21\3\2\2\2\u033a\u1a2b\3\2\2\2\u033c\u1a33\3\2\2\2\u033e\u1a35\3\2"+
		"\2\2\u0340\u1a3b\3\2\2\2\u0342\u1a50\3\2\2\2\u0344\u1a52\3\2\2\2\u0346"+
		"\u1a58\3\2\2\2\u0348\u1a5b\3\2\2\2\u034a\u1a5e\3\2\2\2\u034c\u1a7c\3\2"+
		"\2\2\u034e\u1a80\3\2\2\2\u0350\u1a87\3\2\2\2\u0352\u1a8e\3\2\2\2\u0354"+
		"\u1a90\3\2\2\2\u0356\u1aa0\3\2\2\2\u0358\u1ab0\3\2\2\2\u035a\u1ab4\3\2"+
		"\2\2\u035c\u1ab7\3\2\2\2\u035e\u1aba\3\2\2\2\u0360\u1ad2\3\2\2\2\u0362"+
		"\u1ad4\3\2\2\2\u0364\u1adc\3\2\2\2\u0366\u1ade\3\2\2\2\u0368\u1ae2\3\2"+
		"\2\2\u036a\u1b31\3\2\2\2\u036c\u1b33\3\2\2\2\u036e\u1b37\3\2\2\2\u0370"+
		"\u1b91\3\2\2\2\u0372\u1b93\3\2\2\2\u0374\u1b95\3\2\2\2\u0376\u1ba5\3\2"+
		"\2\2\u0378\u1ba7\3\2\2\2\u037a\u1bc7\3\2\2\2\u037c\u1bc9\3\2\2\2\u037e"+
		"\u1bd4\3\2\2\2\u0380\u1bdb\3\2\2\2\u0382\u1beb\3\2\2\2\u0384\u1bf1\3\2"+
		"\2\2\u0386\u1bf3\3\2\2\2\u0388\u1bf7\3\2\2\2\u038a\u1c02\3\2\2\2\u038c"+
		"\u1c04\3\2\2\2\u038e\u1c06\3\2\2\2\u0390\u1c0d\3\2\2\2\u0392\u1c0f\3\2"+
		"\2\2\u0394\u1c11\3\2\2\2\u0396\u1ca7\3\2\2\2\u0398\u1cac\3\2\2\2\u039a"+
		"\u1cb3\3\2\2\2\u039c\u1cb5\3\2\2\2\u039e\u1cbd\3\2\2\2\u03a0\u1ccf\3\2"+
		"\2\2\u03a2\u1cd7\3\2\2\2\u03a4\u1cdf\3\2\2\2\u03a6\u1ce1\3\2\2\2\u03a8"+
		"\u1ce5\3\2\2\2\u03aa\u1ced\3\2\2\2\u03ac\u1cf4\3\2\2\2\u03ae\u1cf6\3\2"+
		"\2\2\u03b0\u1d01\3\2\2\2\u03b2\u1d86\3\2\2\2\u03b4\u1d8a\3\2\2\2\u03b6"+
		"\u1d8d\3\2\2\2\u03b8\u1d96\3\2\2\2\u03ba\u1d9f\3\2\2\2\u03bc\u1da7\3\2"+
		"\2\2\u03be\u1dd5\3\2\2\2\u03c0\u1dd7\3\2\2\2\u03c2\u1dec\3\2\2\2\u03c4"+
		"\u1df1\3\2\2\2\u03c6\u1dfc\3\2\2\2\u03c8\u1e29\3\2\2\2\u03ca\u1e4d\3\2"+
		"\2\2\u03cc\u1e4f\3\2\2\2\u03ce\u1e57\3\2\2\2\u03d0\u1e64\3\2\2\2\u03d2"+
		"\u1e66\3\2\2\2\u03d4\u1e6a\3\2\2\2\u03d6\u1e6d\3\2\2\2\u03d8\u1e72\3\2"+
		"\2\2\u03da\u1e76\3\2\2\2\u03dc\u1e79\3\2\2\2\u03de\u1e7c\3\2\2\2\u03e0"+
		"\u1e80\3\2\2\2\u03e2\u1e86\3\2\2\2\u03e4\u1e8e\3\2\2\2\u03e6\u1e96\3\2"+
		"\2\2\u03e8\u1e9c\3\2\2\2\u03ea\u1e9f\3\2\2\2\u03ec\u1eb1\3\2\2\2\u03ee"+
		"\u1eb3\3\2\2\2\u03f0\u1eb9\3\2\2\2\u03f2\u1ebd\3\2\2\2\u03f4\u1ec5\3\2"+
		"\2\2\u03f6\u1ecd\3\2\2\2\u03f8\u1ed5\3\2\2\2\u03fa\u1ef2\3\2\2\2\u03fc"+
		"\u1f11\3\2\2\2\u03fe\u1f15\3\2\2\2\u0400\u1f19\3\2\2\2\u0402\u1f1c\3\2"+
		"\2\2\u0404\u1f27\3\2\2\2\u0406\u1f29\3\2\2\2\u0408\u1f2e\3\2\2\2\u040a"+
		"\u1f30\3\2\2\2\u040c\u1f32\3\2\2\2\u040e\u1f34\3\2\2\2\u0410\u1f3d\3\2"+
		"\2\2\u0412\u1f43\3\2\2\2\u0414\u1f45\3\2\2\2\u0416\u1f47\3\2\2\2\u0418"+
		"\u1f52\3\2\2\2\u041a\u1f56\3\2\2\2\u041c\u1f58\3\2\2\2\u041e\u1f5a\3\2"+
		"\2\2\u0420\u1f5c\3\2\2\2\u0422\u1f65\3\2\2\2\u0424\u1f67\3\2\2\2\u0426"+
		"\u1f69\3\2\2\2\u0428\u1f6b\3\2\2\2\u042a\u1f6d\3\2\2\2\u042c\u1f6f\3\2"+
		"\2\2\u042e\u1f71\3\2\2\2\u0430\u1f73\3\2\2\2\u0432\u1f77\3\2\2\2\u0434"+
		"\u1f7b\3\2\2\2\u0436\u1f7d\3\2\2\2\u0438\u1f7f\3\2\2\2\u043a\u1f81\3\2"+
		"\2\2\u043c\u1f83\3\2\2\2\u043e\u1f85\3\2\2\2\u0440\u1f87\3\2\2\2\u0442"+
		"\u1f89\3\2\2\2\u0444\u1f8b\3\2\2\2\u0446\u1f8d\3\2\2\2\u0448\u1f8f\3\2"+
		"\2\2\u044a\u1f93\3\2\2\2\u044c\u1f95\3\2\2\2\u044e\u1f98\3\2\2\2\u0450"+
		"\u1fa4\3\2\2\2\u0452\u1fa6\3\2\2\2\u0454\u1fae\3\2\2\2\u0456\u1fb6\3\2"+
		"\2\2\u0458\u1fba\3\2\2\2\u045a\u1fbc\3\2\2\2\u045c\u1fc0\3\2\2\2\u045e"+
		"\u1fc2\3\2\2\2\u0460\u1fc4\3\2\2\2\u0462\u1fc6\3\2\2\2\u0464\u1fc8\3\2"+
		"\2\2\u0466\u1fca\3\2\2\2\u0468\u1fcf\3\2\2\2\u046a\u1fd3\3\2\2\2\u046c"+
		"\u1fd5\3\2\2\2\u046e\u1fdd\3\2\2\2\u0470\u1fe1\3\2\2\2\u0472\u1ff0\3\2"+
		"\2\2\u0474\u1ff2\3\2\2\2\u0476\u1ff5\3\2\2\2\u0478\u1ff7\3\2\2\2\u047a"+
		"\u1ff9\3\2\2\2\u047c\u2000\3\2\2\2\u047e\u200b\3\2\2\2\u0480\u2012\3\2"+
		"\2\2\u0482\u2014\3\2\2\2\u0484\u2022\3\2\2\2\u0486\u2027\3\2\2\2\u0488"+
		"\u202c\3\2\2\2\u048a\u2033\3\2\2\2\u048c\u203b\3\2\2\2\u048e\u203d\3\2"+
		"\2\2\u0490\u2045\3\2\2\2\u0492\u2047\3\2\2\2\u0494\u2049\3\2\2\2\u0496"+
		"\u2051\3\2\2\2\u0498\u2055\3\2\2\2\u049a\u2057\3\2\2\2\u049c\u2059\3\2"+
		"\2\2\u049e\u2061\3\2\2\2\u04a0\u2065\3\2\2\2\u04a2\u2069\3\2\2\2\u04a4"+
		"\u206d\3\2\2\2\u04a6\u206f\3\2\2\2\u04a8\u2072\3\2\2\2\u04aa\u2074\3\2"+
		"\2\2\u04ac\u207c\3\2\2\2\u04ae\u2088\3\2\2\2\u04b0\u209b\3\2\2\2\u04b2"+
		"\u209d\3\2\2\2\u04b4\u209f\3\2\2\2\u04b6\u20b3\3\2\2\2\u04b8\u20b5\3\2"+
		"\2\2\u04ba\u20ba\3\2\2\2\u04bc\u20c6\3\2\2\2\u04be\u20cc\3\2\2\2\u04c0"+
		"\u20ce\3\2\2\2\u04c2\u20d5\3\2\2\2\u04c4\u20e0\3\2\2\2\u04c6\u04d3\7\2"+
		"\2\3\u04c7\u04ca\5\4\3\2\u04c8\u04ca\5\u01a8\u00d5\2\u04c9\u04c7\3\2\2"+
		"\2\u04c9\u04c8\3\2\2\2\u04ca\u04d0\3\2\2\2\u04cb\u04cd\7\u0308\2\2\u04cc"+
		"\u04ce\7\2\2\3\u04cd\u04cc\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04d1\3\2"+
		"\2\2\u04cf\u04d1\7\2\2\3\u04d0\u04cb\3\2\2\2\u04d0\u04cf\3\2\2\2\u04d1"+
		"\u04d3\3\2\2\2\u04d2\u04c6\3\2\2\2\u04d2\u04c9\3\2\2\2\u04d3\3\3\2\2\2"+
		"\u04d4\u04f7\5\6\4\2\u04d5\u04f7\5N(\2\u04d6\u04f7\5\u00b4[\2\u04d7\u04f7"+
		"\5\u00d4k\2\u04d8\u04f7\5\u00d8m\2\u04d9\u04da\6\3\2\2\u04da\u04f7\5\u00da"+
		"n\2\u04db\u04f7\5\u00dco\2\u04dc\u04f7\5\u00dep\2\u04dd\u04f7\5\u00e4"+
		"s\2\u04de\u04f7\5\u00e6t\2\u04df\u04f7\5\u00eav\2\u04e0\u04f7\5\u00fe"+
		"\u0080\2\u04e1\u04f7\5\u010a\u0086\2\u04e2\u04f7\5\u010c\u0087\2\u04e3"+
		"\u04f7\5\u01a2\u00d2\2\u04e4\u04f7\5\u01a4\u00d3\2\u04e5\u04f7\5\u01ba"+
		"\u00de\2\u04e6\u04f7\5\u01ec\u00f7\2\u04e7\u04e8\6\3\3\2\u04e8\u04f7\5"+
		"\u01f2\u00fa\2\u04e9\u04f7\5\u01f8\u00fd\2\u04ea\u04f7\5\u0236\u011c\2"+
		"\u04eb\u04f7\5\u023e\u0120\2\u04ec\u04f7\5\u0240\u0121\2\u04ed\u04f7\5"+
		"\u0258\u012d\2\u04ee\u04ef\6\3\4\2\u04ef\u04f7\5\u0284\u0143\2\u04f0\u04f7"+
		"\5\u0264\u0133\2\u04f1\u04f7\5\u0298\u014d\2\u04f2\u04f3\6\3\5\2\u04f3"+
		"\u04f7\5\u034a\u01a6\2\u04f4\u04f7\5\u0354\u01ab\2\u04f5\u04f7\5\u0356"+
		"\u01ac\2\u04f6\u04d4\3\2\2\2\u04f6\u04d5\3\2\2\2\u04f6\u04d6\3\2\2\2\u04f6"+
		"\u04d7\3\2\2\2\u04f6\u04d8\3\2\2\2\u04f6\u04d9\3\2\2\2\u04f6\u04db\3\2"+
		"\2\2\u04f6\u04dc\3\2\2\2\u04f6\u04dd\3\2\2\2\u04f6\u04de\3\2\2\2\u04f6"+
		"\u04df\3\2\2\2\u04f6\u04e0\3\2\2\2\u04f6\u04e1\3\2\2\2\u04f6\u04e2\3\2"+
		"\2\2\u04f6\u04e3\3\2\2\2\u04f6\u04e4\3\2\2\2\u04f6\u04e5\3\2\2\2\u04f6"+
		"\u04e6\3\2\2\2\u04f6\u04e7\3\2\2\2\u04f6\u04e9\3\2\2\2\u04f6\u04ea\3\2"+
		"\2\2\u04f6\u04eb\3\2\2\2\u04f6\u04ec\3\2\2\2\u04f6\u04ed\3\2\2\2\u04f6"+
		"\u04ee\3\2\2\2\u04f6\u04f0\3\2\2\2\u04f6\u04f1\3\2\2\2\u04f6\u04f2\3\2"+
		"\2\2\u04f6\u04f4\3\2\2\2\u04f6\u04f5\3\2\2\2\u04f7\5\3\2\2\2\u04f8\u0513"+
		"\7\r\2\2\u04f9\u0514\5\24\13\2\u04fa\u0514\5\b\5\2\u04fb\u04fc\7\u01a8"+
		"\2\2\u04fc\u04fe\5\u0428\u0215\2\u04fd\u04ff\5h\65\2\u04fe\u04fd\3\2\2"+
		"\2\u04fe\u04ff\3\2\2\2\u04ff\u0514\3\2\2\2\u0500\u0501\7\u00d0\2\2\u0501"+
		"\u0503\5\u042c\u0217\2\u0502\u0504\5h\65\2\u0503\u0502\3\2\2\2\u0503\u0504"+
		"\3\2\2\2\u0504\u0514\3\2\2\2\u0505\u0514\5F$\2\u0506\u0514\5\n\6\2\u0507"+
		"\u0514\58\35\2\u0508\u0509\6\4\6\2\u0509\u0514\5:\36\2\u050a\u0514\5\f"+
		"\7\2\u050b\u0514\5\22\n\2\u050c\u050d\6\4\7\2\u050d\u050e\7\u00f6\2\2"+
		"\u050e\u050f\7\u01e4\2\2\u050f\u0510\5\u049e\u0250\2\u0510\u0511\7\u013e"+
		"\2\2\u0511\u0512\7\u010b\2\2\u0512\u0514\3\2\2\2\u0513\u04f9\3\2\2\2\u0513"+
		"\u04fa\3\2\2\2\u0513\u04fb\3\2\2\2\u0513\u0500\3\2\2\2\u0513\u0505\3\2"+
		"\2\2\u0513\u0506\3\2\2\2\u0513\u0507\3\2\2\2\u0513\u0508\3\2\2\2\u0513"+
		"\u050a\3\2\2\2\u0513\u050b\3\2\2\2\u0513\u050c\3\2\2\2\u0514\7\3\2\2\2"+
		"\u0515\u0516\7o\2\2\u0516\u0521\5\u0424\u0213\2\u0517\u0519\5R*\2\u0518"+
		"\u0517\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u0518\3\2\2\2\u051a\u051b\3\2"+
		"\2\2\u051b\u0522\3\2\2\2\u051c\u051d\6\5\b\2\u051d\u051e\7\u0269\2\2\u051e"+
		"\u051f\7r\2\2\u051f\u0520\7\u008d\2\2\u0520\u0522\7\u0167\2\2\u0521\u0518"+
		"\3\2\2\2\u0521\u051c\3\2\2\2\u0522\t\3\2\2\2\u0523\u0525\5\u03d2\u01ea"+
		"\2\u0524\u0523\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0526\3\2\2\2\u0526\u0527"+
		"\7\u00ac\2\2\u0527\u052b\5\u0440\u0221\2\u0528\u0529\7\u0181\2\2\u0529"+
		"\u052a\7\u01ec\2\2\u052a\u052c\5\u0360\u01b1\2\u052b\u0528\3\2\2\2\u052b"+
		"\u052c\3\2\2\2\u052c\u0533\3\2\2\2\u052d\u052e\7\u0181\2\2\u052e\u0530"+
		"\7Q\2\2\u052f\u0531\7\u0175\2\2\u0530\u052f\3\2\2\2\u0530\u0531\3\2\2"+
		"\2\u0531\u0532\3\2\2\2\u0532\u0534\7\u01a4\2\2\u0533\u052d\3\2\2\2\u0533"+
		"\u0534\3\2\2\2\u0534\u0538\3\2\2\2\u0535\u0536\7\u01c7\2\2\u0536\u0537"+
		"\7\u0250\2\2\u0537\u0539\5\u046a\u0236\2\u0538\u0535\3\2\2\2\u0538\u0539"+
		"\3\2\2\2\u0539\u0540\3\2\2\2\u053a\u0541\7\u009e\2\2\u053b\u053e\7\u008e"+
		"\2\2\u053c\u053d\7\u0181\2\2\u053d\u053f\7\u0204\2\2\u053e\u053c\3\2\2"+
		"\2\u053e\u053f\3\2\2\2\u053f\u0541\3\2\2\2\u0540\u053a\3\2\2\2\u0540\u053b"+
		"\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u0544\3\2\2\2\u0542\u0543\7M\2\2\u0543"+
		"\u0545\5\u048a\u0246\2\u0544\u0542\3\2\2\2\u0544\u0545\3\2\2\2\u0545\u0548"+
		"\3\2\2\2\u0546\u0547\7\u0095\2\2\u0547\u0549\5\u0312\u018a\2\u0548\u0546"+
		"\3\2\2\2\u0548\u0549\3\2\2\2\u0549\13\3\2\2\2\u054a\u054b\7\u0122\2\2"+
		"\u054b\u054c\7\u00db\2\2\u054c\u054d\5\u043c\u021f\2\u054d\u054e\7\6\2"+
		"\2\u054e\u054f\7\u025d\2\2\u054f\u0551\5\u048a\u0246\2\u0550\u0552\5\16"+
		"\b\2\u0551\u0550\3\2\2\2\u0551\u0552\3\2\2\2\u0552\r\3\2\2\2\u0553\u055a"+
		"\5\20\t\2\u0554\u0556\7\u0307\2\2\u0555\u0554\3\2\2\2\u0555\u0556\3\2"+
		"\2\2\u0556\u0557\3\2\2\2\u0557\u0559\5\20\t\2\u0558\u0555\3\2\2\2\u0559"+
		"\u055c\3\2\2\2\u055a\u0558\3\2\2\2\u055a\u055b\3\2\2\2\u055b\17\3\2\2"+
		"\2\u055c\u055a\3\2\2\2\u055d\u0561\5\u008aF\2\u055e\u0561\5\u0096L\2\u055f"+
		"\u0561\5\u0098M\2\u0560\u055d\3\2\2\2\u0560\u055e\3\2\2\2\u0560\u055f"+
		"\3\2\2\2\u0561\21\3\2\2\2\u0562\u0563\7\u01f9\2\2\u0563\u0564\5\u0446"+
		"\u0224\2\u0564\u0565\5z>\2\u0565\23\3\2\2\2\u0566\u0568\5\u040a\u0206"+
		"\2\u0567\u0566\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u056b\3\2\2\2\u0569\u056a"+
		"\6\13\t\2\u056a\u056c\7\u00ea\2\2\u056b\u0569\3\2\2\2\u056b\u056c\3\2"+
		"\2\2\u056c\u056d\3\2\2\2\u056d\u056e\7\u0240\2\2\u056e\u0570\5\u0450\u0229"+
		"\2\u056f\u0571\5\26\f\2\u0570\u056f\3\2\2\2\u0570\u0571\3\2\2\2\u0571"+
		"\25\3\2\2\2\u0572\u0575\5\30\r\2\u0573\u0576\5\u03bc\u01df\2\u0574\u0576"+
		"\5\64\33\2\u0575\u0573\3\2\2\2\u0575\u0574\3\2\2\2\u0575\u0576\3\2\2\2"+
		"\u0576\u0580\3\2\2\2\u0577\u0580\5\u03bc\u01df\2\u0578\u0580\5\64\33\2"+
		"\u0579\u057a\5\32\16\2\u057a\u057b\7\u0307\2\2\u057b\u057d\3\2\2\2\u057c"+
		"\u0579\3\2\2\2\u057c\u057d\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u0580\5\34"+
		"\17\2\u057f\u0572\3\2\2\2\u057f\u0577\3\2\2\2\u057f\u0578\3\2\2\2\u057f"+
		"\u057c\3\2\2\2\u0580\27\3\2\2\2\u0581\u0589\5\32\16\2\u0582\u0583\5\32"+
		"\16\2\u0583\u0584\7\u0307\2\2\u0584\u0586\3\2\2\2\u0585\u0582\3\2\2\2"+
		"\u0585\u0586\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u0589\5 \21\2\u0588\u0581"+
		"\3\2\2\2\u0588\u0585\3\2\2\2\u0589\31\3\2\2\2\u058a\u058f\5\"\22\2\u058b"+
		"\u058c\7\u0307\2\2\u058c\u058e\5\"\22\2\u058d\u058b\3\2\2\2\u058e\u0591"+
		"\3\2\2\2\u058f\u058d\3\2\2\2\u058f\u0590\3\2\2\2\u0590\33\3\2\2\2\u0591"+
		"\u058f\3\2\2\2\u0592\u0593\7\u008f\2\2\u0593\u059a\7\u023e\2\2\u0594\u0595"+
		"\7\u00ec\2\2\u0595\u059a\7\u023e\2\2\u0596\u059a\5\36\20\2\u0597\u0598"+
		"\6\17\n\2\u0598\u059a\t\2\2\2\u0599\u0592\3\2\2\2\u0599\u0594\3\2\2\2"+
		"\u0599\u0596\3\2\2\2\u0599\u0597\3\2\2\2\u059a\35\3\2\2\2\u059b\u059c"+
		"\7\6\2\2\u059c\u059e\7\u0197\2\2\u059d\u059f\5\u040c\u0207\2\u059e\u059d"+
		"\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a3\3\2\2\2\u05a0\u05a4\5\u03c4\u01e3"+
		"\2\u05a1\u05a2\7\u0196\2\2\u05a2\u05a4\5\u0478\u023d\2\u05a3\u05a0\3\2"+
		"\2\2\u05a3\u05a1\3\2\2\2\u05a4\u05fc\3\2\2\2\u05a5\u05a6\7\u0096\2\2\u05a6"+
		"\u05a7\7\u0197\2\2\u05a7\u05fc\5\u046c\u0237\2\u05a8\u05a9\7\u01b8\2\2"+
		"\u05a9\u05ab\7\u0197\2\2\u05aa\u05ac\5\u040c\u0207\2\u05ab\u05aa\3\2\2"+
		"\2\u05ab\u05ac\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05fc\5\66\34\2\u05ae"+
		"\u05af\7\u0186\2\2\u05af\u05b1\7\u0197\2\2\u05b0\u05b2\5\u040c\u0207\2"+
		"\u05b1\u05b0\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05b5"+
		"\5\66\34\2\u05b4\u05b6\5\u040c\u0207\2\u05b5\u05b4\3\2\2\2\u05b5\u05b6"+
		"\3\2\2\2\u05b6\u05fc\3\2\2\2\u05b7\u05b8\7\20\2\2\u05b8\u05ba\7\u0197"+
		"\2\2\u05b9\u05bb\5\u040c\u0207\2\u05ba\u05b9\3\2\2\2\u05ba\u05bb\3\2\2"+
		"\2\u05bb\u05bc\3\2\2\2\u05bc\u05fc\5\66\34\2\u05bd\u05be\7@\2\2\u05be"+
		"\u05bf\7\u0197\2\2\u05bf\u05c3\5\66\34\2\u05c0\u05c2\5\u023a\u011e\2\u05c1"+
		"\u05c0\3\2\2\2\u05c2\u05c5\3\2\2\2\u05c3\u05c1\3\2\2\2\u05c3\u05c4\3\2"+
		"\2\2\u05c4\u05fc\3\2\2\2\u05c5\u05c3\3\2\2\2\u05c6\u05c7\7\u01c9\2\2\u05c7"+
		"\u05c9\7\u0197\2\2\u05c8\u05ca\5\u040c\u0207\2\u05c9\u05c8\3\2\2\2\u05c9"+
		"\u05ca\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cf\5\66\34\2\u05cc\u05ce\5"+
		"\u023c\u011f\2\u05cd\u05cc\3\2\2\2\u05ce\u05d1\3\2\2\2\u05cf\u05cd\3\2"+
		"\2\2\u05cf\u05d0\3\2\2\2\u05d0\u05fc\3\2\2\2\u05d1\u05cf\3\2\2\2\u05d2"+
		"\u05d3\7E\2\2\u05d3\u05d5\7\u0197\2\2\u05d4\u05d6\5\u040c\u0207\2\u05d5"+
		"\u05d4\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d7\3\2\2\2\u05d7\u05fc\5\u0478"+
		"\u023d\2\u05d8\u05d9\7\u0257\2\2\u05d9\u05da\7\u0197\2\2\u05da\u05fc\5"+
		"\66\34\2\u05db\u05dc\7\u01c8\2\2\u05dc\u05de\7\u0197\2\2\u05dd\u05df\5"+
		"\u040c\u0207\2\u05de\u05dd\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e4\3\2"+
		"\2\2\u05e0\u05e1\5\u046c\u0237\2\u05e1\u05e2\7\u00fa\2\2\u05e2\u05e3\5"+
		"\u03c4\u01e3\2\u05e3\u05e5\3\2\2\2\u05e4\u05e0\3\2\2\2\u05e4\u05e5\3\2"+
		"\2\2\u05e5\u05fc\3\2\2\2\u05e6\u05e7\7\u00ae\2\2\u05e7\u05e8\7\u0197\2"+
		"\2\u05e8\u05e9\5\u046a\u0236\2\u05e9\u05ea\7\u0287\2\2\u05ea\u05eb\7\u0240"+
		"\2\2\u05eb\u05ed\5\u0450\u0229\2\u05ec\u05ee\5\62\32\2\u05ed\u05ec\3\2"+
		"\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05fc\3\2\2\2\u05ef\u05f0\6\20\13\2\u05f0"+
		"\u05f1\7\u008f\2\2\u05f1\u05f2\7\u0197\2\2\u05f2\u05f3\5\66\34\2\u05f3"+
		"\u05f4\7\u023e\2\2\u05f4\u05fc\3\2\2\2\u05f5\u05f6\6\20\f\2\u05f6\u05f7"+
		"\7\u00ec\2\2\u05f7\u05f8\7\u0197\2\2\u05f8\u05f9\5\66\34\2\u05f9\u05fa"+
		"\7\u023e\2\2\u05fa\u05fc\3\2\2\2\u05fb\u059b\3\2\2\2\u05fb\u05a5\3\2\2"+
		"\2\u05fb\u05a8\3\2\2\2\u05fb\u05ae\3\2\2\2\u05fb\u05b7\3\2\2\2\u05fb\u05bd"+
		"\3\2\2\2\u05fb\u05c6\3\2\2\2\u05fb\u05d2\3\2\2\2\u05fb\u05d8\3\2\2\2\u05fb"+
		"\u05db\3\2\2\2\u05fb\u05e6\3\2\2\2\u05fb\u05ef\3\2\2\2\u05fb\u05f5\3\2"+
		"\2\2\u05fc\37\3\2\2\2\u05fd\u0600\5$\23\2\u05fe\u0600\5\u03b0\u01d9\2"+
		"\u05ff\u05fd\3\2\2\2\u05ff\u05fe\3\2\2\2\u0600\u0609\3\2\2\2\u0601\u0605"+
		"\7\u0307\2\2\u0602\u0606\5$\23\2\u0603\u0606\5\"\22\2\u0604\u0606\5\u03b0"+
		"\u01d9\2\u0605\u0602\3\2\2\2\u0605\u0603\3\2\2\2\u0605\u0604\3\2\2\2\u0606"+
		"\u0608\3\2\2\2\u0607\u0601\3\2\2\2\u0608\u060b\3\2\2\2\u0609\u0607\3\2"+
		"\2\2\u0609\u060a\3\2\2\2\u060a!\3\2\2\2\u060b\u0609\3\2\2\2\u060c\u0610"+
		"\5,\27\2\u060d\u0610\5.\30\2\u060e\u0610\5\62\32\2\u060f\u060c\3\2\2\2"+
		"\u060f\u060d\3\2\2\2\u060f\u060e\3\2\2\2\u0610#\3\2\2\2\u0611\u0613\7"+
		"\6\2\2\u0612\u0614\7J\2\2\u0613\u0612\3\2\2\2\u0613\u0614\3\2\2\2\u0614"+
		"\u0621\3\2\2\2\u0615\u0616\5\u046a\u0236\2\u0616\u0618\5\u036e\u01b8\2"+
		"\u0617\u0619\5\u0364\u01b3\2\u0618\u0617\3\2\2\2\u0618\u0619\3\2\2\2\u0619"+
		"\u061b\3\2\2\2\u061a\u061c\5&\24\2\u061b\u061a\3\2\2\2\u061b\u061c\3\2"+
		"\2\2\u061c\u0622\3\2\2\2\u061d\u061e\7\u030a\2\2\u061e\u061f\5V,\2\u061f"+
		"\u0620\7\u030b\2\2\u0620\u0622\3\2\2\2\u0621\u0615\3\2\2\2\u0621\u061d"+
		"\3\2\2\2\u0622\u06a3\3\2\2\2\u0623\u0624\7\6\2\2\u0624\u06a3\5\u036a\u01b6"+
		"\2\u0625\u0627\79\2\2\u0626\u0628\7J\2\2\u0627\u0626\3\2\2\2\u0627\u0628"+
		"\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u062a\5\u0414\u020b\2\u062a\u062b\5"+
		"\u046a\u0236\2\u062b\u062d\5\u036e\u01b8\2\u062c\u062e\5&\24\2\u062d\u062c"+
		"\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u06a3\3\2\2\2\u062f\u0631\7\u015e\2"+
		"\2\u0630\u0632\7J\2\2\u0631\u0630\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u0633"+
		"\3\2\2\2\u0633\u0634\5\u0414\u020b\2\u0634\u0636\5\u036e\u01b8\2\u0635"+
		"\u0637\5&\24\2\u0636\u0635\3\2\2\2\u0636\u0637\3\2\2\2\u0637\u06a3\3\2"+
		"\2\2\u0638\u0655\7\u0096\2\2\u0639\u063b\7J\2\2\u063a\u0639\3\2\2\2\u063a"+
		"\u063b\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u063e\5\u0414\u020b\2\u063d\u063f"+
		"\5(\25\2\u063e\u063d\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u0656\3\2\2\2\u0640"+
		"\u0641\7\u00c9\2\2\u0641\u0648\7\u010b\2\2\u0642\u0643\6\23\r\2\u0643"+
		"\u0649\5\u0414\u020b\2\u0644\u0646\6\23\16\2\u0645\u0647\5\u0414\u020b"+
		"\2\u0646\u0645\3\2\2\2\u0646\u0647\3\2\2\2\u0647\u0649\3\2\2\2\u0648\u0642"+
		"\3\2\2\2\u0648\u0644\3\2\2\2\u0649\u0656\3\2\2\2\u064a\u064b\7\u01a6\2"+
		"\2\u064b\u0656\7\u010b\2\2\u064c\u064d\5\u0198\u00cd\2\u064d\u064e\5\u041e"+
		"\u0210\2\u064e\u0656\3\2\2\2\u064f\u0650\6\23\17\2\u0650\u0651\7@\2\2"+
		"\u0651\u0656\5\u046a\u0236\2\u0652\u0653\6\23\20\2\u0653\u0654\7X\2\2"+
		"\u0654\u0656\5\u046a\u0236\2\u0655\u063a\3\2\2\2\u0655\u0640\3\2\2\2\u0655"+
		"\u064a\3\2\2\2\u0655\u064c\3\2\2\2\u0655\u064f\3\2\2\2\u0655\u0652\3\2"+
		"\2\2\u0656\u06a3\3\2\2\2\u0657\u0658\7\u008e\2\2\u0658\u06a3\7\u0109\2"+
		"\2\u0659\u065a\7\u009e\2\2\u065a\u06a3\7\u0109\2\2\u065b\u065d\7\r\2\2"+
		"\u065c\u065e\7J\2\2\u065d\u065c\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u065f"+
		"\3\2\2\2\u065f\u0669\5\u0414\u020b\2\u0660\u0661\7\u01fc\2\2\u0661\u0665"+
		"\7\u0082\2\2\u0662\u0663\6\23\21\2\u0663\u0666\5\u0304\u0183\2\u0664\u0666"+
		"\5\u0480\u0241\2\u0665\u0662\3\2\2\2\u0665\u0664\3\2\2\2\u0666\u066a\3"+
		"\2\2\2\u0667\u0668\7\u0096\2\2\u0668\u066a\7\u0082\2\2\u0669\u0660\3\2"+
		"\2\2\u0669\u0667\3\2\2\2\u066a\u06a3\3\2\2\2\u066b\u066c\6\23\22\2\u066c"+
		"\u066d\7\r\2\2\u066d\u066e\7\u00ee\2\2\u066e\u066f\5\u041e\u0210\2\u066f"+
		"\u0670\5\u038c\u01c7\2\u0670\u06a3\3\2\2\2\u0671\u0672\6\23\23\2\u0672"+
		"\u0673\7\r\2\2\u0673\u0674\7@\2\2\u0674\u0675\5\u046a\u0236\2\u0675\u0676"+
		"\5\u0368\u01b5\2\u0676\u06a3\3\2\2\2\u0677\u0678\6\23\24\2\u0678\u0679"+
		"\7\r\2\2\u0679\u067a\7X\2\2\u067a\u067b\5\u046a\u0236\2\u067b\u067c\5"+
		"\u0368\u01b5\2\u067c\u06a3\3\2\2\2\u067d\u067e\6\23\25\2\u067e\u067f\7"+
		"\u01c7\2\2\u067f\u0680\7J\2\2\u0680\u0681\5\u0414\u020b\2\u0681\u0682"+
		"\7\u0250\2\2\u0682\u0683\5\u046a\u0236\2\u0683\u06a3\3\2\2\2\u0684\u0686"+
		"\7\u01c7\2\2\u0685\u0687\t\3\2\2\u0686\u0685\3\2\2\2\u0686\u0687\3\2\2"+
		"\2\u0687\u0688\3\2\2\2\u0688\u06a3\5\u044a\u0226\2\u0689\u068a\6\23\26"+
		"\2\u068a\u068b\7\u01c7\2\2\u068b\u068c\5\u0198\u00cd\2\u068c\u068d\5\u041e"+
		"\u0210\2\u068d\u068e\7\u0250\2\2\u068e\u068f\5\u041c\u020f\2\u068f\u06a3"+
		"\3\2\2\2\u0690\u0691\7`\2\2\u0691\u0692\7\u0250\2\2\u0692\u0696\5\u02f8"+
		"\u017d\2\u0693\u0694\6\23\27\2\u0694\u0697\7\u0082\2\2\u0695\u0697\5\u03aa"+
		"\u01d6\2\u0696\u0693\3\2\2\2\u0696\u0695\3\2\2\2\u0697\u0699\3\2\2\2\u0698"+
		"\u069a\5\u03dc\u01ef\2\u0699\u0698\3\2\2\2\u0699\u069a\3\2\2\2\u069a\u06a3"+
		"\3\2\2\2\u069b\u06a3\7\u00c8\2\2\u069c\u069d\7\u018b\2\2\u069d\u069e\7"+
		"/\2\2\u069e\u06a3\5*\26\2\u069f\u06a0\6\23\30\2\u06a0\u06a1\7\u0269\2"+
		"\2\u06a1\u06a3\7\u0195\2\2\u06a2\u0611\3\2\2\2\u06a2\u0623\3\2\2\2\u06a2"+
		"\u0625\3\2\2\2\u06a2\u062f\3\2\2\2\u06a2\u0638\3\2\2\2\u06a2\u0657\3\2"+
		"\2\2\u06a2\u0659\3\2\2\2\u06a2\u065b\3\2\2\2\u06a2\u066b\3\2\2\2\u06a2"+
		"\u0671\3\2\2\2\u06a2\u0677\3\2\2\2\u06a2\u067d\3\2\2\2\u06a2\u0684\3\2"+
		"\2\2\u06a2\u0689\3\2\2\2\u06a2\u0690\3\2\2\2\u06a2\u069b\3\2\2\2\u06a2"+
		"\u069c\3\2\2\2\u06a2\u069f\3\2\2\2\u06a3%\3\2\2\2\u06a4\u06a5\7\b\2\2"+
		"\u06a5\u06a8\5\u046a\u0236\2\u06a6\u06a8\7\u00c1\2\2\u06a7\u06a4\3\2\2"+
		"\2\u06a7\u06a6\3\2\2\2\u06a8\'\3\2\2\2\u06a9\u06aa\t\4\2\2\u06aa)\3\2"+
		"\2\2\u06ab\u06ad\5\u046a\u0236\2\u06ac\u06ae\5\u014c\u00a7\2\u06ad\u06ac"+
		"\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06b6\3\2\2\2\u06af\u06b0\7\u0307\2"+
		"\2\u06b0\u06b2\5\u046a\u0236\2\u06b1\u06b3\5\u014c\u00a7\2\u06b2\u06b1"+
		"\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u06b5\3\2\2\2\u06b4\u06af\3\2\2\2\u06b5"+
		"\u06b8\3\2\2\2\u06b6\u06b4\3\2\2\2\u06b6\u06b7\3\2\2\2\u06b7+\3\2\2\2"+
		"\u06b8\u06b6\3\2\2\2\u06b9\u06bb\7\13\2\2\u06ba\u06bc\7\u02f0\2\2\u06bb"+
		"\u06ba\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06bf\3\2\2\2\u06bd\u06c0\7\u0082"+
		"\2\2\u06be\u06c0\5\u046a\u0236\2\u06bf\u06bd\3\2\2\2\u06bf\u06be\3\2\2"+
		"\2\u06c0-\3\2\2\2\u06c1\u06c3\7\u0121\2\2\u06c2\u06c4\7\u02f0\2\2\u06c3"+
		"\u06c2\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4\u06c7\3\2\2\2\u06c5\u06c8\7\u0082"+
		"\2\2\u06c6\u06c8\5\u046a\u0236\2\u06c7\u06c5\3\2\2\2\u06c7\u06c6\3\2\2"+
		"\2\u06c8/\3\2\2\2\u06c9\u06cb\5,\27\2\u06ca\u06cc\5.\30\2\u06cb\u06ca"+
		"\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06d2\3\2\2\2\u06cd\u06cf\5.\30\2\u06ce"+
		"\u06d0\5,\27\2\u06cf\u06ce\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06d2\3\2"+
		"\2\2\u06d1\u06c9\3\2\2\2\u06d1\u06cd\3\2\2\2\u06d2\61\3\2\2\2\u06d3\u06d4"+
		"\6\32\31\2\u06d4\u06d5\t\5\2\2\u06d5\u06d6\7\u0273\2\2\u06d6\63\3\2\2"+
		"\2\u06d7\u06d8\7\u01c6\2\2\u06d8\u06d9\7\u0195\2\2\u06d9\65\3\2\2\2\u06da"+
		"\u06dd\7\f\2\2\u06db\u06dd\5\u046c\u0237\2\u06dc\u06da\3\2\2\2\u06dc\u06db"+
		"\3\2\2\2\u06dd\67\3\2\2\2\u06de\u06df\7\u023e\2\2\u06df\u0701\5\u0438"+
		"\u021d\2\u06e0\u06e1\t\6\2\2\u06e1\u06e2\7q\2\2\u06e2\u06e4\5\u048a\u0246"+
		"\2\u06e3\u06e5\5@!\2\u06e4\u06e3\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u0702"+
		"\3\2\2\2\u06e6\u06fa\6\35\32\2\u06e7\u06fb\3\2\2\2\u06e8\u06e9\79\2\2"+
		"\u06e9\u06ea\7q\2\2\u06ea\u06f5\5\u048a\u0246\2\u06eb\u06f2\5D#\2\u06ec"+
		"\u06ee\7\u0307\2\2\u06ed\u06ec\3\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06ef"+
		"\3\2\2\2\u06ef\u06f1\5D#\2\u06f0\u06ed\3\2\2\2\u06f1\u06f4\3\2\2\2\u06f2"+
		"\u06f0\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3\u06f6\3\2\2\2\u06f4\u06f2\3\2"+
		"\2\2\u06f5\u06eb\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u06fb\3\2\2\2\u06f7"+
		"\u06fb\t\7\2\2\u06f8\u06f9\7\u0175\2\2\u06f9\u06fb\7\3\2\2\u06fa\u06e7"+
		"\3\2\2\2\u06fa\u06e8\3\2\2\2\u06fa\u06f7\3\2\2\2\u06fa\u06f8\3\2\2\2\u06fb"+
		"\u0702\3\2\2\2\u06fc\u06fd\7\u01c7\2\2\u06fd\u06fe\7\u0250\2\2\u06fe\u0702"+
		"\5\u046a\u0236\2\u06ff\u0700\6\35\33\2\u0700\u0702\5@!\2\u0701\u06e0\3"+
		"\2\2\2\u0701\u06e6\3\2\2\2\u0701\u06fc\3\2\2\2\u0701\u06ff\3\2\2\2\u0702"+
		"9\3\2\2\2\u0703\u0704\7\u025f\2\2\u0704\u0705\7\u023e\2\2\u0705\u0706"+
		"\5\u0438\u021d\2\u0706\u0707\7\u01fc\2\2\u0707\u0709\t\b\2\2\u0708\u070a"+
		"\5<\37\2\u0709\u0708\3\2\2\2\u0709\u070a\3\2\2\2\u070a;\3\2\2\2\u070b"+
		"\u0712\5> \2\u070c\u070e\7\u0307\2\2\u070d\u070c\3\2\2\2\u070d\u070e\3"+
		"\2\2\2\u070e\u070f\3\2\2\2\u070f\u0711\5> \2\u0710\u070d\3\2\2\2\u0711"+
		"\u0714\3\2\2\2\u0712\u0710\3\2\2\2\u0712\u0713\3\2\2\2\u0713=\3\2\2\2"+
		"\u0714\u0712\3\2\2\2\u0715\u0716\5\u0096L\2\u0716?\3\2\2\2\u0717\u071e"+
		"\5B\"\2\u0718\u071a\7\u0307\2\2\u0719\u0718\3\2\2\2\u0719\u071a\3\2\2"+
		"\2\u071a\u071b\3\2\2\2\u071b\u071d\5B\"\2\u071c\u0719\3\2\2\2\u071d\u0720"+
		"\3\2\2\2\u071e\u071c\3\2\2\2\u071e\u071f\3\2\2\2\u071fA\3\2\2\2\u0720"+
		"\u071e\3\2\2\2\u0721\u0723\7\u00f0\2\2\u0722\u0724\7\u02f0\2\2\u0723\u0722"+
		"\3\2\2\2\u0723\u0724\3\2\2\2\u0724\u0725\3\2\2\2\u0725\u072c\5\u04a4\u0253"+
		"\2\u0726\u072c\5\u008eH\2\u0727\u072c\5\u0090I\2\u0728\u072c\5\u0096L"+
		"\2\u0729\u072c\5\u0098M\2\u072a\u072c\5\u009eP\2\u072b\u0721\3\2\2\2\u072b"+
		"\u0726\3\2\2\2\u072b\u0727\3\2\2\2\u072b\u0728\3\2\2\2\u072b\u0729\3\2"+
		"\2\2\u072b\u072a\3\2\2\2\u072cC\3\2\2\2\u072d\u072f\7\u00f0\2\2\u072e"+
		"\u0730\7\u02f0\2\2\u072f\u072e\3\2\2\2\u072f\u0730\3\2\2\2\u0730\u0731"+
		"\3\2\2\2\u0731\u0735\5\u04a4\u0253\2\u0732\u0735\5\u008eH\2\u0733\u0735"+
		"\5\u0090I\2\u0734\u072d\3\2\2\2\u0734\u0732\3\2\2\2\u0734\u0733\3\2\2"+
		"\2\u0735E\3\2\2\2\u0736\u0738\5\u00a4S\2\u0737\u0736\3\2\2\2\u0737\u0738"+
		"\3\2\2\2\u0738\u073a\3\2\2\2\u0739\u073b\5\u03d2\u01ea\2\u073a\u0739\3"+
		"\2\2\2\u073a\u073b\3\2\2\2\u073b\u073d\3\2\2\2\u073c\u073e\5\u00a6T\2"+
		"\u073d\u073c\3\2\2\2\u073d\u073e\3\2\2\2\u073e\u073f\3\2\2\2\u073f\u0740"+
		"\7\u027e\2\2\u0740\u0741\5\u0434\u021b\2\u0741\u0742\5H%\2\u0742G\3\2"+
		"\2\2\u0743\u0745\5\u0416\u020c\2\u0744\u0743\3\2\2\2\u0744\u0745\3\2\2"+
		"\2\u0745\u0746\3\2\2\2\u0746\u0747\7\23\2\2\u0747\u0748\5J&\2\u0748I\3"+
		"\2\2\2\u0749\u074b\5\\/\2\u074a\u074c\5L\'\2\u074b\u074a\3\2\2\2\u074b"+
		"\u074c\3\2\2\2\u074cK\3\2\2\2\u074d\u074f\7\u0287\2\2\u074e\u0750\t\t"+
		"\2\2\u074f\u074e\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0751\3\2\2\2\u0751"+
		"\u0752\7@\2\2\u0752\u0753\7\u0189\2\2\u0753M\3\2\2\2\u0754\u0767\7c\2"+
		"\2\u0755\u0768\5P)\2\u0756\u0768\5T+\2\u0757\u0768\5b\62\2\u0758\u0768"+
		"\5`\61\2\u0759\u0768\5d\63\2\u075a\u0768\5r:\2\u075b\u0768\5\u00a0Q\2"+
		"\u075c\u0768\5\u00a8U\2\u075d\u0768\5l\67\2\u075e\u0768\5x=\2\u075f\u0768"+
		"\5~@\2\u0760\u0768\5\u00acW\2\u0761\u0762\6(\34\2\u0762\u0768\5\u00ae"+
		"X\2\u0763\u0764\6(\35\2\u0764\u0768\5\u00b0Y\2\u0765\u0766\6(\36\2\u0766"+
		"\u0768\5\u0080A\2\u0767\u0755\3\2\2\2\u0767\u0756\3\2\2\2\u0767\u0757"+
		"\3\2\2\2\u0767\u0758\3\2\2\2\u0767\u0759\3\2\2\2\u0767\u075a\3\2\2\2\u0767"+
		"\u075b\3\2\2\2\u0767\u075c\3\2\2\2\u0767\u075d\3\2\2\2\u0767\u075e\3\2"+
		"\2\2\u0767\u075f\3\2\2\2\u0767\u0760\3\2\2\2\u0767\u0761\3\2\2\2\u0767"+
		"\u0763\3\2\2\2\u0767\u0765\3\2\2\2\u0768O\3\2\2\2\u0769\u076b\7o\2\2\u076a"+
		"\u076c\5\u03d6\u01ec\2\u076b\u076a\3\2\2\2\u076b\u076c\3\2\2\2\u076c\u076d"+
		"\3\2\2\2\u076d\u0771\5\u0422\u0212\2\u076e\u0770\5R*\2\u076f\u076e\3\2"+
		"\2\2\u0770\u0773\3\2\2\2\u0771\u076f\3\2\2\2\u0771\u0772\3\2\2\2\u0772"+
		"Q\3\2\2\2\u0773\u0771\3\2\2\2\u0774\u0779\5\u03ba\u01de\2\u0775\u0779"+
		"\5\u03b6\u01dc\2\u0776\u0777\6*\37\2\u0777\u0779\5\u03b8\u01dd\2\u0778"+
		"\u0774\3\2\2\2\u0778\u0775\3\2\2\2\u0778\u0776\3\2\2\2\u0779S\3\2\2\2"+
		"\u077a\u077c\7\u0243\2\2\u077b\u077a\3\2\2\2\u077b\u077c\3\2\2\2\u077c"+
		"\u077d\3\2\2\2\u077d\u077f\7\u0240\2\2\u077e\u0780\5\u03d6\u01ec\2\u077f"+
		"\u077e\3\2\2\2\u077f\u0780\3\2\2\2\u0780\u0781\3\2\2\2\u0781\u0798\5\u044a"+
		"\u0226\2\u0782\u0783\7\u030a\2\2\u0783\u0784\5V,\2\u0784\u0785\7\u030b"+
		"\2\2\u0785\u0787\3\2\2\2\u0786\u0782\3\2\2\2\u0786\u0787\3\2\2\2\u0787"+
		"\u0789\3\2\2\2\u0788\u078a\5\u03ae\u01d8\2\u0789\u0788\3\2\2\2\u0789\u078a"+
		"\3\2\2\2\u078a\u078c\3\2\2\2\u078b\u078d\5\u03bc\u01df\2\u078c\u078b\3"+
		"\2\2\2\u078c\u078d\3\2\2\2\u078d\u078f\3\2\2\2\u078e\u0790\5Z.\2\u078f"+
		"\u078e\3\2\2\2\u078f\u0790\3\2\2\2\u0790\u0799\3\2\2\2\u0791\u0792\7\u0115"+
		"\2\2\u0792\u0799\5\u0450\u0229\2\u0793\u0794\7\u030a\2\2\u0794\u0795\7"+
		"\u0115\2\2\u0795\u0796\5\u0450\u0229\2\u0796\u0797\7\u030b\2\2\u0797\u0799"+
		"\3\2\2\2\u0798\u0786\3\2\2\2\u0798\u0791\3\2\2\2\u0798\u0793\3\2\2\2\u0799"+
		"U\3\2\2\2\u079a\u079f\5X-\2\u079b\u079c\7\u0307\2\2\u079c\u079e\5X-\2"+
		"\u079d\u079b\3\2\2\2\u079e\u07a1\3\2\2\2\u079f\u079d\3\2\2\2\u079f\u07a0"+
		"\3\2\2\2\u07a0W\3\2\2\2\u07a1\u079f\3\2\2\2\u07a2\u07a5\5\u0362\u01b2"+
		"\2\u07a3\u07a5\5\u036a\u01b6\2\u07a4\u07a2\3\2\2\2\u07a4\u07a3\3\2\2\2"+
		"\u07a5Y\3\2\2\2\u07a6\u07a8\t\n\2\2\u07a7\u07a6\3\2\2\2\u07a7\u07a8\3"+
		"\2\2\2\u07a8\u07aa\3\2\2\2\u07a9\u07ab\7\23\2\2\u07aa\u07a9\3\2\2\2\u07aa"+
		"\u07ab\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac\u07ad\5\\/\2\u07ad[\3\2\2\2\u07ae"+
		"\u07b1\5\u0110\u0089\2\u07af\u07b1\5\u0114\u008b\2\u07b0\u07ae\3\2\2\2"+
		"\u07b0\u07af\3\2\2\2\u07b1]\3\2\2\2\u07b2\u07b6\7c\2\2\u07b3\u07b7\5`"+
		"\61\2\u07b4\u07b7\5b\62\2\u07b5\u07b7\5d\63\2\u07b6\u07b3\3\2\2\2\u07b6"+
		"\u07b4\3\2\2\2\u07b6\u07b5\3\2\2\2\u07b7\u07b9\3\2\2\2\u07b8\u07ba\7\u0308"+
		"\2\2\u07b9\u07b8\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba\u07bb\3\2\2\2\u07bb"+
		"\u07bc\7\2\2\3\u07bc_\3\2\2\2\u07bd\u07bf\5\u03d2\u01ea\2\u07be\u07bd"+
		"\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0\u07c1\7\u01a8\2"+
		"\2\u07c1\u07c2\5\u0426\u0214\2\u07c2\u07cb\7\u030a\2\2\u07c3\u07c8\5\u03d8"+
		"\u01ed\2\u07c4\u07c5\7\u0307\2\2\u07c5\u07c7\5\u03d8\u01ed\2\u07c6\u07c4"+
		"\3\2\2\2\u07c7\u07ca\3\2\2\2\u07c8\u07c6\3\2\2\2\u07c8\u07c9\3\2\2\2\u07c9"+
		"\u07cc\3\2\2\2\u07ca\u07c8\3\2\2\2\u07cb\u07c3\3\2\2\2\u07cb\u07cc\3\2"+
		"\2\2\u07cc\u07cd\3\2\2\2\u07cd\u07d1\7\u030b\2\2\u07ce\u07d0\5f\64\2\u07cf"+
		"\u07ce\3\2\2\2\u07d0\u07d3\3\2\2\2\u07d1\u07cf\3\2\2\2\u07d1\u07d2\3\2"+
		"\2\2\u07d2\u07d4\3\2\2\2\u07d3\u07d1\3\2\2\2\u07d4\u07d5\5\u0312\u018a"+
		"\2\u07d5a\3\2\2\2\u07d6\u07d8\5\u03d2\u01ea\2\u07d7\u07d6\3\2\2\2\u07d7"+
		"\u07d8\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07da\7\u00d0\2\2\u07da\u07db"+
		"\5\u042a\u0216\2\u07db\u07e4\7\u030a\2\2\u07dc\u07e1\5\u03da\u01ee\2\u07dd"+
		"\u07de\7\u0307\2\2\u07de\u07e0\5\u03da\u01ee\2\u07df\u07dd\3\2\2\2\u07e0"+
		"\u07e3\3\2\2\2\u07e1\u07df\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e5\3\2"+
		"\2\2\u07e3\u07e1\3\2\2\2\u07e4\u07dc\3\2\2\2\u07e4\u07e5\3\2\2\2\u07e5"+
		"\u07e6\3\2\2\2\u07e6\u07e7\7\u030b\2\2\u07e7\u07e8\7\u01dc\2\2\u07e8\u07ec"+
		"\5\u03de\u01f0\2\u07e9\u07eb\5f\64\2\u07ea\u07e9\3\2\2\2\u07eb\u07ee\3"+
		"\2\2\2\u07ec\u07ea\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u07ef\3\2\2\2\u07ee"+
		"\u07ec\3\2\2\2\u07ef\u07f0\5\u0312\u018a\2\u07f0c\3\2\2\2\u07f1\u07f3"+
		"\7\n\2\2\u07f2\u07f1\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f4\3\2\2\2\u07f4"+
		"\u07f5\7\u00d0\2\2\u07f5\u07f6\5\u0442\u0222\2\u07f6\u07f7\7\u01dc\2\2"+
		"\u07f7\u07f8\t\13\2\2\u07f8\u07f9\7\u020a\2\2\u07f9\u07fa\5\u048a\u0246"+
		"\2\u07fae\3\2\2\2\u07fb\u0801\5j\66\2\u07fc\u07fe\7\u0175\2\2\u07fd\u07fc"+
		"\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0801\7\u008b\2"+
		"\2\u0800\u07fb\3\2\2\2\u0800\u07fd\3\2\2\2\u0801g\3\2\2\2\u0802\u0804"+
		"\5f\64\2\u0803\u0802\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u0803\3\2\2\2\u0805"+
		"\u0806\3\2\2\2\u0806i\3\2\2\2\u0807\u0808\7M\2\2\u0808\u0819\5\u048a\u0246"+
		"\2\u0809\u080a\7\u010d\2\2\u080a\u0819\7\u021b\2\2\u080b\u080c\7\u0177"+
		"\2\2\u080c\u0819\7\u021b\2\2\u080d\u080e\7\\\2\2\u080e\u0819\7\u021b\2"+
		"\2\u080f\u0810\7\u01b3\2\2\u0810\u0811\7\u021b\2\2\u0811\u0819\7r\2\2"+
		"\u0812\u0813\7\u015d\2\2\u0813\u0814\7\u021b\2\2\u0814\u0819\7r\2\2\u0815"+
		"\u0816\7\u021b\2\2\u0816\u0817\7\u01f2\2\2\u0817\u0819\t\f\2\2\u0818\u0807"+
		"\3\2\2\2\u0818\u0809\3\2\2\2\u0818\u080b\3\2\2\2\u0818\u080d\3\2\2\2\u0818"+
		"\u080f\3\2\2\2\u0818\u0812\3\2\2\2\u0818\u0815\3\2\2\2\u0819k\3\2\2\2"+
		"\u081a\u081c\5\u040a\u0206\2\u081b\u081a\3\2\2\2\u081b\u081c\3\2\2\2\u081c"+
		"\u0846\3\2\2\2\u081d\u081f\7\u0263\2\2\u081e\u081d\3\2\2\2\u081e\u081f"+
		"\3\2\2\2\u081f\u0820\3\2\2\2\u0820\u0829\7\u00ee\2\2\u0821\u0822\6\67"+
		" \2\u0822\u0824\5\u041c\u020f\2\u0823\u0825\5\u038e\u01c8\2\u0824\u0823"+
		"\3\2\2\2\u0824\u0825\3\2\2\2\u0825\u082a\3\2\2\2\u0826\u0828\5n8\2\u0827"+
		"\u0826\3\2\2\2\u0827\u0828\3\2\2\2\u0828\u082a\3\2\2\2\u0829\u0821\3\2"+
		"\2\2\u0829\u0827\3\2\2\2\u082a\u082b\3\2\2\2\u082b\u082f\5p9\2\u082c\u082e"+
		"\5\u0388\u01c5\2\u082d\u082c\3\2\2\2\u082e\u0831\3\2\2\2\u082f\u082d\3"+
		"\2\2\2\u082f\u0830\3\2\2\2\u0830\u0847\3\2\2\2\u0831\u082f\3\2\2\2\u0832"+
		"\u0833\7\u00cf\2\2\u0833\u0834\7\u00ee\2\2\u0834\u0835\5\u041c\u020f\2"+
		"\u0835\u0839\5p9\2\u0836\u0838\5\u0390\u01c9\2\u0837\u0836\3\2\2\2\u0838"+
		"\u083b\3\2\2\2\u0839\u0837\3\2\2\2\u0839\u083a\3\2\2\2\u083a\u0847\3\2"+
		"\2\2\u083b\u0839\3\2\2\2\u083c\u083d\7\u020d\2\2\u083d\u083e\7\u00ee\2"+
		"\2\u083e\u083f\5\u041c\u020f\2\u083f\u0843\5p9\2\u0840\u0842\5\u0392\u01ca"+
		"\2\u0841\u0840\3\2\2\2\u0842\u0845\3\2\2\2\u0843\u0841\3\2\2\2\u0843\u0844"+
		"\3\2\2\2\u0844\u0847\3\2\2\2\u0845\u0843\3\2\2\2\u0846\u081e\3\2\2\2\u0846"+
		"\u0832\3\2\2\2\u0846\u083c\3\2\2\2\u0847\u0849\3\2\2\2\u0848\u084a\5\60"+
		"\31\2\u0849\u0848\3\2\2\2\u0849\u084a\3\2\2\2\u084am\3\2\2\2\u084b\u084e"+
		"\5\u041c\u020f\2\u084c\u084d\7\u026f\2\2\u084d\u084f\5\u0386\u01c4\2\u084e"+
		"\u084c\3\2\2\2\u084e\u084f\3\2\2\2\u084f\u0855\3\2\2\2\u0850\u0851\5\u041c"+
		"\u020f\2\u0851\u0852\7\u0259\2\2\u0852\u0853\5\u0386\u01c4\2\u0853\u0855"+
		"\3\2\2\2\u0854\u084b\3\2\2\2\u0854\u0850\3\2\2\2\u0855o\3\2\2\2\u0856"+
		"\u0857\7\u0181\2\2\u0857\u0858\5\u0450\u0229\2\u0858\u0859\5\u0384\u01c3"+
		"\2\u0859q\3\2\2\2\u085a\u085b\7\u0122\2\2\u085b\u085c\7\u00db\2\2\u085c"+
		"\u085d\5\u043a\u021e\2\u085d\u085e\7\6\2\2\u085e\u085f\t\r\2\2\u085f\u0861"+
		"\5\u048a\u0246\2\u0860\u0862\5t;\2\u0861\u0860\3\2\2\2\u0861\u0862\3\2"+
		"\2\2\u0862s\3\2\2\2\u0863\u086a\5v<\2\u0864\u0866\7\u0307\2\2\u0865\u0864"+
		"\3\2\2\2\u0865\u0866\3\2\2\2\u0866\u0867\3\2\2\2\u0867\u0869\5v<\2\u0868"+
		"\u0865\3\2\2\2\u0869\u086c\3\2\2\2\u086a\u0868\3\2\2\2\u086a\u086b\3\2"+
		"\2\2\u086bu\3\2\2\2\u086c\u086a\3\2\2\2\u086d\u0874\5\u008aF\2\u086e\u0874"+
		"\5\u008cG\2\u086f\u0874\5\u0094K\2\u0870\u0874\5\u0096L\2\u0871\u0874"+
		"\5\u0098M\2\u0872\u0874\5\u009aN\2\u0873\u086d\3\2\2\2\u0873\u086e\3\2"+
		"\2\2\u0873\u086f\3\2\2\2\u0873\u0870\3\2\2\2\u0873\u0871\3\2\2\2\u0873"+
		"\u0872\3\2\2\2\u0874w\3\2\2\2\u0875\u0876\7\u01f9\2\2\u0876\u0877\5\u0444"+
		"\u0223\2\u0877\u0878\7\u00c9\2\2\u0878\u0879\7r\2\2\u0879\u087a\7\u028a"+
		"\2\2\u087a\u087b\5\u049e\u0250\2\u087b\u087c\5z>\2\u087cy\3\2\2\2\u087d"+
		"\u087e\7\u0188\2\2\u087e\u087f\7\u030a\2\2\u087f\u0884\5|?\2\u0880\u0881"+
		"\7\u0307\2\2\u0881\u0883\5|?\2\u0882\u0880\3\2\2\2\u0883\u0886\3\2\2\2"+
		"\u0884\u0882\3\2\2\2\u0884\u0885\3\2\2\2\u0885\u0887\3\2\2\2\u0886\u0884"+
		"\3\2\2\2\u0887\u0888\7\u030b\2\2\u0888{\3\2\2\2\u0889\u088a\7\u00e2\2"+
		"\2\u088a\u0898\5\u048a\u0246\2\u088b\u088c\7o\2\2\u088c\u0898\5\u048a"+
		"\u0246\2\u088d\u088e\7\u026c\2\2\u088e\u0898\5\u048a\u0246\2\u088f\u0890"+
		"\7\u0198\2\2\u0890\u0898\5\u048a\u0246\2\u0891\u0892\7\u0209\2\2\u0892"+
		"\u0898\5\u048a\u0246\2\u0893\u0894\7\u0190\2\2\u0894\u0898\5\u048a\u0246"+
		"\2\u0895\u0896\7\u019f\2\2\u0896\u0898\5\u0476\u023c\2\u0897\u0889\3\2"+
		"\2\2\u0897\u088b\3\2\2\2\u0897\u088d\3\2\2\2\u0897\u088f\3\2\2\2\u0897"+
		"\u0891\3\2\2\2\u0897\u0893\3\2\2\2\u0897\u0895\3\2\2\2\u0898}\3\2\2\2"+
		"\u0899\u089a\7\u023e\2\2\u089a\u089b\5\u0436\u021c\2\u089b\u08a0\5\u0082"+
		"B\2\u089c\u089d\7\u026e\2\2\u089d\u089e\7\u0122\2\2\u089e\u089f\7\u00db"+
		"\2\2\u089f\u08a1\5\u043c\u021f\2\u08a0\u089c\3\2\2\2\u08a0\u08a1\3\2\2"+
		"\2\u08a1\u08a3\3\2\2\2\u08a2\u08a4\5\u0086D\2\u08a3\u08a2\3\2\2\2\u08a3"+
		"\u08a4\3\2\2\2\u08a4\177\3\2\2\2\u08a5\u08a6\7\u025f\2\2\u08a6\u08a7\7"+
		"\u023e\2\2\u08a7\u08a8\5\u0436\u021c\2\u08a8\u08a9\7\6\2\2\u08a9\u08ab"+
		"\5\u0084C\2\u08aa\u08ac\5<\37\2\u08ab\u08aa\3\2\2\2\u08ab\u08ac\3\2\2"+
		"\2\u08ac\u0081\3\2\2\2\u08ad\u08b0\6B!\2\u08ae\u08af\7\6\2\2\u08af\u08b1"+
		"\5\u0084C\2\u08b0\u08ae\3\2\2\2\u08b0\u08b1\3\2\2\2\u08b1\u08b5\3\2\2"+
		"\2\u08b2\u08b3\7\6\2\2\u08b3\u08b5\5\u0084C\2\u08b4\u08ad\3\2\2\2\u08b4"+
		"\u08b2\3\2\2\2\u08b5\u0083\3\2\2\2\u08b6\u08b7\7q\2\2\u08b7\u08b8\5\u048a"+
		"\u0246\2\u08b8\u0085\3\2\2\2\u08b9\u08c0\5\u0088E\2\u08ba\u08bc\7\u0307"+
		"\2\2\u08bb\u08ba\3\2\2\2\u08bb\u08bc\3\2\2\2\u08bc\u08bd\3\2\2\2\u08bd"+
		"\u08bf\5\u0088E\2\u08be\u08bb\3\2\2\2\u08bf\u08c2\3\2\2\2\u08c0\u08be"+
		"\3\2\2\2\u08c0\u08c1\3\2\2\2\u08c1\u0087\3\2\2\2\u08c2\u08c0\3\2\2\2\u08c3"+
		"\u08d0\5\u008aF\2\u08c4\u08d0\5\u008eH\2\u08c5\u08d0\5\u0090I\2\u08c6"+
		"\u08d0\5\u0092J\2\u08c7\u08d0\5\u0094K\2\u08c8\u08d0\5\u0096L\2\u08c9"+
		"\u08d0\5\u0098M\2\u08ca\u08d0\5\u009aN\2\u08cb\u08cc\6E\"\2\u08cc\u08d0"+
		"\5\u009cO\2\u08cd\u08ce\6E#\2\u08ce\u08d0\5\u009eP\2\u08cf\u08c3\3\2\2"+
		"\2\u08cf\u08c4\3\2\2\2\u08cf\u08c5\3\2\2\2\u08cf\u08c6\3\2\2\2\u08cf\u08c7"+
		"\3\2\2\2\u08cf\u08c8\3\2\2\2\u08cf\u08c9\3\2\2\2\u08cf\u08ca\3\2\2\2\u08cf"+
		"\u08cb\3\2\2\2\u08cf\u08cd\3\2\2\2\u08d0\u0089\3\2\2\2\u08d1\u08d3\7\u00f0"+
		"\2\2\u08d2\u08d4\7\u02f0\2\2\u08d3\u08d2\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4"+
		"\u08d5\3\2\2\2\u08d5\u08d6\5\u04a4\u0253\2\u08d6\u008b\3\2\2\2\u08d7\u08d9"+
		"\t\16\2\2\u08d8\u08da\7\u02f0\2\2\u08d9\u08d8\3\2\2\2\u08d9\u08da\3\2"+
		"\2\2\u08da\u08db\3\2\2\2\u08db\u08dc\5\u04a4\u0253\2\u08dc\u008d\3\2\2"+
		"\2\u08dd\u08df\7\31\2\2\u08de\u08e0\7\u02f0\2\2\u08df\u08de\3\2\2\2\u08df"+
		"\u08e0\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u08e2\5\u04a4\u0253\2\u08e2\u008f"+
		"\3\2\2\2\u08e3\u08e5\7\u0146\2\2\u08e4\u08e6\7\u02f0\2\2\u08e5\u08e4\3"+
		"\2\2\2\u08e5\u08e6\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7\u08e8\5\u04a4\u0253"+
		"\2\u08e8\u0091\3\2\2\2\u08e9\u08eb\7\u00b7\2\2\u08ea\u08ec\7\u02f0\2\2"+
		"\u08eb\u08ea\3\2\2\2\u08eb\u08ec\3\2\2\2\u08ec\u08ed\3\2\2\2\u08ed\u08ee"+
		"\5\u04a4\u0253\2\u08ee\u0093\3\2\2\2\u08ef\u08f1\7\u0172\2\2\u08f0\u08f2"+
		"\7\u02f0\2\2\u08f1\u08f0\3\2\2\2\u08f1\u08f2\3\2\2\2\u08f2\u08f3\3\2\2"+
		"\2\u08f3\u08f4\5\u0478\u023d\2\u08f4\u0095\3\2\2\2\u08f5\u08f7\7\u022b"+
		"\2\2\u08f6\u08f5\3\2\2\2\u08f6\u08f7\3\2\2\2\u08f7\u08f8\3\2\2\2\u08f8"+
		"\u08fa\7\u00a5\2\2\u08f9\u08fb\7\u02f0\2\2\u08fa\u08f9\3\2\2\2\u08fa\u08fb"+
		"\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08fd\5\u0448\u0225\2\u08fd\u0097\3"+
		"\2\2\2\u08fe\u08ff\t\17\2\2\u08ff\u0099\3\2\2\2\u0900\u0902\7M\2\2\u0901"+
		"\u0903\7\u02f0\2\2\u0902\u0901\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u0904"+
		"\3\2\2\2\u0904\u0905\5\u048a\u0246\2\u0905\u009b\3\2\2\2\u0906\u0908\7"+
		"\u00bf\2\2\u0907\u0909\7\u02f0\2\2\u0908\u0907\3\2\2\2\u0908\u0909\3\2"+
		"\2\2\u0909\u090a\3\2\2\2\u090a\u090b\5\u04a4\u0253\2\u090b\u009d\3\2\2"+
		"\2\u090c\u090e\7\u00a0\2\2\u090d\u090f\7\u02f0\2\2\u090e\u090d\3\2\2\2"+
		"\u090e\u090f\3\2\2\2\u090f\u0910\3\2\2\2\u0910\u0911\5\u0484\u0243\2\u0911"+
		"\u009f\3\2\2\2\u0912\u0914\5\u00a2R\2\u0913\u0912\3\2\2\2\u0913\u0914"+
		"\3\2\2\2\u0914\u0916\3\2\2\2\u0915\u0917\5\u03d2\u01ea\2\u0916\u0915\3"+
		"\2\2\2\u0916\u0917\3\2\2\2\u0917\u0919\3\2\2\2\u0918\u091a\5\u00a6T\2"+
		"\u0919\u0918\3\2\2\2\u0919\u091a\3\2\2\2\u091a\u091b\3\2\2\2\u091b\u091c"+
		"\7\u027e\2\2\u091c\u091d\5\u0432\u021a\2\u091d\u091e\5H%\2\u091e\u00a1"+
		"\3\2\2\2\u091f\u0920\7\u018c\2\2\u0920\u0922\7\u01cc\2\2\u0921\u0923\5"+
		"\u00a4S\2\u0922\u0921\3\2\2\2\u0922\u0923\3\2\2\2\u0923\u0926\3\2\2\2"+
		"\u0924\u0926\5\u00a4S\2\u0925\u091f\3\2\2\2\u0925\u0924\3\2\2\2\u0926"+
		"\u00a3\3\2\2\2\u0927\u0928\7\13\2\2\u0928\u0929\7\u02f0\2\2\u0929\u092a"+
		"\t\20\2\2\u092a\u00a5\3\2\2\2\u092b\u092c\7\u021b\2\2\u092c\u092d\7\u01f2"+
		"\2\2\u092d\u092e\t\f\2\2\u092e\u00a7\3\2\2\2\u092f\u0931\5\u03d2\u01ea"+
		"\2\u0930\u092f\3\2\2\2\u0930\u0931\3\2\2\2\u0931\u0932\3\2\2\2\u0932\u0933"+
		"\7\u0254\2\2\u0933\u0934\5\u042e\u0218\2\u0934\u0935\t\21\2\2\u0935\u0936"+
		"\t\22\2\2\u0936\u0937\7\u0181\2\2\u0937\u0938\5\u0450\u0229\2\u0938\u0939"+
		"\7\u00ca\2\2\u0939\u093a\7\u009b\2\2\u093a\u093c\7\u01e9\2\2\u093b\u093d"+
		"\5\u00aaV\2\u093c\u093b\3\2\2\2\u093c\u093d\3\2\2\2\u093d\u093e\3\2\2"+
		"\2\u093e\u093f\5\u0312\u018a\2\u093f\u00a9\3\2\2\2\u0940\u0941\6V$\2\u0941"+
		"\u0942\t\23\2\2\u0942\u0943\5\u049e\u0250\2\u0943\u00ab\3\2\2\2\u0944"+
		"\u0946\5\u03d2\u01ea\2\u0945\u0944\3\2\2\2\u0945\u0946\3\2\2\2\u0946\u0947"+
		"\3\2\2\2\u0947\u0949\7\u00ac\2\2\u0948\u094a\5\u03d6\u01ec\2\u0949\u0948"+
		"\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u094b\3\2\2\2\u094b\u094c\5\u043e\u0220"+
		"\2\u094c\u094d\7\u0181\2\2\u094d\u094e\7\u01ec\2\2\u094e\u0955\5\u0360"+
		"\u01b1\2\u094f\u0950\7\u0181\2\2\u0950\u0952\7Q\2\2\u0951\u0953\7\u0175"+
		"\2\2\u0952\u0951\3\2\2\2\u0952\u0953\3\2\2\2\u0953\u0954\3\2\2\2\u0954"+
		"\u0956\7\u01a4\2\2\u0955\u094f\3\2\2\2\u0955\u0956\3\2\2\2\u0956\u095d"+
		"\3\2\2\2\u0957\u095e\7\u009e\2\2\u0958\u095b\7\u008e\2\2\u0959\u095a\7"+
		"\u0181\2\2\u095a\u095c\7\u0204\2\2\u095b\u0959\3\2\2\2\u095b\u095c\3\2"+
		"\2\2\u095c\u095e\3\2\2\2\u095d\u0957\3\2\2\2\u095d\u0958\3\2\2\2\u095d"+
		"\u095e\3\2\2\2\u095e\u0961\3\2\2\2\u095f\u0960\7M\2\2\u0960\u0962\5\u048a"+
		"\u0246\2\u0961\u095f\3\2\2\2\u0961\u0962\3\2\2\2\u0962\u0963\3\2\2\2\u0963"+
		"\u0964\7\u0095\2\2\u0964\u0965\5\u0312\u018a\2\u0965\u00ad\3\2\2\2\u0966"+
		"\u0968\7\u0295\2\2\u0967\u0969\5\u03d6\u01ec\2\u0968\u0967\3\2\2\2\u0968"+
		"\u0969\3\2\2\2\u0969\u096a\3\2\2\2\u096a\u096b\5\u0232\u011a\2\u096b\u00af"+
		"\3\2\2\2\u096c\u096d\7\u018c\2\2\u096d\u096e\7\u01cc\2\2\u096e\u096f\7"+
		"\u020d\2\2\u096f\u0970\7\u02d0\2\2\u0970\u0971\7\u02c8\2\2\u0971\u0975"+
		"\5\u047c\u023f\2\u0972\u0974\5\u00b2Z\2\u0973\u0972\3\2\2\2\u0974\u0977"+
		"\3\2\2\2\u0975\u0973\3\2\2\2\u0975\u0976\3\2\2\2\u0976\u0986\3\2\2\2\u0977"+
		"\u0975\3\2\2\2\u0978\u0979\7\u020d\2\2\u0979\u097a\7\u02d0\2\2\u097a\u097c"+
		"\7\u02c8\2\2\u097b\u097d\5\u03d6\u01ec\2\u097c\u097b\3\2\2\2\u097c\u097d"+
		"\3\2\2\2\u097d\u097e\3\2\2\2\u097e\u0982\5\u047c\u023f\2\u097f\u0981\5"+
		"\u00b2Z\2\u0980\u097f\3\2\2\2\u0981\u0984\3\2\2\2\u0982\u0980\3\2\2\2"+
		"\u0982\u0983\3\2\2\2\u0983\u0986\3\2\2\2\u0984\u0982\3\2\2\2\u0985\u096c"+
		"\3\2\2\2\u0985\u0978\3\2\2\2\u0986\u00b1\3\2\2\2\u0987\u0988\7\u0167\2"+
		"\2\u0988\u0989\7\u0246\2\2\u0989\u0997\5\u048c\u0247\2\u098a\u098b\7\u02cd"+
		"\2\2\u098b\u098c\7\u0246\2\2\u098c\u0997\5\u048c\u0247\2\u098d\u098e\7"+
		"\u02cf\2\2\u098e\u098f\5\u048c\u0247\2\u098f\u0990\7\u00e8\2\2\u0990\u0991"+
		"\7/\2\2\u0991\u0992\5\u047c\u023f\2\u0992\u0997\3\2\2\2\u0993\u0994\7"+
		"\u02ce\2\2\u0994\u0995\7\u0246\2\2\u0995\u0997\5\u048c\u0247\2\u0996\u0987"+
		"\3\2\2\2\u0996\u098a\3\2\2\2\u0996\u098d\3\2\2\2\u0996\u0993\3\2\2\2\u0997"+
		"\u00b3\3\2\2\2\u0998\u09aa\7\u0096\2\2\u0999\u09ab\5\u00b6\\\2\u099a\u09ab"+
		"\5\u00b8]\2\u099b\u09ab\5\u00ba^\2\u099c\u09ab\5\u00bc_\2\u099d\u09ab"+
		"\5\u00be`\2\u099e\u09ab\5\u00c0a\2\u099f\u09ab\5\u00c4c\2\u09a0\u09ab"+
		"\5\u00c6d\2\u09a1\u09ab\5\u00c8e\2\u09a2\u09ab\5\u00caf\2\u09a3\u09ab"+
		"\5\u00ccg\2\u09a4\u09a5\6[%\2\u09a5\u09ab\5\u00ceh\2\u09a6\u09a7\6[&\2"+
		"\u09a7\u09ab\5\u00d0i\2\u09a8\u09a9\6[\'\2\u09a9\u09ab\5\u00d2j\2\u09aa"+
		"\u0999\3\2\2\2\u09aa\u099a\3\2\2\2\u09aa\u099b\3\2\2\2\u09aa\u099c\3\2"+
		"\2\2\u09aa\u099d\3\2\2\2\u09aa\u099e\3\2\2\2\u09aa\u099f\3\2\2\2\u09aa"+
		"\u09a0\3\2\2\2\u09aa\u09a1\3\2\2\2\u09aa\u09a2\3\2\2\2\u09aa\u09a3\3\2"+
		"\2\2\u09aa\u09a4\3\2\2\2\u09aa\u09a6\3\2\2\2\u09aa\u09a8\3\2\2\2\u09ab"+
		"\u00b5\3\2\2\2\u09ac\u09ae\7o\2\2\u09ad\u09af\5\u03d4\u01eb\2\u09ae\u09ad"+
		"\3\2\2\2\u09ae\u09af\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0\u09b1\5\u0424\u0213"+
		"\2\u09b1\u00b7\3\2\2\2\u09b2\u09b4\7\u00ac\2\2\u09b3\u09b5\5\u03d4\u01eb"+
		"\2\u09b4\u09b3\3\2\2\2\u09b4\u09b5\3\2\2\2\u09b5\u09b6\3\2\2\2\u09b6\u09b7"+
		"\5\u0440\u0221\2\u09b7\u00b9\3\2\2\2\u09b8\u09ba\7\u00d0\2\2\u09b9\u09bb"+
		"\5\u03d4\u01eb\2\u09ba\u09b9\3\2\2\2\u09ba\u09bb\3\2\2\2\u09bb\u09bc\3"+
		"\2\2\2\u09bc\u09bd\5\u042c\u0217\2\u09bd\u00bb\3\2\2\2\u09be\u09c0\7\u01a8"+
		"\2\2\u09bf\u09c1\5\u03d4\u01eb\2\u09c0\u09bf\3\2\2\2\u09c0\u09c1\3\2\2"+
		"\2\u09c1\u09c2\3\2\2\2\u09c2\u09c3\5\u0428\u0215\2\u09c3\u00bd\3\2\2\2"+
		"\u09c4\u09c6\5\u040a\u0206\2\u09c5\u09c4\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6"+
		"\u09c7\3\2\2\2\u09c7\u09c8\7\u00ee\2\2\u09c8\u09c9\5\u041e\u0210\2\u09c9"+
		"\u09ca\7\u0181\2\2\u09ca\u09cc\5\u0450\u0229\2\u09cb\u09cd\5\60\31\2\u09cc"+
		"\u09cb\3\2\2\2\u09cc\u09cd\3\2\2\2\u09cd\u00bf\3\2\2\2\u09ce\u09cf\7\u0122"+
		"\2\2\u09cf\u09d0\7\u00db\2\2\u09d0\u09db\5\u043c\u021f\2\u09d1\u09d8\5"+
		"\u00c2b\2\u09d2\u09d4\7\u0307\2\2\u09d3\u09d2\3\2\2\2\u09d3\u09d4\3\2"+
		"\2\2\u09d4\u09d5\3\2\2\2\u09d5\u09d7\5\u00c2b\2\u09d6\u09d3\3\2\2\2\u09d7"+
		"\u09da\3\2\2\2\u09d8\u09d6\3\2\2\2\u09d8\u09d9\3\2\2\2\u09d9\u09dc\3\2"+
		"\2\2\u09da\u09d8\3\2\2\2\u09db\u09d1\3\2\2\2\u09db\u09dc\3\2\2\2\u09dc"+
		"\u00c1\3\2\2\2\u09dd\u09e0\5\u0098M\2\u09de\u09e0\5\u0096L\2\u09df\u09dd"+
		"\3\2\2\2\u09df\u09de\3\2\2\2\u09e0\u00c3\3\2\2\2\u09e1\u09e3\7\u01f9\2"+
		"\2\u09e2\u09e4\5\u03d4\u01eb\2\u09e3\u09e2\3\2\2\2\u09e3\u09e4\3\2\2\2"+
		"\u09e4\u09e5\3\2\2\2\u09e5\u09e6\5\u0446\u0224\2\u09e6\u00c5\3\2\2\2\u09e7"+
		"\u09e9\7\u0243\2\2\u09e8\u09e7\3\2\2\2\u09e8\u09e9\3\2\2\2\u09e9\u09ea"+
		"\3\2\2\2\u09ea\u09ec\t\24\2\2\u09eb\u09ed\5\u03d4\u01eb\2\u09ec\u09eb"+
		"\3\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u09ee\3\2\2\2\u09ee\u09f0\5\u0452\u022a"+
		"\2\u09ef\u09f1\t\4\2\2\u09f0\u09ef\3\2\2\2\u09f0\u09f1\3\2\2\2\u09f1\u00c7"+
		"\3\2\2\2\u09f2\u09f3\7\u023e\2\2\u09f3\u09fe\5\u0438\u021d\2\u09f4\u09fb"+
		"\5\u00c2b\2\u09f5\u09f7\7\u0307\2\2\u09f6\u09f5\3\2\2\2\u09f6\u09f7\3"+
		"\2\2\2\u09f7\u09f8\3\2\2\2\u09f8\u09fa\5\u00c2b\2\u09f9\u09f6\3\2\2\2"+
		"\u09fa\u09fd\3\2\2\2\u09fb\u09f9\3\2\2\2\u09fb\u09fc\3\2\2\2\u09fc\u09ff"+
		"\3\2\2\2\u09fd\u09fb\3\2\2\2\u09fe\u09f4\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff"+
		"\u00c9\3\2\2\2\u0a00\u0a02\7\u0254\2\2\u0a01\u0a03\5\u03d4\u01eb\2\u0a02"+
		"\u0a01\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04\u0a05\5\u0430"+
		"\u0219\2\u0a05\u00cb\3\2\2\2\u0a06\u0a08\7\u027e\2\2\u0a07\u0a09\5\u03d4"+
		"\u01eb\2\u0a08\u0a07\3\2\2\2\u0a08\u0a09\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a"+
		"\u0a0c\5\u03e2\u01f2\2\u0a0b\u0a0d\t\4\2\2\u0a0c\u0a0b\3\2\2\2\u0a0c\u0a0d"+
		"\3\2\2\2\u0a0d\u00cd\3\2\2\2\u0a0e\u0a10\7\u0295\2\2\u0a0f\u0a11\5\u03d4"+
		"\u01eb\2\u0a10\u0a0f\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11\u0a12\3\2\2\2\u0a12"+
		"\u0a13\5\u0232\u011a\2\u0a13\u00cf\3\2\2\2\u0a14\u0a15\7\u020d\2\2\u0a15"+
		"\u0a16\7\u02d0\2\2\u0a16\u0a18\7\u02c8\2\2\u0a17\u0a19\5\u03d4\u01eb\2"+
		"\u0a18\u0a17\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a\u0a1b"+
		"\5\u047c\u023f\2\u0a1b\u00d1\3\2\2\2\u0a1c\u0a1d\7\u025f\2\2\u0a1d\u0a1e"+
		"\7\u023e\2\2\u0a1e\u0a20\5\u0438\u021d\2\u0a1f\u0a21\5<\37\2\u0a20\u0a1f"+
		"\3\2\2\2\u0a20\u0a21\3\2\2\2\u0a21\u00d3\3\2\2\2\u0a22\u0a23\7\u01c7\2"+
		"\2\u0a23\u0a24\t\24\2\2\u0a24\u0a29\5\u00d6l\2\u0a25\u0a26\7\u0307\2\2"+
		"\u0a26\u0a28\5\u00d6l\2\u0a27\u0a25\3\2\2\2\u0a28\u0a2b\3\2\2\2\u0a29"+
		"\u0a27\3\2\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u00d5\3\2\2\2\u0a2b\u0a29\3\2"+
		"\2\2\u0a2c\u0a2d\5\u0450\u0229\2\u0a2d\u0a2e\7\u0250\2\2\u0a2e\u0a2f\5"+
		"\u044a\u0226\2\u0a2f\u00d7\3\2\2\2\u0a30\u0a32\7\u0257\2\2\u0a31\u0a33"+
		"\7\u0240\2\2\u0a32\u0a31\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a34\3\2\2"+
		"\2\u0a34\u0a35\5\u0450\u0229\2\u0a35\u00d9\3\2\2\2\u0a36\u0a37\7\u00ec"+
		"\2\2\u0a37\u0a38\7\u0240\2\2\u0a38\u0a39\7\u00cd\2\2\u0a39\u0a3a\5\u048e"+
		"\u0248\2\u0a3a\u00db\3\2\2\2\u0a3b\u0a3c\7\62\2\2\u0a3c\u0a42\5\u0428"+
		"\u0215\2\u0a3d\u0a3f\7\u030a\2\2\u0a3e\u0a40\5\u02f6\u017c\2\u0a3f\u0a3e"+
		"\3\2\2\2\u0a3f\u0a40\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a43\7\u030b\2"+
		"\2\u0a42\u0a3d\3\2\2\2\u0a42\u0a43\3\2\2\2\u0a43\u00dd\3\2\2\2\u0a44\u0a45"+
		"\6p(\2\u0a45\u0a47\5\u0142\u00a2\2\u0a46\u0a44\3\2\2\2\u0a46\u0a47\3\2"+
		"\2\2\u0a47\u0a48\3\2\2\2\u0a48\u0a4c\7\u0087\2\2\u0a49\u0a4b\5\u00e2r"+
		"\2\u0a4a\u0a49\3\2\2\2\u0a4b\u0a4e\3\2\2\2\u0a4c\u0a4a\3\2\2\2\u0a4c\u0a4d"+
		"\3\2\2\2\u0a4d\u0a6f\3\2\2\2\u0a4e\u0a4c\3\2\2\2\u0a4f\u0a67\7\u00cd\2"+
		"\2\u0a50\u0a51\5\u0454\u022b\2\u0a51\u0a52\7\u026f\2\2\u0a52\u0a54\5\u0150"+
		"\u00a9\2\u0a53\u0a55\5\u0168\u00b5\2\u0a54\u0a53\3\2\2\2\u0a54\u0a55\3"+
		"\2\2\2\u0a55\u0a68\3\2\2\2\u0a56\u0a59\5\u0450\u0229\2\u0a57\u0a58\6p"+
		")\2\u0a58\u0a5a\5\u0190\u00c9\2\u0a59\u0a57\3\2\2\2\u0a59\u0a5a\3\2\2"+
		"\2\u0a5a\u0a5c\3\2\2\2\u0a5b\u0a5d\5\u00e0q\2\u0a5c\u0a5b\3\2\2\2\u0a5c"+
		"\u0a5d\3\2\2\2\u0a5d\u0a5f\3\2\2\2\u0a5e\u0a60\5\u0168\u00b5\2\u0a5f\u0a5e"+
		"\3\2\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u0a62\3\2\2\2\u0a61\u0a63\5\u014a\u00a6"+
		"\2\u0a62\u0a61\3\2\2\2\u0a62\u0a63\3\2\2\2\u0a63\u0a65\3\2\2\2\u0a64\u0a66"+
		"\5\u0120\u0091\2\u0a65\u0a64\3\2\2\2\u0a65\u0a66\3\2\2\2\u0a66\u0a68\3"+
		"\2\2\2\u0a67\u0a50\3\2\2\2\u0a67\u0a56\3\2\2\2\u0a68\u0a70\3\2\2\2\u0a69"+
		"\u0a6a\5\u0454\u022b\2\u0a6a\u0a6b\7\u00cd\2\2\u0a6b\u0a6d\5\u0150\u00a9"+
		"\2\u0a6c\u0a6e\5\u0168\u00b5\2\u0a6d\u0a6c\3\2\2\2\u0a6d\u0a6e\3\2\2\2"+
		"\u0a6e\u0a70\3\2\2\2\u0a6f\u0a4f\3\2\2\2\u0a6f\u0a69\3\2\2\2\u0a70\u00df"+
		"\3\2\2\2\u0a71\u0a72\6q*\2\u0a72\u0a73\7\u0197\2\2\u0a73\u0a74\7\u030a"+
		"\2\2\u0a74\u0a75\5\u046c\u0237\2\u0a75\u0a76\7\u030b\2\2\u0a76\u00e1\3"+
		"\2\2\2\u0a77\u0a78\t\25\2\2\u0a78\u00e3\3\2\2\2\u0a79\u0a7e\7\u0095\2"+
		"\2\u0a7a\u0a7b\6s+\2\u0a7b\u0a7f\5\u02f6\u017c\2\u0a7c\u0a7d\6s,\2\u0a7d"+
		"\u0a7f\5\u0162\u00b2\2\u0a7e\u0a7a\3\2\2\2\u0a7e\u0a7c\3\2\2\2\u0a7f\u00e5"+
		"\3\2\2\2\u0a80\u0a92\7\u00dd\2\2\u0a81\u0a82\5\u0450\u0229\2\u0a82\u0a84"+
		"\7\u0185\2\2\u0a83\u0a85\5\u0190\u00c9\2\u0a84\u0a83\3\2\2\2\u0a84\u0a85"+
		"\3\2\2\2\u0a85\u0a93\3\2\2\2\u0a86\u0a90\5\u046a\u0236\2\u0a87\u0a91\7"+
		"D\2\2\u0a88\u0a89\7\u01b5\2\2\u0a89\u0a8b\5\u00e8u\2\u0a8a\u0a8c\5\u0168"+
		"\u00b5\2\u0a8b\u0a8a\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a8e\3\2\2\2\u0a8d"+
		"\u0a8f\5\u011e\u0090\2\u0a8e\u0a8d\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f\u0a91"+
		"\3\2\2\2\u0a90\u0a87\3\2\2\2\u0a90\u0a88\3\2\2\2\u0a91\u0a93\3\2\2\2\u0a92"+
		"\u0a81\3\2\2\2\u0a92\u0a86\3\2\2\2\u0a93\u00e7\3\2\2\2\u0a94\u0a9f\t\26"+
		"\2\2\u0a95\u0a9c\5\u046a\u0236\2\u0a96\u0a9d\t\27\2\2\u0a97\u0a98\t\30"+
		"\2\2\u0a98\u0a99\7\u030a\2\2\u0a99\u0a9a\5\u00f8}\2\u0a9a\u0a9b\7\u030b"+
		"\2\2\u0a9b\u0a9d\3\2\2\2\u0a9c\u0a96\3\2\2\2\u0a9c\u0a97\3\2\2\2\u0a9d"+
		"\u0a9f\3\2\2\2\u0a9e\u0a94\3\2\2\2\u0a9e\u0a95\3\2\2\2\u0a9f\u00e9\3\2"+
		"\2\2\u0aa0\u0aa2\7\u00f4\2\2\u0aa1\u0aa3\5\u00ecw\2\u0aa2\u0aa1\3\2\2"+
		"\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aa5\3\2\2\2\u0aa4\u0aa6\7\u00ea\2\2\u0aa5"+
		"\u0aa4\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0aa8\3\2\2\2\u0aa7\u0aa9\7\u00fa"+
		"\2\2\u0aa8\u0aa7\3\2\2\2\u0aa8\u0aa9\3\2\2\2\u0aa9\u0aaa\3\2\2\2\u0aaa"+
		"\u0aac\5\u0450\u0229\2\u0aab\u0aad\5\u040e\u0208\2\u0aac\u0aab\3\2\2\2"+
		"\u0aac\u0aad\3\2\2\2\u0aad\u0aba\3\2\2\2\u0aae\u0ab1\5\u00eex\2\u0aaf"+
		"\u0ab0\6v-\2\u0ab0\u0ab2\5\u00fa~\2\u0ab1\u0aaf\3\2\2\2\u0ab1\u0ab2\3"+
		"\2\2\2\u0ab2\u0abb\3\2\2\2\u0ab3\u0ab4\7\u01fc\2\2\u0ab4\u0ab7\5\u03e4"+
		"\u01f3\2\u0ab5\u0ab6\6v.\2\u0ab6\u0ab8\5\u00fa~\2\u0ab7\u0ab5\3\2\2\2"+
		"\u0ab7\u0ab8\3\2\2\2\u0ab8\u0abb\3\2\2\2\u0ab9\u0abb\5\u00f4{\2\u0aba"+
		"\u0aae\3\2\2\2\u0aba\u0ab3\3\2\2\2\u0aba\u0ab9\3\2\2\2\u0abb\u0abd\3\2"+
		"\2\2\u0abc\u0abe\5\u00fc\177\2\u0abd\u0abc\3\2\2\2\u0abd\u0abe\3\2\2\2"+
		"\u0abe\u00eb\3\2\2\2\u0abf\u0ac0\t\31\2\2\u0ac0\u00ed\3\2\2\2\u0ac1\u0ac3"+
		"\7\u030a\2\2\u0ac2\u0ac4\5\u00f0y\2\u0ac3\u0ac2\3\2\2\2\u0ac3\u0ac4\3"+
		"\2\2\2\u0ac4\u0ac5\3\2\2\2\u0ac5\u0ac7\7\u030b\2\2\u0ac6\u0ac1\3\2\2\2"+
		"\u0ac6\u0ac7\3\2\2\2\u0ac7\u0ac8\3\2\2\2\u0ac8\u0ac9\5\u00f2z\2\u0ac9"+
		"\u00ef\3\2\2\2\u0aca\u0acf\5\u041a\u020e\2\u0acb\u0acc\7\u0307\2\2\u0acc"+
		"\u0ace\5\u041a\u020e\2\u0acd\u0acb\3\2\2\2\u0ace\u0ad1\3\2\2\2\u0acf\u0acd"+
		"\3\2\2\2\u0acf\u0ad0\3\2\2\2\u0ad0\u00f1\3\2\2\2\u0ad1\u0acf\3\2\2\2\u0ad2"+
		"\u0ad3\t\32\2\2\u0ad3\u0ad4\5\u00f6|\2\u0ad4\u00f3\3\2\2\2\u0ad5\u0add"+
		"\5\\/\2\u0ad6\u0ad8\7\u030a\2\2\u0ad7\u0ad9\5\u00f0y\2\u0ad8\u0ad7\3\2"+
		"\2\2\u0ad8\u0ad9\3\2\2\2\u0ad9\u0ada\3\2\2\2\u0ada\u0adb\7\u030b\2\2\u0adb"+
		"\u0add\5\\/\2\u0adc\u0ad5\3\2\2\2\u0adc\u0ad6\3\2\2\2\u0add\u00f5\3\2"+
		"\2\2\u0ade\u0ae0\7\u030a\2\2\u0adf\u0ae1\5\u00f8}\2\u0ae0\u0adf\3\2\2"+
		"\2\u0ae0\u0ae1\3\2\2\2\u0ae1\u0ae2\3\2\2\2\u0ae2\u0aeb\7\u030b\2\2\u0ae3"+
		"\u0ae4\7\u0307\2\2\u0ae4\u0ae6\7\u030a\2\2\u0ae5\u0ae7\5\u00f8}\2\u0ae6"+
		"\u0ae5\3\2\2\2\u0ae6\u0ae7\3\2\2\2\u0ae7\u0ae8\3\2\2\2\u0ae8\u0aea\7\u030b"+
		"\2\2\u0ae9\u0ae3\3\2\2\2\u0aea\u0aed\3\2\2\2\u0aeb\u0ae9\3\2\2\2\u0aeb"+
		"\u0aec\3\2\2\2\u0aec\u00f7\3\2\2\2\u0aed\u0aeb\3\2\2\2\u0aee\u0af1\5\u02a6"+
		"\u0154\2\u0aef\u0af1\7\u0082\2\2\u0af0\u0aee\3\2\2\2\u0af0\u0aef\3\2\2"+
		"\2\u0af1\u0af9\3\2\2\2\u0af2\u0af5\7\u0307\2\2\u0af3\u0af6\5\u02a6\u0154"+
		"\2\u0af4\u0af6\7\u0082\2\2\u0af5\u0af3\3\2\2\2\u0af5\u0af4\3\2\2\2\u0af6"+
		"\u0af8\3\2\2\2\u0af7\u0af2\3\2\2\2\u0af8\u0afb\3\2\2\2\u0af9\u0af7\3\2"+
		"\2\2\u0af9\u0afa\3\2\2\2\u0afa\u00f9\3\2\2\2\u0afb\u0af9\3\2\2\2\u0afc"+
		"\u0afd\7\23\2\2\u0afd\u0aff\5\u046a\u0236\2\u0afe\u0b00\5\u0416\u020c"+
		"\2\u0aff\u0afe\3\2\2\2\u0aff\u0b00\3\2\2\2\u0b00\u00fb\3\2\2\2\u0b01\u0b02"+
		"\7\u0181\2\2\u0b02\u0b03\7\u0099\2\2\u0b03\u0b04\7\u010b\2\2\u0b04\u0b05"+
		"\7\u0268\2\2\u0b05\u0b06\5\u03e4\u01f3\2\u0b06\u00fd\3\2\2\2\u0b07\u0b08"+
		"\7\u011b\2\2\u0b08\u0b0a\5\u0100\u0081\2\u0b09\u0b0b\t\33\2\2\u0b0a\u0b09"+
		"\3\2\2\2\u0b0a\u0b0b\3\2\2\2\u0b0b\u0b0d\3\2\2\2\u0b0c\u0b0e\7\u011e\2"+
		"\2\u0b0d\u0b0c\3\2\2\2\u0b0d\u0b0e\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b10"+
		"\7\u00ef\2\2\u0b10\u0b12\5\u048a\u0246\2\u0b11\u0b13\t\n\2\2\u0b12\u0b11"+
		"\3\2\2\2\u0b12\u0b13\3\2\2\2\u0b13\u0b14\3\2\2\2\u0b14\u0b15\7\u00fa\2"+
		"\2\u0b15\u0b16\7\u0240\2\2\u0b16\u0b18\5\u0450\u0229\2\u0b17\u0b19\5\u040e"+
		"\u0208\2\u0b18\u0b17\3\2\2\2\u0b18\u0b19\3\2\2\2\u0b19\u0b1b\3\2\2\2\u0b1a"+
		"\u0b1c\5\u03e8\u01f5\2\u0b1b\u0b1a\3\2\2\2\u0b1b\u0b1c\3\2\2\2\u0b1c\u0b1e"+
		"\3\2\2\2\u0b1d\u0b1f\5\u0102\u0082\2\u0b1e\u0b1d\3\2\2\2\u0b1e\u0b1f\3"+
		"\2\2\2\u0b1f\u0b21\3\2\2\2\u0b20\u0b22\5\u03ea\u01f6\2\u0b21\u0b20\3\2"+
		"\2\2\u0b21\u0b22\3\2\2\2\u0b22\u0b24\3\2\2\2\u0b23\u0b25\5\u03ee\u01f8"+
		"\2\u0b24\u0b23\3\2\2\2\u0b24\u0b25\3\2\2\2\u0b25\u0b26\3\2\2\2\u0b26\u0b27"+
		"\5\u0104\u0083\2\u0b27\u00ff\3\2\2\2\u0b28\u0b29\t\34\2\2\u0b29\u0101"+
		"\3\2\2\2\u0b2a\u0b2b\7\u01e6\2\2\u0b2b\u0b2c\7\u00e8\2\2\u0b2c\u0b2d\7"+
		"/\2\2\u0b2d\u0b2e\5\u0486\u0244\2\u0b2e\u0103\3\2\2\2\u0b2f\u0b30\7\u00ea"+
		"\2\2\u0b30\u0b31\7\u02ed\2\2\u0b31\u0b33\t\35\2\2\u0b32\u0b2f\3\2\2\2"+
		"\u0b32\u0b33\3\2\2\2\u0b33\u0b35\3\2\2\2\u0b34\u0b36\5\u0106\u0084\2\u0b35"+
		"\u0b34\3\2\2\2\u0b35\u0b36\3\2\2\2\u0b36\u0b39\3\2\2\2\u0b37\u0b38\7\u01fc"+
		"\2\2\u0b38\u0b3a\5\u03e4\u01f3\2\u0b39\u0b37\3\2\2\2\u0b39\u0b3a\3\2\2"+
		"\2\u0b3a\u0105\3\2\2\2\u0b3b\u0b3d\7\u030a\2\2\u0b3c\u0b3e\5\u0108\u0085"+
		"\2\u0b3d\u0b3c\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b3f\3\2\2\2\u0b3f\u0b40"+
		"\7\u030b\2\2\u0b40\u0107\3\2\2\2\u0b41\u0b44\5\u0418\u020d\2\u0b42\u0b44"+
		"\5\u02e8\u0175\2\u0b43\u0b41\3\2\2\2\u0b43\u0b42\3\2\2\2\u0b44\u0b4c\3"+
		"\2\2\2\u0b45\u0b48\7\u0307\2\2\u0b46\u0b49\5\u0418\u020d\2\u0b47\u0b49"+
		"\5\u02e8\u0175\2\u0b48\u0b46\3\2\2\2\u0b48\u0b47\3\2\2\2\u0b49\u0b4b\3"+
		"\2\2\2\u0b4a\u0b45\3\2\2\2\u0b4b\u0b4e\3\2\2\2\u0b4c\u0b4a\3\2\2\2\u0b4c"+
		"\u0b4d\3\2\2\2\u0b4d\u0109\3\2\2\2\u0b4e\u0b4c\3\2\2\2\u0b4f\u0b51\7\u01cc"+
		"\2\2\u0b50\u0b52\t\36\2\2\u0b51\u0b50\3\2\2\2\u0b51\u0b52\3\2\2\2\u0b52"+
		"\u0b54\3\2\2\2\u0b53\u0b55\7\u00fa\2\2\u0b54\u0b53\3\2\2\2\u0b54\u0b55"+
		"\3\2\2\2\u0b55\u0b56\3\2\2\2\u0b56\u0b58\5\u0450\u0229\2\u0b57\u0b59\5"+
		"\u040e\u0208\2\u0b58\u0b57\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0b5e\3\2"+
		"\2\2\u0b5a\u0b5f\5\u00eex\2\u0b5b\u0b5c\7\u01fc\2\2\u0b5c\u0b5f\5\u03e4"+
		"\u01f3\2\u0b5d\u0b5f\5\u00f4{\2\u0b5e\u0b5a\3\2\2\2\u0b5e\u0b5b\3\2\2"+
		"\2\u0b5e\u0b5d\3\2\2\2\u0b5f\u010b\3\2\2\2\u0b60\u0b62\5\u0110\u0089\2"+
		"\u0b61\u0b63\5\u015a\u00ae\2\u0b62\u0b61\3\2\2\2\u0b62\u0b63\3\2\2\2\u0b63"+
		"\u0b67\3\2\2\2\u0b64\u0b67\5\u0114\u008b\2\u0b65\u0b67\5\u010e\u0088\2"+
		"\u0b66\u0b60\3\2\2\2\u0b66\u0b64\3\2\2\2\u0b66\u0b65\3\2\2\2\u0b67\u010d"+
		"\3\2\2\2\u0b68\u0b69\7\u030a\2\2\u0b69\u0b6a\5\u010e\u0088\2\u0b6a\u0b6b"+
		"\7\u030b\2\2\u0b6b\u0b75\3\2\2\2\u0b6c\u0b6d\5\u0110\u0089\2\u0b6d\u0b6f"+
		"\5\u0126\u0094\2\u0b6e\u0b70\5\u015a\u00ae\2\u0b6f\u0b6e\3\2\2\2\u0b6f"+
		"\u0b70\3\2\2\2\u0b70\u0b75\3\2\2\2\u0b71\u0b72\5\u015a\u00ae\2\u0b72\u0b73"+
		"\5\u0126\u0094\2\u0b73\u0b75\3\2\2\2\u0b74\u0b68\3\2\2\2\u0b74\u0b6c\3"+
		"\2\2\2\u0b74\u0b71\3\2\2\2\u0b75\u010f\3\2\2\2\u0b76\u0b77\6\u0089/\2"+
		"\u0b77\u0b79\5\u0142\u00a2\2\u0b78\u0b76\3\2\2\2\u0b78\u0b79\3\2\2\2\u0b79"+
		"\u0b88\3\2\2\2\u0b7a\u0b7c\5\u0112\u008a\2\u0b7b\u0b7d\5\u014a\u00a6\2"+
		"\u0b7c\u0b7b\3\2\2\2\u0b7c\u0b7d\3\2\2\2\u0b7d\u0b7f\3\2\2\2\u0b7e\u0b80"+
		"\5\u011e\u0090\2\u0b7f\u0b7e\3\2\2\2\u0b7f\u0b80\3\2\2\2\u0b80\u0b89\3"+
		"\2\2\2\u0b81\u0b83\5\u0114\u008b\2\u0b82\u0b84\5\u014a\u00a6\2\u0b83\u0b82"+
		"\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b86\3\2\2\2\u0b85\u0b87\5\u011e\u0090"+
		"\2\u0b86\u0b85\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87\u0b89\3\2\2\2\u0b88\u0b7a"+
		"\3\2\2\2\u0b88\u0b81\3\2\2\2\u0b89\u0b8c\3\2\2\2\u0b8a\u0b8b\6\u0089\60"+
		"\2\u0b8b\u0b8d\5\u0128\u0095\2\u0b8c\u0b8a\3\2\2\2\u0b8c\u0b8d\3\2\2\2"+
		"\u0b8d\u0111\3\2\2\2\u0b8e\u0b99\5\u0116\u008c\2\u0b8f\u0b90\5\u0114\u008b"+
		"\2\u0b90\u0b92\7\u0262\2\2\u0b91\u0b93\5\u018e\u00c8\2\u0b92\u0b91\3\2"+
		"\2\2\u0b92\u0b93\3\2\2\2\u0b93\u0b96\3\2\2\2\u0b94\u0b97\5\u0116\u008c"+
		"\2\u0b95\u0b97\5\u0114\u008b\2\u0b96\u0b94\3\2\2\2\u0b96\u0b95\3\2\2\2"+
		"\u0b97\u0b99\3\2\2\2\u0b98\u0b8e\3\2\2\2\u0b98\u0b8f\3\2\2\2\u0b99\u0ba4"+
		"\3\2\2\2\u0b9a\u0b9c\7\u0262\2\2\u0b9b\u0b9d\5\u018e\u00c8\2\u0b9c\u0b9b"+
		"\3\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0ba0\3\2\2\2\u0b9e\u0ba1\5\u0116\u008c"+
		"\2\u0b9f\u0ba1\5\u0114\u008b\2\u0ba0\u0b9e\3\2\2\2\u0ba0\u0b9f\3\2\2\2"+
		"\u0ba1\u0ba3\3\2\2\2\u0ba2\u0b9a\3\2\2\2\u0ba3\u0ba6\3\2\2\2\u0ba4\u0ba2"+
		"\3\2\2\2\u0ba4\u0ba5\3\2\2\2\u0ba5\u0113\3\2\2\2\u0ba6\u0ba4\3\2\2\2\u0ba7"+
		"\u0bad\7\u030a\2\2\u0ba8\u0bae\5\u0114\u008b\2\u0ba9\u0bab\5\u0110\u0089"+
		"\2\u0baa\u0bac\5\u015a\u00ae\2\u0bab\u0baa\3\2\2\2\u0bab\u0bac\3\2\2\2"+
		"\u0bac\u0bae\3\2\2\2\u0bad\u0ba8\3\2\2\2\u0bad\u0ba9\3\2\2\2\u0bae\u0baf"+
		"\3\2\2\2\u0baf\u0bb0\7\u030b\2\2\u0bb0\u0115\3\2\2\2\u0bb1\u0bb7\5\u0118"+
		"\u008d\2\u0bb2\u0bb3\6\u008c\61\2\u0bb3\u0bb7\5\u0152\u00aa\2\u0bb4\u0bb5"+
		"\6\u008c\62\2\u0bb5\u0bb7\5\u0154\u00ab\2\u0bb6\u0bb1\3\2\2\2\u0bb6\u0bb2"+
		"\3\2\2\2\u0bb6\u0bb4\3\2\2\2\u0bb7\u0117\3\2\2\2\u0bb8\u0bbc\7\u01f3\2"+
		"\2\u0bb9\u0bbb\5\u0158\u00ad\2\u0bba\u0bb9\3\2\2\2\u0bbb\u0bbe\3\2\2\2"+
		"\u0bbc\u0bba\3\2\2\2\u0bbc\u0bbd\3\2\2\2\u0bbd\u0bbf\3\2\2\2\u0bbe\u0bbc"+
		"\3\2\2\2\u0bbf\u0bc1\5\u0162\u00b2\2\u0bc0\u0bc2\5\u0126\u0094\2\u0bc1"+
		"\u0bc0\3\2\2\2\u0bc1\u0bc2\3\2\2\2\u0bc2\u0bc4\3\2\2\2\u0bc3\u0bc5\5\u014e"+
		"\u00a8\2\u0bc4\u0bc3\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5\u0bc7\3\2\2\2\u0bc6"+
		"\u0bc8\5\u0168\u00b5\2\u0bc7\u0bc6\3\2\2\2\u0bc7\u0bc8\3\2\2\2\u0bc8\u0bca"+
		"\3\2\2\2\u0bc9\u0bcb\5\u0146\u00a4\2\u0bca\u0bc9\3\2\2\2\u0bca\u0bcb\3"+
		"\2\2\2\u0bcb\u0bcd\3\2\2\2\u0bcc\u0bce\5\u012a\u0096\2\u0bcd\u0bcc\3\2"+
		"\2\2\u0bcd\u0bce\3\2\2\2\u0bce\u0bd1\3\2\2\2\u0bcf\u0bd0\6\u008d\63\2"+
		"\u0bd0\u0bd2\5\u012c\u0097\2\u0bd1\u0bcf\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2"+
		"\u0119\3\2\2\2\u0bd3\u0bd4\5\u0114\u008b\2\u0bd4\u011b\3\2\2\2\u0bd5\u0bd6"+
		"\t\37\2\2\u0bd6\u011d\3\2\2\2\u0bd7\u0bd8\7\u0116\2\2\u0bd8\u0bd9\5\u0122"+
		"\u0092\2\u0bd9\u011f\3\2\2\2\u0bda\u0bdb\7\u0116\2\2\u0bdb\u0bdc\5\u0124"+
		"\u0093\2\u0bdc\u0121\3\2\2\2\u0bdd\u0be0\5\u0124\u0093\2\u0bde\u0bdf\t"+
		" \2\2\u0bdf\u0be1\5\u0124\u0093\2\u0be0\u0bde\3\2\2\2\u0be0\u0be1\3\2"+
		"\2\2\u0be1\u0123\3\2\2\2\u0be2\u0be5\5\u046a\u0236\2\u0be3\u0be5\t!\2"+
		"\2\u0be4\u0be2\3\2\2\2\u0be4\u0be3\3\2\2\2\u0be5\u0125\3\2\2\2\u0be6\u0c02"+
		"\7\u00fa\2\2\u0be7\u0be8\7\u018e\2\2\u0be8\u0bea\5\u0484\u0243\2\u0be9"+
		"\u0beb\5\u03e8\u01f5\2\u0bea\u0be9\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb\u0bed"+
		"\3\2\2\2\u0bec\u0bee\5\u03ea\u01f6\2\u0bed\u0bec\3\2\2\2\u0bed\u0bee\3"+
		"\2\2\2\u0bee\u0bf0\3\2\2\2\u0bef\u0bf1\5\u03ee\u01f8\2\u0bf0\u0bef\3\2"+
		"\2\2\u0bf0\u0bf1\3\2\2\2\u0bf1\u0c03\3\2\2\2\u0bf2\u0bf3\7\u0098\2\2\u0bf3"+
		"\u0c03\5\u0484\u0243\2\u0bf4\u0bf7\5\u049e\u0250\2\u0bf5\u0bf7\5\u02e8"+
		"\u0175\2\u0bf6\u0bf4\3\2\2\2\u0bf6\u0bf5\3\2\2\2\u0bf7\u0bff\3\2\2\2\u0bf8"+
		"\u0bfb\7\u0307\2\2\u0bf9\u0bfc\5\u049e\u0250\2\u0bfa\u0bfc\5\u02e8\u0175"+
		"\2\u0bfb\u0bf9\3\2\2\2\u0bfb\u0bfa\3\2\2\2\u0bfc\u0bfe\3\2\2\2\u0bfd\u0bf8"+
		"\3\2\2\2\u0bfe\u0c01\3\2\2\2\u0bff\u0bfd\3\2\2\2\u0bff\u0c00\3\2\2\2\u0c00"+
		"\u0c03\3\2\2\2\u0c01\u0bff\3\2\2\2\u0c02\u0be7\3\2\2\2\u0c02\u0bf2\3\2"+
		"\2\2\u0c02\u0bf6\3\2\2\2\u0c03\u0127\3\2\2\2\u0c04\u0c05\7\u01a8\2\2\u0c05"+
		"\u0c06\7\17\2\2\u0c06\u0c0c\7\u030a\2\2\u0c07\u0c0a\7\u02ed\2\2\u0c08"+
		"\u0c09\7\u0307\2\2\u0c09\u0c0b\7\u02ed\2\2\u0c0a\u0c08\3\2\2\2\u0c0a\u0c0b"+
		"\3\2\2\2\u0c0b\u0c0d\3\2\2\2\u0c0c\u0c07\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d"+
		"\u0c0e\3\2\2\2\u0c0e\u0c0f\7\u030b\2\2\u0c0f\u0129\3\2\2\2\u0c10\u0c11"+
		"\7\u00df\2\2\u0c11\u0c12\5\u02a6\u0154\2\u0c12\u012b\3\2\2\2\u0c13\u0c14"+
		"\7\u02bd\2\2\u0c14\u0c19\5\u012e\u0098\2\u0c15\u0c16\7\u0307\2\2\u0c16"+
		"\u0c18\5\u012e\u0098\2\u0c17\u0c15\3\2\2\2\u0c18\u0c1b\3\2\2\2\u0c19\u0c17"+
		"\3\2\2\2\u0c19\u0c1a\3\2\2\2\u0c1a\u012d\3\2\2\2\u0c1b\u0c19\3\2\2\2\u0c1c"+
		"\u0c1d\5\u0466\u0234\2\u0c1d\u0c1e\7\23\2\2\u0c1e\u0c1f\5\u0130\u0099"+
		"\2\u0c1f\u012f\3\2\2\2\u0c20\u0c21\7\u030a\2\2\u0c21\u0c22\5\u0132\u009a"+
		"\2\u0c22\u0c23\7\u030b\2\2\u0c23\u0131\3\2\2\2\u0c24\u0c26\5\u0466\u0234"+
		"\2\u0c25\u0c24\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26\u0c2a\3\2\2\2\u0c27\u0c28"+
		"\7\u0197\2\2\u0c28\u0c29\7/\2\2\u0c29\u0c2b\5\u0308\u0185\2\u0c2a\u0c27"+
		"\3\2\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0c2d\3\2\2\2\u0c2c\u0c2e\5\u014a\u00a6"+
		"\2\u0c2d\u0c2c\3\2\2\2\u0c2d\u0c2e\3\2\2\2\u0c2e\u0c30\3\2\2\2\u0c2f\u0c31"+
		"\5\u0134\u009b\2\u0c30\u0c2f\3\2\2\2\u0c30\u0c31\3\2\2\2\u0c31\u0133\3"+
		"\2\2\2\u0c32\u0c33\5\u0136\u009c\2\u0c33\u0c35\5\u0138\u009d\2\u0c34\u0c36"+
		"\5\u0140\u00a1\2\u0c35\u0c34\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0135\3"+
		"\2\2\2\u0c37\u0c38\t\"\2\2\u0c38\u0137\3\2\2\2\u0c39\u0c3c\5\u013a\u009e"+
		"\2\u0c3a\u0c3c\5\u013c\u009f\2\u0c3b\u0c39\3\2\2\2\u0c3b\u0c3a\3\2\2\2"+
		"\u0c3c\u0139\3\2\2\2\u0c3d\u0c3e\7\u02bc\2\2\u0c3e\u0c4c\7\u02b7\2\2\u0c3f"+
		"\u0c40\5\u047a\u023e\2\u0c40\u0c41\7\u02b7\2\2\u0c41\u0c4c\3\2\2\2\u0c42"+
		"\u0c43\7\u0315\2\2\u0c43\u0c4c\7\u02b7\2\2\u0c44\u0c45\7\u00f9\2\2\u0c45"+
		"\u0c46\5\u02a6\u0154\2\u0c46\u0c47\5\u02fe\u0180\2\u0c47\u0c48\7\u02b7"+
		"\2\2\u0c48\u0c4c\3\2\2\2\u0c49\u0c4a\7g\2\2\u0c4a\u0c4c\7\u01e9\2\2\u0c4b"+
		"\u0c3d\3\2\2\2\u0c4b\u0c3f\3\2\2\2\u0c4b\u0c42\3\2\2\2\u0c4b\u0c44\3\2"+
		"\2\2\u0c4b\u0c49\3\2\2\2\u0c4c\u013b\3\2\2\2\u0c4d\u0c4e\7 \2\2\u0c4e"+
		"\u0c4f\5\u013e\u00a0\2\u0c4f\u0c50\7\21\2\2\u0c50\u0c51\5\u013e\u00a0"+
		"\2\u0c51\u013d\3\2\2\2\u0c52\u0c60\5\u013a\u009e\2\u0c53\u0c54\7\u02bc"+
		"\2\2\u0c54\u0c60\7\u02ac\2\2\u0c55\u0c56\5\u047a\u023e\2\u0c56\u0c57\7"+
		"\u02ac\2\2\u0c57\u0c60\3\2\2\2\u0c58\u0c59\7\u0315\2\2\u0c59\u0c60\7\u02ac"+
		"\2\2\u0c5a\u0c5b\7\u00f9\2\2\u0c5b\u0c5c\5\u02a6\u0154\2\u0c5c\u0c5d\5"+
		"\u02fe\u0180\2\u0c5d\u0c5e\7\u02ac\2\2\u0c5e\u0c60\3\2\2\2\u0c5f\u0c52"+
		"\3\2\2\2\u0c5f\u0c53\3\2\2\2\u0c5f\u0c55\3\2\2\2\u0c5f\u0c58\3\2\2\2\u0c5f"+
		"\u0c5a\3\2\2\2\u0c60\u013f\3\2\2\2\u0c61\u0c68\7\u02aa\2\2\u0c62\u0c63"+
		"\7g\2\2\u0c63\u0c69\7\u01e9\2\2\u0c64\u0c69\7\u00db\2\2\u0c65\u0c69\7"+
		"\u02bb\2\2\u0c66\u0c67\7\u0177\2\2\u0c67\u0c69\7\u02b4\2\2\u0c68\u0c62"+
		"\3\2\2\2\u0c68\u0c64\3\2\2\2\u0c68\u0c65\3\2\2\2\u0c68\u0c66\3\2\2\2\u0c69"+
		"\u0141\3\2\2\2\u0c6a\u0c6c\7\u0287\2\2\u0c6b\u0c6d\7\u029b\2\2\u0c6c\u0c6b"+
		"\3\2\2\2\u0c6c\u0c6d\3\2\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e\u0c73\5\u0144\u00a3"+
		"\2\u0c6f\u0c70\7\u0307\2\2\u0c70\u0c72\5\u0144\u00a3\2\u0c71\u0c6f\3\2"+
		"\2\2\u0c72\u0c75\3\2\2\2\u0c73\u0c71\3\2\2\2\u0c73\u0c74\3\2\2\2\u0c74"+
		"\u0143\3\2\2\2\u0c75\u0c73\3\2\2\2\u0c76\u0c78\5\u046a\u0236\2\u0c77\u0c79"+
		"\5\u0416\u020c\2\u0c78\u0c77\3\2\2\2\u0c78\u0c79\3\2\2\2\u0c79\u0c7a\3"+
		"\2\2\2\u0c7a\u0c7b\7\23\2\2\u0c7b\u0c7c\5\u011a\u008e\2\u0c7c\u0145\3"+
		"\2\2\2\u0c7d\u0c7e\7\u00db\2\2\u0c7e\u0c7f\7/\2\2\u0c7f\u0c81\5\u0308"+
		"\u0185\2\u0c80\u0c82\5\u0148\u00a5\2\u0c81\u0c80\3\2\2\2\u0c81\u0c82\3"+
		"\2\2\2\u0c82\u0147\3\2\2\2\u0c83\u0c84\7\u0287\2\2\u0c84\u0c89\7\u01e3"+
		"\2\2\u0c85\u0c86\6\u00a5\64\2\u0c86\u0c87\7\u0287\2\2\u0c87\u0c89\7e\2"+
		"\2\u0c88\u0c83\3\2\2\2\u0c88\u0c85\3\2\2\2\u0c89\u0149\3\2\2\2\u0c8a\u0c8b"+
		"\7\u018b\2\2\u0c8b\u0c8c\7/\2\2\u0c8c\u0c8d\5\u0308\u0185\2\u0c8d\u014b"+
		"\3\2\2\2\u0c8e\u0c8f\t#\2\2\u0c8f\u014d\3\2\2\2\u0c90\u0c93\7\u00cd\2"+
		"\2\u0c91\u0c94\7\u0097\2\2\u0c92\u0c94\5\u0150\u00a9\2\u0c93\u0c91\3\2"+
		"\2\2\u0c93\u0c92\3\2\2\2\u0c94\u014f\3\2\2\2\u0c95\u0c9a\5\u016a\u00b6"+
		"\2\u0c96\u0c97\7\u0307\2\2\u0c97\u0c99\5\u016a\u00b6\2\u0c98\u0c96\3\2"+
		"\2\2\u0c99\u0c9c\3\2\2\2\u0c9a\u0c98\3\2\2\2\u0c9a\u0c9b\3\2\2\2\u0c9b"+
		"\u0151\3\2\2\2\u0c9c\u0c9a\3\2\2\2\u0c9d\u0c9e\7\u0274\2\2\u0c9e\u0ca3"+
		"\5\u0156\u00ac\2\u0c9f\u0ca0\7\u0307\2\2\u0ca0\u0ca2\5\u0156\u00ac\2\u0ca1"+
		"\u0c9f\3\2\2\2\u0ca2\u0ca5\3\2\2\2\u0ca3\u0ca1\3\2\2\2\u0ca3\u0ca4\3\2"+
		"\2\2\u0ca4\u0153\3\2\2\2\u0ca5\u0ca3\3\2\2\2\u0ca6\u0ca7\7\u0240\2\2\u0ca7"+
		"\u0ca8\5\u0450\u0229\2\u0ca8\u0155\3\2\2\2\u0ca9\u0caa\7\u01e9\2\2\u0caa"+
		"\u0cac\7\u030a\2\2\u0cab\u0cad\5\u00f8}\2\u0cac\u0cab\3\2\2\2\u0cac\u0cad"+
		"\3\2\2\2\u0cad\u0cae\3\2\2\2\u0cae\u0caf\7\u030b\2\2\u0caf\u0157\3\2\2"+
		"\2\u0cb0\u0cb9\5\u011c\u008f\2\u0cb1\u0cb9\7\u0219\2\2\u0cb2\u0cb3\6\u00ad"+
		"\65\2\u0cb3\u0cb9\7\u0217\2\2\u0cb4\u0cb5\6\u00ad\66\2\u0cb5\u0cb6\7\u0147"+
		"\2\2\u0cb6\u0cb7\7\u02f0\2\2\u0cb7\u0cb9\5\u0478\u023d\2\u0cb8\u0cb0\3"+
		"\2\2\2\u0cb8\u0cb1\3\2\2\2\u0cb8\u0cb2\3\2\2\2\u0cb8\u0cb4\3\2\2\2\u0cb9"+
		"\u0159\3\2\2\2\u0cba\u0cbc\5\u015c\u00af\2\u0cbb\u0cba\3\2\2\2\u0cbc\u0cbd"+
		"\3\2\2\2\u0cbd\u0cbb\3\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe\u015b\3\2\2\2\u0cbf"+
		"\u0cc0\7\u00ca\2\2\u0cc0\u0cc4\5\u015e\u00b0\2\u0cc1\u0cc2\6\u00af\67"+
		"\2\u0cc2\u0cc3\7\u029e\2\2\u0cc3\u0cc5\5\u0454\u022b\2\u0cc4\u0cc1\3\2"+
		"\2\2\u0cc4\u0cc5\3\2\2\2\u0cc5\u0cc8\3\2\2\2\u0cc6\u0cc7\6\u00af8\2\u0cc7"+
		"\u0cc9\5\u0160\u00b1\2\u0cc8\u0cc6\3\2\2\2\u0cc8\u0cc9\3\2\2\2\u0cc9\u0ccf"+
		"\3\2\2\2\u0cca\u0ccb\7\u0121\2\2\u0ccb\u0ccc\7\u00fd\2\2\u0ccc\u0ccd\7"+
		"\u01fe\2\2\u0ccd\u0ccf\7\u015c\2\2\u0cce\u0cbf\3\2\2\2\u0cce\u0cca\3\2"+
		"\2\2\u0ccf\u015d\3\2\2\2\u0cd0\u0cd4\7\u0268\2\2\u0cd1\u0cd2\6\u00b09"+
		"\2\u0cd2\u0cd4\7\u01fe\2\2\u0cd3\u0cd0\3\2\2\2\u0cd3\u0cd1\3\2\2\2\u0cd4"+
		"\u015f\3\2\2\2\u0cd5\u0cd6\7\u029f\2\2\u0cd6\u0cd9\7\u02a0\2\2\u0cd7\u0cd9"+
		"\7\u02a1\2\2\u0cd8\u0cd5\3\2\2\2\u0cd8\u0cd7\3\2\2\2\u0cd9\u0161\3\2\2"+
		"\2\u0cda\u0cdd\5\u0164\u00b3\2\u0cdb\u0cdd\7\u02fa\2\2\u0cdc\u0cda\3\2"+
		"\2\2\u0cdc\u0cdb\3\2\2\2\u0cdd\u0ce2\3\2\2\2\u0cde\u0cdf\7\u0307\2\2\u0cdf"+
		"\u0ce1\5\u0164\u00b3\2\u0ce0\u0cde\3\2\2\2\u0ce1\u0ce4\3\2\2\2\u0ce2\u0ce0"+
		"\3\2\2\2\u0ce2\u0ce3\3\2\2\2\u0ce3\u0163\3\2\2\2\u0ce4\u0ce2\3\2\2\2\u0ce5"+
		"\u0ceb\5\u0420\u0211\2\u0ce6\u0ce8\5\u02a6\u0154\2\u0ce7\u0ce9\5\u0166"+
		"\u00b4\2\u0ce8\u0ce7\3\2\2\2\u0ce8\u0ce9\3\2\2\2\u0ce9\u0ceb\3\2\2\2\u0cea"+
		"\u0ce5\3\2\2\2\u0cea\u0ce6\3\2\2\2\u0ceb\u0165\3\2\2\2\u0cec\u0cee\7\23"+
		"\2\2\u0ced\u0cec\3\2\2\2\u0ced\u0cee\3\2\2\2\u0cee\u0cf1\3\2\2\2\u0cef"+
		"\u0cf2\5\u046a\u0236\2\u0cf0\u0cf2\5\u0484\u0243\2\u0cf1\u0cef\3\2\2\2"+
		"\u0cf1\u0cf0\3\2\2\2\u0cf2\u0167\3\2\2\2\u0cf3\u0cf4\7\u0285\2\2\u0cf4"+
		"\u0cf5\5\u02a6\u0154\2\u0cf5\u0169\3\2\2\2\u0cf6\u0d01\5\u0176\u00bc\2"+
		"\u0cf7\u0cfb\7\u030c\2\2\u0cf8\u0cf9\6\u00b6:\2\u0cf9\u0cfc\5\u046a\u0236"+
		"\2\u0cfa\u0cfc\7\u02de\2\2\u0cfb\u0cf8\3\2\2\2\u0cfb\u0cfa\3\2\2\2\u0cfc"+
		"\u0cfd\3\2\2\2\u0cfd\u0cfe\5\u016c\u00b7\2\u0cfe\u0cff\7\u030d\2\2\u0cff"+
		"\u0d01\3\2\2\2\u0d00\u0cf6\3\2\2\2\u0d00\u0cf7\3\2\2\2\u0d01\u0d05\3\2"+
		"\2\2\u0d02\u0d04\5\u016e\u00b8\2\u0d03\u0d02\3\2\2\2\u0d04\u0d07\3\2\2"+
		"\2\u0d05\u0d03\3\2\2\2\u0d05\u0d06\3\2\2\2\u0d06\u016b\3\2\2\2\u0d07\u0d05"+
		"\3\2\2\2\u0d08\u0d0c\5\u0176\u00bc\2\u0d09\u0d0b\5\u016e\u00b8\2\u0d0a"+
		"\u0d09\3\2\2\2\u0d0b\u0d0e\3\2\2\2\u0d0c\u0d0a\3\2\2\2\u0d0c\u0d0d\3\2"+
		"\2\2\u0d0d\u016d\3\2\2\2\u0d0e\u0d0c\3\2\2\2\u0d0f\u0d10\5\u0172\u00ba"+
		"\2\u0d10\u0d15\5\u016a\u00b6\2\u0d11\u0d12\7\u0181\2\2\u0d12\u0d16\5\u02a6"+
		"\u0154\2\u0d13\u0d14\7\u026f\2\2\u0d14\u0d16\5\u046e\u0238\2\u0d15\u0d11"+
		"\3\2\2\2\u0d15\u0d13\3\2\2\2\u0d15\u0d16\3\2\2\2\u0d16\u0d23\3\2\2\2\u0d17"+
		"\u0d18\5\u0174\u00bb\2\u0d18\u0d1d\5\u016a\u00b6\2\u0d19\u0d1a\7\u0181"+
		"\2\2\u0d1a\u0d1e\5\u02a6\u0154\2\u0d1b\u0d1c\7\u026f\2\2\u0d1c\u0d1e\5"+
		"\u046e\u0238\2\u0d1d\u0d19\3\2\2\2\u0d1d\u0d1b\3\2\2\2\u0d1e\u0d23\3\2"+
		"\2\2\u0d1f\u0d20\5\u0170\u00b9\2\u0d20\u0d21\5\u0176\u00bc\2\u0d21\u0d23"+
		"\3\2\2\2\u0d22\u0d0f\3\2\2\2\u0d22\u0d17\3\2\2\2\u0d22\u0d1f\3\2\2\2\u0d23"+
		"\u016f\3\2\2\2\u0d24\u0d26\7\u0169\2\2\u0d25\u0d27\7\u00f1\2\2\u0d26\u0d25"+
		"\3\2\2\2\u0d26\u0d27\3\2\2\2\u0d27\u0d28\3\2\2\2\u0d28\u0d30\7\u0107\2"+
		"\2\u0d29\u0d2a\7\u0169\2\2\u0d2a\u0d2c\t$\2\2\u0d2b\u0d2d\7\u018d\2\2"+
		"\u0d2c\u0d2b\3\2\2\2\u0d2c\u0d2d\3\2\2\2\u0d2d\u0d2e\3\2\2\2\u0d2e\u0d30"+
		"\7\u0107\2\2\u0d2f\u0d24\3\2\2\2\u0d2f\u0d29\3\2\2\2\u0d30\u0171\3\2\2"+
		"\2\u0d31\u0d33\t%\2\2\u0d32\u0d31\3\2\2\2\u0d32\u0d33\3\2\2\2\u0d33\u0d34"+
		"\3\2\2\2\u0d34\u0d37\7\u0107\2\2\u0d35\u0d37\7\u022d\2\2\u0d36\u0d32\3"+
		"\2\2\2\u0d36\u0d35\3\2\2\2\u0d37\u0173\3\2\2\2\u0d38\u0d3a\t$\2\2\u0d39"+
		"\u0d3b\7\u018d\2\2\u0d3a\u0d39\3\2\2\2\u0d3a\u0d3b\3\2\2\2\u0d3b\u0d3c"+
		"\3\2\2\2\u0d3c\u0d3d\7\u0107\2\2\u0d3d\u0175\3\2\2\2\u0d3e\u0d45\5\u0178"+
		"\u00bd\2\u0d3f\u0d45\5\u017a\u00be\2\u0d40\u0d45\5\u017c\u00bf\2\u0d41"+
		"\u0d45\5\u017e\u00c0\2\u0d42\u0d43\6\u00bc;\2\u0d43\u0d45\5\u0180\u00c1"+
		"\2\u0d44\u0d3e\3\2\2\2\u0d44\u0d3f\3\2\2\2\u0d44\u0d40\3\2\2\2\u0d44\u0d41"+
		"\3\2\2\2\u0d44\u0d42\3\2\2\2\u0d45\u0177\3\2\2\2\u0d46\u0d48\5\u0450\u0229"+
		"\2\u0d47\u0d49\5\u040e\u0208\2\u0d48\u0d47\3\2\2\2\u0d48\u0d49\3\2\2\2"+
		"\u0d49\u0d4b\3\2\2\2\u0d4a\u0d4c\5\u0190\u00c9\2\u0d4b\u0d4a\3\2\2\2\u0d4b"+
		"\u0d4c\3\2\2\2\u0d4c\u0d4e\3\2\2\2\u0d4d\u0d4f\5\u0192\u00ca\2\u0d4e\u0d4d"+
		"\3\2\2\2\u0d4e\u0d4f\3\2\2\2\u0d4f\u0179\3\2\2\2\u0d50\u0d53\7\u030a\2"+
		"\2\u0d51\u0d54\5\u0178\u00bd\2\u0d52\u0d54\5\u017a\u00be\2\u0d53\u0d51"+
		"\3\2\2\2\u0d53\u0d52\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d56\7\u030b\2"+
		"\2\u0d56\u017b\3\2\2\2\u0d57\u0d59\5\u011a\u008e\2\u0d58\u0d5a\5\u0190"+
		"\u00c9\2\u0d59\u0d58\3\2\2\2\u0d59\u0d5a\3\2\2\2\u0d5a\u0d5d\3\2\2\2\u0d5b"+
		"\u0d5c\6\u00bf<\2\u0d5c\u0d5e\5\u0416\u020c\2\u0d5d\u0d5b\3\2\2\2\u0d5d"+
		"\u0d5e\3\2\2\2\u0d5e\u0d69\3\2\2\2\u0d5f\u0d60\6\u00bf=\2\u0d60\u0d61"+
		"\7\u02d8\2\2\u0d61\u0d63\5\u011a\u008e\2\u0d62\u0d64\5\u0190\u00c9\2\u0d63"+
		"\u0d62\3\2\2\2\u0d63\u0d64\3\2\2\2\u0d64\u0d66\3\2\2\2\u0d65\u0d67\5\u0416"+
		"\u020c\2\u0d66\u0d65\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d69\3\2\2\2\u0d68"+
		"\u0d57\3\2\2\2\u0d68\u0d5f\3\2\2\2\u0d69\u017d\3\2\2\2\u0d6a\u0d6d\7\u030a"+
		"\2\2\u0d6b\u0d6e\5\u0150\u00a9\2\u0d6c\u0d6e\5\u017e\u00c0\2\u0d6d\u0d6b"+
		"\3\2\2\2\u0d6d\u0d6c\3\2\2\2\u0d6e\u0d6f\3\2\2\2\u0d6f\u0d70\7\u030b\2"+
		"\2\u0d70\u017f\3\2\2\2\u0d71\u0d72\7\u02bf\2\2\u0d72\u0d73\7\u030a\2\2"+
		"\u0d73\u0d74\5\u02a6\u0154\2\u0d74\u0d75\7\u0307\2\2\u0d75\u0d76\5\u0484"+
		"\u0243\2\u0d76\u0d77\5\u0182\u00c2\2\u0d77\u0d79\7\u030b\2\2\u0d78\u0d7a"+
		"\5\u0190\u00c9\2\u0d79\u0d78\3\2\2\2\u0d79\u0d7a\3\2\2\2\u0d7a\u0181\3"+
		"\2\2\2\u0d7b\u0d7c\7I\2\2\u0d7c\u0d7d\7\u030a\2\2\u0d7d\u0d82\5\u0184"+
		"\u00c3\2\u0d7e\u0d7f\7\u0307\2\2\u0d7f\u0d81\5\u0184\u00c3\2\u0d80\u0d7e"+
		"\3\2\2\2\u0d81\u0d84\3\2\2\2\u0d82\u0d80\3\2\2\2\u0d82\u0d83\3\2\2\2\u0d83"+
		"\u0d85\3\2\2\2\u0d84\u0d82\3\2\2\2\u0d85\u0d86\7\u030b\2\2\u0d86\u0183"+
		"\3\2\2\2\u0d87\u0d88\5\u046a\u0236\2\u0d88\u0d89\7\u00ca\2\2\u0d89\u0d8a"+
		"\7\u02c1\2\2\u0d8a\u0d9f\3\2\2\2\u0d8b\u0d8c\5\u046a\u0236\2\u0d8c\u0d8f"+
		"\5\u0396\u01cc\2\u0d8d\u0d8e\6\u00c3>\2\u0d8e\u0d90\5\u03dc\u01ef\2\u0d8f"+
		"\u0d8d\3\2\2\2\u0d8f\u0d90\3\2\2\2\u0d90\u0d92\3\2\2\2\u0d91\u0d93\7\u00b0"+
		"\2\2\u0d92\u0d91\3\2\2\2\u0d92\u0d93\3\2\2\2\u0d93\u0d94\3\2\2\2\u0d94"+
		"\u0d95\7\u02c2\2\2\u0d95\u0d97\5\u0484\u0243\2\u0d96\u0d98\5\u0186\u00c4"+
		"\2\u0d97\u0d96\3\2\2\2\u0d97\u0d98\3\2\2\2\u0d98\u0d9f\3\2\2\2\u0d99\u0d9a"+
		"\7\u02c0\2\2\u0d9a\u0d9b\7\u02c2\2\2\u0d9b\u0d9c\5\u0484\u0243\2\u0d9c"+
		"\u0d9d\5\u0182\u00c2\2\u0d9d\u0d9f\3\2\2\2\u0d9e\u0d87\3\2\2\2\u0d9e\u0d8b"+
		"\3\2\2\2\u0d9e\u0d99\3\2\2\2\u0d9f\u0185\3\2\2\2\u0da0\u0da2\5\u0188\u00c5"+
		"\2\u0da1\u0da3\5\u018a\u00c6\2\u0da2\u0da1\3\2\2\2\u0da2\u0da3\3\2\2\2"+
		"\u0da3\u0da9\3\2\2\2\u0da4\u0da6\5\u018a\u00c6\2\u0da5\u0da7\5\u0188\u00c5"+
		"\2\u0da6\u0da5\3\2\2\2\u0da6\u0da7\3\2\2\2\u0da7\u0da9\3\2\2\2\u0da8\u0da0"+
		"\3\2\2\2\u0da8\u0da4\3\2\2\2\u0da9\u0187\3\2\2\2\u0daa\u0dab\5\u018c\u00c7"+
		"\2\u0dab\u0dac\7\u0181\2\2\u0dac\u0dad\7\u02be\2\2\u0dad\u0189\3\2\2\2"+
		"\u0dae\u0daf\5\u018c\u00c7\2\u0daf\u0db0\7\u0181\2\2\u0db0\u0db1\7\u00a7"+
		"\2\2\u0db1\u018b\3\2\2\2\u0db2\u0db7\7\u00a7\2\2\u0db3\u0db7\7\u017a\2"+
		"\2\u0db4\u0db5\7\u0082\2\2\u0db5\u0db7\5\u0484\u0243\2\u0db6\u0db2\3\2"+
		"\2\2\u0db6\u0db3\3\2\2\2\u0db6\u0db4\3\2\2\2\u0db7\u018d\3\2\2\2\u0db8"+
		"\u0db9\t&\2\2\u0db9\u018f\3\2\2\2\u0dba\u0dbe\7\23\2\2\u0dbb\u0dbc\6\u00c9"+
		"?\2\u0dbc\u0dbe\7\u02f0\2\2\u0dbd\u0dba\3\2\2\2\u0dbd\u0dbb\3\2\2\2\u0dbd"+
		"\u0dbe\3\2\2\2\u0dbe\u0dbf\3\2\2\2\u0dbf\u0dc0\5\u046a\u0236\2\u0dc0\u0191"+
		"\3\2\2\2\u0dc1\u0dc6\5\u0194\u00cb\2\u0dc2\u0dc3\7\u0307\2\2\u0dc3\u0dc5"+
		"\5\u0194\u00cb\2\u0dc4\u0dc2\3\2\2\2\u0dc5\u0dc8\3\2\2\2\u0dc6\u0dc4\3"+
		"\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7\u0193\3\2\2\2\u0dc8\u0dc6\3\2\2\2\u0dc9"+
		"\u0dca\5\u0196\u00cc\2\u0dca\u0dcc\5\u0198\u00cd\2\u0dcb\u0dcd\5\u019c"+
		"\u00cf\2\u0dcc\u0dcb\3\2\2\2\u0dcc\u0dcd\3\2\2\2\u0dcd\u0dce\3\2\2\2\u0dce"+
		"\u0dcf\7\u030a\2\2\u0dcf\u0dd0\5\u019e\u00d0\2\u0dd0\u0dd1\7\u030b\2\2"+
		"\u0dd1\u0dde\3\2\2\2\u0dd2\u0dd3\7\u026e\2\2\u0dd3\u0dd5\5\u0198\u00cd"+
		"\2\u0dd4\u0dd6\5\u019c\u00cf\2\u0dd5\u0dd4\3\2\2\2\u0dd5\u0dd6\3\2\2\2"+
		"\u0dd6\u0dd7\3\2\2\2\u0dd7\u0dd9\7\u030a\2\2\u0dd8\u0dda\5\u019e\u00d0"+
		"\2\u0dd9\u0dd8\3\2\2\2\u0dd9\u0dda\3\2\2\2\u0dda\u0ddb\3\2\2\2\u0ddb\u0ddc"+
		"\7\u030b\2\2\u0ddc\u0dde\3\2\2\2\u0ddd\u0dc9\3\2\2\2\u0ddd\u0dd2\3\2\2"+
		"\2\u0dde\u0195\3\2\2\2\u0ddf\u0de0\t\'\2\2\u0de0\u0197\3\2\2\2\u0de1\u0de2"+
		"\t(\2\2\u0de2\u0199\3\2\2\2\u0de3\u0de4\7\u01a6\2\2\u0de4\u0dea\7\u010b"+
		"\2\2\u0de5\u0de7\7\u0263\2\2\u0de6\u0de8\5\u0198\u00cd\2\u0de7\u0de6\3"+
		"\2\2\2\u0de7\u0de8\3\2\2\2\u0de8\u0dea\3\2\2\2\u0de9\u0de3\3\2\2\2\u0de9"+
		"\u0de5\3\2\2\2\u0dea\u019b\3\2\2\2\u0deb\u0df1\7\u00ca\2\2\u0dec\u0df2"+
		"\7\u0107\2\2\u0ded\u0dee\7\u018b\2\2\u0dee\u0df2\7/\2\2\u0def\u0df0\7"+
		"\u00db\2\2\u0df0\u0df2\7/\2\2\u0df1\u0dec\3\2\2\2\u0df1\u0ded\3\2\2\2"+
		"\u0df1\u0def\3\2\2\2\u0df2\u019d\3\2\2\2\u0df3\u0df8\5\u01a0\u00d1\2\u0df4"+
		"\u0df5\7\u0307\2\2\u0df5\u0df7\5\u01a0\u00d1\2\u0df6\u0df4\3\2\2\2\u0df7"+
		"\u0dfa\3\2\2\2\u0df8\u0df6\3\2\2\2\u0df8\u0df9\3\2\2\2\u0df9\u019f\3\2"+
		"\2\2\u0dfa\u0df8\3\2\2\2\u0dfb\u0dfe\5\u046a\u0236\2\u0dfc\u0dfe\7\u01a6"+
		"\2\2\u0dfd\u0dfb\3\2\2\2\u0dfd\u0dfc\3\2\2\2\u0dfe\u01a1\3\2\2\2\u0dff"+
		"\u0e00\6\u00d2@\2\u0e00\u0e02\5\u0142\u00a2\2\u0e01\u0dff\3\2\2\2\u0e01"+
		"\u0e02\3\2\2\2\u0e02\u0e03\3\2\2\2\u0e03\u0e05\7\u0268\2\2\u0e04\u0e06"+
		"\7\u0129\2\2\u0e05\u0e04\3\2\2\2\u0e05\u0e06\3\2\2\2\u0e06\u0e08\3\2\2"+
		"\2\u0e07\u0e09\7\u00ea\2\2\u0e08\u0e07\3\2\2\2\u0e08\u0e09\3\2\2\2\u0e09"+
		"\u0e0a\3\2\2\2\u0e0a\u0e0b\5\u0150\u00a9\2\u0e0b\u0e0c\7\u01fc\2\2\u0e0c"+
		"\u0e0e\5\u03e4\u01f3\2\u0e0d\u0e0f\5\u0168\u00b5\2\u0e0e\u0e0d\3\2\2\2"+
		"\u0e0e\u0e0f\3\2\2\2\u0e0f\u0e11\3\2\2\2\u0e10\u0e12\5\u014a\u00a6\2\u0e11"+
		"\u0e10\3\2\2\2\u0e11\u0e12\3\2\2\2\u0e12\u0e14\3\2\2\2\u0e13\u0e15\5\u0120"+
		"\u0091\2\u0e14\u0e13\3\2\2\2\u0e14\u0e15\3\2\2\2\u0e15\u01a3\3\2\2\2\u0e16"+
		"\u0e1b\5\u01a6\u00d4\2\u0e17\u0e1b\5\u01ac\u00d7\2\u0e18\u0e1b\5\u01ae"+
		"\u00d8\2\u0e19\u0e1b\5\u01b4\u00db\2\u0e1a\u0e16\3\2\2\2\u0e1a\u0e17\3"+
		"\2\2\2\u0e1a\u0e18\3\2\2\2\u0e1a\u0e19\3\2\2\2\u0e1b\u01a5\3\2\2\2\u0e1c"+
		"\u0e1d\7\u0221\2\2\u0e1d\u0e21\7\u0252\2\2\u0e1e\u0e20\5\u01aa\u00d6\2"+
		"\u0e1f\u0e1e\3\2\2\2\u0e20\u0e23\3\2\2\2\u0e21\u0e1f\3\2\2\2\u0e21\u0e22"+
		"\3\2\2\2\u0e22\u0e36\3\2\2\2\u0e23\u0e21\3\2\2\2\u0e24\u0e26\7O\2\2\u0e25"+
		"\u0e27\7\u0289\2\2\u0e26\u0e25\3\2\2\2\u0e26\u0e27\3\2\2\2\u0e27\u0e2d"+
		"\3\2\2\2\u0e28\u0e2a\7\21\2\2\u0e29\u0e2b\7\u0177\2\2\u0e2a\u0e29\3\2"+
		"\2\2\u0e2a\u0e2b\3\2\2\2\u0e2b\u0e2c\3\2\2\2\u0e2c\u0e2e\78\2\2\u0e2d"+
		"\u0e28\3\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e\u0e33\3\2\2\2\u0e2f\u0e31\7\u0177"+
		"\2\2\u0e30\u0e2f\3\2\2\2\u0e30\u0e31\3\2\2\2\u0e31\u0e32\3\2\2\2\u0e32"+
		"\u0e34\7\u01c4\2\2\u0e33\u0e30\3\2\2\2\u0e33\u0e34\3\2\2\2\u0e34\u0e36"+
		"\3\2\2\2\u0e35\u0e1c\3\2\2\2\u0e35\u0e24\3\2\2\2\u0e36\u01a7\3\2\2\2\u0e37"+
		"\u0e39\7\37\2\2\u0e38\u0e3a\7\u0289\2\2\u0e39\u0e38\3\2\2\2\u0e39\u0e3a"+
		"\3\2\2\2\u0e3a\u01a9\3\2\2\2\u0e3b\u0e3c\7\u0287\2\2\u0e3c\u0e3d\7W\2"+
		"\2\u0e3d\u0e42\7\u0207\2\2\u0e3e\u0e3f\6\u00d6A\2\u0e3f\u0e40\7\u01b5"+
		"\2\2\u0e40\u0e42\t)\2\2\u0e41\u0e3b\3\2\2\2\u0e41\u0e3e\3\2\2\2\u0e42"+
		"\u01ab\3\2\2\2\u0e43\u0e44\7\u01eb\2\2\u0e44\u0e61\5\u046a\u0236\2\u0e45"+
		"\u0e47\7\u01e2\2\2\u0e46\u0e48\7\u0289\2\2\u0e47\u0e46\3\2\2\2\u0e47\u0e48"+
		"\3\2\2\2\u0e48\u0e5b\3\2\2\2\u0e49\u0e4b\7\u0250\2\2\u0e4a\u0e4c\7\u01eb"+
		"\2\2\u0e4b\u0e4a\3\2\2\2\u0e4b\u0e4c\3\2\2\2\u0e4c\u0e4d\3\2\2\2\u0e4d"+
		"\u0e5c\5\u046a\u0236\2\u0e4e\u0e50\7\21\2\2\u0e4f\u0e51\7\u0177\2\2\u0e50"+
		"\u0e4f\3\2\2\2\u0e50\u0e51\3\2\2\2\u0e51\u0e52\3\2\2\2\u0e52\u0e54\78"+
		"\2\2\u0e53\u0e4e\3\2\2\2\u0e53\u0e54\3\2\2\2\u0e54\u0e59\3\2\2\2\u0e55"+
		"\u0e57\7\u0177\2\2\u0e56\u0e55\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57\u0e58"+
		"\3\2\2\2\u0e58\u0e5a\7\u01c4\2\2\u0e59\u0e56\3\2\2\2\u0e59\u0e5a\3\2\2"+
		"\2\u0e5a\u0e5c\3\2\2\2\u0e5b\u0e49\3\2\2\2\u0e5b\u0e53\3\2\2\2\u0e5c\u0e61"+
		"\3\2\2\2\u0e5d\u0e5e\7\u01c4\2\2\u0e5e\u0e5f\7\u01eb\2\2\u0e5f\u0e61\5"+
		"\u046a\u0236\2\u0e60\u0e43\3\2\2\2\u0e60\u0e45\3\2\2\2\u0e60\u0e5d\3\2"+
		"\2\2\u0e61\u01ad\3\2\2\2\u0e62\u0e63\7\u0121\2\2\u0e63\u0e64\t\24\2\2"+
		"\u0e64\u0e69\5\u01b0\u00d9\2\u0e65\u0e66\7\u0307\2\2\u0e66\u0e68\5\u01b0"+
		"\u00d9\2\u0e67\u0e65\3\2\2\2\u0e68\u0e6b\3\2\2\2\u0e69\u0e67\3\2\2\2\u0e69"+
		"\u0e6a\3\2\2\2\u0e6a\u0e79\3\2\2\2\u0e6b\u0e69\3\2\2\2\u0e6c\u0e6d\6\u00d8"+
		"B\2\u0e6d\u0e6e\7\u0121\2\2\u0e6e\u0e6f\7\u00f6\2\2\u0e6f\u0e70\7\u00ca"+
		"\2\2\u0e70\u0e79\7\35\2\2\u0e71\u0e76\7\u0265\2\2\u0e72\u0e77\7\u023d"+
		"\2\2\u0e73\u0e77\7\u0240\2\2\u0e74\u0e75\6\u00d8C\2\u0e75\u0e77\7\u00f6"+
		"\2\2\u0e76\u0e72\3\2\2\2\u0e76\u0e73\3\2\2\2\u0e76\u0e74\3\2\2\2\u0e77"+
		"\u0e79\3\2\2\2\u0e78\u0e62\3\2\2\2\u0e78\u0e6c\3\2\2\2\u0e78\u0e71\3\2"+
		"\2\2\u0e79\u01af\3\2\2\2\u0e7a\u0e7c\5\u0450\u0229\2\u0e7b\u0e7d\5\u0190"+
		"\u00c9\2\u0e7c\u0e7b\3\2\2\2\u0e7c\u0e7d\3\2\2\2\u0e7d\u0e7e\3\2\2\2\u0e7e"+
		"\u0e7f\5\u01b2\u00da\2\u0e7f\u01b1\3\2\2\2\u0e80\u0e82\7\u01b5\2\2\u0e81"+
		"\u0e83\7\u011e\2\2\u0e82\u0e81\3\2\2\2\u0e82\u0e83\3\2\2\2\u0e83\u0e89"+
		"\3\2\2\2\u0e84\u0e86\7\u0129\2\2\u0e85\u0e84\3\2\2\2\u0e85\u0e86\3\2\2"+
		"\2\u0e86\u0e87\3\2\2\2\u0e87\u0e89\7\u028b\2\2\u0e88\u0e80\3\2\2\2\u0e88"+
		"\u0e85\3\2\2\2\u0e89\u01b3\3\2\2\2\u0e8a\u0ea5\7\u028d\2\2\u0e8b\u0e8c"+
		"\t*\2\2\u0e8c\u0e8e\5\u01b8\u00dd\2\u0e8d\u0e8f\t+\2\2\u0e8e\u0e8d\3\2"+
		"\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f\u0ea6\3\2\2\2\u0e90\u0e91\7\u00a1\2\2\u0e91"+
		"\u0e97\5\u01b8\u00dd\2\u0e92\u0e95\7\u0238\2\2\u0e93\u0e94\7\u00ca\2\2"+
		"\u0e94\u0e96\7\u0156\2\2\u0e95\u0e93\3\2\2\2\u0e95\u0e96\3\2\2\2\u0e96"+
		"\u0e98\3\2\2\2\u0e97\u0e92\3\2\2\2\u0e97\u0e98\3\2\2\2\u0e98\u0ea6\3\2"+
		"\2\2\u0e99\u0e9a\7\u01a3\2\2\u0e9a\u0ea6\5\u01b8\u00dd\2\u0e9b\u0e9c\7"+
		"O\2\2\u0e9c\u0e9f\5\u01b8\u00dd\2\u0e9d\u0e9e\7\u0182\2\2\u0e9e\u0ea0"+
		"\7\u0199\2\2\u0e9f\u0e9d\3\2\2\2\u0e9f\u0ea0\3\2\2\2\u0ea0\u0ea6\3\2\2"+
		"\2\u0ea1\u0ea2\7\u01e2\2\2\u0ea2\u0ea6\5\u01b8\u00dd\2\u0ea3\u0ea4\7\u01b9"+
		"\2\2\u0ea4\u0ea6\5\u01b6\u00dc\2\u0ea5\u0e8b\3\2\2\2\u0ea5\u0e90\3\2\2"+
		"\2\u0ea5\u0e99\3\2\2\2\u0ea5\u0e9b\3\2\2\2\u0ea5\u0ea1\3\2\2\2\u0ea5\u0ea3"+
		"\3\2\2\2\u0ea6\u01b5\3\2\2\2\u0ea7\u0eaa\6\u00dcD\2\u0ea8\u0ea9\7`\2\2"+
		"\u0ea9\u0eab\7\u028e\2\2\u0eaa\u0ea8\3\2\2\2\u0eaa\u0eab\3\2\2\2\u0eab"+
		"\u0eae\3\2\2\2\u0eac\u0eae\3\2\2\2\u0ead\u0ea7\3\2\2\2\u0ead\u0eac\3\2"+
		"\2\2\u0eae\u01b7\3\2\2\2\u0eaf\u0eb6\5\u0486\u0244\2\u0eb0\u0eb1\7\u0307"+
		"\2\2\u0eb1\u0eb4\5\u0486\u0244\2\u0eb2\u0eb3\7\u0307\2\2\u0eb3\u0eb5\5"+
		"\u0476\u023c\2\u0eb4\u0eb2\3\2\2\2\u0eb4\u0eb5\3\2\2\2\u0eb5\u0eb7\3\2"+
		"\2\2\u0eb6\u0eb0\3\2\2\2\u0eb6\u0eb7\3\2\2\2\u0eb7\u01b9\3\2\2\2\u0eb8"+
		"\u0eb9\7\u01ae\2\2\u0eb9\u0eba\t,\2\2\u0eba\u0ebf\7\u0123\2\2\u0ebb\u0ebc"+
		"\7\u0250\2\2\u0ebc\u0ec0\5\u048a\u0246\2\u0ebd\u0ebe\7\36\2\2\u0ebe\u0ec0"+
		"\5\u02a6\u0154\2\u0ebf\u0ebb\3\2\2\2\u0ebf\u0ebd\3\2\2\2\u0ec0\u0eda\3"+
		"\2\2\2\u0ec1\u0eda\5\u01c2\u00e2\2\u0ec2\u0ec3\7\u01d6\2\2\u0ec3\u0ec8"+
		"\5\u01bc\u00df\2\u0ec4\u0ec5\7\u0307\2\2\u0ec5\u0ec7\5\u01bc\u00df\2\u0ec6"+
		"\u0ec4\3\2\2\2\u0ec7\u0eca\3\2\2\2\u0ec8\u0ec6\3\2\2\2\u0ec8\u0ec9\3\2"+
		"\2\2\u0ec9\u0eda\3\2\2\2\u0eca\u0ec8\3\2\2\2\u0ecb\u0ecc\6\u00deE\2\u0ecc"+
		"\u0ecd\7\u01d6\2\2\u0ecd\u0ed1\7\u0294\2\2\u0ece\u0ecf\5\u03d4\u01eb\2"+
		"\u0ecf\u0ed0\5\u046a\u0236\2\u0ed0\u0ed2\3\2\2\2\u0ed1\u0ece\3\2\2\2\u0ed1"+
		"\u0ed2\3\2\2\2\u0ed2\u0eda\3\2\2\2\u0ed3\u0eda\5\u01e0\u00f1\2\u0ed4\u0ed5"+
		"\6\u00deF\2\u0ed5\u0eda\5\u01d2\u00ea\2\u0ed6\u0eda\5\u01c0\u00e1\2\u0ed7"+
		"\u0ed8\6\u00deG\2\u0ed8\u0eda\5\u01ea\u00f6\2\u0ed9\u0eb8\3\2\2\2\u0ed9"+
		"\u0ec1\3\2\2\2\u0ed9\u0ec2\3\2\2\2\u0ed9\u0ecb\3\2\2\2\u0ed9\u0ed3\3\2"+
		"\2\2\u0ed9\u0ed4\3\2\2\2\u0ed9\u0ed6\3\2\2\2\u0ed9\u0ed7\3\2\2\2\u0eda"+
		"\u01bb\3\2\2\2\u0edb\u0edd\7\u013e\2\2\u0edc\u0ede\5\u01be\u00e0\2\u0edd"+
		"\u0edc\3\2\2\2\u0edd\u0ede\3\2\2\2\u0ede\u0eea\3\2\2\2\u0edf\u0ee0\6\u00df"+
		"H\2\u0ee0\u0ee1\7\u01b0\2\2\u0ee1\u0eea\7\61\2\2\u0ee2\u0ee4\7\u0204\2"+
		"\2\u0ee3\u0ee5\7\f\2\2\u0ee4\u0ee3\3\2\2\2\u0ee4\u0ee5\3\2\2\2\u0ee5\u0ee7"+
		"\3\2\2\2\u0ee6\u0ee8\5\u0310\u0189\2\u0ee7\u0ee6\3\2\2\2\u0ee7\u0ee8\3"+
		"\2\2\2\u0ee8\u0eea\3\2\2\2\u0ee9\u0edb\3\2\2\2\u0ee9\u0edf\3\2\2\2\u0ee9"+
		"\u0ee2\3\2\2\2\u0eea\u01bd\3\2\2\2\u0eeb\u0eec\6\u00e0I\2\u0eec\u0ef1"+
		"\7\u0250\2\2\u0eed\u0eee\6\u00e0J\2\u0eee\u0ef2\5\u0478\u023d\2\u0eef"+
		"\u0ef0\6\u00e0K\2\u0ef0\u0ef2\5\u047c\u023f\2\u0ef1\u0eed\3\2\2\2\u0ef1"+
		"\u0eef\3\2\2\2\u0ef2\u01bf\3\2\2\2\u0ef3\u0ef7\7\u011b\2\2\u0ef4\u0ef8"+
		"\7r\2\2\u0ef5\u0ef6\7\u0240\2\2\u0ef6\u0ef8\5\u0450\u0229\2\u0ef7\u0ef4"+
		"\3\2\2\2\u0ef7\u0ef5\3\2\2\2\u0ef8\u0ef9\3\2\2\2\u0ef9\u0efa\7\u00cd\2"+
		"\2\u0efa\u0efb\7\u013e\2\2\u0efb\u01c1\3\2\2\2\u0efc\u0efd\79\2\2\u0efd"+
		"\u0efe\7\u013e\2\2\u0efe\u0eff\7\u0250\2\2\u0eff\u0f01\5\u01c4\u00e3\2"+
		"\u0f00";
	private static final String _serializedATNSegment2 =
		"\u0f02\5\u0310\u0189\2\u0f01\u0f00\3\2\2\2\u0f01\u0f02\3\2\2\2\u0f02\u01c3"+
		"\3\2\2\2\u0f03\u0f08\5\u01c6\u00e4\2\u0f04\u0f05\7\u0307\2\2\u0f05\u0f07"+
		"\5\u01c6\u00e4\2\u0f06\u0f04\3\2\2\2\u0f07\u0f0a\3\2\2\2\u0f08\u0f06\3"+
		"\2\2\2\u0f08\u0f09\3\2\2\2\u0f09\u01c5\3\2\2\2\u0f0a\u0f08\3\2\2\2\u0f0b"+
		"\u0f0c\7\u012e\2\2\u0f0c\u0f0d\7\u02f0\2\2\u0f0d\u0f67\5\u048c\u0247\2"+
		"\u0f0e\u0f0f\7\u02db\2\2\u0f0f\u0f10\7\u02f0\2\2\u0f10\u0f67\5\u048c\u0247"+
		"\2\u0f11\u0f12\7\u012b\2\2\u0f12\u0f13\7\u02f0\2\2\u0f13\u0f67\5\u048c"+
		"\u0247\2\u0f14\u0f15\7\u0140\2\2\u0f15\u0f16\7\u02f0\2\2\u0f16\u0f67\5"+
		"\u048c\u0247\2\u0f17\u0f18\7\u0131\2\2\u0f18\u0f19\7\u02f0\2\2\u0f19\u0f67"+
		"\5\u048c\u0247\2\u0f1a\u0f1b\7\u0132\2\2\u0f1b\u0f1c\7\u02f0\2\2\u0f1c"+
		"\u0f67\5\u0476\u023c\2\u0f1d\u0f1e\7\u012c\2\2\u0f1e\u0f1f\7\u02f0\2\2"+
		"\u0f1f\u0f67\5\u0476\u023c\2\u0f20\u0f21\7\u0133\2\2\u0f21\u0f22\7\u02f0"+
		"\2\2\u0f22\u0f67\5\u0476\u023c\2\u0f23\u0f24\7\u012d\2\2\u0f24\u0f25\7"+
		"\u02f0\2\2\u0f25\u0f67\5\u0476\u023c\2\u0f26\u0f27\7\u013c\2\2\u0f27\u0f28"+
		"\7\u02f0\2\2\u0f28\u0f67\5\u0476\u023c\2\u0f29\u0f2a\7\u0136\2\2\u0f2a"+
		"\u0f2b\7\u02f0\2\2\u0f2b\u0f67\5\u048c\u0247\2\u0f2c\u0f2d\7\u0135\2\2"+
		"\u0f2d\u0f2e\7\u02f0\2\2\u0f2e\u0f67\5\u048c\u0247\2\u0f2f\u0f30\7\u013f"+
		"\2\2\u0f30\u0f31\7\u02f0\2\2\u0f31\u0f67\5\u048c\u0247\2\u0f32\u0f33\7"+
		"\u0137\2\2\u0f33\u0f34\7\u02f0\2\2\u0f34\u0f67\5\u048c\u0247\2\u0f35\u0f36"+
		"\7\u02e4\2\2\u0f36\u0f37\7\u02f0\2\2\u0f37\u0f67\5\u01cc\u00e7\2\u0f38"+
		"\u0f39\7\u0138\2\2\u0f39\u0f3a\7\u02f0\2\2\u0f3a\u0f67\5\u048c\u0247\2"+
		"\u0f3b\u0f3c\7\u013b\2\2\u0f3c\u0f3d\7\u02f0\2\2\u0f3d\u0f67\5\u048c\u0247"+
		"\2\u0f3e\u0f3f\7\u013d\2\2\u0f3f\u0f40\7\u02f0\2\2\u0f40\u0f67\5\u0476"+
		"\u023c\2\u0f41\u0f42\7\u0139\2\2\u0f42\u0f43\7\u02f0\2\2\u0f43\u0f67\5"+
		"\u048a\u0246\2\u0f44\u0f45\7\u013a\2\2\u0f45\u0f46\7\u02f0\2\2\u0f46\u0f67"+
		"\5\u048c\u0247\2\u0f47\u0f48\7\u02ca\2\2\u0f48\u0f49\7\u02f0\2\2\u0f49"+
		"\u0f67\5\u048c\u0247\2\u0f4a\u0f4b\7\u02cb\2\2\u0f4b\u0f4c\7\u02f0\2\2"+
		"\u0f4c\u0f67\5\u0476\u023c\2\u0f4d\u0f4e\7\u0141\2\2\u0f4e\u0f4f\7\u02f0"+
		"\2\2\u0f4f\u0f67\5\u0476\u023c\2\u0f50\u0f51\7\u00eb\2\2\u0f51\u0f52\7"+
		"\u02f0\2\2\u0f52\u0f67\5\u01d0\u00e9\2\u0f53\u0f54\7\u02e1\2\2\u0f54\u0f55"+
		"\7\u02f0\2\2\u0f55\u0f67\5\u0484\u0243\2\u0f56\u0f57\7\u02e2\2\2\u0f57"+
		"\u0f58\7\u02f0\2\2\u0f58\u0f67\5\u0476\u023c\2\u0f59\u0f5a\7\u012a\2\2"+
		"\u0f5a\u0f5b\7\u02f0\2\2\u0f5b\u0f67\5\u0476\u023c\2\u0f5c\u0f5d\7\u02e3"+
		"\2\2\u0f5d\u0f5e\7\u02f0\2\2\u0f5e\u0f67\5\u01c8\u00e5\2\u0f5f\u0f60\7"+
		"\u02e5\2\2\u0f60\u0f61\7\u02f0\2\2\u0f61\u0f67\5\u0476\u023c\2\u0f62\u0f63"+
		"\7\u02e8\2\2\u0f63\u0f64\7\u02f0\2\2\u0f64\u0f67\5\u01ca\u00e6\2\u0f65"+
		"\u0f67\5\u01ce\u00e8\2\u0f66\u0f0b\3\2\2\2\u0f66\u0f0e\3\2\2\2\u0f66\u0f11"+
		"\3\2\2\2\u0f66\u0f14\3\2\2\2\u0f66\u0f17\3\2\2\2\u0f66\u0f1a\3\2\2\2\u0f66"+
		"\u0f1d\3\2\2\2\u0f66\u0f20\3\2\2\2\u0f66\u0f23\3\2\2\2\u0f66\u0f26\3\2"+
		"\2\2\u0f66\u0f29\3\2\2\2\u0f66\u0f2c\3\2\2\2\u0f66\u0f2f\3\2\2\2\u0f66"+
		"\u0f32\3\2\2\2\u0f66\u0f35\3\2\2\2\u0f66\u0f38\3\2\2\2\u0f66\u0f3b\3\2"+
		"\2\2\u0f66\u0f3e\3\2\2\2\u0f66\u0f41\3\2\2\2\u0f66\u0f44\3\2\2\2\u0f66"+
		"\u0f47\3\2\2\2\u0f66\u0f4a\3\2\2\2\u0f66\u0f4d\3\2\2\2\u0f66\u0f50\3\2"+
		"\2\2\u0f66\u0f53\3\2\2\2\u0f66\u0f56\3\2\2\2\u0f66\u0f59\3\2\2\2\u0f66"+
		"\u0f5c\3\2\2\2\u0f66\u0f5f\3\2\2\2\u0f66\u0f62\3\2\2\2\u0f66\u0f65\3\2"+
		"\2\2\u0f67\u01c7\3\2\2\2\u0f68\u0f6b\5\u0402\u0202\2\u0f69\u0f6b\7\u017a"+
		"\2\2\u0f6a\u0f68\3\2\2\2\u0f6a\u0f69\3\2\2\2\u0f6b\u01c9\3\2\2\2\u0f6c"+
		"\u0f6d\t-\2\2\u0f6d\u01cb\3\2\2\2\u0f6e\u0f71\5\u048c\u0247\2\u0f6f\u0f71"+
		"\7\u017a\2\2\u0f70\u0f6e\3\2\2\2\u0f70\u0f6f\3\2\2\2\u0f71\u01cd\3\2\2"+
		"\2\u0f72\u0f73\7\u012f\2\2\u0f73\u0f74\7\u02f0\2\2\u0f74\u0f7f\5\u048c"+
		"\u0247\2\u0f75\u0f76\7\u0130\2\2\u0f76\u0f77\7\u02f0\2\2\u0f77\u0f7f\5"+
		"\u047a\u023e\2\u0f78\u0f79\7\u01c1\2\2\u0f79\u0f7a\7\u02f0\2\2\u0f7a\u0f7f"+
		"\5\u048c\u0247\2\u0f7b\u0f7c\7\u01c2\2\2\u0f7c\u0f7d\7\u02f0\2\2\u0f7d"+
		"\u0f7f\5\u0476\u023c\2\u0f7e\u0f72\3\2\2\2\u0f7e\u0f75\3\2\2\2\u0f7e\u0f78"+
		"\3\2\2\2\u0f7e\u0f7b\3\2\2\2\u0f7f\u01cf\3\2\2\2\u0f80\u0f89\7\u030a\2"+
		"\2\u0f81\u0f86\5\u0476\u023c\2\u0f82\u0f83\7\u0307\2\2\u0f83\u0f85\5\u0476"+
		"\u023c\2\u0f84\u0f82\3\2\2\2\u0f85\u0f88\3\2\2\2\u0f86\u0f84\3\2\2\2\u0f86"+
		"\u0f87\3\2\2\2\u0f87\u0f8a\3\2\2\2\u0f88\u0f86\3\2\2\2\u0f89\u0f81\3\2"+
		"\2\2\u0f89\u0f8a\3\2\2\2\u0f8a\u0f8b\3\2\2\2\u0f8b\u0f8c\7\u030b\2\2\u0f8c"+
		"\u01d1\3\2\2\2\u0f8d\u0f8e\79\2\2\u0f8e\u0f8f\7\u01cd\2\2\u0f8f\u0f90"+
		"\7\u00c0\2\2\u0f90\u0f95\5\u01d4\u00eb\2\u0f91\u0f92\7\u0307\2\2\u0f92"+
		"\u0f94\5\u01d4\u00eb\2\u0f93\u0f91\3\2\2\2\u0f94\u0f97\3\2\2\2\u0f95\u0f93"+
		"\3\2\2\2\u0f95\u0f96\3\2\2\2\u0f96\u0f9a\3\2\2\2\u0f97\u0f95\3\2\2\2\u0f98"+
		"\u0f99\6\u00eaL\2\u0f99\u0f9b\5\u0310\u0189\2\u0f9a\u0f98\3\2\2\2\u0f9a"+
		"\u0f9b\3\2\2\2\u0f9b\u01d3\3\2\2\2\u0f9c\u0f9d\7\u01ce\2\2\u0f9d\u0f9e"+
		"\7\u02f0\2\2\u0f9e\u0fa0\7\u030a\2\2\u0f9f\u0fa1\5\u01d6\u00ec\2\u0fa0"+
		"\u0f9f\3\2\2\2\u0fa0\u0fa1\3\2\2\2\u0fa1\u0fa2\3\2\2\2\u0fa2\u0fce\7\u030b"+
		"\2\2\u0fa3\u0fa4\7\u01cf\2\2\u0fa4\u0fa5\7\u02f0\2\2\u0fa5\u0fa7\7\u030a"+
		"\2\2\u0fa6\u0fa8\5\u01d6\u00ec\2\u0fa7\u0fa6\3\2\2\2\u0fa7\u0fa8\3\2\2"+
		"\2\u0fa8\u0fa9\3\2\2\2\u0fa9\u0fce\7\u030b\2\2\u0faa\u0fab\7\u01d0\2\2"+
		"\u0fab\u0fac\7\u02f0\2\2\u0fac\u0fae\7\u030a\2\2\u0fad\u0faf\5\u01d8\u00ed"+
		"\2\u0fae\u0fad\3\2\2\2\u0fae\u0faf\3\2\2\2\u0faf\u0fb0\3\2\2\2\u0fb0\u0fce"+
		"\7\u030b\2\2\u0fb1\u0fb2\7\u01d1\2\2\u0fb2\u0fb3\7\u02f0\2\2\u0fb3\u0fb5"+
		"\7\u030a\2\2\u0fb4\u0fb6\5\u01d8\u00ed\2\u0fb5\u0fb4\3\2\2\2\u0fb5\u0fb6"+
		"\3\2\2\2\u0fb6\u0fb7\3\2\2\2\u0fb7\u0fce\7\u030b\2\2\u0fb8\u0fb9\7\u01d2"+
		"\2\2\u0fb9\u0fba\7\u02f0\2\2\u0fba\u0fbc\7\u030a\2\2\u0fbb\u0fbd\5\u01da"+
		"\u00ee\2\u0fbc\u0fbb\3\2\2\2\u0fbc\u0fbd\3\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe"+
		"\u0fce\7\u030b\2\2\u0fbf\u0fc0\7\u01d3\2\2\u0fc0\u0fc1\7\u02f0\2\2\u0fc1"+
		"\u0fc3\7\u030a\2\2\u0fc2\u0fc4\5\u01da\u00ee\2\u0fc3\u0fc2\3\2\2\2\u0fc3"+
		"\u0fc4\3\2\2\2\u0fc4\u0fc5\3\2\2\2\u0fc5\u0fce\7\u030b\2\2\u0fc6\u0fc7"+
		"\7\u01d4\2\2\u0fc7\u0fc8\7\u02f0\2\2\u0fc8\u0fca\7\u030a\2\2\u0fc9\u0fcb"+
		"\5\u01de\u00f0\2\u0fca\u0fc9\3\2\2\2\u0fca\u0fcb\3\2\2\2\u0fcb\u0fcc\3"+
		"\2\2\2\u0fcc\u0fce\7\u030b\2\2\u0fcd\u0f9c\3\2\2\2\u0fcd\u0fa3\3\2\2\2"+
		"\u0fcd\u0faa\3\2\2\2\u0fcd\u0fb1\3\2\2\2\u0fcd\u0fb8\3\2\2\2\u0fcd\u0fbf"+
		"\3\2\2\2\u0fcd\u0fc6\3\2\2\2\u0fce\u01d5\3\2\2\2\u0fcf\u0fd4\5\u0424\u0213"+
		"\2\u0fd0\u0fd1\7\u0307\2\2\u0fd1\u0fd3\5\u0424\u0213\2\u0fd2\u0fd0\3\2"+
		"\2\2\u0fd3\u0fd6\3\2\2\2\u0fd4\u0fd2\3\2\2\2\u0fd4\u0fd5\3\2\2\2\u0fd5"+
		"\u01d7\3\2\2\2\u0fd6\u0fd4\3\2\2\2\u0fd7\u0fdc\5\u044c\u0227\2\u0fd8\u0fd9"+
		"\7\u0307\2\2\u0fd9\u0fdb\5\u044c\u0227\2\u0fda\u0fd8\3\2\2\2\u0fdb\u0fde"+
		"\3\2\2\2\u0fdc\u0fda\3\2\2\2\u0fdc\u0fdd\3\2\2\2\u0fdd\u01d9\3\2\2\2\u0fde"+
		"\u0fdc\3\2\2\2\u0fdf\u0fe4\5\u01dc\u00ef\2\u0fe0\u0fe1\7\u0307\2\2\u0fe1"+
		"\u0fe3\5\u01dc\u00ef\2\u0fe2\u0fe0\3\2\2\2\u0fe3\u0fe6\3\2\2\2\u0fe4\u0fe2"+
		"\3\2\2\2\u0fe4\u0fe5\3\2\2\2\u0fe5\u01db\3\2\2\2\u0fe6\u0fe4\3\2\2\2\u0fe7"+
		"\u0fe8\5\u048c\u0247\2\u0fe8\u01dd\3\2\2\2\u0fe9\u0fee\5\u03e0\u01f1\2"+
		"\u0fea\u0feb\7\u0307\2\2\u0feb\u0fed\5\u03e0\u01f1\2\u0fec\u0fea\3\2\2"+
		"\2\u0fed\u0ff0\3\2\2\2\u0fee\u0fec\3\2\2\2\u0fee\u0fef\3\2\2\2\u0fef\u01df"+
		"\3\2\2\2\u0ff0\u0fee\3\2\2\2\u0ff1\u0ff2\7\u0221\2\2\u0ff2\u0ff4\7\u0204"+
		"\2\2\u0ff3\u0ff5\5\u01e6\u00f4\2\u0ff4\u0ff3\3\2\2\2\u0ff4\u0ff5\3\2\2"+
		"\2\u0ff5\u0ff8\3\2\2\2\u0ff6\u0ff7\7\u0267\2\2\u0ff7\u0ff9\5\u01e2\u00f2"+
		"\2\u0ff8\u0ff6\3\2\2\2\u0ff8\u0ff9\3\2\2\2\u0ff9\u0ffa\3\2\2\2\u0ffa\u0ffc"+
		"\5\u01e4\u00f3\2\u0ffb\u0ffd\5\u0310\u0189\2\u0ffc\u0ffb\3\2\2\2\u0ffc"+
		"\u0ffd\3\2\2\2\u0ffd\u1007\3\2\2\2\u0ffe\u0fff\7\u022a\2\2\u0fff\u1001"+
		"\7\u0204\2\2\u1000\u1002\5\u01e6\u00f4\2\u1001\u1000\3\2\2\2\u1001\u1002"+
		"\3\2\2\2\u1002\u1004\3\2\2\2\u1003\u1005\5\u0310\u0189\2\u1004\u1003\3"+
		"\2\2\2\u1004\u1005\3\2\2\2\u1005\u1007\3\2\2\2\u1006\u0ff1\3\2\2\2\u1006"+
		"\u0ffe\3\2\2\2\u1007\u01e1\3\2\2\2\u1008\u1010\5\u01ce\u00e8\2\u1009\u100a"+
		"\6\u00f2M\2\u100a\u100b\t.\2\2\u100b\u100c\7\u02f0\2\2\u100c\u1010\5\u0486"+
		"\u0244\2\u100d\u100e\6\u00f2N\2\u100e\u1010\7\u0213\2\2\u100f\u1008\3"+
		"\2\2\2\u100f\u1009\3\2\2\2\u100f\u100d\3\2\2\2\u1010\u1015\3\2\2\2\u1011"+
		"\u1012\7\u0307\2\2\u1012\u1014\5\u01ce\u00e8\2\u1013\u1011\3\2\2\2\u1014"+
		"\u1017\3\2\2\2\u1015\u1013\3\2\2\2\u1015\u1016\3\2\2\2\u1016\u01e3\3\2"+
		"\2\2\u1017\u1015\3\2\2\2\u1018\u101c\6\u00f3O\2\u1019\u101a\7\u026c\2"+
		"\2\u101a\u101b\7\u02f0\2\2\u101b\u101d\5\u0486\u0244\2\u101c\u1019\3\2"+
		"\2\2\u101c\u101d\3\2\2\2\u101d\u1021\3\2\2\2\u101e\u101f\7\u0198\2\2\u101f"+
		"\u1020\7\u02f0\2\2\u1020\u1022\5\u0486\u0244\2\u1021\u101e\3\2\2\2\u1021"+
		"\u1022\3\2\2\2\u1022\u1026\3\2\2\2\u1023\u1024\7\u0083\2\2\u1024\u1025"+
		"\7\u02f0\2\2\u1025\u1027\5\u0486\u0244\2\u1026\u1023\3\2\2\2\u1026\u1027"+
		"\3\2\2\2\u1027\u102b\3\2\2\2\u1028\u1029\7\u019b\2\2\u1029\u102a\7\u02f0"+
		"\2\2\u102a\u102c\5\u0486\u0244\2\u102b\u1028\3\2\2\2\u102b\u102c\3\2\2"+
		"\2\u102c\u102f\3\2\2\2\u102d\u102f\3\2\2\2\u102e\u1018\3\2\2\2\u102e\u102d"+
		"\3\2\2\2\u102f\u01e5\3\2\2\2\u1030\u1035\5\u01e8\u00f5\2\u1031\u1032\7"+
		"\u0307\2\2\u1032\u1034\5\u01e8\u00f5\2\u1033\u1031\3\2\2\2\u1034\u1037"+
		"\3\2\2\2\u1035\u1033\3\2\2\2\u1035\u1036\3\2\2\2\u1036\u01e7\3\2\2\2\u1037"+
		"\u1035\3\2\2\2\u1038\u1039\t/\2\2\u1039\u01e9\3\2\2\2\u103a\u103b\t\60"+
		"\2\2\u103b\u103c\7\u00d4\2\2\u103c\u01eb\3\2\2\2\u103d\u103e\7\u01a3\2"+
		"\2\u103e\u103f\5\u046a\u0236\2\u103f\u1042\7\u00cd\2\2\u1040\u1043\5\u048a"+
		"\u0246\2\u1041\u1043\5\u02e8\u0175\2\u1042\u1040\3\2\2\2\u1042\u1041\3"+
		"\2\2\2\u1043\u1049\3\2\2\2\u1044\u1049\5\u01ee\u00f8\2\u1045\u1046\t\61"+
		"\2\2\u1046\u1047\7\u01a3\2\2\u1047\u1049\5\u046a\u0236\2\u1048\u103d\3"+
		"\2\2\2\u1048\u1044\3\2\2\2\u1048\u1045\3\2\2\2\u1049\u01ed\3\2\2\2\u104a"+
		"\u104b\7\u00af\2\2\u104b\u104e\5\u046a\u0236\2\u104c\u104d\7\u026f\2\2"+
		"\u104d\u104f\5\u01f0\u00f9\2\u104e\u104c\3\2\2\2\u104e\u104f\3\2\2\2\u104f"+
		"\u01ef\3\2\2\2\u1050\u1055\5\u02e8\u0175\2\u1051\u1052\7\u0307\2\2\u1052"+
		"\u1054\5\u02e8\u0175\2\u1053\u1051\3\2\2\2\u1054\u1057\3\2\2\2\u1055\u1053"+
		"\3\2\2\2\u1055\u1056\3\2\2\2\u1056\u01f1\3\2\2\2\u1057\u1055\3\2\2\2\u1058"+
		"\u1071\7\u02a7\2\2\u1059\u105a\7\u011e\2\2\u105a\u105b\7r\2\2\u105b\u105d"+
		"\7\u008d\2\2\u105c\u105e\5\u04a8\u0255\2\u105d\u105c\3\2\2\2\u105d\u105e"+
		"\3\2\2\2\u105e\u105f\3\2\2\2\u105f\u1072\5\u0484\u0243\2\u1060\u1063\7"+
		"\u02a6\2\2\u1061\u1062\7\u00ca\2\2\u1062\u1064\7\u01cd\2\2\u1063\u1061"+
		"\3\2\2\2\u1063\u1064\3\2\2\2\u1064\u1072\3\2\2\2\u1065\u1066\6\u00faP"+
		"\2\u1066\u1067\7\u00f6\2\2\u1067\u1068\7\u00cd\2\2\u1068\u1069\5\u0404"+
		"\u0203\2\u1069\u106a\7\u0309\2\2\u106a\u106b\5\u0476\u023c\2\u106b\u106c"+
		"\7\u00e8\2\2\u106c\u106d\7/\2\2\u106d\u106f\5\u0484\u0243\2\u106e\u1070"+
		"\5\u01f4\u00fb\2\u106f\u106e\3\2\2\2\u106f\u1070\3\2\2\2\u1070\u1072\3"+
		"\2\2\2\u1071\u1059\3\2\2\2\u1071\u1060\3\2\2\2\u1071\u1065\3\2\2\2\u1072"+
		"\u01f3\3\2\2\2\u1073\u107e\5\u01f6\u00fc\2\u1074\u1075\7r\2\2\u1075\u1077"+
		"\7\u008d\2\2\u1076\u1078\5\u04a8\u0255\2\u1077\u1076\3\2\2\2\u1077\u1078"+
		"\3\2\2\2\u1078\u1079\3\2\2\2\u1079\u107b\5\u0484\u0243\2\u107a\u107c\5"+
		"\u01f6\u00fc\2\u107b\u107a\3\2\2\2\u107b\u107c\3\2\2\2\u107c\u107e\3\2"+
		"\2\2\u107d\u1073\3\2\2\2\u107d\u1074\3\2\2\2\u107e\u01f5\3\2\2\2\u107f"+
		"\u1081\7\u01d5\2\2\u1080\u1082\7\u0177\2\2\u1081\u1080\3\2\2\2\u1081\u1082"+
		"\3\2\2\2\u1082\u1083\3\2\2\2\u1083\u1084\7\u021d\2\2\u1084\u01f7\3\2\2"+
		"\2\u1085\u1086\6\u00fdQ\2\u1086\u108f\5\u01fa\u00fe\2\u1087\u108f\5\u0200"+
		"\u0101\2\u1088\u108f\5\u020c\u0107\2\u1089\u108f\5\u020e\u0108\2\u108a"+
		"\u108f\5\u021c\u010f\2\u108b\u108f\5\u021e\u0110\2\u108c\u108d\6\u00fd"+
		"R\2\u108d\u108f\5\u0230\u0119\2\u108e\u1085\3\2\2\2\u108e\u1087\3\2\2"+
		"\2\u108e\u1088\3\2\2\2\u108e\u1089\3\2\2\2\u108e\u108a\3\2\2\2\u108e\u108b"+
		"\3\2\2\2\u108e\u108c\3\2\2\2\u108f\u01f9\3\2\2\2\u1090\u1091\7\r\2\2\u1091"+
		"\u1094\7\u026c\2\2\u1092\u1093\6\u00feS\2\u1093\u1095\5\u03d4\u01eb\2"+
		"\u1094\u1092\3\2\2\2\u1094\u1095\3\2\2\2\u1095\u1096\3\2\2\2\u1096\u1097"+
		"\5\u01fc\u00ff\2\u1097\u01fb\3\2\2\2\u1098\u1099\6\u00ffT\2\u1099\u109d"+
		"\5\u03f4\u01fb\2\u109a\u109b\6\u00ffU\2\u109b\u109d\5\u03f6\u01fc\2\u109c"+
		"\u1098\3\2\2\2\u109c\u109a\3\2\2\2\u109d\u109e\3\2\2\2\u109e\u109f\5\u0202"+
		"\u0102\2\u109f\u10cf\3\2\2\2\u10a0\u10a1\6\u00ffV\2\u10a1\u10a2\5\u0404"+
		"\u0203\2\u10a2\u10a3\7\u00e8\2\2\u10a3\u10a4\7/\2\2\u10a4\u10a7\5\u0486"+
		"\u0244\2\u10a5\u10a6\6\u00ffW\2\u10a6\u10a8\5\u0400\u0201\2\u10a7\u10a5"+
		"\3\2\2\2\u10a7\u10a8\3\2\2\2\u10a8\u10ab\3\2\2\2\u10a9\u10aa\6\u00ffX"+
		"\2\u10aa\u10ac\5\u03fc\u01ff\2\u10ab\u10a9\3\2\2\2\u10ab\u10ac\3\2\2\2"+
		"\u10ac\u10cf\3\2\2\2\u10ad\u10ae\6\u00ffY\2\u10ae\u10af\5\u0404\u0203"+
		"\2\u10af\u10b0\5\u03fe\u0200\2\u10b0\u10cf\3\2\2\2\u10b1\u10b2\6\u00ff"+
		"Z\2\u10b2\u10b3\5\u0404\u0203\2\u10b3\u10b4\7\u0082\2\2\u10b4\u10b8\7"+
		"\u0295\2\2\u10b5\u10b9\7\f\2\2\u10b6\u10b9\7\u0173\2\2\u10b7\u10b9\5\u0232"+
		"\u011a\2\u10b8\u10b5\3\2\2\2\u10b8\u10b6\3\2\2\2\u10b8\u10b7\3\2\2\2\u10b9"+
		"\u10cf\3\2\2\2\u10ba\u10bb\6\u00ff[\2\u10bb\u10bc\5\u0404\u0203\2\u10bc"+
		"\u10bf\7\u00e8\2\2\u10bd\u10be\7\u0287\2\2\u10be\u10c0\5\u049e\u0250\2"+
		"\u10bf\u10bd\3\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u10c1\3\2\2\2\u10c1\u10c2"+
		"\7/\2\2\u10c2\u10c3\7\u02e0\2\2\u10c3\u10c5\7\u0198\2\2\u10c4\u10c6\5"+
		"\u03fc\u01ff\2\u10c5\u10c4\3\2\2\2\u10c5\u10c6\3\2\2\2\u10c6\u10cf\3\2"+
		"\2\2\u10c7\u10c8\7\u02e7\2\2\u10c8\u10cf\5\u0478\u023d\2\u10c9\u10cc\7"+
		"\u02e6\2\2\u10ca\u10cd\5\u0478\u023d\2\u10cb\u10cd\7\u02bc\2\2\u10cc\u10ca"+
		"\3\2\2\2\u10cc\u10cb\3\2\2\2\u10cd\u10cf\3\2\2\2\u10ce\u109c\3\2\2\2\u10ce"+
		"\u10a0\3\2\2\2\u10ce\u10ad\3\2\2\2\u10ce\u10b1\3\2\2\2\u10ce\u10ba\3\2"+
		"\2\2\u10ce\u10c7\3\2\2\2\u10ce\u10c9\3\2\2\2\u10cf\u01fd\3\2\2\2\u10d0"+
		"\u10d1\7\u026c\2\2\u10d1\u10d2\5\u04a6\u0254\2\u10d2\u01ff\3\2\2\2\u10d3"+
		"\u10d4\7c\2\2\u10d4\u10d8\7\u026c\2\2\u10d5\u10d6\6\u0101\\\2\u10d6\u10d9"+
		"\5\u03d6\u01ec\2\u10d7\u10d9\3\2\2\2\u10d8\u10d5\3\2\2\2\u10d8\u10d7\3"+
		"\2\2\2\u10d9\u10da\3\2\2\2\u10da\u10db\5\u03f4\u01fb\2\u10db\u10dc\5\u0204"+
		"\u0103\2\u10dc\u10dd\5\u0202\u0102\2\u10dd\u0201\3\2\2\2\u10de\u10e0\6"+
		"\u0102]\2\u10df\u10e1\5\u0206\u0104\2\u10e0\u10df\3\2\2\2\u10e0\u10e1"+
		"\3\2\2\2\u10e1\u10e3\3\2\2\2\u10e2\u10e4\5\u0208\u0105\2\u10e3\u10e2\3"+
		"\2\2\2\u10e3\u10e4\3\2\2\2\u10e4\u10e8\3\2\2\2\u10e5\u10e7\5\u020a\u0106"+
		"\2\u10e6\u10e5\3\2\2\2\u10e7\u10ea\3\2\2\2\u10e8\u10e6\3\2\2\2\u10e8\u10e9"+
		"\3\2\2\2\u10e9\u10ed\3\2\2\2\u10ea\u10e8\3\2\2\2\u10eb\u10ed\3\2\2\2\u10ec"+
		"\u10de\3\2\2\2\u10ec\u10eb\3\2\2\2\u10ed\u0203\3\2\2\2\u10ee\u10f2\6\u0103"+
		"^\2\u10ef\u10f0\7\u0082\2\2\u10f0\u10f1\7\u0295\2\2\u10f1\u10f3\5\u0232"+
		"\u011a\2\u10f2\u10ef\3\2\2\2\u10f2\u10f3\3\2\2\2\u10f3\u10f6\3\2\2\2\u10f4"+
		"\u10f6\3\2\2\2\u10f5\u10ee\3\2\2\2\u10f5\u10f4\3\2\2\2\u10f6\u0205\3\2"+
		"\2\2\u10f7\u10fa\7\u01d5\2\2\u10f8\u10fb\5\u022a\u0116\2\u10f9\u10fb\t"+
		"\62\2\2\u10fa\u10f8\3\2\2\2\u10fa\u10f9\3\2\2\2\u10fb\u0207\3\2\2\2\u10fc"+
		"\u1105\7\u0287\2\2\u10fd\u10fe\7\u0144\2\2\u10fe\u1106\5\u0476\u023c\2"+
		"\u10ff\u1100\7\u0149\2\2\u1100\u1106\5\u0476\u023c\2\u1101\u1102\7\u0143"+
		"\2\2\u1102\u1106\5\u0476\u023c\2\u1103\u1104\7\u014a\2\2\u1104\u1106\5"+
		"\u0476\u023c\2\u1105\u10fd\3\2\2\2\u1105\u10ff\3\2\2\2\u1105\u1101\3\2"+
		"\2\2\u1105\u1103\3\2\2\2\u1106\u1107\3\2\2\2\u1107\u1105\3\2\2\2\u1107"+
		"\u1108\3\2\2\2\u1108\u0209\3\2\2\2\u1109\u110a\7\4\2\2\u110a\u112b\t\63"+
		"\2\2\u110b\u1128\7\u0198\2\2\u110c\u1113\7\u00b3\2\2\u110d\u110e\7\u00f9"+
		"\2\2\u110e\u110f\5\u0478\u023d\2\u110f\u1110\7|\2\2\u1110\u1114\3\2\2"+
		"\2\u1111\u1114\7\u016f\2\2\u1112\u1114\7\u0082\2\2\u1113\u110d\3\2\2\2"+
		"\u1113\u1111\3\2\2\2\u1113\u1112\3\2\2\2\u1113\u1114\3\2\2\2\u1114\u1129"+
		"\3\2\2\2\u1115\u1118\7\u02c3\2\2\u1116\u1119\5\u0478\u023d\2\u1117\u1119"+
		"\7\u0082\2\2\u1118\u1116\3\2\2\2\u1118\u1117\3\2\2\2\u1119\u1129\3\2\2"+
		"\2\u111a\u111b\7\u02c4\2\2\u111b\u1120\7\u00f9\2\2\u111c\u111d\5\u0478"+
		"\u023d\2\u111d\u111e\7|\2\2\u111e\u1121\3\2\2\2\u111f\u1121\7\u0082\2"+
		"\2\u1120\u111c\3\2\2\2\u1120\u111f\3\2\2\2\u1121\u1129\3\2\2\2\u1122\u1123"+
		"\6\u0106_\2\u1123\u1124\7\u01d5\2\2\u1124\u1126\7g\2\2\u1125\u1127\t\64"+
		"\2\2\u1126\u1125\3\2\2\2\u1126\u1127\3\2\2\2\u1127\u1129\3\2\2\2\u1128"+
		"\u110c\3\2\2\2\u1128\u1115\3\2\2\2\u1128\u111a\3\2\2\2\u1128\u1122\3\2"+
		"\2\2\u1129\u112b\3\2\2\2\u112a\u1109\3\2\2\2\u112a\u110b\3\2\2\2\u112b"+
		"\u020b\3\2\2\2\u112c\u112d\7\u0096\2\2\u112d\u1130\7\u026c\2\2\u112e\u112f"+
		"\6\u0107`\2\u112f\u1131\5\u03d4\u01eb\2\u1130\u112e\3\2\2\2\u1130\u1131"+
		"\3\2\2\2\u1131\u1132\3\2\2\2\u1132\u1133\5\u03f2\u01fa\2\u1133\u020d\3"+
		"\2\2\2\u1134\u115f\7\u00d9\2\2\u1135\u1136\6\u0108a\2\u1136\u1137\5\u0224"+
		"\u0113\2\u1137\u1138\7\u0250\2\2\u1138\u113c\5\u03f2\u01fa\2\u1139\u113a"+
		"\7\u0287\2\2\u113a\u113b\7\u0296\2\2\u113b\u113d\7\u0189\2\2\u113c\u1139"+
		"\3\2\2\2\u113c\u113d\3\2\2\2\u113d\u1160\3\2\2\2\u113e\u1144\5\u0224\u0113"+
		"\2\u113f\u1141\7\f\2\2\u1140\u1142\7\u01a7\2\2\u1141\u1140\3\2\2\2\u1141"+
		"\u1142\3\2\2\2\u1142\u1144\3\2\2\2\u1143\u113e\3\2\2\2\u1143\u113f\3\2"+
		"\2\2\u1144\u1145\3\2\2\2\u1145\u1147\7\u0181\2\2\u1146\u1148\5\u0222\u0112"+
		"\2\u1147\u1146\3\2\2\2\u1147\u1148\3\2\2\2\u1148\u1149\3\2\2\2\u1149\u114a"+
		"\5\u0228\u0115\2\u114a\u114b\7\u0250\2\2\u114b\u114d\5\u0210\u0109\2\u114c"+
		"\u114e\5\u021a\u010e\2\u114d\u114c\3\2\2\2\u114d\u114e\3\2\2\2\u114e\u1150"+
		"\3\2\2\2\u114f\u1151\5\u0212\u010a\2\u1150\u114f\3\2\2\2\u1150\u1151\3"+
		"\2\2\2\u1151\u1153\3\2\2\2\u1152\u1154\5\u0218\u010d\2\u1153\u1152\3\2"+
		"\2\2\u1153\u1154\3\2\2\2\u1154\u1160\3\2\2\2\u1155\u1156\7\u01ad\2\2\u1156"+
		"\u1157\7\u0181\2\2\u1157\u1158\5\u0404\u0203\2\u1158\u1159\7\u0250\2\2"+
		"\u1159\u115d\5\u0210\u0109\2\u115a\u115b\7\u0287\2\2\u115b\u115c\7\u00d9"+
		"\2\2\u115c\u115e\7\u0189\2\2\u115d\u115a\3\2\2\2\u115d\u115e\3\2\2\2\u115e"+
		"\u1160\3\2\2\2\u115f\u1135\3\2\2\2\u115f\u1143\3\2\2\2\u115f\u1155\3\2"+
		"\2\2\u1160\u020f\3\2\2\2\u1161\u1162\6\u0109b\2\u1162\u1166\5\u03f4\u01fb"+
		"\2\u1163\u1164\6\u0109c\2\u1164\u1166\5\u03f2\u01fa\2\u1165\u1161\3\2"+
		"\2\2\u1165\u1163\3\2\2\2\u1166\u0211\3\2\2\2\u1167\u1168\6\u010ad\2\u1168"+
		"\u116a\7\u0287\2\2\u1169\u116b\5\u022e\u0118\2\u116a\u1169\3\2\2\2\u116b"+
		"\u116c\3\2\2\2\u116c\u116a\3\2\2\2\u116c\u116d\3\2\2\2\u116d\u1173\3\2"+
		"\2\2\u116e\u116f\6\u010ae\2\u116f\u1170\7\u0287\2\2\u1170\u1171\7\u00d9"+
		"\2\2\u1171\u1173\7\u0189\2\2\u1172\u1167\3\2\2\2\u1172\u116e\3\2\2\2\u1173"+
		"\u0213\3\2\2\2\u1174\u1175\7\u0299\2\2\u1175\u1176\5\u0232\u011a\2\u1176"+
		"\u0215\3\2\2\2\u1177\u1178\7\u0287\2\2\u1178\u1180\7\u0295\2\2\u1179\u1181"+
		"\5\u0232\u011a\2\u117a\u117c\7\f\2\2\u117b\u117d\5\u0214\u010b\2\u117c"+
		"\u117b\3\2\2\2\u117c\u117d\3\2\2\2\u117d\u1181\3\2\2\2\u117e\u1181\7\u0173"+
		"\2\2\u117f\u1181\7\u0082\2\2\u1180\u1179\3\2\2\2\u1180\u117a\3\2\2\2\u1180"+
		"\u117e\3\2\2\2\u1180\u117f\3\2\2\2\u1181\u0217\3\2\2\2\u1182\u1183\7\23"+
		"\2\2\u1183\u1185\7\u026c\2\2\u1184\u1186\5\u0216\u010c\2\u1185\u1184\3"+
		"\2\2\2\u1185\u1186\3\2\2\2\u1186\u0219\3\2\2\2\u1187\u1188\6\u010ef\2"+
		"\u1188\u1189\5\u0206\u0104\2\u1189\u021b\3\2\2\2\u118a\u118b\7\u01c7\2"+
		"\2\u118b\u118c\7\u026c\2\2\u118c\u118d\5\u0404\u0203\2\u118d\u118e\7\u0250"+
		"\2\2\u118e\u1196\5\u0404\u0203\2\u118f\u1190\7\u0307\2\2\u1190\u1191\5"+
		"\u0404\u0203\2\u1191\u1192\7\u0250\2\2\u1192\u1193\5\u0404\u0203\2\u1193"+
		"\u1195\3\2\2\2\u1194\u118f\3\2\2\2\u1195\u1198\3\2\2\2\u1196\u1194\3\2"+
		"\2\2\u1196\u1197\3\2\2\2\u1197\u021d\3\2\2\2\u1198\u1196\3\2\2\2\u1199"+
		"\u11bb\7\u01df\2\2\u119a\u119b\6\u0110g\2\u119b\u119c\5\u0224\u0113\2"+
		"\u119c\u119d\7\u00cd\2\2\u119d\u119e\5\u03f2\u01fa\2\u119e\u11bc\3\2\2"+
		"\2\u119f\u11a0\5\u0224\u0113\2\u11a0\u11a1\5\u0220\u0111\2\u11a1\u11a2"+
		"\7\u00cd\2\2\u11a2\u11a3\5\u03f2\u01fa\2\u11a3\u11bc\3\2\2\2\u11a4\u11a6"+
		"\7\f\2\2\u11a5\u11a7\7\u01a7\2\2\u11a6\u11a5\3\2\2\2\u11a6\u11a7\3\2\2"+
		"\2\u11a7\u11b3\3\2\2\2\u11a8\u11a9\6\u0110h\2\u11a9\u11ab\7\u0181\2\2"+
		"\u11aa\u11ac\5\u0222\u0112\2\u11ab\u11aa\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac"+
		"\u11ad\3\2\2\2\u11ad\u11b4\5\u0228\u0115\2\u11ae\u11af\7\u0307\2\2\u11af"+
		"\u11b0\7\u00d9\2\2\u11b0\u11b1\7\u0189\2\2\u11b1\u11b2\7\u00cd\2\2\u11b2"+
		"\u11b4\5\u03f2\u01fa\2\u11b3\u11a8\3\2\2\2\u11b3\u11ae\3\2\2\2\u11b4\u11bc"+
		"\3\2\2\2\u11b5\u11b6\7\u01ad\2\2\u11b6\u11b7\7\u0181\2\2\u11b7\u11b8\5"+
		"\u0404\u0203\2\u11b8\u11b9\7\u00cd\2\2\u11b9\u11ba\5\u03f2\u01fa\2\u11ba"+
		"\u11bc\3\2\2\2\u11bb\u119a\3\2\2\2\u11bb\u119f\3\2\2\2\u11bb\u11a4\3\2"+
		"\2\2\u11bb\u11b5\3\2\2\2\u11bc\u021f\3\2\2\2\u11bd\u11be\6\u0111i\2\u11be"+
		"\u11c0\7\u0181\2\2\u11bf\u11c1\5\u0222\u0112\2\u11c0\u11bf\3\2\2\2\u11c0"+
		"\u11c1\3\2\2\2\u11c1\u11c2\3\2\2\2\u11c2\u11cc\5\u0228\u0115\2\u11c3\u11c9"+
		"\6\u0111j\2\u11c4\u11c6\7\u0181\2\2\u11c5\u11c7\5\u0222\u0112\2\u11c6"+
		"\u11c5\3\2\2\2\u11c6\u11c7\3\2\2\2\u11c7\u11c8\3\2\2\2\u11c8\u11ca\5\u0228"+
		"\u0115\2\u11c9\u11c4\3\2\2\2\u11c9\u11ca\3\2\2\2\u11ca\u11cc\3\2\2\2\u11cb"+
		"\u11bd\3\2\2\2\u11cb\u11c3\3\2\2\2\u11cc\u0221\3\2\2\2\u11cd\u11ce\t\65"+
		"\2\2\u11ce\u0223\3\2\2\2\u11cf\u11d4\5\u0226\u0114\2\u11d0\u11d1\7\u0307"+
		"\2\2\u11d1\u11d3\5\u0226\u0114\2\u11d2\u11d0\3\2\2\2\u11d3\u11d6\3\2\2"+
		"\2\u11d4\u11d2\3\2\2\2\u11d4\u11d5\3\2\2\2\u11d5\u0225\3\2\2\2\u11d6\u11d4"+
		"\3\2\2\2\u11d7\u11e2\6\u0114k\2\u11d8\u11da\5\u04a2\u0252\2\u11d9\u11db"+
		"\5\u0416\u020c\2\u11da\u11d9\3\2\2\2\u11da\u11db\3\2\2\2\u11db\u11e3\3"+
		"\2\2\2\u11dc\u11e0\5\u04a2\u0252\2\u11dd\u11e1\7\u0312\2\2\u11de\u11df"+
		"\7\u0311\2\2\u11df\u11e1\5\u049e\u0250\2\u11e0\u11dd\3\2\2\2\u11e0\u11de"+
		"\3\2\2\2\u11e1\u11e3\3\2\2\2\u11e2\u11d8\3\2\2\2\u11e2\u11dc\3\2\2\2\u11e3"+
		"\u1201\3\2\2\2\u11e4\u11e6\t\66\2\2\u11e5\u11e7\5\u0416\u020c\2\u11e6"+
		"\u11e5\3\2\2\2\u11e6\u11e7\3\2\2\2\u11e7\u1201\3\2\2\2\u11e8\u1201\t\67"+
		"\2\2\u11e9\u11ea\7\u00d9\2\2\u11ea\u1201\7\u0189\2\2\u11eb\u11ec\7\u01ff"+
		"\2\2\u11ec\u1201\7p\2\2\u11ed\u11f1\7c\2\2\u11ee\u11ef\7\u0243\2\2\u11ef"+
		"\u11f2\7\u023d\2\2\u11f0\u11f2\t8\2\2\u11f1\u11ee\3\2\2\2\u11f1\u11f0"+
		"\3\2\2\2\u11f1\u11f2\3\2\2\2\u11f2\u1201\3\2\2\2\u11f3\u11f4\7\u0121\2"+
		"\2\u11f4\u1201\7\u023d\2\2\u11f5\u11f6\7\u01cd\2\2\u11f6\u1201\t9\2\2"+
		"\u11f7\u11f8\7\u01ff\2\2\u11f8\u1201\7\u027e\2\2\u11f9\u11fb\7\r\2\2\u11fa"+
		"\u11fc\7\u01e5\2\2\u11fb\u11fa\3\2\2\2\u11fb\u11fc\3\2\2\2\u11fc\u1201"+
		"\3\2\2\2\u11fd\u11fe\6\u0114l\2\u11fe\u11ff\t:\2\2\u11ff\u1201\7\u0295"+
		"\2\2\u1200\u11d7\3\2\2\2\u1200\u11e4\3\2\2\2\u1200\u11e8\3\2\2\2\u1200"+
		"\u11e9\3\2\2\2\u1200\u11eb\3\2\2\2\u1200\u11ed\3\2\2\2\u1200\u11f3\3\2"+
		"\2\2\u1200\u11f5\3\2\2\2\u1200\u11f7\3\2\2\2\u1200\u11f9\3\2\2\2\u1200"+
		"\u11fd\3\2\2\2\u1201\u0227\3\2\2\2\u1202\u1205\7\u02fa\2\2\u1203\u1204"+
		"\7\u0306\2\2\u1204\u1206\7\u02fa\2\2\u1205\u1203\3\2\2\2\u1205\u1206\3"+
		"\2\2\2\u1206\u1213\3\2\2\2\u1207\u120a\5\u0424\u0213\2\u1208\u1209\7\u0306"+
		"\2\2\u1209\u120b\7\u02fa\2\2\u120a\u1208\3\2\2\2\u120a\u120b\3\2\2\2\u120b"+
		"\u1213\3\2\2\2\u120c\u1213\5\u0450\u0229\2\u120d\u120e\6\u0115m\2\u120e"+
		"\u120f\5\u0424\u0213\2\u120f\u1210\7\u0306\2\2\u1210\u1211\5\u0450\u0229"+
		"\2\u1211\u1213\3\2\2\2\u1212\u1202\3\2\2\2\u1212\u1207\3\2\2\2\u1212\u120c"+
		"\3\2\2\2\u1212\u120d\3\2\2\2\u1213\u0229\3\2\2\2\u1214\u121b\5\u022c\u0117"+
		"\2\u1215\u1217\7\21\2\2\u1216\u1215\3\2\2\2\u1216\u1217\3\2\2\2\u1217"+
		"\u1218\3\2\2\2\u1218\u121a\5\u022c\u0117\2\u1219\u1216\3\2\2\2\u121a\u121d"+
		"\3\2\2\2\u121b\u1219\3\2\2\2\u121b\u121c\3\2\2\2\u121c\u022b\3\2\2\2\u121d"+
		"\u121b\3\2\2\2\u121e\u121f\7A\2\2\u121f\u1225\5\u0486\u0244\2\u1220\u1221"+
		"\7\u0105\2\2\u1221\u1225\5\u0486\u0244\2\u1222\u1223\7\u0231\2\2\u1223"+
		"\u1225\5\u0486\u0244\2\u1224\u121e\3\2\2\2\u1224\u1220\3\2\2\2\u1224\u1222"+
		"\3\2\2\2\u1225\u022d\3\2\2\2\u1226\u1227\7\u00d9\2\2\u1227\u1231\7\u0189"+
		"\2\2\u1228\u1229\7\u0144\2\2\u1229\u1231\5\u0476\u023c\2\u122a\u122b\7"+
		"\u0149\2\2\u122b\u1231\5\u0476\u023c\2\u122c\u122d\7\u0143\2\2\u122d\u1231"+
		"\5\u0476\u023c\2\u122e\u122f\7\u014a\2\2\u122f\u1231\5\u0476\u023c\2\u1230"+
		"\u1226\3\2\2\2\u1230\u1228\3\2\2\2\u1230\u122a\3\2\2\2\u1230\u122c\3\2"+
		"\2\2\u1230\u122e\3\2\2\2\u1231\u022f\3\2\2\2\u1232\u1233\7\u01fc\2\2\u1233"+
		"\u1234\7\u0295\2\2\u1234\u124a\5\u0232\u011a\2\u1235\u1236\7\u01fc\2\2"+
		"\u1236\u1237\7\u0295\2\2\u1237\u124a\t;\2\2\u1238\u1239\7\u01fc\2\2\u1239"+
		"\u123a\7\u0082\2\2\u123a\u123e\7\u0295\2\2\u123b\u123f\5\u0232\u011a\2"+
		"\u123c\u123f\7\u0173\2\2\u123d\u123f\7\f\2\2\u123e\u123b\3\2\2\2\u123e"+
		"\u123c\3\2\2\2\u123e\u123d\3\2\2\2\u123f\u1240\3\2\2\2\u1240\u1241\7\u0250"+
		"\2\2\u1241\u124a\5\u0232\u011a\2\u1242\u1243\7\u01fc\2\2\u1243\u1244\7"+
		"\u0295\2\2\u1244\u1247\7\f\2\2\u1245\u1246\7\u0299\2\2\u1246\u1248\5\u0232"+
		"\u011a\2\u1247\u1245\3\2\2\2\u1247\u1248\3\2\2\2\u1248\u124a\3\2\2\2\u1249"+
		"\u1232\3\2\2\2\u1249\u1235\3\2\2\2\u1249\u1238\3\2\2\2\u1249\u1242\3\2"+
		"\2\2\u124a\u0231\3\2\2\2\u124b\u1250\5\u0234\u011b\2\u124c\u124d\7\u0307"+
		"\2\2\u124d\u124f\5\u0234\u011b\2\u124e\u124c\3\2\2\2\u124f\u1252\3\2\2"+
		"\2\u1250\u124e\3\2\2\2\u1250\u1251\3\2\2\2\u1251\u0233\3\2\2\2\u1252\u1250"+
		"\3\2\2\2\u1253\u1257\5\u04a2\u0252\2\u1254\u1255\7\u0311\2\2\u1255\u1258"+
		"\5\u049e\u0250\2\u1256\u1258\7\u0312\2\2\u1257\u1254\3\2\2\2\u1257\u1256"+
		"\3\2\2\2\u1257\u1258\3\2\2\2\u1258\u0235\3\2\2\2\u1259\u125b\7\20\2\2"+
		"\u125a\u125c\5\u040c\u0207\2\u125b\u125a\3\2\2\2\u125b\u125c\3\2\2\2\u125c"+
		"\u125d\3\2\2\2\u125d\u125e\7\u0240\2\2\u125e\u1261\5\u0452\u022a\2\u125f"+
		"\u1260\6\u011cn\2\u1260\u1262\5\u0238\u011d\2\u1261\u125f\3\2\2\2\u1261"+
		"\u1262\3\2\2\2\u1262\u1285\3\2\2\2\u1263\u1264\7@\2\2\u1264\u1265\7\u0240"+
		"\2\2\u1265\u1269\5\u0452\u022a\2\u1266\u1268\5\u023a\u011e\2\u1267\u1266"+
		"\3\2\2\2\u1268\u126b\3\2\2\2\u1269\u1267\3\2\2\2\u1269\u126a\3\2\2\2\u126a"+
		"\u1285\3\2\2\2\u126b\u1269\3\2\2\2\u126c\u126d\7?\2\2\u126d\u126e\7\u0240"+
		"\2\2\u126e\u1270\5\u0452\u022a\2\u126f\u1271\t<\2\2\u1270\u126f\3\2\2"+
		"\2\u1270\u1271\3\2\2\2\u1271\u1285\3\2\2\2\u1272\u1274\7\u0186\2\2\u1273"+
		"\u1275\5\u040c\u0207\2\u1274\u1273\3\2\2\2\u1274\u1275\3\2\2\2\u1275\u1276"+
		"\3\2\2\2\u1276\u1277\7\u0240\2\2\u1277\u1285\5\u0452\u022a\2\u1278\u127a"+
		"\7\u01c9\2\2\u1279\u127b\5\u040c\u0207\2\u127a\u1279\3\2\2\2\u127a\u127b"+
		"\3\2\2\2\u127b\u127c\3\2\2\2\u127c\u127d\7\u0240\2\2\u127d\u1281\5\u0452"+
		"\u022a\2\u127e\u1280\5\u023c\u011f\2\u127f\u127e\3\2\2\2\u1280\u1283\3"+
		"\2\2\2\u1281\u127f\3\2\2\2\u1281\u1282\3\2\2\2\u1282\u1285\3\2\2\2\u1283"+
		"\u1281\3\2\2\2\u1284\u1259\3\2\2\2\u1284\u1263\3\2\2\2\u1284\u126c\3\2"+
		"\2\2\u1284\u1272\3\2\2\2\u1284\u1278\3\2\2\2\u1285\u0237\3\2\2\2\u1286"+
		"\u1287\7\u0268\2\2\u1287\u1288\7\u02a4\2\2\u1288\u1289\7\u0181\2\2\u1289"+
		"\u128d\5\u046c\u0237\2\u128a\u128b\7\u0287\2\2\u128b\u128c\7\u02ed\2\2"+
		"\u128c\u128e\7\u02a5\2\2\u128d\u128a\3\2\2\2\u128d\u128e\3\2\2\2\u128e"+
		"\u1294\3\2\2\2\u128f\u1290\7\u0096\2\2\u1290\u1291\7\u02a4\2\2\u1291\u1292"+
		"\7\u0181\2\2\u1292\u1294\5\u046c\u0237\2\u1293\u1286\3\2\2\2\u1293\u128f"+
		"\3\2\2\2\u1294\u0239\3\2\2\2\u1295\u1296\7\u00ca\2\2\u1296\u1299\7\u0269"+
		"\2\2\u1297\u1299\t=\2\2\u1298\u1295\3\2\2\2\u1298\u1297\3\2\2\2\u1299"+
		"\u023b\3\2\2\2\u129a\u129b\t>\2\2\u129b\u023d\3\2\2\2\u129c\u129d\7\u00f7"+
		"\2\2\u129d\u129e\7\u019c\2\2\u129e\u129f\5\u046a\u0236\2\u129f\u12a0\7"+
		"\u020a\2\2\u12a0\u12a1\5\u0484\u0243\2\u12a1\u12b3\3\2\2\2\u12a2\u12a3"+
		"\7\u00f7\2\2\u12a3\u12a4\7\u029a\2\2\u12a4\u12b3\5\u048e\u0248\2\u12a5"+
		"\u12a6\7\u0261\2\2\u12a6\u12a7\7\u019c\2\2\u12a7\u12b3\5\u0460\u0231\2"+
		"\u12a8\u12a9\7\u0261\2\2\u12a9\u12aa\7\u029a\2\2\u12aa\u12af\5\u0462\u0232"+
		"\2\u12ab\u12ac\7\u0307\2\2\u12ac\u12ae\5\u0462\u0232\2\u12ad\u12ab\3\2"+
		"\2\2\u12ae\u12b1\3\2\2\2\u12af\u12ad\3\2\2\2\u12af\u12b0\3\2\2\2\u12b0"+
		"\u12b3\3\2\2\2\u12b1\u12af\3\2\2\2\u12b2\u129c\3\2\2\2\u12b2\u12a2\3\2"+
		"\2\2\u12b2\u12a5\3\2\2\2\u12b2\u12a8\3\2\2\2\u12b3\u023f\3\2\2\2\u12b4"+
		"\u12b5\7\u01fc\2\2\u12b5\u12b6\5\u0242\u0122\2\u12b6\u0241\3\2\2\2\u12b7"+
		"\u12b8\5\u024c\u0127\2\u12b8\u12b9\5\u024a\u0126\2\u12b9\u12f0\3\2\2\2"+
		"\u12ba\u12bb\7\u0252\2\2\u12bb\u12f0\5\u0244\u0123\2\u12bc\u12bd\5\u04aa"+
		"\u0256\2\u12bd\u12be\5\u0252\u012a\2\u12be\u12f0\3\2\2\2\u12bf\u12c2\7"+
		"\u0198\2\2\u12c0\u12c1\7\u00ca\2\2\u12c1\u12c3\5\u0404\u0203\2\u12c2\u12c0"+
		"\3\2\2\2\u12c2\u12c3\3\2\2\2\u12c3\u12c4\3\2\2\2\u12c4\u12df\5\u04a8\u0255"+
		"\2\u12c5\u12c7\5\u0486\u0244\2\u12c6\u12c8\5\u0400\u0201\2\u12c7\u12c6"+
		"\3\2\2\2\u12c7\u12c8\3\2\2\2\u12c8\u12ca\3\2\2\2\u12c9\u12cb\5\u03fc\u01ff"+
		"\2\u12ca\u12c9\3\2\2\2\u12ca\u12cb\3\2\2\2\u12cb\u12e0\3\2\2\2\u12cc\u12ce"+
		"\5\u0486\u0244\2\u12cd\u12cf\5\u0400\u0201\2\u12ce\u12cd\3\2\2\2\u12ce"+
		"\u12cf\3\2\2\2\u12cf\u12d1\3\2\2\2\u12d0\u12d2\5\u03fc\u01ff\2\u12d1\u12d0"+
		"\3\2\2\2\u12d1\u12d2\3\2\2\2\u12d2\u12e0\3\2\2\2\u12d3\u12d4\6\u0122o"+
		"\2\u12d4\u12d5\7\u0180\2\2\u12d5\u12d6\7\u030a\2\2\u12d6\u12d7\5\u0486"+
		"\u0244\2\u12d7\u12d8\7\u030b\2\2\u12d8\u12e0\3\2\2\2\u12d9\u12da\6\u0122"+
		"p\2\u12da\u12db\7\u0198\2\2\u12db\u12dc\7\u030a\2\2\u12dc\u12dd\5\u0486"+
		"\u0244\2\u12dd\u12de\7\u030b\2\2\u12de\u12e0\3\2\2\2\u12df\u12c5\3\2\2"+
		"\2\u12df\u12cc\3\2\2\2\u12df\u12d3\3\2\2\2\u12df\u12d9\3\2\2\2\u12e0\u12f0"+
		"\3\2\2\2\u12e1\u12e2\6\u0122q\2\u12e2\u12e5\7\u0198\2\2\u12e3\u12e4\7"+
		"\u00ca\2\2\u12e4\u12e6\5\u0404\u0203\2\u12e5\u12e3\3\2\2\2\u12e5\u12e6"+
		"\3\2\2\2\u12e6\u12e7\3\2\2\2\u12e7\u12e8\7\u0250\2\2\u12e8\u12ea\7\u02e0"+
		"\2\2\u12e9\u12eb\5\u0400\u0201\2\u12ea\u12e9\3\2\2\2\u12ea\u12eb\3\2\2"+
		"\2\u12eb\u12ed\3\2\2\2\u12ec\u12ee\5\u03fc\u01ff\2\u12ed\u12ec\3\2\2\2"+
		"\u12ed\u12ee\3\2\2\2\u12ee\u12f0\3\2\2\2\u12ef\u12b7\3\2\2\2\u12ef\u12ba"+
		"\3\2\2\2\u12ef\u12bc\3\2\2\2\u12ef\u12bf\3\2\2\2\u12ef\u12e1\3\2\2\2\u12f0"+
		"\u0243\3\2\2\2\u12f1\u12f3\5\u0246\u0124\2\u12f2\u12f4\5\u0248\u0125\2"+
		"\u12f3\u12f2\3\2\2\2\u12f3\u12f4\3\2\2\2\u12f4\u12fb\3\2\2\2\u12f5\u12f8"+
		"\5\u0248\u0125\2\u12f6\u12f7\7\u0307\2\2\u12f7\u12f9\5\u0246\u0124\2\u12f8"+
		"\u12f6\3\2\2\2\u12f8\u12f9\3\2\2\2\u12f9\u12fb\3\2\2\2\u12fa\u12f1\3\2"+
		"\2\2\u12fa\u12f5\3\2\2\2\u12fb\u0245\3\2\2\2\u12fc\u12fd\7\u01b5\2\2\u12fd"+
		"\u12fe\t)\2\2\u12fe\u0247\3\2\2\2\u12ff\u1300\7\u0104\2\2\u1300\u1306"+
		"\7\u0114\2\2\u1301\u1302\7\u01ca\2\2\u1302\u1307\7\u01b5\2\2\u1303\u1304"+
		"\7\u01b5\2\2\u1304\u1307\t?\2\2\u1305\u1307\7\u01f6\2\2\u1306\u1301\3"+
		"\2\2\2\u1306\u1303\3\2\2\2\u1306\u1305\3\2\2\2\u1307\u0249\3\2\2\2\u1308"+
		"\u1309\7\u0307\2\2\u1309\u130b\5\u024e\u0128\2\u130a\u1308\3\2\2\2\u130b"+
		"\u130e\3\2\2\2\u130c\u130a\3\2\2\2\u130c\u130d\3\2\2\2\u130d\u024b\3\2"+
		"\2\2\u130e\u130c\3\2\2\2\u130f\u1310\5\u02ec\u0177\2\u1310\u1311\5\u04a8"+
		"\u0255\2\u1311\u1312\5\u0256\u012c\2\u1312\u1329\3\2\2\2\u1313\u1329\5"+
		"\u03e8\u01f5\2\u1314\u1315\5\u02e8\u0175\2\u1315\u1316\5\u04a8\u0255\2"+
		"\u1316\u1317\5\u02a6\u0154\2\u1317\u1329\3\2\2\2\u1318\u1319\5\u0250\u0129"+
		"\2\u1319\u131a\5\u04a8\u0255\2\u131a\u131b\5\u0256\u012c\2\u131b\u1329"+
		"\3\2\2\2\u131c\u1326\7\u0166\2\2\u131d\u131e\5\u04a8\u0255\2\u131e\u131f"+
		"\5\u02a6\u0154\2\u131f\u1327\3\2\2\2\u1320\u1322\5\u03aa\u01d6\2\u1321"+
		"\u1323\5\u03dc\u01ef\2\u1322\u1321\3\2\2\2\u1322\u1323\3\2\2\2\u1323\u1327"+
		"\3\2\2\2\u1324\u1325\6\u0127r\2\u1325\u1327\7\u0082\2\2\u1326\u131d\3"+
		"\2\2\2\u1326\u1320\3\2\2\2\u1326\u1324\3\2\2\2\u1327\u1329\3\2\2\2\u1328"+
		"\u130f\3\2\2\2\u1328\u1313\3\2\2\2\u1328\u1314\3\2\2\2\u1328\u1318\3\2"+
		"\2\2\u1328\u131c\3\2\2\2\u1329\u024d\3\2\2\2\u132a\u132b\5\u04aa\u0256"+
		"\2\u132b\u132c\5\u02ec\u0177\2\u132c\u132d\5\u04a8\u0255\2\u132d\u132e"+
		"\5\u0256\u012c\2\u132e\u1331\3\2\2\2\u132f\u1331\5\u024c\u0127\2\u1330"+
		"\u132a\3\2\2\2\u1330\u132f\3\2\2\2\u1331\u024f\3\2\2\2\u1332\u1334\7\u0313"+
		"\2\2\u1333\u1335\5\u04ae\u0258\2\u1334\u1333\3\2\2\2\u1334\u1335\3\2\2"+
		"\2\u1335\u1336\3\2\2\2\u1336\u1337\5\u02ec\u0177\2\u1337\u0251\3\2\2\2"+
		"\u1338\u1339\5\u0254\u012b\2\u1339\u133a\5\u024a\u0126\2\u133a\u133e\3"+
		"\2\2\2\u133b\u133c\7\u0252\2\2\u133c\u133e\5\u0244\u0123\2\u133d\u1338"+
		"\3\2\2\2\u133d\u133b\3\2\2\2\u133e\u0253\3\2\2\2\u133f\u1340\5\u02ec\u0177"+
		"\2\u1340\u1341\5\u04a8\u0255\2\u1341\u1342\5\u0256\u012c\2\u1342\u0255"+
		"\3\2\2\2\u1343\u1348\5\u02a6\u0154\2\u1344\u1348\t@\2\2\u1345\u1346\6"+
		"\u012cs\2\u1346\u1348\tA\2\2\u1347\u1343\3\2\2\2\u1347\u1344\3\2\2\2\u1347"+
		"\u1345\3\2\2\2\u1348\u0257\3\2\2\2\u1349\u1425\7\u01ff\2\2\u134a\u134b"+
		"\6\u012dt\2\u134b\u1426\7\30\2\2\u134c\u134e\7p\2\2\u134d\u134f\5\u0408"+
		"\u0205\2\u134e\u134d\3\2\2\2\u134e\u134f\3\2\2\2\u134f\u1426\3\2\2\2\u1350"+
		"\u1352\5\u025a\u012e\2\u1351\u1350\3\2\2\2\u1351\u1352\3\2\2\2\u1352\u1353"+
		"\3\2\2\2\u1353\u1355\7\u023d\2\2\u1354\u1356\5\u0260\u0131\2\u1355\u1354"+
		"\3\2\2\2\u1355\u1356\3\2\2\2\u1356\u1358\3\2\2\2\u1357\u1359\5\u0408\u0205"+
		"\2\u1358\u1357\3\2\2\2\u1358\u1359\3\2\2\2\u1359\u1426\3\2\2\2\u135a\u135c"+
		"\7\u00ce\2\2\u135b\u135a\3\2\2\2\u135b\u135c\3\2\2\2\u135c\u135d\3\2\2"+
		"\2\u135d\u135f\7\u0253\2\2\u135e\u1360\5\u0260\u0131\2\u135f\u135e\3\2"+
		"\2\2\u135f\u1360\3\2\2\2\u1360\u1362\3\2\2\2\u1361\u1363\5\u0408\u0205"+
		"\2\u1362\u1361\3\2\2\2\u1362\u1363\3\2\2\2\u1363\u1426\3\2\2\2\u1364\u1366"+
		"\7\u00ab\2\2\u1365\u1367\5\u0260\u0131\2\u1366\u1365\3\2\2\2\u1366\u1367"+
		"\3\2\2\2\u1367\u1369\3\2\2\2\u1368\u136a\5\u0408\u0205\2\u1369\u1368\3"+
		"\2\2\2\u1369\u136a\3\2\2\2\u136a\u1426\3\2\2\2\u136b\u136c\7\u0240\2\2"+
		"\u136c\u136e\7\u0225\2\2\u136d\u136f\5\u0260\u0131\2\u136e\u136d\3\2\2"+
		"\2\u136e\u136f\3\2\2\2\u136f\u1371\3\2\2\2\u1370\u1372\5\u0408\u0205\2"+
		"\u1371\u1370\3\2\2\2\u1371\u1372\3\2\2\2\u1372\u1426\3\2\2\2\u1373\u1374"+
		"\7\u0185\2\2\u1374\u1376\7\u023d\2\2\u1375\u1377\5\u0260\u0131\2\u1376"+
		"\u1375\3\2\2\2\u1376\u1377\3\2\2\2\u1377\u1379\3\2\2\2\u1378\u137a\5\u0408"+
		"\u0205\2\u1379\u1378\3\2\2\2\u1379\u137a\3\2\2\2\u137a\u1426\3\2\2\2\u137b"+
		"\u1426\7\u019a\2\2\u137c\u137f\7\u00a5\2\2\u137d\u1380\5\u0448\u0225\2"+
		"\u137e\u1380\7\f\2\2\u137f\u137d\3\2\2\2\u137f\u137e\3\2\2\2\u1380\u1381"+
		"\3\2\2\2\u1381\u1426\tB\2\2\u1382\u1384\5\u025a\u012e\2\u1383\u1382\3"+
		"\2\2\2\u1383\u1384\3\2\2\2\u1384\u1385\3\2\2\2\u1385\u1386\7I\2\2\u1386"+
		"\u1387\tC\2\2\u1387\u1389\5\u0450\u0229\2\u1388\u138a\5\u0260\u0131\2"+
		"\u1389\u1388\3\2\2\2\u1389\u138a\3\2\2\2\u138a\u138c\3\2\2\2\u138b\u138d"+
		"\5\u0408\u0205\2\u138c\u138b\3\2\2\2\u138c\u138d\3\2\2\2\u138d\u1426\3"+
		"\2\2\2\u138e\u138f\t,\2\2\u138f\u1426\7\u0123\2\2\u1390\u1397\7\u0204"+
		"\2\2\u1391\u1398\7\u00e3\2\2\u1392\u1393\7\u0225\2\2\u1393\u1395\5\u025c"+
		"\u012f\2\u1394\u1396\5\u0310\u0189\2\u1395\u1394\3\2\2\2\u1395\u1396\3"+
		"\2\2\2\u1396\u1398\3\2\2\2\u1397\u1391\3\2\2\2\u1397\u1392\3\2\2\2\u1398"+
		"\u1426\3\2\2\2\u1399\u139a\tD\2\2\u139a\u139d\7\u00ab\2\2\u139b\u139c"+
		"\7\u00fd\2\2\u139c\u139e\5\u0486\u0244\2\u139d\u139b\3\2\2\2\u139d\u139e"+
		"\3\2\2\2\u139e\u13a1\3\2\2\2\u139f\u13a0\7\u00cd\2\2\u13a0\u13a2\5\u047a"+
		"\u023e\2\u13a1\u139f\3\2\2\2\u13a1\u13a2\3\2\2\2\u13a2\u13a4\3\2\2\2\u13a3"+
		"\u13a5\5\u011e\u0090\2\u13a4\u13a3\3\2\2\2\u13a4\u13a5\3\2\2\2\u13a5\u13a7"+
		"\3\2\2\2\u13a6\u13a8\5\u0310\u0189\2\u13a7\u13a6\3\2\2\2\u13a7\u13a8\3"+
		"\2\2\2\u13a8\u1426\3\2\2\2\u13a9\u13aa\6\u012du\2\u13aa\u13ac\7\u00b6"+
		"\2\2\u13ab\u13a9\3\2\2\2\u13ab\u13ac\3\2\2\2\u13ac\u13ad\3\2\2\2\u13ad"+
		"\u13ae\tE\2\2\u13ae\u13af\5\u025e\u0130\2\u13af\u13b1\5\u0450\u0229\2"+
		"\u13b0\u13b2\5\u0260\u0131\2\u13b1\u13b0\3\2\2\2\u13b1\u13b2\3\2\2\2\u13b2"+
		"\u13b4\3\2\2\2\u13b3\u13b5\5\u0168\u00b5\2\u13b4\u13b3\3\2\2\2\u13b4\u13b5"+
		"\3\2\2\2\u13b5\u1426\3\2\2\2\u13b6\u13b8\7\u022b\2\2\u13b7\u13b6\3\2\2"+
		"\2\u13b7\u13b8\3\2\2\2\u13b8\u13b9\3\2\2\2\u13b9\u1426\7\u00a4\2\2\u13ba"+
		"\u13bb\7a\2\2\u13bb\u13bc\7\u030a\2\2\u13bc\u13bd\7\u02fa\2\2\u13bd\u13be"+
		"\7\u030b\2\2\u13be\u1426\tF\2\2\u13bf\u13c1\7\u0281\2\2\u13c0\u13c2\5"+
		"\u011e\u0090\2\u13c1\u13c0\3\2\2\2\u13c1\u13c2\3\2\2\2\u13c2\u1426\3\2"+
		"\2\2\u13c3\u13c5\7\u00a8\2\2\u13c4\u13c6\5\u011e\u0090\2\u13c5\u13c4\3"+
		"\2\2\2\u13c5\u13c6\3\2\2\2\u13c6\u1426\3\2\2\2\u13c7\u1426\7\u01ac\2\2"+
		"\u13c8\u13d1\7\u01ab\2\2\u13c9\u13ce\5\u0262\u0132\2\u13ca\u13cb\7\u0307"+
		"\2\2\u13cb\u13cd\5\u0262\u0132\2\u13cc\u13ca\3\2\2\2\u13cd\u13d0\3\2\2"+
		"\2\u13ce\u13cc\3\2\2\2\u13ce\u13cf\3\2\2\2\u13cf\u13d2\3\2\2\2\u13d0\u13ce"+
		"\3\2\2\2\u13d1\u13c9\3\2\2\2\u13d1\u13d2\3\2\2\2\u13d2\u13d6\3\2\2\2\u13d3"+
		"\u13d4\7\u00ca\2\2\u13d4\u13d5\7\u01b0\2\2\u13d5\u13d7\7\u02ed\2\2\u13d6"+
		"\u13d3\3\2\2\2\u13d6\u13d7\3\2\2\2\u13d7\u13d9\3\2\2\2\u13d8\u13da\5\u011e"+
		"\u0090\2\u13d9\u13d8\3\2\2\2\u13d9\u13da\3\2\2\2\u13da\u1426\3\2\2\2\u13db"+
		"\u13dd\5\u04aa\u0256\2\u13dc\u13db\3\2\2\2\u13dc\u13dd\3\2\2\2\u13dd\u13de"+
		"\3\2\2\2\u13de\u13e0\tG\2\2\u13df\u13e1\5\u0408\u0205\2\u13e0\u13df\3"+
		"\2\2\2\u13e0\u13e1\3\2\2\2\u13e1\u1426\3\2\2\2\u13e2\u13e4\7\u00ce\2\2"+
		"\u13e3\u13e2\3\2\2\2\u13e3\u13e4\3\2\2\2\u13e4\u13e5\3\2\2\2\u13e5\u1426"+
		"\7\u01aa\2\2\u13e6\u13e8\5\u02f8\u017d\2\u13e7\u13e9\5\u0408\u0205\2\u13e8"+
		"\u13e7\3\2\2\2\u13e8\u13e9\3\2\2\2\u13e9\u1426\3\2\2\2\u13ea\u13ec\7H"+
		"\2\2\u13eb\u13ed\5\u0408\u0205\2\u13ec\u13eb\3\2\2\2\u13ec\u13ed\3\2\2"+
		"\2\u13ed\u1426\3\2\2\2\u13ee\u13ef\6\u012dv\2\u13ef\u1426\7_\2\2\u13f0"+
		"\u1426\7\u01a7\2\2\u13f1\u13f4\7\u00da\2\2\u13f2\u13f3\7\u00ca\2\2\u13f3"+
		"\u13f5\5\u0404\u0203\2\u13f4\u13f2\3\2\2\2\u13f4\u13f5\3\2\2\2\u13f5\u1426"+
		"\3\2\2\2\u13f6\u13f7\7\u00da\2\2\u13f7\u13f8\7\u00ca\2\2\u13f8\u13f9\5"+
		"\u0404\u0203\2\u13f9\u13fa\7\u026f\2\2\u13fa\u13fb\5\u03f2\u01fa\2\u13fb"+
		"\u1426\3\2\2\2\u13fc\u13fd\7\u013e\2\2\u13fd\u1426\7\u0225\2\2\u13fe\u1413"+
		"\7c\2\2\u13ff\u1401\7o\2\2\u1400\u1402\5\u03d6\u01ec\2\u1401\u1400\3\2"+
		"\2\2\u1401\u1402\3\2\2\2\u1402\u1403\3\2\2\2\u1403\u1414\5\u0424\u0213"+
		"\2\u1404\u1405\7\u00ac\2\2\u1405\u1414\5\u0440\u0221\2\u1406\u1407\7\u00d0"+
		"\2\2\u1407\u1414\5\u042c\u0217\2\u1408\u1409\7\u01a8\2\2\u1409\u1414\5"+
		"\u0428\u0215\2\u140a\u140b\7\u0240\2\2\u140b\u1414\5\u0450\u0229\2\u140c"+
		"\u140d\7\u0254\2\2\u140d\u1414\5\u0430\u0219\2\u140e\u140f\7\u027e\2\2"+
		"\u140f\u1414\5\u0434\u021b\2\u1410\u1411\6\u012dw\2\u1411\u1412\7\u026c"+
		"\2\2\u1412\u1414\5\u0404\u0203\2\u1413\u13ff\3\2\2\2\u1413\u1404\3\2\2"+
		"\2\u1413\u1406\3\2\2\2\u1413\u1408\3\2\2\2\u1413\u140a\3\2\2\2\u1413\u140c"+
		"\3\2\2\2\u1413\u140e\3\2\2\2\u1413\u1410\3\2\2\2\u1414\u1426\3\2\2\2\u1415"+
		"\u1416\7\u01a8\2\2\u1416\u1418\7\u0225\2\2\u1417\u1419\5\u0408\u0205\2"+
		"\u1418\u1417\3\2\2\2\u1418\u1419\3\2\2\2\u1419\u1426\3\2\2\2\u141a\u141b"+
		"\7\u00d0\2\2\u141b\u141d\7\u0225\2\2\u141c\u141e\5\u0408\u0205\2\u141d"+
		"\u141c\3\2\2\2\u141d\u141e\3\2\2\2\u141e\u1426\3\2\2\2\u141f\u1420\7\u01a8"+
		"\2\2\u1420\u1421\7F\2\2\u1421\u1426\5\u0428\u0215\2\u1422\u1423\7\u00d0"+
		"\2\2\u1423\u1424\7F\2\2\u1424\u1426\5\u042c\u0217\2\u1425\u134a\3\2\2"+
		"\2\u1425\u134c\3\2\2\2\u1425\u1351\3\2\2\2\u1425\u135b\3\2\2\2\u1425\u1364"+
		"\3\2\2\2\u1425\u136b\3\2\2\2\u1425\u1373\3\2\2\2\u1425\u137b\3\2\2\2\u1425"+
		"\u137c\3\2\2\2\u1425\u1383\3\2\2\2\u1425\u138e\3\2\2\2\u1425\u1390\3\2"+
		"\2\2\u1425\u1399\3\2\2\2\u1425\u13ab\3\2\2\2\u1425\u13b7\3\2\2\2\u1425"+
		"\u13ba\3\2\2\2\u1425\u13bf\3\2\2\2\u1425\u13c3\3\2\2\2\u1425\u13c7\3\2"+
		"\2\2\u1425\u13c8\3\2\2\2\u1425\u13dc\3\2\2\2\u1425\u13e3\3\2\2\2\u1425"+
		"\u13e6\3\2\2\2\u1425\u13ea\3\2\2\2\u1425\u13ee\3\2\2\2\u1425\u13f0\3\2"+
		"\2\2\u1425\u13f1\3\2\2\2\u1425\u13f6\3\2\2\2\u1425\u13fc\3\2\2\2\u1425"+
		"\u13fe\3\2\2\2\u1425\u1415\3\2\2\2\u1425\u141a\3\2\2\2\u1425\u141f\3\2"+
		"\2\2\u1425\u1422\3\2\2\2\u1426\u0259\3\2\2\2\u1427\u142e\7\u00ce\2\2\u1428"+
		"\u1429\6\u012ex\2\u1429\u142b\7\u00b6\2\2\u142a\u142c\7\u00ce\2\2\u142b"+
		"\u142a\3\2\2\2\u142b\u142c\3\2\2\2\u142c\u142e\3\2\2\2\u142d\u1427\3\2"+
		"\2\2\u142d\u1428\3\2\2\2\u142e\u025b\3\2\2\2\u142f\u1431\6\u012fy\2\u1430"+
		"\u1432\7\u0174\2\2\u1431\u1430\3\2\2\2\u1431\u1432\3\2\2\2\u1432\u1435"+
		"\3\2\2\2\u1433\u1435\3\2\2\2\u1434\u142f\3\2\2\2\u1434\u1433\3\2\2\2\u1435"+
		"\u025d\3\2\2\2\u1436\u1437\tC\2\2\u1437\u025f\3\2\2\2\u1438\u1439\5\u025e"+
		"\u0130\2\u1439\u143a\5\u046a\u0236\2\u143a\u0261\3\2\2\2\u143b\u143c\7"+
		"*\2\2\u143c\u1443\7\u0101\2\2\u143d\u143e\7]\2\2\u143e\u1443\7\u023a\2"+
		"\2\u143f\u1440\7\u0192\2\2\u1440\u1443\7\u00bb\2\2\u1441\u1443\tH\2\2"+
		"\u1442\u143b\3\2\2\2\u1442\u143d\3\2\2\2\u1442\u143f\3\2\2\2\u1442\u1441"+
		"\3\2\2\2\u1443\u0263\3\2\2\2\u1444\u1445\7#\2\2\u1445\u146a\5\u048a\u0246"+
		"\2\u1446\u1447\7\61\2\2\u1447\u1448\7\u00ee\2\2\u1448\u1449\5\u0266\u0134"+
		"\2\u1449\u144c\7\u00fd\2\2\u144a\u144d\5\u046a\u0236\2\u144b\u144d\7\u0082"+
		"\2\2\u144c\u144a\3\2\2\2\u144c\u144b\3\2\2\2\u144d\u146a\3\2\2\2\u144e"+
		"\u1450\7\u00c6\2\2\u144f\u1451\5\u040c\u0207\2\u1450\u144f\3\2\2\2\u1450"+
		"\u1451\3\2\2\2\u1451\u145b\3\2\2\2\u1452\u145c\5\u0278\u013d\2\u1453\u1458"+
		"\5\u0274\u013b\2\u1454\u1455\7\u0307\2\2\u1455\u1457\5\u0274\u013b\2\u1456"+
		"\u1454\3\2\2\2\u1457\u145a\3\2\2\2\u1458\u1456\3\2\2\2\u1458\u1459\3\2"+
		"\2\2\u1459\u145c\3\2\2\2\u145a\u1458\3\2\2\2\u145b\u1452\3\2\2\2\u145b"+
		"\u1453\3\2\2\2\u145c\u146a\3\2\2\2\u145d\u145f\7\u010c\2\2\u145e\u1460"+
		"\tI\2\2\u145f\u145e\3\2\2\2\u145f\u1460\3\2\2\2\u1460\u1461\3\2\2\2\u1461"+
		"\u146a\5\u02a6\u0154\2\u1462\u1463\7\u011b\2\2\u1463\u1464\7\u00ee\2\2"+
		"\u1464\u1465\7\u00fa\2\2\u1465\u1466\7\61\2\2\u1466\u146a\5\u027c\u013f"+
		"\2\u1467\u1468\6\u0133z\2\u1468\u146a\7\u0200\2\2\u1469\u1444\3\2\2\2"+
		"\u1469\u1446\3\2\2\2\u1469\u144e\3\2\2\2\u1469\u145d\3\2\2\2\u1469\u1462"+
		"\3\2\2\2\u1469\u1467\3\2\2\2\u146a\u0265\3\2\2\2\u146b\u146e\5\u0268\u0135"+
		"\2\u146c\u146e\5\u026c\u0137\2\u146d\u146b\3\2\2\2\u146d\u146c\3\2\2\2"+
		"\u146e\u0267\3\2\2\2\u146f\u1474\5\u026a\u0136\2\u1470\u1471\7\u0307\2"+
		"\2\u1471\u1473\5\u026a\u0136\2\u1472\u1470\3\2\2\2\u1473\u1476\3\2\2\2"+
		"\u1474\u1472\3\2\2\2\u1474\u1475\3\2\2\2\u1475\u0269\3\2\2\2\u1476\u1474"+
		"\3\2\2\2\u1477\u1479\5\u0450\u0229\2\u1478\u147a\5\u026e\u0138\2\u1479"+
		"\u1478\3\2\2\2\u1479\u147a\3\2\2\2\u147a\u026b\3\2\2\2\u147b\u147c\5\u0450"+
		"\u0229\2\u147c\u147d\7\u0197\2\2\u147d\u147e\7\u030a\2\2\u147e\u147f\5"+
		"\66\34\2\u147f\u1481\7\u030b\2\2\u1480\u1482\5\u026e\u0138\2\u1481\u1480"+
		"\3\2\2\2\u1481\u1482\3\2\2\2\u1482\u026d\3\2\2\2\u1483\u1484\5\u0198\u00cd"+
		"\2\u1484\u1486\7\u030a\2\2\u1485\u1487\5\u0272\u013a\2\u1486\u1485\3\2"+
		"\2\2\u1486\u1487\3\2\2\2\u1487\u1488\3\2\2\2\u1488\u1489\7\u030b\2\2\u1489"+
		"\u026f\3\2\2\2\u148a\u148d\5\u046a\u0236\2\u148b\u148d\7\u01a6\2\2\u148c"+
		"\u148a\3\2\2\2\u148c\u148b\3\2\2\2\u148d\u0271\3\2\2\2\u148e\u1493\5\u0270"+
		"\u0139\2\u148f\u1490\7\u0307\2\2\u1490\u1492\5\u0270\u0139\2\u1491\u148f"+
		"\3\2\2\2\u1492\u1495\3\2\2\2\u1493\u1491\3\2\2\2\u1493\u1494\3\2\2\2\u1494"+
		"\u0273\3\2\2\2\u1495\u1493\3\2\2\2\u1496\u14a6\tJ\2\2\u1497\u1499\5\u0276"+
		"\u013c\2\u1498\u1497\3\2\2\2\u1498\u1499\3\2\2\2\u1499\u149a\3\2\2\2\u149a"+
		"\u14a6\7\u0123\2\2\u149b\u149c\7\u01bf\2\2\u149c\u149e\7\u0123\2\2\u149d"+
		"\u149f\5\u0310\u0189\2\u149e\u149d\3\2\2\2\u149e\u149f\3\2\2\2\u149f\u14a6"+
		"\3\2\2\2\u14a0\u14a1\6\u013b{\2\u14a1\u14a2\7\u01b0\2\2\u14a2\u14a6\7"+
		"\61\2\2\u14a3\u14a4\6\u013b|\2\u14a4\u14a6\7\u0187\2\2\u14a5\u1496\3\2"+
		"\2\2\u14a5\u1498\3\2\2\2\u14a5\u149b\3\2\2\2\u14a5\u14a0\3\2\2\2\u14a5"+
		"\u14a3\3\2\2\2\u14a6\u0275\3\2\2\2\u14a7\u14a8\tK\2\2\u14a8\u0277\3\2"+
		"\2\2\u14a9\u14b1\t\24\2\2\u14aa\u14ab\7\u0287\2\2\u14ab\u14ac\7\u01b5"+
		"\2\2\u14ac\u14b2\7\u0121\2\2\u14ad\u14af\5\u046c\u0237\2\u14ae\u14b0\5"+
		"\u027a\u013e\2\u14af\u14ae\3\2\2\2\u14af\u14b0\3\2\2\2\u14b0\u14b2\3\2"+
		"\2\2\u14b1\u14aa\3\2\2\2\u14b1\u14ad\3\2\2\2\u14b1\u14b2\3\2\2\2\u14b2"+
		"\u0279\3\2\2\2\u14b3\u14b4\6\u013e}\2\u14b4\u14b5\7\u00ca\2\2\u14b5\u14ba"+
		"\7\u00b5\2\2\u14b6\u14b7\7\u0287\2\2\u14b7\u14b8\7\u01b5\2\2\u14b8\u14ba"+
		"\7\u0121\2\2\u14b9\u14b3\3\2\2\2\u14b9\u14b6\3\2\2\2\u14ba\u027b\3\2\2"+
		"\2\u14bb\u14bc\5\u0450\u0229\2\u14bc\u14be\5\u0282\u0142\2\u14bd\u14bf"+
		"\5\u026e\u0138\2\u14be\u14bd\3\2\2\2\u14be\u14bf\3\2\2\2\u14bf\u14c2\3"+
		"\2\2\2\u14c0\u14c1\7\u00ea\2\2\u14c1\u14c3\7\u0110\2\2\u14c2\u14c0\3\2"+
		"\2\2\u14c2\u14c3\3\2\2\2\u14c3\u14c6\3\2\2\2\u14c4\u14c6\5\u027e\u0140"+
		"\2\u14c5\u14bb\3\2\2\2\u14c5\u14c4\3\2\2\2\u14c6\u027d\3\2\2\2\u14c7\u14cc"+
		"\5\u0280\u0141\2\u14c8\u14c9\7\u0307\2\2\u14c9\u14cb\5\u0280\u0141\2\u14ca"+
		"\u14c8\3\2\2\2\u14cb\u14ce\3\2\2\2\u14cc\u14ca\3\2\2\2\u14cc\u14cd\3\2"+
		"\2\2\u14cd\u027f\3\2\2\2\u14ce\u14cc\3\2\2\2\u14cf\u14d1\5\u0450\u0229"+
		"\2\u14d0\u14d2\5\u026e\u0138\2\u14d1\u14d0\3\2\2\2\u14d1\u14d2\3\2\2\2"+
		"\u14d2\u14d5\3\2\2\2\u14d3\u14d4\7\u00ea\2\2\u14d4\u14d6\7\u0110\2\2\u14d5"+
		"\u14d3\3\2\2\2\u14d5\u14d6\3\2\2\2\u14d6\u0281\3\2\2\2\u14d7\u14d8\7\u0197"+
		"\2\2\u14d8\u14d9\7\u030a\2\2\u14d9\u14da\5\66\34\2\u14da\u14db\7\u030b"+
		"\2\2\u14db\u0283\3\2\2\2\u14dc\u14e1\5\u0286\u0144\2\u14dd\u14e1\5\u0290"+
		"\u0149\2\u14de\u14e1\5\u0292\u014a\2\u14df\u14e1\5\u0296\u014c\2\u14e0"+
		"\u14dc\3\2\2\2\u14e0\u14dd\3\2\2\2\u14e0\u14de\3\2\2\2\u14e0\u14df\3\2"+
		"\2\2\u14e1\u0285\3\2\2\2\u14e2\u14e3\7c\2\2\u14e3\u14e4\7\u02c7\2\2\u14e4"+
		"\u14e5\7\u00db\2\2\u14e5\u14e6\5\u046a\u0236\2\u14e6\u14e8\7\u0259\2\2"+
		"\u14e7\u14e9\5\u04a8\u0255\2\u14e8\u14e7\3\2\2\2\u14e8\u14e9\3\2\2\2\u14e9"+
		"\u14ea\3\2\2\2\u14ea\u14ec\tL\2\2\u14eb\u14ed\5\u0288\u0145\2\u14ec\u14eb"+
		"\3\2\2\2\u14ec\u14ed\3\2\2\2\u14ed\u14ef\3\2\2\2\u14ee\u14f0\5\u028c\u0147"+
		"\2\u14ef\u14ee\3\2\2\2\u14ef\u14f0\3\2\2\2\u14f0\u14f2\3\2\2\2\u14f1\u14f3"+
		"\5\u028e\u0148\2\u14f2\u14f1\3\2\2\2\u14f2\u14f3\3\2\2\2\u14f3\u0287\3"+
		"\2\2\2\u14f4\u14f6\7\u02c9\2\2\u14f5\u14f7\5\u04a8\u0255\2\u14f6\u14f5"+
		"\3\2\2\2\u14f6\u14f7\3\2\2\2\u14f7\u14f8\3\2\2\2\u14f8\u14ff\5\u028a\u0146"+
		"\2\u14f9\u14fb\7\u0307\2\2\u14fa\u14f9\3\2\2\2\u14fa\u14fb\3\2\2\2\u14fb"+
		"\u14fc\3\2\2\2\u14fc\u14fe\5\u028a\u0146\2\u14fd\u14fa\3\2\2\2\u14fe\u1501"+
		"\3\2\2\2\u14ff\u14fd\3\2\2\2\u14ff\u1500\3\2\2\2\u1500\u0289\3\2\2\2\u1501"+
		"\u14ff\3\2\2\2\u1502\u1505\7\u02ed\2\2\u1503\u1504\7\u02f9\2\2\u1504\u1506"+
		"\7\u02ed\2\2\u1505\u1503\3\2\2\2\u1505\u1506\3\2\2\2\u1506\u028b\3\2\2"+
		"\2\u1507\u1509\7\u02c6\2\2\u1508\u150a\5\u04a8\u0255\2\u1509\u1508\3\2"+
		"\2\2\u1509\u150a\3\2\2\2\u150a\u150b\3\2\2\2\u150b\u150c\7\u02ed\2\2\u150c"+
		"\u028d\3\2\2\2\u150d\u150e\tM\2\2\u150e\u028f\3\2\2\2\u150f\u1510\7\r"+
		"\2\2\u1510\u1511\7\u02c7\2\2\u1511\u1512\7\u00db\2\2\u1512\u1514\5\u0464"+
		"\u0233\2\u1513\u1515\5\u0288\u0145\2\u1514\u1513\3\2\2\2\u1514\u1515\3"+
		"\2\2\2\u1515\u1517\3\2\2\2\u1516\u1518\5\u028c\u0147\2\u1517\u1516\3\2"+
		"\2\2\u1517\u1518\3\2\2\2\u1518\u151a\3\2\2\2\u1519\u151b\5\u028e\u0148"+
		"\2\u151a\u1519\3\2\2\2\u151a\u151b\3\2\2\2\u151b\u151d\3\2\2\2\u151c\u151e"+
		"\7\u00c8\2\2\u151d\u151c\3\2\2\2\u151d\u151e\3\2\2\2\u151e\u0291\3\2\2"+
		"\2\u151f\u1520\7\u01fc\2\2\u1520\u1521\7\u02c7\2\2\u1521\u1522\7\u00db"+
		"\2\2\u1522\u1525\5\u046a\u0236\2\u1523\u1524\7\u00ca\2\2\u1524\u1526\5"+
		"\u0294\u014b\2\u1525\u1523\3\2\2\2\u1525\u1526\3\2\2\2\u1526\u0293\3\2"+
		"\2\2\u1527\u152e\5\u0478\u023d\2\u1528\u152a\7\u0307\2\2\u1529\u1528\3"+
		"\2\2\2\u1529\u152a\3\2\2\2\u152a\u152b\3\2\2\2\u152b\u152d\5\u0478\u023d"+
		"\2\u152c\u1529\3\2\2\2\u152d\u1530\3\2\2\2\u152e\u152c\3\2\2\2\u152e\u152f"+
		"\3\2\2\2\u152f\u0295\3\2\2\2\u1530\u152e\3\2\2\2\u1531\u1532\7\u0096\2"+
		"\2\u1532\u1533\7\u02c7\2\2\u1533\u1534\7\u00db\2\2\u1534\u1536\5\u0464"+
		"\u0233\2\u1535\u1537\7\u00c8\2\2\u1536\u1535\3\2\2\2\u1536\u1537\3\2\2"+
		"\2\u1537\u0297\3\2\2\2\u1538\u153f\5\u029a\u014e\2\u1539\u153f\5\u029c"+
		"\u014f\2\u153a\u153f\5\u02a0\u0151\2\u153b\u153f\5\u02a2\u0152\2\u153c"+
		"\u153d\6\u014d~\2\u153d\u153f\5\u02a4\u0153\2\u153e\u1538\3\2\2\2\u153e"+
		"\u1539\3\2\2\2\u153e\u153a\3\2\2\2\u153e\u153b\3\2\2\2\u153e\u153c\3\2"+
		"\2\2\u153f\u0299\3\2\2\2\u1540\u1541\tN\2\2\u1541\u1544\5\u0450\u0229"+
		"\2\u1542\u1545\5\u0486\u0244\2\u1543\u1545\5\u0418\u020d\2\u1544\u1542"+
		"\3\2\2\2\u1544\u1543\3\2\2\2\u1544\u1545\3\2\2\2\u1545\u029b\3\2\2\2\u1546"+
		"\u1556\tN\2\2\u1547\u1548\6\u014f\177\2\u1548\u1557\7\u00b6\2\2\u1549"+
		"\u154a\6\u014f\u0080\2\u154a\u1557\7\u0196\2\2\u154b\u154c\6\u014f\u0081"+
		"\2\u154c\u154d\7\u00cb\2\2\u154d\u154e\7\u02f0\2\2\u154e\u1557\5\u049e"+
		"\u0250\2\u154f\u1550\6\u014f\u0082\2\u1550\u1557\7\20\2\2\u1551\u1552"+
		"\6\u014f\u0083\2\u1552\u1553\7\20\2\2\u1553\u1554\7\u00cb\2\2\u1554\u1555"+
		"\7\u02f0\2\2\u1555\u1557\5\u049e\u0250\2\u1556\u1547\3\2\2\2\u1556\u1549"+
		"\3\2\2\2\u1556\u154b\3\2\2\2\u1556\u154f\3\2\2\2\u1556\u1551\3\2\2\2\u1556"+
		"\u1557\3\2\2\2\u1557\u1558\3\2\2\2\u1558\u1559\5\u029e\u0150\2\u1559\u029d"+
		"\3\2\2\2\u155a\u1567\5\u010c\u0087\2\u155b\u1560\6\u0150\u0084\2\u155c"+
		"\u1561\5\u00dep\2\u155d\u1561\5\u00eav\2\u155e\u1561\5\u010a\u0086\2\u155f"+
		"\u1561\5\u01a2\u00d2\2\u1560\u155c\3\2\2\2\u1560\u155d\3\2\2\2\u1560\u155e"+
		"\3\2\2\2\u1560\u155f\3\2\2\2\u1561\u1567\3\2\2\2\u1562\u1563\6\u0150\u0085"+
		"\2\u1563\u1564\7\u00ca\2\2\u1564\u1565\7V\2\2\u1565\u1567\5\u0478\u023d"+
		"\2\u1566\u155a\3\2\2\2\u1566\u155b\3\2\2\2\u1566\u1562\3\2\2\2\u1567\u029f"+
		"\3\2\2\2\u1568\u1569\7\u00e0\2\2\u1569\u156a\5\u049e\u0250\2\u156a\u02a1"+
		"\3\2\2\2\u156b\u156c\7\u026e\2\2\u156c\u156d\5\u046a\u0236\2\u156d\u02a3"+
		"\3\2\2\2\u156e\u156f\7\u02cc\2\2\u156f\u02a5\3\2\2\2\u1570\u1571\b\u0154"+
		"\1\2\u1571\u1577\5\u02a8\u0155\2\u1572\u1574\7\u0103\2\2\u1573\u1575\5"+
		"\u02fa\u017e\2\u1574\u1573\3\2\2\2\u1574\u1575\3\2\2\2\u1575\u1576\3\2"+
		"\2\2\u1576\u1578\tO\2\2\u1577\u1572\3\2\2\2\u1577\u1578\3\2\2\2\u1578"+
		"\u157c\3\2\2\2\u1579\u157a\7\u0175\2\2\u157a\u157c\5\u02a6\u0154\6\u157b"+
		"\u1570\3\2\2\2\u157b\u1579\3\2\2\2\u157c\u1588\3\2\2\2\u157d\u157e\f\5"+
		"\2\2\u157e\u157f\tP\2\2\u157f\u1587\5\u02a6\u0154\6\u1580\u1581\f\4\2"+
		"\2\u1581\u1582\7\u0290\2\2\u1582\u1587\5\u02a6\u0154\5\u1583\u1584\f\3"+
		"\2\2\u1584\u1585\tQ\2\2\u1585\u1587\5\u02a6\u0154\4\u1586\u157d\3\2\2"+
		"\2\u1586\u1580\3\2\2\2\u1586\u1583\3\2\2\2\u1587\u158a\3\2\2\2\u1588\u1586"+
		"\3\2\2\2\u1588\u1589\3\2\2\2\u1589\u02a7\3\2\2\2\u158a\u1588\3\2\2\2\u158b"+
		"\u158c\b\u0155\1\2\u158c\u158d\5\u02ac\u0157\2\u158d\u159f\3\2\2\2\u158e"+
		"\u158f\f\5\2\2\u158f\u1591\7\u0103\2\2\u1590\u1592\5\u02fa\u017e\2\u1591"+
		"\u1590\3\2\2\2\u1591\u1592\3\2\2\2\u1592\u1593\3\2\2\2\u1593\u159e\7\u017a"+
		"\2\2\u1594\u1595\f\4\2\2\u1595\u1596\5\u02aa\u0156\2\u1596\u1597\5\u02ac"+
		"\u0157\2\u1597\u159e\3\2\2\2\u1598\u1599\f\3\2\2\u1599\u159a\5\u02aa\u0156"+
		"\2\u159a\u159b\tR\2\2\u159b\u159c\5\u011a\u008e\2\u159c\u159e\3\2\2\2"+
		"\u159d\u158e\3\2\2\2\u159d\u1594\3\2\2\2\u159d\u1598\3\2\2\2\u159e\u15a1"+
		"\3\2\2\2\u159f\u159d\3\2\2\2\u159f\u15a0\3\2\2\2\u15a0\u02a9\3\2\2\2\u15a1"+
		"\u159f\3\2\2\2\u15a2\u15a3\tS\2\2\u15a3\u02ab\3\2\2\2\u15a4\u15b2\5\u02b0"+
		"\u0159\2\u15a5\u15a7\5\u02fa\u017e\2\u15a6\u15a5\3\2\2\2\u15a6\u15a7\3"+
		"\2\2\2\u15a7\u15a8\3\2\2\2\u15a8\u15b3\5\u02ae\u0158\2\u15a9\u15aa\6\u0157"+
		"\u008c\2\u15aa\u15ac\7\u02df\2\2\u15ab\u15ad\7\u029e\2\2\u15ac\u15ab\3"+
		"\2\2\2\u15ac\u15ad\3\2\2\2\u15ad\u15ae\3\2\2\2\u15ae\u15b3\5\u0306\u0184"+
		"\2\u15af\u15b0\7\u020b\2\2\u15b0\u15b1\7\u0115\2\2\u15b1\u15b3\5\u02b0"+
		"\u0159\2\u15b2\u15a6\3\2\2\2\u15b2\u15a9\3\2\2\2\u15b2\u15af\3\2\2\2\u15b2"+
		"\u15b3\3\2\2\2\u15b3\u02ad\3\2\2\2\u15b4\u15ba\7\u00fd\2\2\u15b5\u15bb"+
		"\5\u011a\u008e\2\u15b6\u15b7\7\u030a\2\2\u15b7\u15b8\5\u02f6\u017c\2\u15b8"+
		"\u15b9\7\u030b\2\2\u15b9\u15bb\3\2\2\2\u15ba\u15b5\3\2\2\2\u15ba\u15b6"+
		"\3\2\2\2\u15bb\u15ca\3\2\2\2\u15bc\u15bd\7 \2\2\u15bd\u15be\5\u02b0\u0159"+
		"\2\u15be\u15bf\7\21\2\2\u15bf\u15c0\5\u02ac\u0157\2\u15c0\u15ca\3\2\2"+
		"\2\u15c1\u15c2\7\u0115\2\2\u15c2\u15c5\5\u02b2\u015a\2\u15c3\u15c4\7\u00aa"+
		"\2\2\u15c4\u15c6\5\u02b2\u015a\2\u15c5\u15c3\3\2\2\2\u15c5\u15c6\3\2\2"+
		"\2\u15c6\u15ca\3\2\2\2\u15c7\u15c8\7\u01be\2\2\u15c8\u15ca\5\u02b0\u0159"+
		"\2\u15c9\u15b4\3\2\2\2\u15c9\u15bc\3\2\2\2\u15c9\u15c1\3\2\2\2\u15c9\u15c7"+
		"\3\2\2\2\u15ca\u02af\3\2\2\2\u15cb\u15cc\b\u0159\1\2\u15cc\u15cd\5\u02b2"+
		"\u015a\2\u15cd\u15e8\3\2\2\2\u15ce\u15cf\f\t\2\2\u15cf\u15d0\7\u0303\2"+
		"\2\u15d0\u15e7\5\u02b0\u0159\n\u15d1\u15d2\f\b\2\2\u15d2\u15d3\tT\2\2"+
		"\u15d3\u15e7\5\u02b0\u0159\t\u15d4\u15d5\f\7\2\2\u15d5\u15d6\tU\2\2\u15d6"+
		"\u15e7\5\u02b0\u0159\b\u15d7\u15d8\f\5\2\2\u15d8\u15d9\tV\2\2\u15d9\u15e7"+
		"\5\u02b0\u0159\6\u15da\u15db\f\4\2\2\u15db\u15dc\7\u0302\2\2\u15dc\u15e7"+
		"\5\u02b0\u0159\5\u15dd\u15de\f\3\2\2\u15de\u15df\7\u0305\2\2\u15df\u15e7"+
		"\5\u02b0\u0159\4\u15e0\u15e1\f\6\2\2\u15e1\u15e2\tU\2\2\u15e2\u15e3\7"+
		"\u00f9\2\2\u15e3\u15e4\5\u02a6\u0154\2\u15e4\u15e5\5\u02fe\u0180\2\u15e5"+
		"\u15e7\3\2\2\2\u15e6\u15ce\3\2\2\2\u15e6\u15d1\3\2\2\2\u15e6\u15d4\3\2"+
		"\2\2\u15e6\u15d7\3\2\2\2\u15e6\u15da\3\2\2\2\u15e6\u15dd\3\2\2\2\u15e6"+
		"\u15e0\3\2\2\2\u15e7\u15ea\3\2\2\2\u15e8\u15e6\3\2\2\2\u15e8\u15e9\3\2"+
		"\2\2\u15e9\u02b1\3\2\2\2\u15ea\u15e8\3\2\2\2\u15eb\u15ec\b\u015a\1\2\u15ec"+
		"\u15f0\5\u02e6\u0174\2\u15ed\u15ee\5\u04a8\u0255\2\u15ee\u15ef\5\u02a6"+
		"\u0154\2\u15ef\u15f1\3\2\2\2\u15f0\u15ed\3\2\2\2\u15f0\u15f1\3\2\2\2\u15f1"+
		"\u1659\3\2\2\2\u15f2\u15f4\5\u0418\u020d\2\u15f3\u15f5\5\u02b6\u015c\2"+
		"\u15f4\u15f3\3\2\2\2\u15f4\u15f5\3\2\2\2\u15f5\u1659\3\2\2\2\u15f6\u1659"+
		"\5\u02ce\u0168\2\u15f7\u1659\5\u02e0\u0171\2\u15f8\u1659\5\u047e\u0240"+
		"\2\u15f9\u1659\7\u0315\2\2\u15fa\u1659\5\u02b8\u015d\2\u15fb\u15fc\6\u015a"+
		"\u0094\2\u15fc\u1659\5\u02ba\u015e\2\u15fd\u15fe\6\u015a\u0095\2\u15fe"+
		"\u1659\5\u02bc\u015f\2\u15ff\u1600\tW\2\2\u1600\u1659\5\u02b2\u015a\20"+
		"\u1601\u1602\5\u02fc\u017f\2\u1602\u1603\5\u02b2\u015a\17\u1603\u1659"+
		"\3\2\2\2\u1604\u1606\7\u01e9\2\2\u1605\u1604\3\2\2\2\u1605\u1606\3\2\2"+
		"\2\u1606\u1607\3\2\2\2\u1607\u1608\7\u030a\2\2\u1608\u1609\5\u02f6\u017c"+
		"\2\u1609\u160a\7\u030b\2\2\u160a\u1659\3\2\2\2\u160b\u160d\7\u00b0\2\2"+
		"\u160c\u160b\3\2\2\2\u160c\u160d\3\2\2\2\u160d\u160e\3\2\2\2\u160e\u1659"+
		"\5\u011a\u008e\2\u160f\u1610\7\u030c\2\2\u1610\u1611\5\u046a\u0236\2\u1611"+
		"\u1612\5\u02a6\u0154\2\u1612\u1613\7\u030d\2\2\u1613\u1659\3\2\2\2\u1614"+
		"\u1615\7\u0142\2\2\u1615\u1616\5\u02c8\u0165\2\u1616\u1617\7\t\2\2\u1617"+
		"\u1618\7\u030a\2\2\u1618\u161a\5\u02b0\u0159\2\u1619\u161b\5\u02cc\u0167"+
		"\2\u161a\u1619\3\2\2\2\u161a\u161b\3\2\2\2\u161b\u161c\3\2\2\2\u161c\u161d"+
		"\7\u030b\2\2\u161d\u1659\3\2\2\2\u161e\u161f\7\"\2\2\u161f\u1659\5\u02b2"+
		"\u015a\n\u1620\u1621\7\66\2\2\u1621\u1622\7\u030a\2\2\u1622\u1623\5\u02a6"+
		"\u0154\2\u1623\u1624\7\23\2\2\u1624\u1626\5\u02f4\u017b\2\u1625\u1627"+
		"\5\u02b4\u015b\2\u1626\u1625\3\2\2\2\u1626\u1627\3\2\2\2\u1627\u1628\3"+
		"\2\2\2\u1628\u1629\7\u030b\2\2\u1629\u1659\3\2\2\2\u162a\u162c\7\65\2"+
		"\2\u162b\u162d\5\u02a6\u0154\2\u162c\u162b\3\2\2\2\u162c\u162d\3\2\2\2"+
		"\u162d\u1631\3\2\2\2\u162e\u162f\5\u02ee\u0178\2\u162f\u1630\5\u02f0\u0179"+
		"\2\u1630\u1632\3\2\2\2\u1631\u162e\3\2\2\2\u1632\u1633\3\2\2\2\u1633\u1631"+
		"\3\2\2\2\u1633\u1634\3\2\2\2\u1634\u1636\3\2\2\2\u1635\u1637\5\u02f2\u017a"+
		"\2\u1636\u1635\3\2\2\2\u1636\u1637\3\2\2\2\u1637\u1638\3\2\2\2\u1638\u1639"+
		"\7\u00a1\2\2\u1639\u1659\3\2\2\2\u163a\u163b\7`\2\2\u163b\u163c\7\u030a"+
		"\2\2\u163c\u163d\5\u02a6\u0154\2\u163d\u163e\7\u0307\2\2\u163e\u163f\5"+
		"\u02f4\u017b\2\u163f\u1640\7\u030b\2\2\u1640\u1659\3\2\2\2\u1641\u1642"+
		"\7`\2\2\u1642\u1643\7\u030a\2\2\u1643\u1644\5\u02a6\u0154\2\u1644\u1645"+
		"\7\u026f\2\2\u1645\u1646\5\u03aa\u01d6\2\u1646\u1647\7\u030b\2\2\u1647"+
		"\u1659\3\2\2\2\u1648\u1649\7\u0082\2\2\u1649\u164a\7\u030a\2\2\u164a\u164b"+
		"\5\u0472\u023a\2\u164b\u164c\7\u030b\2\2\u164c\u1659\3\2\2\2\u164d\u164e"+
		"\7\u0274\2\2\u164e\u164f\7\u030a\2\2\u164f\u1650\5\u0472\u023a\2\u1650"+
		"\u1651\7\u030b\2\2\u1651\u1659\3\2\2\2\u1652\u1653\7\u00f9\2\2\u1653\u1654"+
		"\5\u02a6\u0154\2\u1654\u1655\5\u02fe\u0180\2\u1655\u1656\7\u02f8\2\2\u1656"+
		"\u1657\5\u02a6\u0154\2\u1657\u1659\3\2\2\2\u1658\u15eb\3\2\2\2\u1658\u15f2"+
		"\3\2\2\2\u1658\u15f6\3\2\2\2\u1658\u15f7\3\2\2\2\u1658\u15f8\3\2\2\2\u1658"+
		"\u15f9\3\2\2\2\u1658\u15fa\3\2\2\2\u1658\u15fb\3\2\2\2\u1658\u15fd\3\2"+
		"\2\2\u1658\u15ff\3\2\2\2\u1658\u1601\3\2\2\2\u1658\u1605\3\2\2\2\u1658"+
		"\u160c\3\2\2\2\u1658\u160f\3\2\2\2\u1658\u1614\3\2\2\2\u1658\u161e\3\2"+
		"\2\2\u1658\u1620\3\2\2\2\u1658\u162a\3\2\2\2\u1658\u163a\3\2\2\2\u1658"+
		"\u1641\3\2\2\2\u1658\u1648\3\2\2\2\u1658\u164d\3\2\2\2\u1658\u1652\3\2"+
		"\2\2\u1659\u1662\3\2\2\2\u165a\u165b\f\21\2\2\u165b\u165c\7\u02ec\2\2"+
		"\u165c\u1661\5\u02b2\u015a\22\u165d\u165e\f\27\2\2\u165e\u165f\7G\2\2"+
		"\u165f\u1661\5\u049e\u0250\2\u1660\u165a\3\2\2\2\u1660\u165d\3\2\2\2\u1661"+
		"\u1664\3\2\2\2\u1662\u1660\3\2\2\2\u1662\u1663\3\2\2\2\u1663\u02b3\3\2"+
		"\2\2\u1664\u1662\3\2\2\2\u1665\u1666\6\u015b\u0098\2\u1666\u1667\7\u02dd"+
		"\2\2\u1667\u02b5\3\2\2\2\u1668\u1669\6\u015c\u0099\2\u1669\u166a\7\u030f"+
		"\2\2\u166a\u166f\5\u0484\u0243\2\u166b\u166c\6\u015c\u009a\2\u166c\u166d"+
		"\7\u0310\2\2\u166d\u166f\5\u0484\u0243\2\u166e\u1668\3\2\2\2\u166e\u166b"+
		"\3\2\2\2\u166f\u02b7\3\2\2\2\u1670\u1671\7\34\2\2\u1671\u1673\7\u030a"+
		"\2\2\u1672\u1674\7\u0091\2\2\u1673\u1672\3\2\2\2\u1673\u1674\3\2\2\2\u1674"+
		"\u1675\3\2\2\2\u1675\u1676\5\u02c6\u0164\2\u1676\u1679\7\u030b\2\2\u1677"+
		"\u1678\6\u015d\u009b\2\u1678\u167a\5\u02be\u0160\2\u1679\u1677\3\2\2\2"+
		"\u1679\u167a\3\2\2\2\u167a\u16f4\3\2\2\2\u167b\u167c\tX\2\2\u167c\u167d"+
		"\7\u030a\2\2\u167d\u167e\5\u02c6\u0164\2\u167e\u1681\7\u030b\2\2\u167f"+
		"\u1680\6\u015d\u009c\2\u1680\u1682\5\u02be\u0160\2\u1681\u167f\3\2\2\2"+
		"\u1681\u1682\3\2\2\2\u1682\u16f4\3\2\2\2\u1683\u1684\6\u015d\u009d\2\u1684"+
		"\u16f4\5\u02c4\u0163\2\u1685\u1686\7a\2\2\u1686\u1688\7\u030a\2\2\u1687"+
		"\u1689\7\f\2\2\u1688\u1687\3\2\2\2\u1688\u1689\3\2\2\2\u1689\u168a\3\2"+
		"\2\2\u168a\u168b\7\u02fa\2\2\u168b\u168e\7\u030b\2\2\u168c\u168d\6\u015d"+
		"\u009e\2\u168d\u168f\5\u02be\u0160\2\u168e\u168c\3\2\2\2\u168e\u168f\3"+
		"\2\2\2\u168f\u16f4\3\2\2\2\u1690\u1691\7a\2\2\u1691\u1699\7\u030a\2\2"+
		"\u1692\u1694\7\f\2\2\u1693\u1692\3\2\2\2\u1693\u1694\3\2\2\2\u1694\u1695"+
		"\3\2\2\2\u1695\u169a\7\u02fa\2\2\u1696\u169a\5\u02c6\u0164\2\u1697\u1698"+
		"\7\u0091\2\2\u1698\u169a\5\u02f6\u017c\2\u1699\u1693\3\2\2\2\u1699\u1696"+
		"\3\2\2\2\u1699\u1697\3\2\2\2\u169a\u169b\3\2\2\2\u169b\u169e\7\u030b\2"+
		"\2\u169c\u169d\6\u015d\u009f\2\u169d\u169f\5\u02be\u0160\2\u169e\u169c"+
		"\3\2\2\2\u169e\u169f\3\2\2\2\u169f\u16f4\3\2\2\2\u16a0\u16a1\7\u015b\2"+
		"\2\u16a1\u16a3\7\u030a\2\2\u16a2\u16a4\7\u0091\2\2\u16a3\u16a2\3\2\2\2"+
		"\u16a3\u16a4\3\2\2\2\u16a4\u16a5\3\2\2\2\u16a5\u16a6\5\u02c6\u0164\2\u16a6"+
		"\u16a9\7\u030b\2\2\u16a7\u16a8\6\u015d\u00a0\2\u16a8\u16aa\5\u02be\u0160"+
		"\2\u16a9\u16a7\3\2\2\2\u16a9\u16aa\3\2\2\2\u16aa\u16f4\3\2\2\2\u16ab\u16ac"+
		"\7\u0148\2\2\u16ac\u16ae\7\u030a\2\2\u16ad\u16af\7\u0091\2\2\u16ae\u16ad"+
		"\3\2\2\2\u16ae\u16af\3\2\2\2\u16af\u16b0\3\2\2\2\u16b0\u16b1\5\u02c6\u0164"+
		"\2\u16b1\u16b4\7\u030b\2\2\u16b2\u16b3\6\u015d\u00a1\2\u16b3\u16b5\5\u02be"+
		"\u0160\2\u16b4\u16b2\3\2\2\2\u16b4\u16b5\3\2\2\2\u16b5\u16f4\3\2\2\2\u16b6"+
		"\u16b7\7\u0229\2\2\u16b7\u16b8\7\u030a\2\2\u16b8\u16b9\5\u02c6\u0164\2"+
		"\u16b9\u16bc\7\u030b\2\2\u16ba\u16bb\6\u015d\u00a2\2\u16bb\u16bd\5\u02be"+
		"\u0160\2\u16bc\u16ba\3\2\2\2\u16bc\u16bd\3\2\2\2\u16bd\u16f4\3\2\2\2\u16be"+
		"\u16bf\7\u027a\2\2\u16bf\u16c0\7\u030a\2\2\u16c0\u16c1\5\u02c6\u0164\2"+
		"\u16c1\u16c4\7\u030b\2\2\u16c2\u16c3\6\u015d\u00a3\2\u16c3\u16c5\5\u02be"+
		"\u0160\2\u16c4\u16c2\3\2\2\2\u16c4\u16c5\3\2\2\2\u16c5\u16f4\3\2\2\2\u16c6"+
		"\u16c7\7\u0226\2\2\u16c7\u16c8\7\u030a\2\2\u16c8\u16c9\5\u02c6\u0164\2"+
		"\u16c9\u16cc\7\u030b\2\2\u16ca\u16cb\6\u015d\u00a4\2\u16cb\u16cd\5\u02be"+
		"\u0160\2\u16cc\u16ca\3\2\2\2\u16cc\u16cd\3\2\2\2\u16cd\u16f4\3\2\2\2\u16ce"+
		"\u16cf\7\u027d\2\2\u16cf\u16d0\7\u030a\2\2\u16d0\u16d1\5\u02c6\u0164\2"+
		"\u16d1\u16d4\7\u030b\2\2\u16d2\u16d3\6\u015d\u00a5\2\u16d3\u16d5\5\u02be"+
		"\u0160\2\u16d4\u16d2\3\2\2\2\u16d4\u16d5\3\2\2\2\u16d5\u16f4\3\2\2\2\u16d6"+
		"\u16d7\7\u0236\2\2\u16d7\u16d9\7\u030a\2\2\u16d8\u16da\7\u0091\2\2\u16d9"+
		"\u16d8\3\2\2\2\u16d9\u16da\3\2\2\2\u16da\u16db\3\2\2\2\u16db\u16dc\5\u02c6"+
		"\u0164\2\u16dc\u16df\7\u030b\2\2\u16dd\u16de\6\u015d\u00a6\2\u16de\u16e0"+
		"\5\u02be\u0160\2\u16df\u16dd\3\2\2\2\u16df\u16e0\3\2\2\2\u16e0\u16f4\3"+
		"\2\2\2\u16e1\u16e2\7\u00dc\2\2\u16e2\u16e4\7\u030a\2\2\u16e3\u16e5\7\u0091"+
		"\2\2\u16e4\u16e3\3\2\2\2\u16e4\u16e5\3\2\2\2\u16e5\u16e6\3\2\2\2\u16e6"+
		"\u16e8\5\u02f6\u017c\2\u16e7\u16e9\5\u014a\u00a6\2\u16e8\u16e7\3\2\2\2"+
		"\u16e8\u16e9\3\2\2\2\u16e9\u16ec\3\2\2\2\u16ea\u16eb\7\u01f5\2\2\u16eb"+
		"\u16ed\5\u0486\u0244\2\u16ec\u16ea\3\2\2\2\u16ec\u16ed\3\2\2\2\u16ed\u16ee"+
		"\3\2\2\2\u16ee\u16f1\7\u030b\2\2\u16ef\u16f0\6\u015d\u00a7\2\u16f0\u16f2"+
		"\5\u02be\u0160\2\u16f1\u16ef\3\2\2\2\u16f1\u16f2\3\2\2\2\u16f2\u16f4\3"+
		"\2\2\2\u16f3\u1670\3\2\2\2\u16f3\u167b\3\2\2\2\u16f3\u1683\3\2\2\2\u16f3"+
		"\u1685\3\2\2\2\u16f3\u1690\3\2\2\2\u16f3\u16a0\3\2\2\2\u16f3\u16ab\3\2"+
		"\2\2\u16f3\u16b6\3\2\2\2\u16f3\u16be\3\2\2\2\u16f3\u16c6\3\2\2\2\u16f3"+
		"\u16ce\3\2\2\2\u16f3\u16d6\3\2\2\2\u16f3\u16e1\3\2\2\2\u16f4\u02b9\3\2"+
		"\2\2\u16f5\u16f6\7\u02a2\2\2\u16f6\u16f7\7\u030a\2\2\u16f7\u16f8\5\u02f6"+
		"\u017c\2\u16f8\u16f9\7\u030b\2\2\u16f9\u02bb\3\2\2\2\u16fa\u16fb\tY\2"+
		"\2\u16fb\u16fc\5\u04a6\u0254\2\u16fc\u16fd\5\u02be\u0160\2\u16fd\u1725"+
		"\3\2\2\2\u16fe\u16ff\7\u02b2\2\2\u16ff\u1700\5\u0306\u0184\2\u1700\u1701"+
		"\5\u02be\u0160\2\u1701\u1725\3\2\2\2\u1702\u1703\tZ\2\2\u1703\u1704\7"+
		"\u030a\2\2\u1704\u1706\5\u02a6\u0154\2\u1705\u1707\5\u02c0\u0161\2\u1706"+
		"\u1705\3\2\2\2\u1706\u1707\3\2\2\2\u1707\u1708\3\2\2\2\u1708\u170a\7\u030b"+
		"\2\2\u1709\u170b\5\u02c2\u0162\2\u170a\u1709\3\2\2\2\u170a\u170b\3\2\2"+
		"\2\u170b\u170c\3\2\2\2\u170c\u170d\5\u02be\u0160\2\u170d\u1725\3\2\2\2"+
		"\u170e\u170f\t[\2\2\u170f\u1711\5\u0304\u0183\2\u1710\u1712\5\u02c2\u0162"+
		"\2\u1711\u1710\3\2\2\2\u1711\u1712\3\2\2\2\u1712\u1713\3\2\2\2\u1713\u1714"+
		"\5\u02be\u0160\2\u1714\u1725\3\2\2\2\u1715\u1716\7\u02b1\2\2\u1716\u1717"+
		"\7\u030a\2\2\u1717\u1718\5\u02a6\u0154\2\u1718\u1719\7\u0307\2\2\u1719"+
		"\u171a\5\u02b2\u015a\2\u171a\u171d\7\u030b\2\2\u171b\u171c\7\u00cd\2\2"+
		"\u171c\u171e\t\\\2\2\u171d\u171b\3\2\2\2\u171d\u171e\3\2\2\2\u171e\u1720"+
		"\3\2\2\2\u171f\u1721\5\u02c2\u0162\2\u1720\u171f\3\2\2\2\u1720\u1721\3"+
		"\2\2\2\u1721\u1722\3\2\2\2\u1722\u1723\5\u02be\u0160\2\u1723\u1725\3\2"+
		"\2\2\u1724\u16fa\3\2\2\2\u1724\u16fe\3\2\2\2\u1724\u1702\3\2\2\2\u1724"+
		"\u170e\3\2\2\2\u1724\u1715\3\2\2\2\u1725\u02bd\3\2\2\2\u1726\u1729\7\u02b5"+
		"\2\2\u1727\u172a\5\u0466\u0234\2\u1728\u172a\5\u0130\u0099\2\u1729\u1727"+
		"\3\2\2\2\u1729\u1728\3\2\2\2\u172a\u02bf\3\2\2\2\u172b\u172e\7\u0307\2"+
		"\2\u172c\u172f\5\u047a\u023e\2\u172d\u172f\7\u0315\2\2\u172e\u172c\3\2"+
		"\2\2\u172e\u172d\3\2\2\2\u172f\u1732\3\2\2\2\u1730\u1731\7\u0307\2\2\u1731"+
		"\u1733\5\u02a6\u0154\2\u1732\u1730\3\2\2\2\u1732\u1733\3\2\2\2\u1733\u02c1"+
		"\3\2\2\2\u1734\u1735\t]\2\2\u1735\u1736\7\u02b3\2\2\u1736\u02c3\3\2\2"+
		"\2\u1737\u1738\7\u029d\2\2\u1738\u1739\7\u030a\2\2\u1739\u173a\5\u02c6"+
		"\u0164\2\u173a\u173c\7\u030b\2\2\u173b\u173d\5\u02be\u0160\2\u173c\u173b"+
		"\3\2\2\2\u173c\u173d\3\2\2\2\u173d\u1748\3\2\2\2\u173e\u173f\7\u029c\2"+
		"\2\u173f\u1740\7\u030a\2\2\u1740\u1741\5\u02c6\u0164\2\u1741\u1742\7\u0307"+
		"\2\2\u1742\u1743\5\u02c6\u0164\2\u1743\u1745\7\u030b\2\2\u1744\u1746\5"+
		"\u02be\u0160\2\u1745\u1744\3\2\2\2\u1745\u1746\3\2\2\2\u1746\u1748\3\2"+
		"\2\2\u1747\u1737\3\2\2\2\u1747\u173e\3\2\2\2\u1748\u02c5\3\2\2\2\u1749"+
		"\u174b\7\f\2\2\u174a\u1749\3\2\2\2\u174a\u174b\3\2\2\2\u174b\u174c\3\2"+
		"\2\2\u174c\u174d\5\u02a6\u0154\2\u174d\u02c7\3\2\2\2\u174e\u1754\5\u02ca"+
		"\u0166\2\u174f\u1750\7\u030a\2\2\u1750\u1751\5\u02ca\u0166\2\u1751\u1752"+
		"\7\u030b\2\2\u1752\u1754\3\2\2\2\u1753\u174e\3\2\2\2\u1753\u174f\3\2\2"+
		"\2\u1754\u02c9\3\2\2\2\u1755\u175a\5\u0472\u023a\2\u1756\u1757\7\u0307"+
		"\2\2\u1757\u1759\5\u0472\u023a\2\u1758\u1756\3\2\2\2\u1759\u175c\3\2\2"+
		"\2\u175a\u1758\3\2\2\2\u175a\u175b\3\2\2\2\u175b\u02cb\3\2\2\2\u175c\u175a"+
		"\3\2\2\2\u175d\u175e\7\u00fd\2\2\u175e\u175f\7+\2\2\u175f\u176d\7\u015c"+
		"\2\2\u1760\u1761\7\u00fd\2\2\u1761\u1762\7\u0169\2\2\u1762\u1763\7\u010d"+
		"\2\2\u1763\u1767\7\u015c\2\2\u1764\u1765\7\u0287\2\2\u1765\u1766\7\u01b0"+
		"\2\2\u1766\u1768\7\u00b2\2\2\u1767\u1764\3\2\2\2\u1767\u1768\3\2\2\2\u1768"+
		"\u176d\3\2\2\2\u1769\u176a\7\u0287\2\2\u176a\u176b\7\u01b0\2\2\u176b\u176d"+
		"\7\u00b2\2\2\u176c\u175d\3\2\2\2\u176c\u1760\3\2\2\2\u176c\u1769\3\2\2"+
		"\2\u176d\u02cd\3\2\2\2\u176e\u176f\7>\2\2\u176f\u1770\7\u030a\2\2\u1770"+
		"\u1773\5\u02f6\u017c\2\u1771\u1772\7\u026f\2\2\u1772\u1774\5\u03aa\u01d6"+
		"\2\u1773\u1771\3\2\2\2\u1773\u1774\3\2\2\2\u1774\u1775\3\2\2\2\u1775\u1776"+
		"\7\u030b\2\2\u1776\u1880\3\2\2\2\u1777\u1779\7k\2\2\u1778\u177a\5\u04a6"+
		"\u0254\2\u1779\u1778\3\2\2\2\u1779\u177a\3\2\2\2\u177a\u1880\3\2\2\2\u177b"+
		"\u177c\7v\2\2\u177c\u1880\5\u0304\u0183\2\u177d\u177e\7|\2\2\u177e\u1880"+
		"\5\u0304\u0183\2\u177f\u1780\7\u00e7\2\2\u1780\u1880\5\u0304\u0183\2\u1781"+
		"\u1782\7\u00f4\2\2\u1782\u1783\7\u030a\2\2\u1783\u1784\5\u02a6\u0154\2"+
		"\u1784\u1785\7\u0307\2\2\u1785\u1786\5\u02a6\u0154\2\u1786\u1787\7\u0307"+
		"\2\2\u1787\u1788\5\u02a6\u0154\2\u1788\u1789\7\u0307\2\2\u1789\u178a\5"+
		"\u02a6\u0154\2\u178a\u178b\7\u030b\2\2\u178b\u1880\3\2\2\2\u178c\u178d"+
		"\7\u00f9\2\2\u178d\u178e\7\u030a\2\2\u178e\u1791\5\u02a6\u0154\2\u178f"+
		"\u1790\7\u0307\2\2\u1790\u1792\5\u02a6\u0154\2\u1791\u178f\3\2\2\2\u1792"+
		"\u1793\3\2\2\2\u1793\u1791\3\2\2\2\u1793\u1794\3\2\2\2\u1794\u1795\3\2"+
		"\2\2\u1795\u1796\7\u030b\2\2\u1796\u1880\3\2\2\2\u1797\u1798\7\u0112\2"+
		"\2\u1798\u1799\7\u030a\2\2\u1799\u179a\5\u02a6\u0154\2\u179a\u179b\7\u0307"+
		"\2\2\u179b\u179c\5\u02a6\u0154\2\u179c\u179d\7\u030b\2\2\u179d\u1880\3"+
		"\2\2\2\u179e\u179f\7\u0159\2\2\u179f\u1880\5\u0304\u0183\2\u17a0\u17a1"+
		"\7\u0160\2\2\u17a1\u1880\5\u0304\u0183\2\u17a2\u17a3\7\u01e0\2\2\u17a3"+
		"\u17a4\7\u030a\2\2\u17a4\u17a5\5\u02a6\u0154\2\u17a5\u17a6\7\u0307\2\2"+
		"\u17a6\u17a7\5\u02a6\u0154\2\u17a7\u17a8\7\u030b\2\2\u17a8\u1880\3\2\2"+
		"\2\u17a9\u17aa\7\u01f1\2\2\u17aa\u1880\5\u0304\u0183\2\u17ab\u17ac\7\u024c"+
		"\2\2\u17ac\u1880\5\u0304\u0183\2\u17ad\u17ae\7\u0249\2\2\u17ae\u17af\7"+
		"\u030a\2\2\u17af\u17b2\5\u02a6\u0154\2\u17b0\u17b1\7\u0307\2\2\u17b1\u17b3"+
		"\5\u02a6\u0154\2\u17b2\u17b0\3\2\2\2\u17b2\u17b3\3\2\2\2\u17b3\u17b4\3"+
		"\2\2\2\u17b4\u17b5\7\u030b\2\2\u17b5\u1880\3\2\2\2\u17b6\u1880\5\u02dc"+
		"\u016f\2\u17b7\u17b8\7\u026c\2\2\u17b8\u1880\5\u04a6\u0254\2\u17b9\u17ba"+
		"\7\u0274\2\2\u17ba\u1880\5\u0304\u0183\2\u17bb\u17bc\7\u0292\2\2\u17bc"+
		"\u1880\5\u0304\u0183\2\u17bd\u17be\t^\2\2\u17be\u17bf\7\u030a\2\2\u17bf"+
		"\u17c0\5\u02a6\u0154\2\u17c0\u17c6\7\u0307\2\2\u17c1\u17c7\5\u02a6\u0154"+
		"\2\u17c2\u17c3\7\u00f9\2\2\u17c3\u17c4\5\u02a6\u0154\2\u17c4\u17c5\5\u02fe"+
		"\u0180\2\u17c5\u17c7\3\2\2\2\u17c6\u17c1\3\2\2\2\u17c6\u17c2\3\2\2\2\u17c7"+
		"\u17c8\3\2\2\2\u17c8\u17c9\7\u030b\2\2\u17c9\u1880\3\2\2\2\u17ca\u17cc"+
		"\7f\2\2\u17cb\u17cd\5\u04a6\u0254\2\u17cc\u17cb\3\2\2\2\u17cc\u17cd\3"+
		"\2\2\2\u17cd\u1880\3\2\2\2\u17ce\u17d0\7n\2\2\u17cf\u17d1\5\u02d2\u016a"+
		"\2\u17d0\u17cf\3\2\2\2\u17d0\u17d1\3\2\2\2\u17d1\u1880\3\2\2\2\u17d2\u17d3"+
		"\t_\2\2\u17d3\u17d4\7\u030a\2\2\u17d4\u17d5\5\u02a6\u0154\2\u17d5\u17d6"+
		"\7\u0307\2\2\u17d6\u17d7\7\u00f9\2\2\u17d7\u17d8\5\u02a6\u0154\2\u17d8"+
		"\u17d9\5\u02fe\u0180\2\u17d9\u17da\7\u030b\2\2\u17da\u1880\3\2\2\2\u17db"+
		"\u17dc\7\u00b8\2\2\u17dc\u17dd\7\u030a\2\2\u17dd\u17de\5\u02fe\u0180\2"+
		"\u17de\u17df\7\u00cd\2\2\u17df\u17e0\5\u02a6\u0154\2\u17e0\u17e1\7\u030b"+
		"\2\2\u17e1\u1880\3\2\2\2\u17e2\u17e3\7\u00d7\2\2\u17e3\u17e4\7\u030a\2"+
		"\2\u17e4\u17e5\5\u02da\u016e\2\u17e5\u17e6\7\u0307\2\2\u17e6\u17e7\5\u02a6"+
		"\u0154\2\u17e7\u17e8\7\u030b\2\2\u17e8\u1880\3\2\2\2\u17e9\u17eb\7\u0176"+
		"\2\2\u17ea\u17ec\5\u02d2\u016a\2\u17eb\u17ea\3\2\2\2\u17eb\u17ec\3\2\2"+
		"\2\u17ec\u1880\3\2\2\2\u17ed\u17ee\7\u01a0\2\2\u17ee\u17ef\7\u030a\2\2"+
		"\u17ef\u17f0\5\u02b0\u0159\2\u17f0\u17f1\7\u00fd\2\2\u17f1\u17f2\5\u02a6"+
		"\u0154\2\u17f2\u17f3\7\u030b\2\2\u17f3\u1880\3\2\2\2\u17f4\u1880\5\u02de"+
		"\u0170\2\u17f5\u17f7\7\u023b\2\2\u17f6\u17f8\5\u02d2\u016a\2\u17f7\u17f6"+
		"\3\2\2\2\u17f7\u17f8\3\2\2\2\u17f8\u1880\3\2\2\2\u17f9\u17fa\t`\2\2\u17fa"+
		"\u17fb\7\u030a\2\2\u17fb\u17fc\5\u0300\u0181\2\u17fc\u17fd\7\u0307\2\2"+
		"\u17fd\u17fe\5\u02a6\u0154\2\u17fe\u17ff\7\u0307\2\2\u17ff\u1800\5\u02a6"+
		"\u0154\2\u1800\u1801\7\u030b\2\2\u1801\u1880\3\2\2\2\u1802\u1804\7\u0270"+
		"\2\2\u1803\u1805\5\u04a6\u0254\2\u1804\u1803\3\2\2\2\u1804\u1805\3\2\2"+
		"\2\u1805\u1880\3\2\2\2\u1806\u1808\7\u0272\2\2\u1807\u1809\5\u02d2\u016a"+
		"\2\u1808\u1807\3\2\2\2\u1808\u1809\3\2\2\2\u1809\u1880\3\2\2\2\u180a\u180c"+
		"\7\u0271\2\2\u180b\u180d\5\u02d2\u016a\2\u180c\u180b\3\2\2\2\u180c\u180d"+
		"\3\2\2\2\u180d\u1880\3\2\2\2\u180e\u180f\7\25\2\2\u180f\u1880\5\u0304"+
		"\u0183\2\u1810\u1811\7<\2\2\u1811\u1880\5\u0304\u0183\2\u1812\u1813\7"+
		"E\2\2\u1813\u1880\5\u0302\u0182\2\u1814\u1815\7H\2\2\u1815\u1880\5\u0304"+
		"\u0183\2\u1816\u1817\7o\2\2\u1817\u1880\5\u04a6\u0254\2\u1818\u1819\7"+
		"\u00e9\2\2\u1819\u181a\7\u030a\2\2\u181a\u181b\5\u02a6\u0154\2\u181b\u181c"+
		"\7\u0307\2\2\u181c\u181d\5\u02a6\u0154\2\u181d\u181e\7\u0307\2\2\u181e"+
		"\u181f\5\u02a6\u0154\2\u181f\u1820\7\u030b\2\2\u1820\u1880\3\2\2\2\u1821"+
		"\u1822\7\u00cb\2\2\u1822\u1823\7\u030a\2\2\u1823\u1824\5\u02a6\u0154\2"+
		"\u1824\u1825\7\u0307\2\2\u1825\u1828\5\u02a6\u0154\2\u1826\u1827\7\u0307"+
		"\2\2\u1827\u1829\5\u02a6\u0154\2\u1828\u1826\3\2\2\2\u1828\u1829\3\2\2"+
		"\2\u1829\u182a\3\2\2\2\u182a\u182b\7\u030b\2\2\u182b\u1880\3\2\2\2\u182c"+
		"\u182d\7\u0153\2\2\u182d\u1880\5\u0304\u0183\2\u182e\u182f\7\u015f\2\2"+
		"\u182f\u1830\7\u030a\2\2\u1830\u1831\5\u02a6\u0154\2\u1831\u1832\7\u0307"+
		"\2\2\u1832\u1833\5\u02a6\u0154\2\u1833\u1834\7\u030b\2\2\u1834\u1880\3"+
		"\2\2\2\u1835\u1836\6\u0168\u00a8\2\u1836\u1837\7\u0180\2\2\u1837\u1838"+
		"\7\u030a\2\2\u1838\u1839\5\u048a\u0246\2\u1839\u183a\7\u030b\2\2\u183a"+
		"\u1880\3\2\2\2\u183b\u183c\6\u0168\u00a9\2\u183c\u183d\7\u0198\2\2\u183d"+
		"\u1880\5\u0304\u0183\2\u183e\u183f\7\u01af\2\2\u183f\u1880\5\u0304\u0183"+
		"\2\u1840\u1841\7\u01cb\2\2\u1841\u1842\7\u030a\2\2\u1842\u1843\5\u02a6"+
		"\u0154\2\u1843\u1844\7\u0307\2\2\u1844\u1845\5\u02a6\u0154\2\u1845\u1846"+
		"\7\u030b\2\2\u1846\u1880\3\2\2\2\u1847\u1848\7\u01cc\2\2\u1848\u1849\7"+
		"\u030a\2\2\u1849\u184a\5\u02a6\u0154\2\u184a\u184b\7\u0307\2\2\u184b\u184c"+
		"\5\u02a6\u0154\2\u184c\u184d\7\u0307\2\2\u184d\u184e\5\u02a6\u0154\2\u184e"+
		"\u184f\7\u030b\2\2\u184f\u1880\3\2\2\2\u1850\u1851\7\u01de\2\2\u1851\u1880"+
		"\5\u0304\u0183\2\u1852\u1853\7\u01e7\2\2\u1853\u1880\5\u04a6\u0254\2\u1854"+
		"\u1855\7\u0257\2\2\u1855\u1856\7\u030a\2\2\u1856\u1857\5\u02a6\u0154\2"+
		"\u1857\u1858\7\u0307\2\2\u1858\u1859\5\u02a6\u0154\2\u1859\u185a\7\u030b"+
		"\2\2\u185a\u1880\3\2\2\2\u185b\u185c\7\u0282\2\2\u185c\u185d\7\u030a\2"+
		"\2\u185d\u1860\5\u02a6\u0154\2\u185e\u185f\7\u0307\2\2\u185f\u1861\5\u02a6"+
		"\u0154\2\u1860\u185e\3\2\2\2\u1860\u1861\3\2\2\2\u1861\u1862\3\2\2\2\u1862"+
		"\u1863\7\u030b\2\2\u1863\u1880\3\2\2\2\u1864\u1865\7\u0283\2\2\u1865\u1866"+
		"\7\u030a\2\2\u1866\u187a\5\u02a6\u0154\2\u1867\u1868\7\23\2\2\u1868\u1869"+
		"\7>\2\2\u1869\u186b\5\u03a6\u01d4\2\u186a\u1867\3\2\2\2\u186a\u186b\3"+
		"\2\2\2\u186b\u186e\3\2\2\2\u186c\u186d\6\u0168\u00aa\2\u186d\u186f\5\u02d6"+
		"\u016c\2\u186e\u186c\3\2\2\2\u186e\u186f\3\2\2\2\u186f\u187b\3\2\2\2\u1870"+
		"\u1871\7\23\2\2\u1871\u1872\7\"\2\2\u1872\u187b\5\u03a6\u01d4\2\u1873"+
		"\u1874\7\u0307\2\2\u1874\u1875\5\u0476\u023c\2\u1875\u1876\7\u0307\2\2"+
		"\u1876\u1877\5\u0476\u023c\2\u1877\u1878\7\u0307\2\2\u1878\u1879\5\u0476"+
		"\u023c\2\u1879\u187b\3\2\2\2\u187a\u186a\3\2\2\2\u187a\u1870\3\2\2\2\u187a"+
		"\u1873\3\2\2\2\u187b\u187c\3\2\2\2\u187c\u187d\7\u030b\2\2\u187d\u1880"+
		"\3\2\2\2\u187e\u1880\5\u02d0\u0169\2\u187f\u176e\3\2\2\2\u187f\u1777\3"+
		"\2\2\2\u187f\u177b\3\2\2\2\u187f\u177d\3\2\2\2\u187f\u177f\3\2\2\2\u187f"+
		"\u1781\3\2\2\2\u187f\u178c\3\2\2\2\u187f\u1797\3\2\2\2\u187f\u179e\3\2"+
		"\2\2\u187f\u17a0\3\2\2\2\u187f\u17a2\3\2\2\2\u187f\u17a9\3\2\2\2\u187f"+
		"\u17ab\3\2\2\2\u187f\u17ad\3\2\2\2\u187f\u17b6\3\2\2\2\u187f\u17b7\3\2"+
		"\2\2\u187f\u17b9\3\2\2\2\u187f\u17bb\3\2\2\2\u187f\u17bd\3\2\2\2\u187f"+
		"\u17ca\3\2\2\2\u187f\u17ce\3\2\2\2\u187f\u17d2\3\2\2\2\u187f\u17db\3\2"+
		"\2\2\u187f\u17e2\3\2\2\2\u187f\u17e9\3\2\2\2\u187f\u17ed\3\2\2\2\u187f"+
		"\u17f4\3\2\2\2\u187f\u17f5\3\2\2\2\u187f\u17f9\3\2\2\2\u187f\u1802\3\2"+
		"\2\2\u187f\u1806\3\2\2\2\u187f\u180a\3\2\2\2\u187f\u180e\3\2\2\2\u187f"+
		"\u1810\3\2\2\2\u187f\u1812\3\2\2\2\u187f\u1814\3\2\2\2\u187f\u1816\3\2"+
		"\2\2\u187f\u1818\3\2\2\2\u187f\u1821\3\2\2\2\u187f\u182c\3\2\2\2\u187f"+
		"\u182e\3\2\2\2\u187f\u1835\3\2\2\2\u187f\u183b\3\2\2\2\u187f\u183e\3\2"+
		"\2\2\u187f\u1840\3\2\2\2\u187f\u1847\3\2\2\2\u187f\u1850\3\2\2\2\u187f"+
		"\u1852\3\2\2\2\u187f\u1854\3\2\2\2\u187f\u185b\3\2\2\2\u187f\u1864\3\2"+
		"\2\2\u187f\u187e\3\2\2\2\u1880\u02cf\3\2\2\2\u1881\u1882\6\u0169\u00ab"+
		"\2\u1882\u1883\7\\\2\2\u1883\u1884\7\u030a\2\2\u1884\u1885\5\u02a6\u0154"+
		"\2\u1885\u1886\7\u0307\2\2\u1886\u1887\5\u02a6\u0154\2\u1887\u1888\7\u030b"+
		"\2\2\u1888\u18a1\3\2\2\2\u1889\u188a\7\u00d5\2\2\u188a\u188c\7\u030a\2"+
		"\2\u188b\u188d\5\u02f6\u017c\2\u188c\u188b\3\2\2\2\u188c\u188d\3\2\2\2"+
		"\u188d\u188e\3\2\2\2\u188e\u18a1\7\u030b\2\2\u188f\u1890\7\u0119\2\2\u1890"+
		"\u18a1\5\u0302\u0182\2\u1891\u1892\7\u0161\2\2\u1892\u18a1\5\u0302\u0182"+
		"\2\u1893\u1894\7\u0162\2\2\u1894\u18a1\5\u0302\u0182\2\u1895\u1896\7\u0163"+
		"\2\2\u1896\u18a1\5\u0302\u0182\2\u1897\u1898\7\u019d\2\2\u1898\u1899\7"+
		"\u030a\2\2\u1899\u189a\5\u02a6\u0154\2\u189a\u189b\7\u0307\2\2\u189b\u189c"+
		"\5\u02a6\u0154\2\u189c\u189d\7\u030b\2\2\u189d\u18a1\3\2\2\2\u189e\u189f"+
		"\7\u019e\2\2\u189f\u18a1\5\u0302\u0182\2\u18a0\u1881\3\2\2\2\u18a0\u1889"+
		"\3\2\2\2\u18a0\u188f\3\2\2\2\u18a0\u1891\3\2\2\2\u18a0\u1893\3\2\2\2\u18a0"+
		"\u1895\3\2\2\2\u18a0\u1897\3\2\2\2\u18a0\u189e\3\2\2\2\u18a1\u02d1\3\2"+
		"\2\2\u18a2\u18a4\7\u030a\2\2\u18a3\u18a5\5\u02d4\u016b\2\u18a4\u18a3\3"+
		"\2\2\2\u18a4\u18a5\3\2\2\2\u18a5\u18a6\3\2\2\2\u18a6\u18a7\7\u030b\2\2"+
		"\u18a7\u02d3\3\2\2\2\u18a8\u18a9\6\u016b\u00ac\2\u18a9\u18aa\7\u02ed\2"+
		"\2\u18aa\u02d5\3\2\2\2\u18ab\u18b8\7\u0114\2\2\u18ac\u18ad\5\u0478\u023d"+
		"\2\u18ad\u18ae\7\u02f9\2\2\u18ae\u18af\5\u0478\u023d\2\u18af\u18b9\3\2"+
		"\2\2\u18b0\u18b5\5\u02d8\u016d\2\u18b1\u18b2\7\u0307\2\2\u18b2\u18b4\5"+
		"\u02d8\u016d\2\u18b3\u18b1\3\2\2\2\u18b4\u18b7\3\2\2\2\u18b5\u18b3\3\2"+
		"\2\2\u18b5\u18b6\3\2\2\2\u18b6\u18b9\3\2\2\2\u18b7\u18b5\3\2\2\2\u18b8"+
		"\u18ac\3\2\2\2\u18b8\u18b0\3\2\2\2\u18b9\u02d7\3\2\2\2\u18ba\u18c0\5\u0478"+
		"\u023d\2\u18bb\u18bd\t#\2\2\u18bc\u18be\7\u01de\2\2\u18bd\u18bc\3\2\2"+
		"\2\u18bd\u18be\3\2\2\2\u18be\u18c1\3\2\2\2\u18bf\u18c1\7\u01de\2\2\u18c0"+
		"\u18bb\3\2\2\2\u18c0\u18bf\3\2\2\2\u18c0\u18c1\3\2\2\2\u18c1\u02d9\3\2"+
		"\2\2\u18c2\u18c3\ta\2\2\u18c3\u02db\3\2\2\2\u18c4\u18c5\7\u0255\2\2\u18c5"+
		"\u18dd\7\u030a\2\2\u18c6\u18c9\5\u02a6\u0154\2\u18c7\u18c8\7\u00cd\2\2"+
		"\u18c8\u18ca\5\u02a6\u0154\2\u18c9\u18c7\3\2\2\2\u18c9\u18ca\3\2\2\2\u18ca"+
		"\u18de\3\2\2\2\u18cb\u18cd\7\u010f\2\2\u18cc\u18ce\5\u02a6\u0154\2\u18cd"+
		"\u18cc\3\2\2\2\u18cd\u18ce\3\2\2\2\u18ce\u18cf\3\2\2\2\u18cf\u18d0\7\u00cd"+
		"\2\2\u18d0\u18de\5\u02a6\u0154\2\u18d1\u18d3\7\u0251\2\2\u18d2\u18d4\5"+
		"\u02a6\u0154\2\u18d3\u18d2\3\2\2\2\u18d3\u18d4\3\2\2\2\u18d4\u18d5\3\2"+
		"\2\2\u18d5\u18d6\7\u00cd\2\2\u18d6\u18de\5\u02a6\u0154\2\u18d7\u18d9\7"+
		"-\2\2\u18d8\u18da\5\u02a6\u0154\2\u18d9\u18d8\3\2\2\2\u18d9\u18da\3\2"+
		"\2\2\u18da\u18db\3\2\2\2\u18db\u18dc\7\u00cd\2\2\u18dc\u18de\5\u02a6\u0154"+
		"\2\u18dd\u18c6\3\2\2\2\u18dd\u18cb\3\2\2\2\u18dd\u18d1\3\2\2\2\u18dd\u18d7"+
		"\3\2\2\2\u18de\u18df\3\2\2\2\u18df\u18e0\7\u030b\2\2\u18e0\u02dd\3\2\2"+
		"\2\u18e1\u18e2\7\u0235\2\2\u18e2\u18e3\7\u030a\2\2\u18e3\u18f0\5\u02a6"+
		"\u0154\2\u18e4\u18e5\7\u0307\2\2\u18e5\u18e8\5\u02a6\u0154\2\u18e6\u18e7"+
		"\7\u0307\2\2\u18e7\u18e9\5\u02a6\u0154\2\u18e8\u18e6\3\2\2\2\u18e8\u18e9"+
		"\3\2\2\2\u18e9\u18f1\3\2\2\2\u18ea\u18eb\7\u00cd\2\2\u18eb\u18ee\5\u02a6"+
		"\u0154\2\u18ec\u18ed\7\u00ca\2\2\u18ed\u18ef\5\u02a6\u0154\2\u18ee\u18ec"+
		"\3\2\2\2\u18ee\u18ef\3\2\2\2\u18ef\u18f1\3\2\2\2\u18f0\u18e4\3\2\2\2\u18f0"+
		"\u18ea\3\2\2\2\u18f1\u18f2\3\2\2\2\u18f2\u18f3\7\u030b\2\2\u18f3\u02df"+
		"\3\2\2\2\u18f4\u18f5\5\u0468\u0235\2\u18f5\u18f7\7\u030a\2\2\u18f6\u18f8"+
		"\5\u02e2\u0172\2\u18f7\u18f6\3\2\2\2\u18f7\u18f8\3\2\2\2\u18f8\u18f9\3"+
		"\2\2\2\u18f9\u18fa\7\u030b\2\2\u18fa\u1903\3\2\2\2\u18fb\u18fc\5\u0470"+
		"\u0239\2\u18fc\u18fe\7\u030a\2\2\u18fd\u18ff\5\u02f6\u017c\2\u18fe\u18fd"+
		"\3\2\2\2\u18fe\u18ff\3\2\2\2\u18ff\u1900\3\2\2\2\u1900\u1901\7\u030b\2"+
		"\2\u1901\u1903\3\2\2\2\u1902\u18f4\3\2\2\2\u1902\u18fb\3\2\2\2\u1903\u02e1"+
		"\3\2\2\2\u1904\u1909\5\u02e4\u0173\2\u1905\u1906\7\u0307\2\2\u1906\u1908"+
		"\5\u02e4\u0173\2\u1907\u1905\3\2\2\2\u1908\u190b\3\2\2\2\u1909\u1907\3"+
		"\2\2\2\u1909\u190a\3\2\2\2\u190a\u02e3\3\2\2\2\u190b\u1909\3\2\2\2\u190c"+
		"\u190e\5\u02a6\u0154\2\u190d\u190f\5\u0166\u00b4\2\u190e\u190d\3\2\2\2"+
		"\u190e\u190f\3\2\2\2\u190f\u02e5\3\2\2\2\u1910\u1913\5\u02e8\u0175\2\u1911"+
		"\u1913\5\u02ea\u0176\2\u1912\u1910\3\2\2\2\u1912\u1911\3\2\2\2\u1913\u02e7"+
		"\3\2\2\2\u1914\u1915\7\u0311\2\2\u1915\u1918\5\u049e\u0250\2\u1916\u1918"+
		"\7\u0312\2\2\u1917\u1914\3\2\2\2\u1917\u1916\3\2\2\2\u1918\u02e9\3\2\2"+
		"\2\u1919\u191b\7\u0313\2\2\u191a\u191c\5\u04ac\u0257\2\u191b\u191a\3\2"+
		"\2\2\u191b\u191c\3\2\2\2\u191c\u191d\3\2\2\2\u191d\u191f\5\u049e\u0250"+
		"\2\u191e\u1920\5\u0474\u023b\2\u191f\u191e\3\2\2\2\u191f\u1920\3\2\2\2"+
		"\u1920\u02eb\3\2\2\2\u1921\u1922\6\u0177\u00ad\2\u1922\u1924\5\u046a\u0236"+
		"\2\u1923\u1925\5\u0474\u023b\2\u1924\u1923\3\2\2\2\u1924\u1925\3\2\2\2"+
		"\u1925\u192c\3\2\2\2\u1926\u1927\6\u0177\u00ae\2\u1927\u1929\5\u04a0\u0251"+
		"\2\u1928\u192a\5\u0474\u023b\2\u1929\u1928\3\2\2\2\u1929\u192a\3\2\2\2"+
		"\u192a\u192c\3\2\2\2\u192b\u1921\3\2\2\2\u192b\u1926\3\2\2\2\u192c\u1930"+
		"\3\2\2\2\u192d\u192e\7\u0082\2\2\u192e\u1930\5\u0474\u023b\2\u192f\u192b"+
		"\3\2\2\2\u192f\u192d\3\2\2\2\u1930\u02ed\3\2\2\2\u1931\u1932\7\u0284\2"+
		"\2\u1932\u1933\5\u02a6\u0154\2\u1933\u02ef\3\2\2\2\u1934\u1935\7\u0248"+
		"\2\2\u1935\u1936\5\u02a6\u0154\2\u1936\u02f1\3\2\2\2\u1937\u1938\7\u009c"+
		"\2\2\u1938\u1939\5\u02a6\u0154\2\u1939\u02f3\3\2\2\2\u193a\u193c\7\"\2"+
		"\2\u193b\u193d\5\u039c\u01cf\2\u193c\u193b\3\2\2\2\u193c\u193d\3\2\2\2"+
		"\u193d\u1968\3\2\2\2\u193e\u1940\7>\2\2\u193f\u1941\5\u039c\u01cf\2\u1940"+
		"\u193f\3\2\2\2\u1940\u1941\3\2\2\2\u1941\u1943\3\2\2\2\u1942\u1944\5\u03a0"+
		"\u01d1\2\u1943\u1942\3\2\2\2\u1943\u1944\3\2\2\2\u1944\u1968\3\2\2\2\u1945"+
		"\u1947\5\u0398\u01cd\2\u1946\u1948\5\u039c\u01cf\2\u1947\u1946\3\2\2\2"+
		"\u1947\u1948\3\2\2\2\u1948\u1968\3\2\2\2\u1949\u194b\7\u0202\2\2\u194a"+
		"\u194c\7\u00fb\2\2\u194b\u194a\3\2\2\2\u194b\u194c\3\2\2\2\u194c\u1968"+
		"\3\2\2\2\u194d\u194f\7\u0266\2\2\u194e\u1950\7\u00fb\2\2\u194f\u194e\3"+
		"\2\2\2\u194f\u1950\3\2\2\2\u1950\u1968\3\2\2\2\u1951\u1968\7v\2\2\u1952"+
		"\u1954\7\u024c\2\2\u1953\u1955\5\u03a8\u01d5\2\u1954\u1953\3\2\2\2\u1954"+
		"\u1955\3\2\2\2\u1955\u1968\3\2\2\2\u1956\u1958\7s\2\2\u1957\u1959\5\u03a8"+
		"\u01d5\2\u1958\u1957\3\2\2\2\u1958\u1959\3\2\2\2\u1959\u1968\3\2\2\2\u195a"+
		"\u195c\7\u0080\2\2\u195b\u195d\5\u0498\u024d\2\u195c\u195b\3\2\2\2\u195c"+
		"\u195d\3\2\2\2\u195d\u1968\3\2\2\2\u195e\u195f\6\u017b\u00af\2\u195f\u1968"+
		"\7\u0108\2\2\u1960\u1961\6\u017b\u00b0\2\u1961\u1968\5\u039a\u01ce\2\u1962"+
		"\u1963\6\u017b\u00b1\2\u1963\u1965\7\u00c5\2\2\u1964\u1966\5\u049a\u024e"+
		"\2\u1965\u1964\3\2\2\2\u1965\u1966\3\2\2\2\u1966\u1968\3\2\2\2\u1967\u193a"+
		"\3\2\2\2\u1967\u193e\3\2\2\2\u1967\u1945\3\2\2\2\u1967\u1949\3\2\2\2\u1967"+
		"\u194d\3\2\2\2\u1967\u1951\3\2\2\2\u1967\u1952\3\2\2\2\u1967\u1956\3\2"+
		"\2\2\u1967\u195a\3\2\2\2\u1967\u195e\3\2\2\2\u1967\u1960\3\2\2\2\u1967"+
		"\u1962\3\2\2\2\u1968\u02f5\3\2\2\2\u1969\u196e\5\u02a6\u0154\2\u196a\u196b"+
		"\7\u0307\2\2\u196b\u196d\5\u02a6\u0154\2\u196c\u196a\3\2\2\2\u196d\u1970"+
		"\3\2\2\2\u196e\u196c\3\2\2\2\u196e\u196f\3\2\2\2\u196f\u02f7\3\2\2\2\u1970"+
		"\u196e\3\2\2\2\u1971\u1972\7>\2\2\u1972\u1975\7\u01fc\2\2\u1973\u1975"+
		"\7<\2\2\u1974\u1971\3\2\2\2\u1974\u1973\3\2\2\2\u1975\u02f9\3\2\2\2\u1976"+
		"\u1977\tb\2\2\u1977\u02fb\3\2\2\2\u1978\u1979\tc\2\2\u1979\u02fd\3\2\2"+
		"\2\u197a\u197d\5\u0300\u0181\2\u197b\u197d\td\2\2\u197c\u197a\3\2\2\2"+
		"\u197c\u197b\3\2\2\2\u197d\u02ff\3\2\2\2\u197e\u197f\te\2\2\u197f\u0301"+
		"\3\2\2\2\u1980\u1981\7\u030a\2\2\u1981\u1982\5\u02f6\u017c\2\u1982\u1983"+
		"\7\u030b\2\2\u1983\u0303\3\2\2\2\u1984\u1985\7\u030a\2\2\u1985\u1986\5"+
		"\u02a6\u0154\2\u1986\u1987\7\u030b\2\2\u1987\u0305\3\2\2\2\u1988\u1989"+
		"\7\u030a\2\2\u1989\u198a\5\u02b2\u015a\2\u198a\u198b\7\u030b\2\2\u198b"+
		"\u0307\3\2\2\2\u198c\u1991\5\u030a\u0186\2\u198d\u198e\7\u0307\2\2\u198e"+
		"\u1990\5\u030a\u0186\2\u198f\u198d\3\2\2\2\u1990\u1993\3\2\2\2\u1991\u198f"+
		"\3\2\2\2\u1991\u1992\3\2\2\2\u1992\u0309\3\2\2\2\u1993\u1991\3\2\2\2\u1994"+
		"\u1996\5\u02a6\u0154\2\u1995\u1997\5\u014c\u00a7\2\u1996\u1995\3\2\2\2"+
		"\u1996\u1997\3\2\2\2\u1997\u030b\3\2\2\2\u1998\u199d\5\u030e\u0188\2\u1999"+
		"\u199a\7\u0307\2\2\u199a\u199c\5\u030e\u0188\2\u199b\u1999\3\2\2\2\u199c"+
		"\u199f\3\2\2\2\u199d\u199b\3\2\2\2\u199d\u199e\3\2\2\2\u199e\u030d\3\2"+
		"\2\2\u199f\u199d\3\2\2\2\u19a0\u19a1\5\u02a6\u0154\2\u19a1\u030f\3\2\2"+
		"\2\u19a2\u19a3\6\u0189\u00b2\2\u19a3\u19a4\7\u00ca\2\2\u19a4\u19a5\7;"+
		"\2\2\u19a5\u19a6\5\u048c\u0247\2\u19a6\u0311\3\2\2\2\u19a7\u19b5\5\4\3"+
		"\2\u19a8\u19b5\5\u0314\u018b\2\u19a9\u19b5\5\u0316\u018c\2\u19aa\u19b5"+
		"\5\u031e\u0190\2\u19ab\u19b5\5\u0322\u0192\2\u19ac\u19b5\5\u0324\u0193"+
		"\2\u19ad\u19b5\5\u032a\u0196\2\u19ae\u19b5\5\u032c\u0197\2\u19af\u19b5"+
		"\5\u0348\u01a5\2\u19b0\u19b5\5\u0346\u01a4\2\u19b1\u19b5\5\u035a\u01ae"+
		"\2\u19b2\u19b5\5\u035e\u01b0\2\u19b3\u19b5\5\u035c\u01af\2\u19b4\u19a7"+
		"\3\2\2\2\u19b4\u19a8\3\2\2\2\u19b4\u19a9\3\2\2\2\u19b4\u19aa\3\2\2\2\u19b4"+
		"\u19ab\3\2\2\2\u19b4\u19ac\3\2\2\2\u19b4\u19ad\3\2\2\2\u19b4\u19ae\3\2"+
		"\2\2\u19b4\u19af\3\2\2\2\u19b4\u19b0\3\2\2\2\u19b4\u19b1\3\2\2\2\u19b4"+
		"\u19b2\3\2\2\2\u19b4\u19b3\3\2\2\2\u19b5\u0313\3\2\2\2\u19b6\u19b7\7\u01dd"+
		"\2\2\u19b7\u19b8\5\u02a6\u0154\2\u19b8\u0315\3\2\2\2\u19b9\u19ba\7\u00e9"+
		"\2\2\u19ba\u19bb\5\u0318\u018d\2\u19bb\u19bc\7\u00a1\2\2\u19bc\u19bd\7"+
		"\u00e9\2\2\u19bd\u0317\3\2\2\2\u19be\u19bf\5\u02a6\u0154\2\u19bf\u19c4"+
		"\5\u031a\u018e\2\u19c0\u19c1\7\u009d\2\2\u19c1\u19c5\5\u0318\u018d\2\u19c2"+
		"\u19c3\7\u009c\2\2\u19c3\u19c5\5\u031c\u018f\2\u19c4\u19c0\3\2\2\2\u19c4"+
		"\u19c2\3\2\2\2\u19c4\u19c5\3\2\2\2\u19c5\u0319\3\2\2\2\u19c6\u19c7\7\u0248"+
		"\2\2\u19c7\u19c8\5\u031c\u018f\2\u19c8\u031b\3\2\2\2\u19c9\u19ca\5\u0312"+
		"\u018a\2\u19ca\u19cb\7\u0308\2\2\u19cb\u19cd\3\2\2\2\u19cc\u19c9\3\2\2"+
		"\2\u19cd\u19ce\3\2\2\2\u19ce\u19cc\3\2\2\2\u19ce\u19cf\3\2\2\2\u19cf\u031d"+
		"\3\2\2\2\u19d0\u19d2\7\65\2\2\u19d1\u19d3\5\u02a6\u0154\2\u19d2\u19d1"+
		"\3\2\2\2\u19d2\u19d3\3\2\2\2\u19d3\u19d7\3\2\2\2\u19d4\u19d5\5\u02ee\u0178"+
		"\2\u19d5\u19d6\5\u031a\u018e\2\u19d6\u19d8\3\2\2\2\u19d7\u19d4\3\2\2\2"+
		"\u19d8\u19d9\3\2\2\2\u19d9\u19d7\3\2\2\2\u19d9\u19da\3\2\2\2\u19da\u19dc"+
		"\3\2\2\2\u19db\u19dd\5\u0320\u0191\2\u19dc\u19db\3\2\2\2\u19dc\u19dd\3"+
		"\2\2\2\u19dd\u19de\3\2\2\2\u19de\u19df\7\u00a1\2\2\u19df\u19e0\7\65\2"+
		"\2\u19e0\u031f\3\2\2\2\u19e1\u19e2\7\u009c\2\2\u19e2\u19e3\5\u031c\u018f"+
		"\2\u19e3\u0321\3\2\2\2\u19e4\u19e5\5\u0326\u0194\2\u19e5\u19e7\5\u0328"+
		"\u0195\2\u19e6\u19e8\5\u045a\u022e\2\u19e7\u19e6\3\2\2\2\u19e7\u19e8\3"+
		"\2\2\2\u19e8\u0323\3\2\2\2\u19e9\u19ea\5\u0328\u0195\2\u19ea\u0325\3\2"+
		"\2\2\u19eb\u19ec\5\u0458\u022d\2\u19ec\u19ed\7\u0309\2\2\u19ed\u0327\3"+
		"\2\2\2\u19ee\u19f0\7\37\2\2\u19ef\u19f1\5\u0334\u019b\2\u19f0\u19ef\3"+
		"\2\2\2\u19f0\u19f1\3\2\2\2\u19f1\u19f3\3\2\2\2\u19f2\u19f4\5\u031c\u018f"+
		"\2\u19f3\u19f2\3\2\2\2\u19f3\u19f4\3\2\2\2\u19f4\u19f5\3\2\2\2\u19f5\u19f6"+
		"\7\u00a1\2\2\u19f6\u0329\3\2\2\2\u19f7\u19f8\5\u0326\u0194\2\u19f8\u19fa"+
		"\5\u032c\u0197\2\u19f9\u19fb\5\u045a\u022e\2\u19fa\u19f9\3\2\2\2\u19fa"+
		"\u19fb\3\2\2\2\u19fb\u032b\3\2\2\2\u19fc\u1a00\5\u032e\u0198\2\u19fd\u1a00"+
		"\5\u0330\u0199\2\u19fe\u1a00\5\u0332\u019a\2\u19ff\u19fc\3\2\2\2\u19ff"+
		"\u19fd\3\2\2\2\u19ff\u19fe\3\2\2\2\u1a00\u032d\3\2\2\2\u1a01\u1a02\7\u0128"+
		"\2\2\u1a02\u1a03\5\u031c\u018f\2\u1a03\u1a04\7\u00a1\2\2\u1a04\u1a05\7"+
		"\u0128\2\2\u1a05\u032f\3\2\2\2\u1a06\u1a07\7\u0286\2\2\u1a07\u1a08\5\u02a6"+
		"\u0154\2\u1a08\u1a09\7\u0095\2\2\u1a09\u1a0a\5\u031c\u018f\2\u1a0a\u1a0b"+
		"\7\u00a1\2\2\u1a0b\u1a0c\7\u0286\2\2\u1a0c\u0331\3\2\2\2\u1a0d\u1a0e\7"+
		"\u01cb\2\2\u1a0e\u1a0f\5\u031c\u018f\2\u1a0f\u1a10\7\u0267\2\2\u1a10\u1a11"+
		"\5\u02a6\u0154\2\u1a11\u1a12\7\u00a1\2\2\u1a12\u1a13\7\u01cb\2\2\u1a13"+
		"\u0333\3\2\2\2\u1a14\u1a15\5\u0336\u019c\2\u1a15\u1a16\7\u0308\2\2\u1a16"+
		"\u1a18\3\2\2\2\u1a17\u1a14\3\2\2\2\u1a18\u1a19\3\2\2\2\u1a19\u1a17\3\2"+
		"\2\2\u1a19\u1a1a\3\2\2\2\u1a1a\u0335\3\2\2\2\u1a1b\u1a20\5\u0338\u019d"+
		"\2\u1a1c\u1a20\5\u033a\u019e\2\u1a1d\u1a20\5\u0340\u01a1\2\u1a1e\u1a20"+
		"\5\u0344\u01a3\2\u1a1f\u1a1b\3\2\2\2\u1a1f\u1a1c\3\2\2\2\u1a1f\u1a1d\3"+
		"\2\2\2\u1a1f\u1a1e\3\2\2\2\u1a20\u0337\3\2\2\2\u1a21\u1a22\7\u0081\2\2"+
		"\u1a22\u1a23\5\u046c\u0237\2\u1a23\u1a25\5\u0396\u01cc\2\u1a24\u1a26\5"+
		"\u03dc\u01ef\2\u1a25\u1a24\3\2\2\2\u1a25\u1a26\3\2\2\2\u1a26\u1a29\3\2"+
		"\2\2\u1a27\u1a28\7\u0082\2\2\u1a28\u1a2a\5\u02a6\u0154\2\u1a29\u1a27\3"+
		"\2\2\2\u1a29\u1a2a\3\2\2\2\u1a2a\u0339\3\2\2\2\u1a2b\u1a2c\7\u0081\2\2"+
		"\u1a2c\u1a2d\5\u046a\u0236\2\u1a2d\u1a2e\7U\2\2\u1a2e\u1a2f\7\u00ca\2"+
		"\2\u1a2f\u1a30\5\u033c\u019f\2\u1a30\u033b\3\2\2\2\u1a31\u1a34\5\u0476"+
		"\u023c\2\u1a32\u1a34\5\u033e\u01a0\2\u1a33\u1a31\3\2\2\2\u1a33\u1a32\3"+
		"\2\2\2\u1a34\u033d\3\2\2\2\u1a35\u1a37\7\u0210\2\2\u1a36\u1a38\7\u0275"+
		"\2\2\u1a37\u1a36\3\2\2\2\u1a37\u1a38\3\2\2\2\u1a38\u1a39\3\2\2\2\u1a39"+
		"\u1a3a\5\u048a\u0246\2\u1a3a\u033f\3\2\2\2\u1a3b\u1a3c\7\u0081\2\2\u1a3c"+
		"\u1a3d\tf\2\2\u1a3d\u1a3e\7\u00dd\2\2\u1a3e\u1a3f\7\u00ca\2\2\u1a3f\u1a44"+
		"\5\u0342\u01a2\2\u1a40\u1a41\7\u0307\2\2\u1a41\u1a43\5\u0342\u01a2\2\u1a42"+
		"\u1a40\3\2\2\2\u1a43\u1a46\3\2\2\2\u1a44\u1a42\3\2\2\2\u1a44\u1a45\3\2"+
		"\2\2\u1a45\u1a47\3\2\2\2\u1a46\u1a44\3\2\2\2\u1a47\u1a48\5\u0312\u018a"+
		"\2\u1a48\u0341\3\2\2\2\u1a49\u1a51\5\u033c\u019f\2\u1a4a\u1a51\5\u046a"+
		"\u0236\2\u1a4b\u1a51\7\u0211\2\2\u1a4c\u1a4d\5\u02fa\u017e\2\u1a4d\u1a4e"+
		"\7\u00cc\2\2\u1a4e\u1a51\3\2\2\2\u1a4f\u1a51\7\u020f\2\2\u1a50\u1a49\3"+
		"\2\2\2\u1a50\u1a4a\3\2\2\2\u1a50\u1a4b\3\2\2\2\u1a50\u1a4c\3\2\2\2\u1a50"+
		"\u1a4f\3\2\2\2\u1a51\u0343\3\2\2\2\u1a52\u1a53\7\u0081\2\2\u1a53\u1a54"+
		"\5\u046a\u0236\2\u1a54\u1a55\7l\2\2\u1a55\u1a56\7\u00ca\2\2\u1a56\u1a57"+
		"\5\u010c\u0087\2\u1a57\u0345\3\2\2\2\u1a58\u1a59\7\u0106\2\2\u1a59\u1a5a"+
		"\5\u045a\u022e\2\u1a5a\u0347\3\2\2\2\u1a5b\u1a5c\7\u0111\2\2\u1a5c\u1a5d"+
		"\5\u045a\u022e\2\u1a5d\u0349\3\2\2\2\u1a5e\u1a62\7\u00d1\2\2\u1a5f\u1a63"+
		"\7g\2\2\u1a60\u1a61\6\u01a6\u00b3\2\u1a61\u1a63\7\u021e\2\2\u1a62\u1a5f"+
		"\3\2\2\2\u1a62\u1a60\3\2\2\2\u1a62\u1a63\3\2\2\2\u1a63\u1a64\3\2\2\2\u1a64"+
		"\u1a77\7\u008c\2\2\u1a65\u1a6a\5\u034e\u01a8\2\u1a66\u1a67\7\u0307\2\2"+
		"\u1a67\u1a69\5\u034e\u01a8\2\u1a68\u1a66\3\2\2\2\u1a69\u1a6c\3\2\2\2\u1a6a"+
		"\u1a68\3\2\2\2\u1a6a\u1a6b\3\2\2\2\u1a6b\u1a78\3\2\2\2\u1a6c\u1a6a\3\2"+
		"\2\2\u1a6d\u1a6e\7U\2\2\u1a6e\u1a6f\5\u034c\u01a7\2\u1a6f\u1a74\5\u0350"+
		"\u01a9\2\u1a70\u1a71\7\u0307\2\2\u1a71\u1a73\5\u0350\u01a9\2\u1a72\u1a70"+
		"\3\2\2\2\u1a73\u1a76\3\2\2\2\u1a74\u1a72\3\2\2\2\u1a74\u1a75\3\2\2\2\u1a75"+
		"\u1a78\3\2\2\2\u1a76\u1a74\3\2\2\2\u1a77\u1a65\3\2\2\2\u1a77\u1a6d\3\2"+
		"\2\2\u1a78\u034b\3\2\2\2\u1a79\u1a7d\5\u047e\u0240\2\u1a7a\u1a7d\5\u02e6"+
		"\u0174\2\u1a7b\u1a7d\5\u0470\u0239\2";
	private static final String _serializedATNSegment3 =
		"\u1a7c\u1a79\3\2\2\2\u1a7c\u1a7a\3\2\2\2\u1a7c\u1a7b\3\2\2\2\u1a7d\u034d"+
		"\3\2\2\2\u1a7e\u1a81\5\u02e6\u0174\2\u1a7f\u1a81\5\u046a\u0236\2\u1a80"+
		"\u1a7e\3\2\2\2\u1a80\u1a7f\3\2\2\2\u1a81\u1a82\3\2\2\2\u1a82\u1a83\7\u02f0"+
		"\2\2\u1a83\u1a84\tg\2\2\u1a84\u034f\3\2\2\2\u1a85\u1a88\5\u02e6\u0174"+
		"\2\u1a86\u1a88\5\u046a\u0236\2\u1a87\u1a85\3\2\2\2\u1a87\u1a86\3\2\2\2"+
		"\u1a88\u1a89\3\2\2\2\u1a89\u1a8c\7\u02f0\2\2\u1a8a\u1a8d\5\u0352\u01aa"+
		"\2\u1a8b\u1a8d\7\u01db\2\2\u1a8c\u1a8a\3\2\2\2\u1a8c\u1a8b\3\2\2\2\u1a8d"+
		"\u0351\3\2\2\2\u1a8e\u1a8f\th\2\2\u1a8f\u0353\3\2\2\2\u1a90\u1a93\7\u0201"+
		"\2\2\u1a91\u1a94\5\u046a\u0236\2\u1a92\u1a94\5\u033e\u01a0\2\u1a93\u1a91"+
		"\3\2\2\2\u1a93\u1a92\3\2\2\2\u1a94\u1a9e\3\2\2\2\u1a95\u1a96\7\u01fc\2"+
		"\2\u1a96\u1a9b\5\u0358\u01ad\2\u1a97\u1a98\7\u0307\2\2\u1a98\u1a9a\5\u0358"+
		"\u01ad\2\u1a99\u1a97\3\2\2\2\u1a9a\u1a9d\3\2\2\2\u1a9b\u1a99\3\2\2\2\u1a9b"+
		"\u1a9c\3\2\2\2\u1a9c\u1a9f\3\2\2\2\u1a9d\u1a9b\3\2\2\2\u1a9e\u1a95\3\2"+
		"\2\2\u1a9e\u1a9f\3\2\2\2\u1a9f\u0355\3\2\2\2\u1aa0\u1aa3\7\u01d7\2\2\u1aa1"+
		"\u1aa4\5\u046a\u0236\2\u1aa2\u1aa4\5\u033e\u01a0\2\u1aa3\u1aa1\3\2\2\2"+
		"\u1aa3\u1aa2\3\2\2\2\u1aa3\u1aa4\3\2\2\2\u1aa4\u1aae\3\2\2\2\u1aa5\u1aa6"+
		"\7\u01fc\2\2\u1aa6\u1aab\5\u0358\u01ad\2\u1aa7\u1aa8\7\u0307\2\2\u1aa8"+
		"\u1aaa\5\u0358\u01ad\2\u1aa9\u1aa7\3\2\2\2\u1aaa\u1aad\3\2\2\2\u1aab\u1aa9"+
		"\3\2\2\2\u1aab\u1aac\3\2\2\2\u1aac\u1aaf\3\2\2\2\u1aad\u1aab\3\2\2\2\u1aae"+
		"\u1aa5\3\2\2\2\u1aae\u1aaf\3\2\2\2\u1aaf\u0357\3\2\2\2\u1ab0\u1ab1\5\u0352"+
		"\u01aa\2\u1ab1\u1ab2\7\u02f0\2\2\u1ab2\u1ab3\5\u034c\u01a7\2\u1ab3\u0359"+
		"\3\2\2\2\u1ab4\u1ab5\7\u0185\2\2\u1ab5\u1ab6\5\u046a\u0236\2\u1ab6\u035b"+
		"\3\2\2\2\u1ab7\u1ab8\7D\2\2\u1ab8\u1ab9\5\u046a\u0236\2\u1ab9\u035d\3"+
		"\2\2\2\u1aba\u1abf\7\u00bc\2\2\u1abb\u1abd\7\u0171\2\2\u1abc\u1abb\3\2"+
		"\2\2\u1abc\u1abd\3\2\2\2\u1abd\u1abe\3\2\2\2\u1abe\u1ac0\7\u00cd\2\2\u1abf"+
		"\u1abc\3\2\2\2\u1abf\u1ac0\3\2\2\2\u1ac0\u1ac1\3\2\2\2\u1ac1\u1ac2\5\u046a"+
		"\u0236\2\u1ac2\u1ac3\7\u00fa\2\2\u1ac3\u1ac4\5\u046c\u0237\2\u1ac4\u035f"+
		"\3\2\2\2\u1ac5\u1ac6\7\27\2\2\u1ac6\u1ad3\5\u02a6\u0154\2\u1ac7\u1ac8"+
		"\7\u00ad\2\2\u1ac8\u1ac9\5\u02a6\u0154\2\u1ac9\u1acc\5\u02fe\u0180\2\u1aca"+
		"\u1acb\7\u0220\2\2\u1acb\u1acd\5\u02a6\u0154\2\u1acc\u1aca\3\2\2\2\u1acc"+
		"\u1acd\3\2\2\2\u1acd\u1ad0\3\2\2\2\u1ace\u1acf\7\u00a2\2\2\u1acf\u1ad1"+
		"\5\u02a6\u0154\2\u1ad0\u1ace\3\2\2\2\u1ad0\u1ad1\3\2\2\2\u1ad1\u1ad3\3"+
		"\2\2\2\u1ad2\u1ac5\3\2\2\2\u1ad2\u1ac7\3\2\2\2\u1ad3\u0361\3\2\2\2\u1ad4"+
		"\u1ad5\5\u0412\u020a\2\u1ad5\u1ad7\5\u036e\u01b8\2\u1ad6\u1ad8\5\u0364"+
		"\u01b3\2\u1ad7\u1ad6\3\2\2\2\u1ad7\u1ad8\3\2\2\2\u1ad8\u0363\3\2\2\2\u1ad9"+
		"\u1ada\6\u01b3\u00b4\2\u1ada\u1add\5\u0366\u01b4\2\u1adb\u1add\5\u0378"+
		"\u01bd\2\u1adc\u1ad9\3\2\2\2\u1adc\u1adb\3\2\2\2\u1add\u0365\3\2\2\2\u1ade"+
		"\u1adf\7@\2\2\u1adf\u1ae0\5\u0304\u0183\2\u1ae0\u0367\3\2\2\2\u1ae1\u1ae3"+
		"\7\u0175\2\2\u1ae2\u1ae1\3\2\2\2\u1ae2\u1ae3\3\2\2\2\u1ae3\u1ae4\3\2\2"+
		"\2\u1ae4\u1ae5\7\u02dc\2\2\u1ae5\u0369\3\2\2\2\u1ae6\u1ae8\t(\2\2\u1ae7"+
		"\u1ae9\5n8\2\u1ae8\u1ae7\3\2\2\2\u1ae8\u1ae9\3\2\2\2\u1ae9\u1aea\3\2\2"+
		"\2\u1aea\u1aee\5\u0384\u01c3\2\u1aeb\u1aed\5\u0388\u01c5\2\u1aec\u1aeb"+
		"\3\2\2\2\u1aed\u1af0\3\2\2\2\u1aee\u1aec\3\2\2\2\u1aee\u1aef\3\2\2\2\u1aef"+
		"\u1b32\3\2\2\2\u1af0\u1aee\3\2\2\2\u1af1\u1af3\7\u00cf\2\2\u1af2\u1af4"+
		"\5\u0198\u00cd\2\u1af3\u1af2\3\2\2\2\u1af3\u1af4\3\2\2\2\u1af4\u1af6\3"+
		"\2\2\2\u1af5\u1af7\5\u041c\u020f\2\u1af6\u1af5\3\2\2\2\u1af6\u1af7\3\2"+
		"\2\2\u1af7\u1af8\3\2\2\2\u1af8\u1afc\5\u0384\u01c3\2\u1af9\u1afb\5\u0390"+
		"\u01c9\2\u1afa\u1af9\3\2\2\2\u1afb\u1afe\3\2\2\2\u1afc\u1afa\3\2\2\2\u1afc"+
		"\u1afd\3\2\2\2\u1afd\u1b32\3\2\2\2\u1afe\u1afc\3\2\2\2\u1aff\u1b01\7\u020d"+
		"\2\2\u1b00\u1b02\5\u0198\u00cd\2\u1b01\u1b00\3\2\2\2\u1b01\u1b02\3\2\2"+
		"\2\u1b02\u1b04\3\2\2\2\u1b03\u1b05\5\u041c\u020f\2\u1b04\u1b03\3\2\2\2"+
		"\u1b04\u1b05\3\2\2\2\u1b05\u1b06\3\2\2\2\u1b06\u1b0a\5\u0384\u01c3\2\u1b07"+
		"\u1b09\5\u0392\u01ca\2\u1b08\u1b07\3\2\2\2\u1b09\u1b0c\3\2\2\2\u1b0a\u1b08"+
		"\3\2\2\2\u1b0a\u1b0b\3\2\2\2\u1b0b\u1b32\3\2\2\2\u1b0c\u1b0a\3\2\2\2\u1b0d"+
		"\u1b0f\5\u036c\u01b7\2\u1b0e\u1b0d\3\2\2\2\u1b0e\u1b0f\3\2\2\2\u1b0f\u1b2f"+
		"\3\2\2\2\u1b10\u1b11\7\u01a6\2\2\u1b11\u1b17\7\u010b\2\2\u1b12\u1b14\7"+
		"\u0263\2\2\u1b13\u1b15\5\u0198\u00cd\2\u1b14\u1b13\3\2\2\2\u1b14\u1b15"+
		"\3\2\2\2\u1b15\u1b17\3\2\2\2\u1b16\u1b10\3\2\2\2\u1b16\u1b12\3\2\2\2\u1b17"+
		"\u1b19\3\2\2\2\u1b18\u1b1a\5n8\2\u1b19\u1b18\3\2\2\2\u1b19\u1b1a\3\2\2"+
		"\2\u1b1a\u1b1b\3\2\2\2\u1b1b\u1b1f\5\u0384\u01c3\2\u1b1c\u1b1e\5\u0388"+
		"\u01c5\2\u1b1d\u1b1c\3\2\2\2\u1b1e\u1b21\3\2\2\2\u1b1f\u1b1d\3\2\2\2\u1b1f"+
		"\u1b20\3\2\2\2\u1b20\u1b30\3\2\2\2\u1b21\u1b1f\3\2\2\2\u1b22\u1b23\7\u00c9"+
		"\2\2\u1b23\u1b25\7\u010b\2\2\u1b24\u1b26\5\u041c\u020f\2\u1b25\u1b24\3"+
		"\2\2\2\u1b25\u1b26\3\2\2\2\u1b26\u1b27\3\2\2\2\u1b27\u1b28\5\u037c\u01bf"+
		"\2\u1b28\u1b29\5\u0378\u01bd\2\u1b29\u1b30\3\2\2\2\u1b2a\u1b2d\5\u0366"+
		"\u01b4\2\u1b2b\u1b2c\6\u01b6\u00b5\2\u1b2c\u1b2e\5\u0368\u01b5\2\u1b2d"+
		"\u1b2b\3\2\2\2\u1b2d\u1b2e\3\2\2\2\u1b2e\u1b30\3\2\2\2\u1b2f\u1b16\3\2"+
		"\2\2\u1b2f\u1b22\3\2\2\2\u1b2f\u1b2a\3\2\2\2\u1b30\u1b32\3\2\2\2\u1b31"+
		"\u1ae6\3\2\2\2\u1b31\u1af1\3\2\2\2\u1b31\u1aff\3\2\2\2\u1b31\u1b0e\3\2"+
		"\2\2\u1b32\u036b\3\2\2\2\u1b33\u1b35\7X\2\2\u1b34\u1b36\5\u046a\u0236"+
		"\2\u1b35\u1b34\3\2\2\2\u1b35\u1b36\3\2\2\2\u1b36\u036d\3\2\2\2\u1b37\u1b5b"+
		"\5\u0396\u01cc\2\u1b38\u1b3a\5\u0370\u01b9\2\u1b39\u1b38\3\2\2\2\u1b3a"+
		"\u1b3d\3\2\2\2\u1b3b\u1b39\3\2\2\2\u1b3b\u1b3c\3\2\2\2\u1b3c\u1b5c\3\2"+
		"\2\2\u1b3d\u1b3b\3\2\2\2\u1b3e\u1b40\6\u01b8\u00b6\2\u1b3f\u1b41\5\u03dc"+
		"\u01ef\2\u1b40\u1b3f\3\2\2\2\u1b40\u1b41\3\2\2\2\u1b41\u1b44\3\2\2\2\u1b42"+
		"\u1b43\7\u00d3\2\2\u1b43\u1b45\7\16\2\2\u1b44\u1b42\3\2\2\2\u1b44\u1b45"+
		"\3\2\2\2\u1b45\u1b46\3\2\2\2\u1b46\u1b47\7\23\2\2\u1b47\u1b49\5\u0304"+
		"\u0183\2\u1b48\u1b4a\ti\2\2\u1b49\u1b48\3\2\2\2\u1b49\u1b4a\3\2\2\2\u1b4a"+
		"\u1b59\3\2\2\2\u1b4b\u1b4f\6\u01b8\u00b7\2\u1b4c\u1b4e\5\u0376\u01bc\2"+
		"\u1b4d\u1b4c\3\2\2\2\u1b4e\u1b51\3\2\2\2\u1b4f\u1b4d\3\2\2\2\u1b4f\u1b50"+
		"\3\2\2\2\u1b50\u1b5a\3\2\2\2\u1b51\u1b4f\3\2\2\2\u1b52\u1b56\6\u01b8\u00b8"+
		"\2\u1b53\u1b55\5\u0370\u01b9\2\u1b54\u1b53\3\2\2\2\u1b55\u1b58\3\2\2\2"+
		"\u1b56\u1b54\3\2\2\2\u1b56\u1b57\3\2\2\2\u1b57\u1b5a\3\2\2\2\u1b58\u1b56"+
		"\3\2\2\2\u1b59\u1b4b\3\2\2\2\u1b59\u1b52\3\2\2\2\u1b5a\u1b5c\3\2\2\2\u1b5b"+
		"\u1b3b\3\2\2\2\u1b5b\u1b3e\3\2\2\2\u1b5c\u036f\3\2\2\2\u1b5d\u1b5f\7\u0175"+
		"\2\2\u1b5e\u1b5d\3\2\2\2\u1b5e\u1b5f\3\2\2\2\u1b5f\u1b60\3\2\2\2\u1b60"+
		"\u1b92\5\u0494\u024b\2\u1b61\u1b62\6\u01b9\u00b9\2\u1b62\u1b63\7\u0175"+
		"\2\2\u1b63\u1b92\7\u02d2\2\2\u1b64\u1b6c\7\u0082\2\2\u1b65\u1b6d\5\u0480"+
		"\u0241\2\u1b66\u1b68\7\u0176\2\2\u1b67\u1b69\5\u02d2\u016a\2\u1b68\u1b67"+
		"\3\2\2\2\u1b68\u1b69\3\2\2\2\u1b69\u1b6d\3\2\2\2\u1b6a\u1b6b\6\u01b9\u00ba"+
		"\2\u1b6b\u1b6d\5\u0304\u0183\2\u1b6c\u1b65\3\2\2\2\u1b6c\u1b66\3\2\2\2"+
		"\u1b6c\u1b6a\3\2\2\2\u1b6d\u1b92\3\2\2\2\u1b6e\u1b6f\7\u0181\2\2\u1b6f"+
		"\u1b70\7\u0268\2\2\u1b70\u1b72\7\u0176\2\2\u1b71\u1b73\5\u02d2\u016a\2"+
		"\u1b72\u1b71\3\2\2\2\u1b72\u1b73\3\2\2\2\u1b73\u1b92\3\2\2\2\u1b74\u1b92"+
		"\7\32\2\2\u1b75\u1b76\7\u01f7\2\2\u1b76\u1b77\7\u0082\2\2\u1b77\u1b92"+
		"\7\u0275\2\2\u1b78\u1b7a\7\u01a6\2\2\u1b79\u1b78\3\2\2\2\u1b79\u1b7a\3"+
		"\2\2\2\u1b7a\u1b7b\3\2\2\2\u1b7b\u1b92\7\u010b\2\2\u1b7c\u1b7e\7\u0263"+
		"\2\2\u1b7d\u1b7f\7\u010b\2\2\u1b7e\u1b7d\3\2\2\2\u1b7e\u1b7f\3\2\2\2\u1b7f"+
		"\u1b92\3\2\2\2\u1b80\u1b81\7M\2\2\u1b81\u1b92\5\u048a\u0246\2\u1b82\u1b92"+
		"\5\u03dc\u01ef\2\u1b83\u1b84\7L\2\2\u1b84\u1b92\5\u0372\u01ba\2\u1b85"+
		"\u1b86\7\u022b\2\2\u1b86\u1b92\5\u0374\u01bb\2\u1b87\u1b88\6\u01b9\u00bb"+
		"\2\u1b88\u1b89\7\u02c5\2\2\u1b89\u1b92\5\u047c\u023f\2\u1b8a\u1b8c\6\u01b9"+
		"\u00bc\2\u1b8b\u1b8d\5\u036c\u01b7\2\u1b8c\u1b8b\3\2\2\2\u1b8c\u1b8d\3"+
		"\2\2\2\u1b8d\u1b8e\3\2\2\2\u1b8e\u1b92\5\u0366\u01b4\2\u1b8f\u1b90\6\u01b9"+
		"\u00bd\2\u1b90\u1b92\5\u0368\u01b5\2\u1b91\u1b5e\3\2\2\2\u1b91\u1b61\3"+
		"\2\2\2\u1b91\u1b64\3\2\2\2\u1b91\u1b6e\3\2\2\2\u1b91\u1b74\3\2\2\2\u1b91"+
		"\u1b75\3\2\2\2\u1b91\u1b79\3\2\2\2\u1b91\u1b7c\3\2\2\2\u1b91\u1b80\3\2"+
		"\2\2\u1b91\u1b82\3\2\2\2\u1b91\u1b83\3\2\2\2\u1b91\u1b85\3\2\2\2\u1b91"+
		"\u1b87\3\2\2\2\u1b91\u1b8a\3\2\2\2\u1b91\u1b8f\3\2\2\2\u1b92\u0371\3\2"+
		"\2\2\u1b93\u1b94\tj\2\2\u1b94\u0373\3\2\2\2\u1b95\u1b96\tk\2\2\u1b96\u0375"+
		"\3\2\2\2\u1b97\u1b99\7\u0263\2\2\u1b98\u1b9a\7\u010b\2\2\u1b99\u1b98\3"+
		"\2\2\2\u1b99\u1b9a\3\2\2\2\u1b9a\u1ba6\3\2\2\2\u1b9b\u1b9c\7M\2\2\u1b9c"+
		"\u1ba6\5\u0486\u0244\2\u1b9d\u1b9f\5\u02fa\u017e\2\u1b9e\u1b9d\3\2\2\2"+
		"\u1b9e\u1b9f\3\2\2\2\u1b9f\u1ba0\3\2\2\2\u1ba0\u1ba6\7\u017a\2\2\u1ba1"+
		"\u1ba3\7\u01a6\2\2\u1ba2\u1ba1\3\2\2\2\u1ba2\u1ba3\3\2\2\2\u1ba3\u1ba4"+
		"\3\2\2\2\u1ba4\u1ba6\7\u010b\2\2\u1ba5\u1b97\3\2\2\2\u1ba5\u1b9b\3\2\2"+
		"\2\u1ba5\u1b9e\3\2\2\2\u1ba5\u1ba2\3\2\2\2\u1ba6\u0377\3\2\2\2\u1ba7\u1ba8"+
		"\7\u01bd\2\2\u1ba8\u1baa\5\u0450\u0229\2\u1ba9\u1bab\5\u046e\u0238\2\u1baa"+
		"\u1ba9\3\2\2\2\u1baa\u1bab\3\2\2\2\u1bab\u1bae\3\2\2\2\u1bac\u1bad\7\u0142"+
		"\2\2\u1bad\u1baf\tl\2\2\u1bae\u1bac\3\2\2\2\u1bae\u1baf\3\2\2\2\u1baf"+
		"\u1bc0\3\2\2\2\u1bb0\u1bb1\7\u0181\2\2\u1bb1\u1bb2\7\u0268\2\2\u1bb2\u1bb6"+
		"\5\u037a\u01be\2\u1bb3\u1bb4\7\u0181\2\2\u1bb4\u1bb5\7\u0087\2\2\u1bb5"+
		"\u1bb7\5\u037a\u01be\2\u1bb6\u1bb3\3\2\2\2\u1bb6\u1bb7\3\2\2\2\u1bb7\u1bc1"+
		"\3\2\2\2\u1bb8\u1bb9\7\u0181\2\2\u1bb9\u1bba\7\u0087\2\2\u1bba\u1bbe\5"+
		"\u037a\u01be\2\u1bbb\u1bbc\7\u0181\2\2\u1bbc\u1bbd\7\u0268\2\2\u1bbd\u1bbf"+
		"\5\u037a\u01be\2\u1bbe\u1bbb\3\2\2\2\u1bbe\u1bbf\3\2\2\2\u1bbf\u1bc1\3"+
		"\2\2\2\u1bc0\u1bb0\3\2\2\2\u1bc0\u1bb8\3\2\2\2\u1bc0\u1bc1\3\2\2\2\u1bc1"+
		"\u0379\3\2\2\2\u1bc2\u1bc8\t\4\2\2\u1bc3\u1bc4\7\u01fc\2\2\u1bc4\u1bc8"+
		"\5\u0494\u024b\2\u1bc5\u1bc6\7\u0177\2\2\u1bc6\u1bc8\7\5\2\2\u1bc7\u1bc2"+
		"\3\2\2\2\u1bc7\u1bc3\3\2\2\2\u1bc7\u1bc5\3\2\2\2\u1bc8\u037b\3\2\2\2\u1bc9"+
		"\u1bca\7\u030a\2\2\u1bca\u1bcf\5\u037e\u01c0\2\u1bcb\u1bcc\7\u0307\2\2"+
		"\u1bcc\u1bce\5\u037e\u01c0\2\u1bcd\u1bcb\3\2\2\2\u1bce\u1bd1\3\2\2\2\u1bcf"+
		"\u1bcd\3\2\2\2\u1bcf\u1bd0\3\2\2\2\u1bd0\u1bd2\3\2\2\2\u1bd1\u1bcf\3\2"+
		"\2\2\u1bd2\u1bd3\7\u030b\2\2\u1bd3\u037d\3\2\2\2\u1bd4\u1bd6\5\u046a\u0236"+
		"\2\u1bd5\u1bd7\5\u039c\u01cf\2\u1bd6\u1bd5\3\2\2\2\u1bd6\u1bd7\3\2\2\2"+
		"\u1bd7\u1bd9\3\2\2\2\u1bd8\u1bda\5\u014c\u00a7\2\u1bd9\u1bd8\3\2\2\2\u1bd9"+
		"\u1bda\3\2\2\2\u1bda\u037f\3\2\2\2\u1bdb\u1bdc\7\u030a\2\2\u1bdc\u1be1"+
		"\5\u0382\u01c2\2\u1bdd\u1bde\7\u0307\2\2\u1bde\u1be0\5\u0382\u01c2\2\u1bdf"+
		"\u1bdd\3\2\2\2\u1be0\u1be3\3\2\2\2\u1be1\u1bdf\3\2\2\2\u1be1\u1be2\3\2"+
		"\2\2\u1be2\u1be4\3\2\2\2\u1be3\u1be1\3\2\2\2\u1be4\u1be5\7\u030b\2\2\u1be5"+
		"\u0381\3\2\2\2\u1be6\u1bec\5\u037e\u01c0\2\u1be7\u1be9\5\u0304\u0183\2"+
		"\u1be8\u1bea\5\u014c\u00a7\2\u1be9\u1be8\3\2\2\2\u1be9\u1bea\3\2\2\2\u1bea"+
		"\u1bec\3\2\2\2\u1beb\u1be6\3\2\2\2\u1beb\u1be7\3\2\2\2\u1bec\u0383\3\2"+
		"\2\2\u1bed\u1bee\6\u01c3\u00be\2\u1bee\u1bf2\5\u0380\u01c1\2\u1bef\u1bf0"+
		"\6\u01c3\u00bf\2\u1bf0\u1bf2\5\u037c\u01bf\2\u1bf1\u1bed\3\2\2\2\u1bf1"+
		"\u1bef\3\2\2\2\u1bf2\u0385\3\2\2\2\u1bf3\u1bf4\tm\2\2\u1bf4\u0387\3\2"+
		"\2\2\u1bf5\u1bf8\5\u038a\u01c6\2\u1bf6\u1bf8\5\u038e\u01c8\2\u1bf7\u1bf5"+
		"\3\2\2\2\u1bf7\u1bf6\3\2\2\2\u1bf8\u0389\3\2\2\2\u1bf9\u1bfb\7\u010a\2"+
		"\2\u1bfa\u1bfc\7\u02f0\2\2\u1bfb\u1bfa\3\2\2\2\u1bfb\u1bfc\3\2\2\2\u1bfc"+
		"\u1bfd\3\2\2\2\u1bfd\u1c03\5\u0476\u023c\2\u1bfe\u1bff\7M\2\2\u1bff\u1c03"+
		"\5\u048a\u0246\2\u1c00\u1c01\6\u01c6\u00c0\2\u1c01\u1c03\5\u038c\u01c7"+
		"\2\u1c02\u1bf9\3\2\2\2\u1c02\u1bfe\3\2\2\2\u1c02\u1c00\3\2\2\2\u1c03\u038b"+
		"\3\2\2\2\u1c04\u1c05\tn\2\2\u1c05\u038d\3\2\2\2\u1c06\u1c07\to\2\2\u1c07"+
		"\u1c08\5\u0386\u01c4\2\u1c08\u038f\3\2\2\2\u1c09\u1c0e\5\u038a\u01c6\2"+
		"\u1c0a\u1c0b\7\u0287\2\2\u1c0b\u1c0c\7\u0193\2\2\u1c0c\u1c0e\5\u046a\u0236"+
		"\2\u1c0d\u1c09\3\2\2\2\u1c0d\u1c0a\3\2\2\2\u1c0e\u0391\3\2\2\2\u1c0f\u1c10"+
		"\5\u038a\u01c6\2\u1c10\u0393\3\2\2\2\u1c11\u1c12\5\u0396\u01cc\2\u1c12"+
		"\u1c13\7\2\2\3\u1c13\u0395\3\2\2\2\u1c14\u1c16\tp\2\2\u1c15\u1c17\5\u039c"+
		"\u01cf\2\u1c16\u1c15\3\2\2\2\u1c16\u1c17\3\2\2\2\u1c17\u1c19\3\2\2\2\u1c18"+
		"\u1c1a\5\u039e\u01d0\2\u1c19\u1c18\3\2\2\2\u1c19\u1c1a\3\2\2\2\u1c1a\u1ca8"+
		"\3\2\2\2\u1c1b\u1c21\7\u01b7\2\2\u1c1c\u1c1e\7\u0094\2\2\u1c1d\u1c1f\7"+
		"\u01a2\2\2\u1c1e\u1c1d\3\2\2\2\u1c1e\u1c1f\3\2\2\2\u1c1f\u1c21\3\2\2\2"+
		"\u1c20\u1c1b\3\2\2\2\u1c20\u1c1c\3\2\2\2\u1c21\u1c23\3\2\2\2\u1c22\u1c24"+
		"\5\u049c\u024f\2\u1c23\u1c22\3\2\2\2\u1c23\u1c24\3\2\2\2\u1c24\u1c26\3"+
		"\2\2\2\u1c25\u1c27\5\u039e\u01d0\2\u1c26\u1c25\3\2\2\2\u1c26\u1c27\3\2"+
		"\2\2\u1c27\u1ca8\3\2\2\2\u1c28\u1c2a\tq\2\2\u1c29\u1c2b\5\u0498\u024d"+
		"\2\u1c2a\u1c29\3\2\2\2\u1c2a\u1c2b\3\2\2\2\u1c2b\u1c2d\3\2\2\2\u1c2c\u1c2e"+
		"\5\u039e\u01d0\2\u1c2d\u1c2c\3\2\2\2\u1c2d\u1c2e\3\2\2\2\u1c2e\u1ca8\3"+
		"\2\2\2\u1c2f\u1c31\7\'\2\2\u1c30\u1c32\5\u039c\u01cf\2\u1c31\u1c30\3\2"+
		"\2\2\u1c31\u1c32\3\2\2\2\u1c32\u1ca8\3\2\2\2\u1c33\u1ca8\tr\2\2\u1c34"+
		"\u1c36\7>\2\2\u1c35\u1c37\5\u039c\u01cf\2\u1c36\u1c35\3\2\2\2\u1c36\u1c37"+
		"\3\2\2\2\u1c37\u1c39\3\2\2\2\u1c38\u1c3a\5\u03a0\u01d1\2\u1c39\u1c38\3"+
		"\2\2\2\u1c39\u1c3a\3\2\2\2\u1c3a\u1ca8\3\2\2\2\u1c3b\u1c3d\5\u0398\u01cd"+
		"\2\u1c3c\u1c3e\5\u039c\u01cf\2\u1c3d\u1c3c\3\2\2\2\u1c3d\u1c3e\3\2\2\2"+
		"\u1c3e\u1c40\3\2\2\2\u1c3f\u1c41\7\"\2\2\u1c40\u1c3f\3\2\2\2\u1c40\u1c41"+
		"\3\2\2\2\u1c41\u1ca8\3\2\2\2\u1c42\u1c44\7\"\2\2\u1c43\u1c45\5\u039c\u01cf"+
		"\2\u1c44\u1c43\3\2\2\2\u1c44\u1c45\3\2\2\2\u1c45\u1ca8\3\2\2\2\u1c46\u1c47"+
		"\7>\2\2\u1c47\u1c4a\7\u027b\2\2\u1c48\u1c4a\7\u0277\2\2\u1c49\u1c46\3"+
		"\2\2\2\u1c49\u1c48\3\2\2\2\u1c4a\u1c4b\3\2\2\2\u1c4b\u1c4d\5\u039c\u01cf"+
		"\2\u1c4c\u1c4e\5\u03a0\u01d1\2\u1c4d\u1c4c\3\2\2\2\u1c4d\u1c4e\3\2\2\2"+
		"\u1c4e\u1ca8\3\2\2\2\u1c4f\u1c50\7\u0168\2\2\u1c50\u1c5a\7\u0277\2\2\u1c51"+
		"\u1c5a\7\u017d\2\2\u1c52\u1c53\7\u016b\2\2\u1c53\u1c5a\7\u0277\2\2\u1c54"+
		"\u1c55\7\u0168\2\2\u1c55\u1c56\7>\2\2\u1c56\u1c5a\7\u027b\2\2\u1c57\u1c58"+
		"\7\u016b\2\2\u1c58\u1c5a\7\u027b\2\2\u1c59\u1c4f\3\2\2\2\u1c59\u1c51\3"+
		"\2\2\2\u1c59\u1c52\3\2\2\2\u1c59\u1c54\3\2\2\2\u1c59\u1c57\3\2\2\2\u1c5a"+
		"\u1c5b\3\2\2\2\u1c5b\u1c5d\5\u039c\u01cf\2\u1c5c\u1c5e\7\"\2\2\u1c5d\u1c5c"+
		"\3\2\2\2\u1c5d\u1c5e\3\2\2\2\u1c5e\u1ca8\3\2\2\2\u1c5f\u1c60\7\u0276\2"+
		"\2\u1c60\u1ca8\5\u039c\u01cf\2\u1c61\u1c63\7\u0292\2\2\u1c62\u1c64\5\u039c"+
		"\u01cf\2\u1c63\u1c62\3\2\2\2\u1c63\u1c64\3\2\2\2\u1c64\u1c66\3\2\2\2\u1c65"+
		"\u1c67\5\u039e\u01d0\2\u1c66\u1c65\3\2\2\2\u1c66\u1c67\3\2\2\2\u1c67\u1ca8"+
		"\3\2\2\2\u1c68\u1ca8\7v\2\2\u1c69\u1c6b\7\u024c\2\2\u1c6a\u1c6c\5\u03a8"+
		"\u01d5\2\u1c6b\u1c6a\3\2\2\2\u1c6b\u1c6c\3\2\2\2\u1c6c\u1ca8\3\2\2\2\u1c6d"+
		"\u1c6f\7\u0249\2\2\u1c6e\u1c70\5\u03a8\u01d5\2\u1c6f\u1c6e\3\2\2\2\u1c6f"+
		"\u1c70\3\2\2\2\u1c70\u1ca8\3\2\2\2\u1c71\u1c73\7s\2\2\u1c72\u1c74\5\u03a8"+
		"\u01d5\2\u1c73\u1c72\3\2\2\2\u1c73\u1c74\3\2\2\2\u1c74\u1ca8\3\2\2\2\u1c75"+
		"\u1ca8\7\u024d\2\2\u1c76\u1c78\7)\2\2\u1c77\u1c79\5\u039c\u01cf\2\u1c78"+
		"\u1c77\3\2\2\2\u1c78\u1c79\3\2\2\2\u1c79\u1ca8\3\2\2\2\u1c7a\u1ca8\ts"+
		"\2\2\u1c7b\u1c7c\7\u0127\2\2\u1c7c\u1ca8\7\u0276\2\2\u1c7d\u1c81\7\u0127"+
		"\2\2\u1c7e\u1c7f\7>\2\2\u1c7f\u1c82\7\u027b\2\2\u1c80\u1c82\7\u0277\2"+
		"\2\u1c81\u1c7e\3\2\2\2\u1c81\u1c80\3\2\2\2\u1c81\u1c82\3\2\2\2\u1c82\u1c84"+
		"\3\2\2\2\u1c83\u1c85\5\u03a0\u01d1\2\u1c84\u1c83\3\2\2\2\u1c84\u1c85\3"+
		"\2\2\2\u1c85\u1ca8\3\2\2\2\u1c86\u1c88\7\u024f\2\2\u1c87\u1c89\5\u03a0"+
		"\u01d1\2\u1c88\u1c87\3\2\2\2\u1c88\u1c89\3\2\2\2\u1c89\u1ca8\3\2\2\2\u1c8a"+
		"\u1c8c\7\u0246\2\2\u1c8b\u1c8d\5\u039c\u01cf\2\u1c8c\u1c8b\3\2\2\2\u1c8c"+
		"\u1c8d\3\2\2\2\u1c8d\u1c8f\3\2\2\2\u1c8e\u1c90\5\u03a0\u01d1\2\u1c8f\u1c8e"+
		"\3\2\2\2\u1c8f\u1c90\3\2\2\2\u1c90\u1ca8\3\2\2\2\u1c91\u1c93\7\u014e\2"+
		"\2\u1c92\u1c94\5\u03a0\u01d1\2\u1c93\u1c92\3\2\2\2\u1c93\u1c94\3\2\2\2"+
		"\u1c94\u1ca8\3\2\2\2\u1c95\u1c97\7\u0125\2\2\u1c96\u1c98\5\u03a0\u01d1"+
		"\2\u1c97\u1c96\3\2\2\2\u1c97\u1c98\3\2\2\2\u1c98\u1ca8\3\2\2\2\u1c99\u1c9a"+
		"\7\u00a6\2\2\u1c9a\u1c9c\5\u0482\u0242\2\u1c9b\u1c9d\5\u03a0\u01d1\2\u1c9c"+
		"\u1c9b\3\2\2\2\u1c9c\u1c9d\3\2\2\2\u1c9d\u1ca8\3\2\2\2\u1c9e\u1c9f\7\u01fc"+
		"\2\2\u1c9f\u1ca1\5\u0482\u0242\2\u1ca0\u1ca2\5\u03a0\u01d1\2\u1ca1\u1ca0"+
		"\3\2\2\2\u1ca1\u1ca2\3\2\2\2\u1ca2\u1ca8\3\2\2\2\u1ca3\u1ca8\7\u01f7\2"+
		"\2\u1ca4\u1ca5\6\u01cc\u00c1\2\u1ca5\u1ca8\7\u0108\2\2\u1ca6\u1ca8\tt"+
		"\2\2\u1ca7\u1c14\3\2\2\2\u1ca7\u1c20\3\2\2\2\u1ca7\u1c28\3\2\2\2\u1ca7"+
		"\u1c2f\3\2\2\2\u1ca7\u1c33\3\2\2\2\u1ca7\u1c34\3\2\2\2\u1ca7\u1c3b\3\2"+
		"\2\2\u1ca7\u1c42\3\2\2\2\u1ca7\u1c49\3\2\2\2\u1ca7\u1c59\3\2\2\2\u1ca7"+
		"\u1c5f\3\2\2\2\u1ca7\u1c61\3\2\2\2\u1ca7\u1c68\3\2\2\2\u1ca7\u1c69\3\2"+
		"\2\2\u1ca7\u1c6d\3\2\2\2\u1ca7\u1c71\3\2\2\2\u1ca7\u1c75\3\2\2\2\u1ca7"+
		"\u1c76\3\2\2\2\u1ca7\u1c7a\3\2\2\2\u1ca7\u1c7b\3\2\2\2\u1ca7\u1c7d\3\2"+
		"\2\2\u1ca7\u1c86\3\2\2\2\u1ca7\u1c8a\3\2\2\2\u1ca7\u1c91\3\2\2\2\u1ca7"+
		"\u1c95\3\2\2\2\u1ca7\u1c99\3\2\2\2\u1ca7\u1c9e\3\2\2\2\u1ca7\u1ca3\3\2"+
		"\2\2\u1ca7\u1ca4\3\2\2\2\u1ca7\u1ca6\3\2\2\2\u1ca8\u0397\3\2\2\2\u1ca9"+
		"\u1cad\7\u016b\2\2\u1caa\u1cab\7\u0168\2\2\u1cab\u1cad\7>\2\2\u1cac\u1ca9"+
		"\3\2\2\2\u1cac\u1caa\3\2\2\2\u1cad\u0399\3\2\2\2\u1cae\u1cb4\7\u01b7\2"+
		"\2\u1caf\u1cb1\7\u0094\2\2\u1cb0\u1cb2\7\u01a2\2\2\u1cb1\u1cb0\3\2\2\2"+
		"\u1cb1\u1cb2\3\2\2\2\u1cb2\u1cb4\3\2\2\2\u1cb3\u1cae\3\2\2\2\u1cb3\u1caf"+
		"\3\2\2\2\u1cb4\u039b\3\2\2\2\u1cb5\u1cb8\7\u030a\2\2\u1cb6\u1cb9\5\u047c"+
		"\u023f\2\u1cb7\u1cb9\7\u0318\2\2\u1cb8\u1cb6\3\2\2\2\u1cb8\u1cb7\3\2\2"+
		"\2\u1cb9\u1cba\3\2\2\2\u1cba\u1cbb\7\u030b\2\2\u1cbb\u039d\3\2\2\2\u1cbc"+
		"\u1cbe\tu\2\2\u1cbd\u1cbc\3\2\2\2\u1cbe\u1cbf\3\2\2\2\u1cbf\u1cbd\3\2"+
		"\2\2\u1cbf\u1cc0\3\2\2\2\u1cc0\u039f\3\2\2\2\u1cc1\u1cd0\5\u03a2\u01d2"+
		"\2\u1cc2\u1cd0\5\u03a4\u01d3\2\u1cc3\u1cd0\7\60\2\2\u1cc4\u1cc5\5\u02f8"+
		"\u017d\2\u1cc5\u1cc7\5\u03aa\u01d6\2\u1cc6\u1cc8\7\"\2\2\u1cc7\u1cc6\3"+
		"\2\2\2\u1cc7\u1cc8\3\2\2\2\u1cc8\u1cd0\3\2\2\2\u1cc9\u1ccd\7\"\2\2\u1cca"+
		"\u1ccb\5\u02f8\u017d\2\u1ccb\u1ccc\5\u03aa\u01d6\2\u1ccc\u1cce\3\2\2\2"+
		"\u1ccd\u1cca\3\2\2\2\u1ccd\u1cce\3\2\2\2\u1cce\u1cd0\3\2\2\2\u1ccf\u1cc1"+
		"\3\2\2\2\u1ccf\u1cc2\3\2\2\2\u1ccf\u1cc3\3\2\2\2\u1ccf\u1cc4\3\2\2\2\u1ccf"+
		"\u1cc9\3\2\2\2\u1cd0\u03a1\3\2\2\2\u1cd1\u1cd3\7\25\2\2\u1cd2\u1cd4\7"+
		"\"\2\2\u1cd3\u1cd2\3\2\2\2\u1cd3\u1cd4\3\2\2\2\u1cd4\u1cd8\3\2\2\2\u1cd5"+
		"\u1cd6\7\"\2\2\u1cd6\u1cd8\7\25\2\2\u1cd7\u1cd1\3\2\2\2\u1cd7\u1cd5\3"+
		"\2\2\2\u1cd8\u03a3\3\2\2\2\u1cd9\u1cdb\7\u0260\2\2\u1cda\u1cdc\7\"\2\2"+
		"\u1cdb\u1cda\3\2\2\2\u1cdb\u1cdc\3\2\2\2\u1cdc\u1ce0\3\2\2\2\u1cdd\u1cde"+
		"\7\"\2\2\u1cde\u1ce0\7\u0260\2\2\u1cdf\u1cd9\3\2\2\2\u1cdf\u1cdd\3\2\2"+
		"\2\u1ce0\u03a5\3\2\2\2\u1ce1\u1ce2\7\u030a\2\2\u1ce2\u1ce3\5\u0478\u023d"+
		"\2\u1ce3\u1ce4\7\u030b\2\2\u1ce4\u03a7\3\2\2\2\u1ce5\u1ce6\7\u030a\2\2"+
		"\u1ce6\u1ce7\7\u02ed\2\2\u1ce7\u1ce8\7\u030b\2\2\u1ce8\u03a9\3\2\2\2\u1ce9"+
		"\u1cee\5\u049e\u0250\2\u1cea\u1cee\7\"\2\2\u1ceb\u1cec\6\u01d6\u00c2\2"+
		"\u1cec\u1cee\7\u0082\2\2\u1ced\u1ce9\3\2\2\2\u1ced\u1cea\3\2\2\2\u1ced"+
		"\u1ceb\3\2\2\2\u1cee\u03ab\3\2\2\2\u1cef\u1cf5\5\u049e\u0250\2\u1cf0\u1cf1"+
		"\6\u01d7\u00c3\2\u1cf1\u1cf5\7\u0082\2\2\u1cf2\u1cf3\6\u01d7\u00c4\2\u1cf3"+
		"\u1cf5\7\"\2\2\u1cf4\u1cef\3\2\2\2\u1cf4\u1cf0\3\2\2\2\u1cf4\u1cf2\3\2"+
		"\2\2\u1cf5\u03ad\3\2\2\2\u1cf6\u1cfd\5\u03b2\u01da\2\u1cf7\u1cf9\7\u0307"+
		"\2\2\u1cf8\u1cf7\3\2\2\2\u1cf8\u1cf9\3\2\2\2\u1cf9\u1cfa\3\2\2\2\u1cfa"+
		"\u1cfc\5\u03b2\u01da\2\u1cfb\u1cf8\3\2\2\2\u1cfc\u1cff\3\2\2\2\u1cfd\u1cfb"+
		"\3\2\2\2\u1cfd\u1cfe\3\2\2\2\u1cfe\u03af\3\2\2\2\u1cff\u1cfd\3\2\2\2\u1d00"+
		"\u1d02\5\u03b2\u01da\2\u1d01\u1d00\3\2\2\2\u1d02\u1d03\3\2\2\2\u1d03\u1d01"+
		"\3\2\2\2\u1d03\u1d04\3\2\2\2\u1d04\u03b1\3\2\2\2\u1d05\u1d07\7\u00a5\2"+
		"\2\u1d06\u1d08\7\u02f0\2\2\u1d07\u1d06\3\2\2\2\u1d07\u1d08\3\2\2\2\u1d08"+
		"\u1d09\3\2\2\2\u1d09\u1d87\5\u0448\u0225\2\u1d0a\u1d0b\6\u01da\u00c5\2"+
		"\u1d0b\u1d0d\7\u02d3\2\2\u1d0c\u1d0e\5\u04a8\u0255\2\u1d0d\u1d0c\3\2\2"+
		"\2\u1d0d\u1d0e\3\2\2\2\u1d0e\u1d11\3\2\2\2\u1d0f\u1d12\7\u017a\2\2\u1d10"+
		"\u1d12\5\u049e\u0250\2\u1d11\u1d0f\3\2\2\2\u1d11\u1d10\3\2\2\2\u1d12\u1d87"+
		"\3\2\2\2\u1d13\u1d15\7\u0145\2\2\u1d14\u1d16\7\u02f0\2\2\u1d15\u1d14\3"+
		"\2\2\2\u1d15\u1d16\3\2\2\2\u1d16\u1d17\3\2\2\2\u1d17\u1d87\5\u047a\u023e"+
		"\2\u1d18\u1d1a\7\u015a\2\2\u1d19\u1d1b\7\u02f0\2\2\u1d1a\u1d19\3\2\2\2"+
		"\u1d1a\u1d1b\3\2\2\2\u1d1b\u1d1c\3\2\2\2\u1d1c\u1d87\5\u047a\u023e\2\u1d1d"+
		"\u1d1f\7\33\2\2\u1d1e\u1d20\7\u02f0\2\2\u1d1f\u1d1e\3\2\2\2\u1d1f\u1d20"+
		"\3\2\2\2\u1d20\u1d21\3\2\2\2\u1d21\u1d87\5\u0476\u023c\2\u1d22\u1d24\7"+
		"\u0198\2\2\u1d23\u1d25\7\u02f0\2\2\u1d24\u1d23\3\2\2\2\u1d24\u1d25\3\2"+
		"\2\2\u1d25\u1d26\3\2\2\2\u1d26\u1d87\5\u0484\u0243\2\u1d27\u1d29\7M\2"+
		"\2\u1d28\u1d2a\7\u02f0\2\2\u1d29\u1d28\3\2\2\2\u1d29\u1d2a\3\2\2\2\u1d2a"+
		"\u1d2b\3\2\2\2\u1d2b\u1d87\5\u0484\u0243\2\u1d2c\u1d2d\6\u01da\u00c6\2"+
		"\u1d2d\u1d2f\7S\2\2\u1d2e\u1d30\7\u02f0\2\2\u1d2f\u1d2e\3\2\2\2\u1d2f"+
		"\u1d30\3\2\2\2\u1d30\u1d31\3\2\2\2\u1d31\u1d87\5\u0486\u0244\2\u1d32\u1d33"+
		"\6\u01da\u00c7\2\u1d33\u1d35\7\u00a0\2\2\u1d34\u1d36\7\u02f0\2\2\u1d35"+
		"\u1d34\3\2\2\2\u1d35\u1d36\3\2\2\2\u1d36\u1d37\3\2\2\2\u1d37\u1d87\5\u0486"+
		"\u0244\2\u1d38\u1d3a\7\32\2\2\u1d39\u1d3b\7\u02f0\2\2\u1d3a\u1d39\3\2"+
		"\2\2\u1d3a\u1d3b\3\2\2\2\u1d3b\u1d3c\3\2\2\2\u1d3c\u1d87\5\u047a\u023e"+
		"\2\u1d3d\u1d3f\7\u0191\2\2\u1d3e\u1d40\7\u02f0\2\2\u1d3f\u1d3e\3\2\2\2"+
		"\u1d3f\u1d40\3\2\2\2\u1d40\u1d41\3\2\2\2\u1d41\u1d87\5\u03b4\u01db\2\u1d42"+
		"\u1d44\tv\2\2\u1d43\u1d45\7\u02f0\2\2\u1d44\u1d43\3\2\2\2\u1d44\u1d45"+
		"\3\2\2\2\u1d45\u1d46\3\2\2\2\u1d46\u1d87\5\u03b4\u01db\2\u1d47\u1d49\t"+
		"w\2\2\u1d48\u1d4a\7\u02f0\2\2\u1d49\u1d48\3\2\2\2\u1d49\u1d4a\3\2\2\2"+
		"\u1d4a\u1d4b\3\2\2\2\u1d4b\u1d87\5\u0476\u023c\2\u1d4c\u1d4e\7\u0086\2"+
		"\2\u1d4d\u1d4f\7\u02f0\2\2\u1d4e\u1d4d\3\2\2\2\u1d4e\u1d4f\3\2\2\2\u1d4f"+
		"\u1d50\3\2\2\2\u1d50\u1d87\5\u0476\u023c\2\u1d51\u1d53\7\u01e8\2\2\u1d52"+
		"\u1d54\7\u02f0\2\2\u1d53\u1d52\3\2\2\2\u1d53\u1d54\3\2\2\2\u1d54\u1d55"+
		"\3\2\2\2\u1d55\u1d87\tx\2\2\u1d56\u1d58\7\u0262\2\2\u1d57\u1d59\7\u02f0"+
		"\2\2\u1d58\u1d57\3\2\2\2\u1d58\u1d59\3\2\2\2\u1d59\u1d5a\3\2\2\2\u1d5a"+
		"\u1d5b\7\u030a\2\2\u1d5b\u1d5c\5\u0452\u022a\2\u1d5c\u1d5d\7\u030b\2\2"+
		"\u1d5d\u1d87\3\2\2\2\u1d5e\u1d87\5\u03ba\u01de\2\u1d5f\u1d87\5\u03b6\u01dc"+
		"\2\u1d60\u1d62\7\u00f5\2\2\u1d61\u1d63\7\u02f0\2\2\u1d62\u1d61\3\2\2\2"+
		"\u1d62\u1d63\3\2\2\2\u1d63\u1d64\3\2\2\2\u1d64\u1d87\ty\2\2\u1d65\u1d66"+
		"\7r\2\2\u1d66\u1d68\7\u008d\2\2\u1d67\u1d69\7\u02f0\2\2\u1d68\u1d67\3"+
		"\2\2\2\u1d68\u1d69\3\2\2\2\u1d69\u1d6a\3\2\2\2\u1d6a\u1d87\5\u0486\u0244"+
		"\2\u1d6b\u1d6c\7\u00ee\2\2\u1d6c\u1d6e\7\u008d\2\2\u1d6d\u1d6f\7\u02f0"+
		"\2\2\u1d6e\u1d6d\3\2\2\2\u1d6e\u1d6f\3\2\2\2\u1d6f\u1d70\3\2\2\2\u1d70"+
		"\u1d87\5\u0486\u0244\2\u1d71\u1d77\7\u023e\2\2\u1d72\u1d74\6\u01da\u00c8"+
		"\2\u1d73\u1d75\7\u02f0\2\2\u1d74\u1d73\3\2\2\2\u1d74\u1d75\3\2\2\2\u1d75"+
		"\u1d78\3\2\2\2\u1d76\u1d78\3\2\2\2\u1d77\u1d72\3\2\2\2\u1d77\u1d76\3\2"+
		"\2\2\u1d78\u1d79\3\2\2\2\u1d79\u1d87\5\u046a\u0236\2\u1d7a\u1d7b\7\u022b"+
		"\2\2\u1d7b\u1d87\tz\2\2\u1d7c\u1d7e\7V\2\2\u1d7d\u1d7f\7\u02f0\2\2\u1d7e"+
		"\u1d7d\3\2\2\2\u1d7e\u1d7f\3\2\2\2\u1d7f\u1d80\3\2\2\2\u1d80\u1d87\5\u0486"+
		"\u0244\2\u1d81\u1d83\7\u010a\2\2\u1d82\u1d84\7\u02f0\2\2\u1d83\u1d82\3"+
		"\2\2\2\u1d83\u1d84\3\2\2\2\u1d84\u1d85\3\2\2\2\u1d85\u1d87\5\u0476\u023c"+
		"\2\u1d86\u1d05\3\2\2\2\u1d86\u1d0a\3\2\2\2\u1d86\u1d13\3\2\2\2\u1d86\u1d18"+
		"\3\2\2\2\u1d86\u1d1d\3\2\2\2\u1d86\u1d22\3\2\2\2\u1d86\u1d27\3\2\2\2\u1d86"+
		"\u1d2c\3\2\2\2\u1d86\u1d32\3\2\2\2\u1d86\u1d38\3\2\2\2\u1d86\u1d3d\3\2"+
		"\2\2\u1d86\u1d42\3\2\2\2\u1d86\u1d47\3\2\2\2\u1d86\u1d4c\3\2\2\2\u1d86"+
		"\u1d51\3\2\2\2\u1d86\u1d56\3\2\2\2\u1d86\u1d5e\3\2\2\2\u1d86\u1d5f\3\2"+
		"\2\2\u1d86\u1d60\3\2\2\2\u1d86\u1d65\3\2\2\2\u1d86\u1d6b\3\2\2\2\u1d86"+
		"\u1d71\3\2\2\2\u1d86\u1d7a\3\2\2\2\u1d86\u1d7c\3\2\2\2\u1d86\u1d81\3\2"+
		"\2\2\u1d87\u03b3\3\2\2\2\u1d88\u1d8b\5\u0476\u023c\2\u1d89\u1d8b\7\u0082"+
		"\2\2\u1d8a\u1d88\3\2\2\2\u1d8a\u1d89\3\2\2\2\u1d8b\u03b5\3\2\2\2\u1d8c"+
		"\u1d8e\7\u0082\2\2\u1d8d\u1d8c\3\2\2\2\u1d8d\u1d8e\3\2\2\2\u1d8e\u1d8f"+
		"\3\2\2\2\u1d8f\u1d91\7G\2\2\u1d90\u1d92\7\u02f0\2\2\u1d91\u1d90\3\2\2"+
		"\2\u1d91\u1d92\3\2\2\2\u1d92\u1d93\3\2\2\2\u1d93\u1d94\5\u03ac\u01d7\2"+
		"\u1d94\u03b7\3\2\2\2\u1d95\u1d97\7\u0082\2\2\u1d96\u1d95\3\2\2\2\u1d96"+
		"\u1d97\3\2\2\2\u1d97\u1d98\3\2\2\2\u1d98\u1d9a\7\u00a0\2\2\u1d99\u1d9b"+
		"\7\u02f0\2\2\u1d9a\u1d99\3\2\2\2\u1d9a\u1d9b\3\2\2\2\u1d9b\u1d9c\3\2\2"+
		"\2\u1d9c\u1d9d\5\u0484\u0243\2\u1d9d\u03b9\3\2\2\2\u1d9e\u1da0\7\u0082"+
		"\2\2\u1d9f\u1d9e\3\2\2\2\u1d9f\u1da0\3\2\2\2\u1da0\u1da1\3\2\2\2\u1da1"+
		"\u1da3\5\u02f8\u017d\2\u1da2\u1da4\7\u02f0\2\2\u1da3\u1da2\3\2\2\2\u1da3"+
		"\u1da4\3\2\2\2\u1da4\u1da5\3\2\2\2\u1da5\u1da6\5\u03aa\u01d6\2\u1da6\u03bb"+
		"\3\2\2\2\u1da7\u1da8\7\u0197\2\2\u1da8\u1da9\7/\2\2\u1da9\u1dac\5\u03be"+
		"\u01e0\2\u1daa\u1dab\7\u0196\2\2\u1dab\u1dad\5\u0478\u023d\2\u1dac\u1daa"+
		"\3\2\2\2\u1dac\u1dad\3\2\2\2\u1dad\u1daf\3\2\2\2\u1dae\u1db0\5\u03c0\u01e1"+
		"\2\u1daf\u1dae\3\2\2\2\u1daf\u1db0\3\2\2\2\u1db0\u1db2\3\2\2\2\u1db1\u1db3"+
		"\5\u03c4\u01e3\2\u1db2\u1db1\3\2\2\2\u1db2\u1db3\3\2\2\2\u1db3\u03bd\3"+
		"\2\2\2\u1db4\u1db6\7\u0117\2\2\u1db5\u1db4\3\2\2\2\u1db5\u1db6\3\2\2\2"+
		"\u1db6\u1db7\3\2\2\2\u1db7\u1db9\7\u010b\2\2\u1db8\u1dba\5\u03c2\u01e2"+
		"\2\u1db9\u1db8\3\2\2\2\u1db9\u1dba\3\2\2\2\u1dba\u1dbb\3\2\2\2\u1dbb\u1dbd"+
		"\7\u030a\2\2\u1dbc\u1dbe\5\u046c\u0237\2\u1dbd\u1dbc\3\2\2\2\u1dbd\u1dbe"+
		"\3\2\2\2\u1dbe\u1dbf\3\2\2\2\u1dbf\u1dd6\7\u030b\2\2\u1dc0\u1dc2\7\u0117"+
		"\2\2\u1dc1\u1dc0\3\2\2\2\u1dc1\u1dc2\3\2\2\2\u1dc2\u1dc3\3\2\2\2\u1dc3"+
		"\u1dc4\7\u00de\2\2\u1dc4\u1dc5\7\u030a\2\2\u1dc5\u1dc6\5\u02b0\u0159\2"+
		"\u1dc6\u1dc7\7\u030b\2\2\u1dc7\u1dd6\3\2\2\2\u1dc8\u1dd3\t{\2\2\u1dc9"+
		"\u1dca\7\u030a\2\2\u1dca\u1dcb\5\u02b0\u0159\2\u1dcb\u1dcc\7\u030b\2\2"+
		"\u1dcc\u1dd4\3\2\2\2\u1dcd\u1dce\7I\2\2\u1dce\u1dd0\7\u030a\2\2\u1dcf"+
		"\u1dd1\5\u046c\u0237\2\u1dd0\u1dcf\3\2\2\2\u1dd0\u1dd1\3\2\2\2\u1dd1\u1dd2"+
		"\3\2\2\2\u1dd2\u1dd4\7\u030b\2\2\u1dd3\u1dc9\3\2\2\2\u1dd3\u1dcd\3\2\2"+
		"\2\u1dd4\u1dd6\3\2\2\2\u1dd5\u1db5\3\2\2\2\u1dd5\u1dc1\3\2\2\2\u1dd5\u1dc8"+
		"\3\2\2\2\u1dd6\u03bf\3\2\2\2\u1dd7\u1dd8\7\u0233\2\2\u1dd8\u1dda\7/\2"+
		"\2\u1dd9\u1ddb\7\u0117\2\2\u1dda\u1dd9\3\2\2\2\u1dda\u1ddb\3\2\2\2\u1ddb"+
		"\u1de6\3\2\2\2\u1ddc\u1ddd\7\u00de\2\2\u1ddd\u1dde\7\u030a\2\2\u1dde\u1ddf"+
		"\5\u02b0\u0159\2\u1ddf\u1de0\7\u030b\2\2\u1de0\u1de7\3\2\2\2\u1de1\u1de3"+
		"\7\u010b\2\2\u1de2\u1de4\5\u03c2\u01e2\2\u1de3\u1de2\3\2\2\2\u1de3\u1de4"+
		"\3\2\2\2\u1de4\u1de5\3\2\2\2\u1de5\u1de7\5\u046e\u0238\2\u1de6\u1ddc\3"+
		"\2\2\2\u1de6\u1de1\3\2\2\2\u1de7\u1dea\3\2\2\2\u1de8\u1de9\7\u0232\2\2"+
		"\u1de9\u1deb\5\u0478\u023d\2\u1dea\u1de8\3\2\2\2\u1dea\u1deb\3\2\2\2\u1deb"+
		"\u03c1\3\2\2\2\u1dec\u1ded\6\u01e2\u00c9\2\u1ded\u1dee\7\13\2\2\u1dee"+
		"\u1def\7\u02f0\2\2\u1def\u1df0\5\u0478\u023d\2\u1df0\u03c3\3\2\2\2\u1df1"+
		"\u1df2\7\u030a\2\2\u1df2\u1df7\5\u03c6\u01e4\2\u1df3\u1df4\7\u0307\2\2"+
		"\u1df4\u1df6\5\u03c6\u01e4\2\u1df5\u1df3\3\2\2\2\u1df6\u1df9\3\2\2\2\u1df7"+
		"\u1df5\3\2\2\2\u1df7\u1df8\3\2\2\2\u1df8\u1dfa\3\2\2\2\u1df9\u1df7\3\2"+
		"\2\2\u1dfa\u1dfb\7\u030b\2\2\u1dfb\u03c5\3\2\2\2\u1dfc\u1dfd\7\u0197\2"+
		"\2\u1dfd\u1e08\5\u046a\u0236\2\u1dfe\u1dff\7\u0274\2\2\u1dff\u1e00\7\u0113"+
		"\2\2\u1e00\u1e03\7\u0247\2\2\u1e01\u1e04\5\u03ce\u01e8\2\u1e02\u1e04\7"+
		"\u014b\2\2\u1e03\u1e01\3\2\2\2\u1e03\u1e02\3\2\2\2\u1e04\u1e09\3\2\2\2"+
		"\u1e05\u1e06\7\u0274\2\2\u1e06\u1e07\7\u00fd\2\2\u1e07\u1e09\5\u03c8\u01e5"+
		"\2\u1e08\u1dfe\3\2\2\2\u1e08\u1e05\3\2\2\2\u1e08\u1e09\3\2\2\2\u1e09\u1e0d"+
		"\3\2\2\2\u1e0a\u1e0c\5\u03ca\u01e6\2\u1e0b\u1e0a\3\2\2\2\u1e0c\u1e0f\3"+
		"\2\2\2\u1e0d\u1e0b\3\2\2\2\u1e0d\u1e0e\3\2\2\2\u1e0e\u1e1b\3\2\2\2\u1e0f"+
		"\u1e0d\3\2\2\2\u1e10\u1e11\7\u030a\2\2\u1e11\u1e16\5\u03cc\u01e7\2\u1e12"+
		"\u1e13\7\u0307\2\2\u1e13\u1e15\5\u03cc\u01e7\2\u1e14\u1e12\3\2\2\2\u1e15"+
		"\u1e18\3\2\2\2\u1e16\u1e14\3\2\2\2\u1e16\u1e17\3\2\2\2\u1e17\u1e19\3\2"+
		"\2\2\u1e18\u1e16\3\2\2\2\u1e19\u1e1a\7\u030b\2\2\u1e1a\u1e1c\3\2\2\2\u1e1b"+
		"\u1e10\3\2\2\2\u1e1b\u1e1c\3\2\2\2\u1e1c\u03c7\3\2\2\2\u1e1d\u1e2a\5\u03ce"+
		"\u01e8\2\u1e1e\u1e1f\7\u030a\2\2\u1e1f\u1e24\5\u03ce\u01e8\2\u1e20\u1e21"+
		"\7\u0307\2\2\u1e21\u1e23\5\u03ce\u01e8\2\u1e22\u1e20\3\2\2\2\u1e23\u1e26"+
		"\3\2\2\2\u1e24\u1e22\3\2\2\2\u1e24\u1e25\3\2\2\2\u1e25\u1e27\3\2\2\2\u1e26"+
		"\u1e24\3\2\2\2\u1e27\u1e28\7\u030b\2\2\u1e28\u1e2a\3\2\2\2\u1e29\u1e1d"+
		"\3\2\2\2\u1e29\u1e1e\3\2\2\2\u1e2a\u03c9\3\2\2\2\u1e2b\u1e2d\7\u023e\2"+
		"\2\u1e2c\u1e2e\7\u02f0\2\2\u1e2d\u1e2c\3\2\2\2\u1e2d\u1e2e\3\2\2\2\u1e2e"+
		"\u1e2f\3\2\2\2\u1e2f\u1e4e\5\u046a\u0236\2\u1e30\u1e32\7\u022b\2\2\u1e31"+
		"\u1e30\3\2\2\2\u1e31\u1e32\3\2\2\2\u1e32\u1e33\3\2\2\2\u1e33\u1e35\7\u00a5"+
		"\2\2\u1e34\u1e36\7\u02f0\2\2\u1e35\u1e34\3\2\2\2\u1e35\u1e36\3\2\2\2\u1e36"+
		"\u1e37\3\2\2\2\u1e37\u1e4e\5\u0448\u0225\2\u1e38\u1e3a\7\u0172\2\2\u1e39"+
		"\u1e3b\7\u02f0\2\2\u1e3a\u1e39\3\2\2\2\u1e3a\u1e3b\3\2\2\2\u1e3b\u1e3c"+
		"\3\2\2\2\u1e3c\u1e4e\5\u0478\u023d\2\u1e3d\u1e3f\t|\2\2\u1e3e\u1e40\7"+
		"\u02f0\2\2\u1e3f\u1e3e\3\2\2\2\u1e3f\u1e40\3\2\2\2\u1e40\u1e41\3\2\2\2"+
		"\u1e41\u1e4e\5\u0478\u023d\2\u1e42\u1e43\t}\2\2\u1e43\u1e45\7\u008d\2"+
		"\2\u1e44\u1e46\7\u02f0\2\2\u1e45\u1e44\3\2\2\2\u1e45\u1e46\3\2\2\2\u1e46"+
		"\u1e47\3\2\2\2\u1e47\u1e4e\5\u048a\u0246\2\u1e48\u1e4a\7M\2\2\u1e49\u1e4b"+
		"\7\u02f0\2\2\u1e4a\u1e49\3\2\2\2\u1e4a\u1e4b\3\2\2\2\u1e4b\u1e4c\3\2\2"+
		"\2\u1e4c\u1e4e\5\u048a\u0246\2\u1e4d\u1e2b\3\2\2\2\u1e4d\u1e31\3\2\2\2"+
		"\u1e4d\u1e38\3\2\2\2\u1e4d\u1e3d\3\2\2\2\u1e4d\u1e42\3\2\2\2\u1e4d\u1e48"+
		"\3\2\2\2\u1e4e\u03cb\3\2\2\2\u1e4f\u1e50\7\u0233\2\2\u1e50\u1e54\5\u049e"+
		"\u0250\2\u1e51\u1e53\5\u03ca\u01e6\2\u1e52\u1e51\3\2\2\2\u1e53\u1e56\3"+
		"\2\2\2\u1e54\u1e52\3\2\2\2\u1e54\u1e55\3\2\2\2\u1e55\u03cd\3\2\2\2\u1e56"+
		"\u1e54\3\2\2\2\u1e57\u1e58\7\u030a\2\2\u1e58\u1e5d\5\u03d0\u01e9\2\u1e59"+
		"\u1e5a\7\u0307\2\2\u1e5a\u1e5c\5\u03d0\u01e9\2\u1e5b\u1e59\3\2\2\2\u1e5c"+
		"\u1e5f\3\2\2\2\u1e5d\u1e5b\3\2\2\2\u1e5d\u1e5e\3\2\2\2\u1e5e\u1e60\3\2"+
		"\2\2\u1e5f\u1e5d\3\2\2\2\u1e60\u1e61\7\u030b\2\2\u1e61\u03cf\3\2\2\2\u1e62"+
		"\u1e65\5\u02b0\u0159\2\u1e63\u1e65\7\u014b\2\2\u1e64\u1e62\3\2\2\2\u1e64"+
		"\u1e63\3\2\2\2\u1e65\u03d1\3\2\2\2\u1e66\u1e67\7\u0084\2\2\u1e67\u1e68"+
		"\7\u02f0\2\2\u1e68\u1e69\5\u0404\u0203\2\u1e69\u03d3\3\2\2\2\u1e6a\u1e6b"+
		"\7\u00e9\2\2\u1e6b\u1e6c\7\u00b0\2\2\u1e6c\u03d5\3\2\2\2\u1e6d\u1e6e\7"+
		"\u00e9\2\2\u1e6e\u1e6f\5\u02fa\u017e\2\u1e6f\u1e70\7\u00b0\2\2\u1e70\u03d7"+
		"\3\2\2\2\u1e71\u1e73\t~\2\2\u1e72\u1e71\3\2\2\2\u1e72\u1e73\3\2\2\2\u1e73"+
		"\u1e74\3\2\2\2\u1e74\u1e75\5\u03da\u01ee\2\u1e75\u03d9\3\2\2\2\u1e76\u1e77"+
		"\5\u0456\u022c\2\u1e77\u1e78\5\u03de\u01f0\2\u1e78\u03db\3\2\2\2\u1e79"+
		"\u1e7a\7G\2\2\u1e7a\u1e7b\5\u03ac\u01d7\2\u1e7b\u03dd\3\2\2\2\u1e7c\u1e7e"+
		"\5\u0396\u01cc\2\u1e7d\u1e7f\5\u03dc\u01ef\2\u1e7e\u1e7d\3\2\2\2\u1e7e"+
		"\u1e7f\3\2\2\2\u1e7f\u03df\3\2\2\2\u1e80\u1e81\7\u030a\2\2\u1e81\u1e82"+
		"\5\u0424\u0213\2\u1e82\u1e83\7\u0307\2\2\u1e83\u1e84\5\u0424\u0213\2\u1e84"+
		"\u1e85\7\u030b\2\2\u1e85\u03e1\3\2\2\2\u1e86\u1e8b\5\u0434\u021b\2\u1e87"+
		"\u1e88\7\u0307\2\2\u1e88\u1e8a\5\u0434\u021b\2\u1e89\u1e87\3\2\2\2\u1e8a"+
		"\u1e8d\3\2\2\2\u1e8b\u1e89\3\2\2\2\u1e8b\u1e8c\3\2\2\2\u1e8c\u03e3\3\2"+
		"\2\2\u1e8d\u1e8b\3\2\2\2\u1e8e\u1e93\5\u03e6\u01f4\2\u1e8f\u1e90\7\u0307"+
		"\2\2\u1e90\u1e92\5\u03e6\u01f4\2\u1e91\u1e8f\3\2\2\2\u1e92\u1e95\3\2\2"+
		"\2\u1e93\u1e91\3\2\2\2\u1e93\u1e94\3\2\2\2\u1e94\u03e5\3\2\2\2\u1e95\u1e93"+
		"\3\2\2\2\u1e96\u1e97\5\u0418\u020d\2\u1e97\u1e9a\7\u02f0\2\2\u1e98\u1e9b"+
		"\5\u02a6\u0154\2\u1e99\u1e9b\7\u0082\2\2\u1e9a\u1e98\3\2\2\2\u1e9a\u1e99"+
		"\3\2\2\2\u1e9b\u03e7\3\2\2\2\u1e9c\u1e9d\5\u02f8\u017d\2\u1e9d\u1e9e\5"+
		"\u03aa\u01d6\2\u1e9e\u03e9\3\2\2\2\u1e9f\u1ea1\7I\2\2\u1ea0\u1ea2\5\u03ec"+
		"\u01f7\2\u1ea1\u1ea0\3\2\2\2\u1ea2\u1ea3\3\2\2\2\u1ea3\u1ea1\3\2\2\2\u1ea3"+
		"\u1ea4\3\2\2\2\u1ea4\u03eb\3\2\2\2\u1ea5\u1ea6\7\u0245\2\2\u1ea6\u1ea7"+
		"\7/\2\2\u1ea7\u1eb2\5\u0486\u0244\2\u1ea8\u1eaa\7\u018a\2\2\u1ea9\u1ea8"+
		"\3\2\2\2\u1ea9\u1eaa\3\2\2\2\u1eaa\u1eab\3\2\2\2\u1eab\u1eac\7\u009f\2"+
		"\2\u1eac\u1ead\7/\2\2\u1ead\u1eb2\5\u0486\u0244\2\u1eae\u1eaf\7\u00a9"+
		"\2\2\u1eaf\u1eb0\7/\2\2\u1eb0\u1eb2\5\u0486\u0244\2\u1eb1\u1ea5\3\2\2"+
		"\2\u1eb1\u1ea9\3\2\2\2\u1eb1\u1eae\3\2\2\2\u1eb2\u03ed\3\2\2\2\u1eb3\u1eb5"+
		"\7\u0118\2\2\u1eb4\u1eb6\5\u03f0\u01f9\2\u1eb5\u1eb4\3\2\2\2\u1eb6\u1eb7"+
		"\3\2\2\2\u1eb7\u1eb5\3\2\2\2\u1eb7\u1eb8\3\2\2\2\u1eb8\u03ef\3\2\2\2\u1eb9"+
		"\u1eba\t\177\2\2\u1eba\u1ebb\7/\2\2\u1ebb\u1ebc\5\u0486\u0244\2\u1ebc"+
		"\u03f1\3\2\2\2\u1ebd\u1ec2\5\u0404\u0203\2\u1ebe\u1ebf\7\u0307\2\2\u1ebf"+
		"\u1ec1\5\u0404\u0203\2\u1ec0\u1ebe\3\2\2\2\u1ec1\u1ec4\3\2\2\2\u1ec2\u1ec0"+
		"\3\2\2\2\u1ec2\u1ec3\3\2\2\2\u1ec3\u03f3\3\2\2\2\u1ec4\u1ec2\3\2\2\2\u1ec5"+
		"\u1eca\5\u03f8\u01fd\2\u1ec6\u1ec7\7\u0307\2\2\u1ec7\u1ec9\5\u03f8\u01fd"+
		"\2\u1ec8\u1ec6\3\2\2\2\u1ec9\u1ecc\3\2\2\2\u1eca\u1ec8\3\2\2\2\u1eca\u1ecb"+
		"\3\2\2\2\u1ecb\u03f5\3\2\2\2\u1ecc\u1eca\3\2\2\2\u1ecd\u1ed2\5\u03fa\u01fe"+
		"\2\u1ece\u1ecf\7\u0307\2\2\u1ecf\u1ed1\5\u03fa\u01fe\2\u1ed0\u1ece\3\2"+
		"\2\2\u1ed1\u1ed4\3\2\2\2\u1ed2\u1ed0\3\2\2\2\u1ed2\u1ed3\3\2\2\2\u1ed3"+
		"\u03f7\3\2\2\2\u1ed4\u1ed2\3\2\2\2\u1ed5\u1ef0\5\u0404\u0203\2\u1ed6\u1eee"+
		"\7\u00e8\2\2\u1ed7\u1eda\7/\2\2\u1ed8\u1ed9\6\u01fd\u00ca\2\u1ed9\u1edb"+
		"\7\u0198\2\2\u1eda\u1ed8\3\2\2\2\u1eda\u1edb\3\2\2\2\u1edb\u1edc\3\2\2"+
		"\2\u1edc\u1eef\5\u0486\u0244\2\u1edd\u1ede\7\u0287\2\2\u1ede\u1ee4\5\u049e"+
		"\u0250\2\u1edf\u1ee0\7\23\2\2\u1ee0\u1ee5\5\u0488\u0245\2\u1ee1\u1ee2"+
		"\6\u01fd\u00cb\2\u1ee2\u1ee3\7/\2\2\u1ee3\u1ee5\5\u0486\u0244\2\u1ee4"+
		"\u1edf\3\2\2\2\u1ee4\u1ee1\3\2\2\2\u1ee4\u1ee5\3\2\2\2\u1ee5\u1eef\3\2"+
		"\2\2\u1ee6\u1ee9\6\u01fd\u00cc\2\u1ee7\u1ee8\7\u0287\2\2\u1ee8\u1eea\5"+
		"\u049e\u0250\2\u1ee9\u1ee7\3\2\2\2\u1ee9\u1eea\3\2\2\2\u1eea\u1eeb\3\2"+
		"\2\2\u1eeb\u1eec\7/\2\2\u1eec\u1eed\7\u02e0\2\2\u1eed\u1eef\7\u0198\2"+
		"\2\u1eee\u1ed7\3\2\2\2\u1eee\u1edd\3\2\2\2\u1eee\u1ee6\3\2\2\2\u1eef\u1ef1"+
		"\3\2\2\2\u1ef0\u1ed6\3\2\2\2\u1ef0\u1ef1\3\2\2\2\u1ef1\u03f9\3\2\2\2\u1ef2"+
		"\u1f0f\5\u0404\u0203\2\u1ef3\u1f0a\7\u00e8\2\2\u1ef4\u1ef5\7\u0287\2\2"+
		"\u1ef5\u1ef7\5\u049e\u0250\2\u1ef6\u1ef4\3\2\2\2\u1ef6\u1ef7\3\2\2\2\u1ef7"+
		"\u1ef8\3\2\2\2\u1ef8\u1ef9\7/\2\2\u1ef9\u1efc\5\u0486\u0244\2\u1efa\u1efb"+
		"\7\u01cc\2\2\u1efb\u1efd\5\u0486\u0244\2\u1efc\u1efa\3\2\2\2\u1efc\u1efd"+
		"\3\2\2\2\u1efd\u1eff\3\2\2\2\u1efe\u1f00\5\u03fc\u01ff\2\u1eff\u1efe\3"+
		"\2\2\2\u1eff\u1f00\3\2\2\2\u1f00\u1f0b\3\2\2\2\u1f01\u1f02\7\u0287\2\2"+
		"\u1f02\u1f08\5\u049e\u0250\2\u1f03\u1f04\7\23\2\2\u1f04\u1f06\5\u0488"+
		"\u0245\2\u1f05\u1f07\5\u03fc\u01ff\2\u1f06\u1f05\3\2\2\2\u1f06\u1f07\3"+
		"\2\2\2\u1f07\u1f09\3\2\2\2\u1f08\u1f03\3\2\2\2\u1f08\u1f09\3\2\2\2\u1f09"+
		"\u1f0b\3\2\2\2\u1f0a\u1ef6\3\2\2\2\u1f0a\u1f01\3\2\2\2\u1f0a\u1f0b\3\2"+
		"\2\2\u1f0b\u1f10\3\2\2\2\u1f0c\u1f0e\5\u03fe\u0200\2\u1f0d\u1f0c\3\2\2"+
		"\2\u1f0d\u1f0e\3\2\2\2\u1f0e\u1f10\3\2\2\2\u1f0f\u1ef3\3\2\2\2\u1f0f\u1f0d"+
		"\3\2\2\2\u1f10\u03fb\3\2\2\2\u1f11\u1f12\7\u02d9\2\2\u1f12\u1f13\7g\2"+
		"\2\u1f13\u1f14\7\u0198\2\2\u1f14\u03fd\3\2\2\2\u1f15\u1f16\7\u008f\2\2"+
		"\u1f16\u1f17\7\u02da\2\2\u1f17\u1f18\7\u0198\2\2\u1f18\u03ff\3\2\2\2\u1f19"+
		"\u1f1a\7\u01cc\2\2\u1f1a\u1f1b\5\u0486\u0244\2\u1f1b\u0401\3\2\2\2\u1f1c"+
		"\u1f20\5\u049e\u0250\2\u1f1d\u1f1e\7\u0311\2\2\u1f1e\u1f21\5\u049e\u0250"+
		"\2\u1f1f\u1f21\7\u0312\2\2\u1f20\u1f1d\3\2\2\2\u1f20\u1f1f\3\2\2\2\u1f20"+
		"\u1f21\3\2\2\2\u1f21\u0403\3\2\2\2\u1f22\u1f28\5\u0402\u0202\2\u1f23\u1f25"+
		"\7k\2\2\u1f24\u1f26\5\u04a6\u0254\2\u1f25\u1f24\3\2\2\2\u1f25\u1f26\3"+
		"\2\2\2\u1f26\u1f28\3\2\2\2\u1f27\u1f22\3\2\2\2\u1f27\u1f23\3\2\2\2\u1f28"+
		"\u0405\3\2\2\2\u1f29\u1f2a\7\u0115\2\2\u1f2a\u1f2b\5\u0484\u0243\2\u1f2b"+
		"\u0407\3\2\2\2\u1f2c\u1f2f\5\u0406\u0204\2\u1f2d\u1f2f\5\u0168\u00b5\2"+
		"\u1f2e\u1f2c\3\2\2\2\u1f2e\u1f2d\3\2\2\2\u1f2f\u0409\3\2\2\2\u1f30\u1f31"+
		"\t\u0080\2\2\u1f31\u040b\3\2\2\2\u1f32\u1f33\t\u0081\2\2\u1f33\u040d\3"+
		"\2\2\2\u1f34\u1f35\6\u0208\u00cd\2\u1f35\u1f36\7\u0197\2\2\u1f36\u1f37"+
		"\5\u046e\u0238\2\u1f37\u040f\3\2\2\2\u1f38\u1f3e\5\u0474\u023b\2\u1f39"+
		"\u1f3b\5\u0470\u0239\2\u1f3a\u1f3c\5\u0474\u023b\2\u1f3b\u1f3a\3\2\2\2"+
		"\u1f3b\u1f3c\3\2\2\2\u1f3c\u1f3e\3\2\2\2\u1f3d\u1f38\3\2\2\2\u1f3d\u1f39"+
		"\3\2\2\2\u1f3e\u0411\3\2\2\2\u1f3f\u1f40\6\u020a\u00ce\2\u1f40\u1f44\5"+
		"\u046a\u0236\2\u1f41\u1f42\6\u020a\u00cf\2\u1f42\u1f44\5\u0410\u0209\2"+
		"\u1f43\u1f3f\3\2\2\2\u1f43\u1f41\3\2\2\2\u1f44\u0413\3\2\2\2\u1f45\u1f46"+
		"\5\u046a\u0236\2\u1f46\u0415\3\2\2\2\u1f47\u1f48\7\u030a\2\2\u1f48\u1f4d"+
		"\5\u0414\u020b\2\u1f49\u1f4a\7\u0307\2\2\u1f4a\u1f4c\5\u0414\u020b\2\u1f4b"+
		"\u1f49\3\2\2\2\u1f4c\u1f4f\3\2\2\2\u1f4d\u1f4b\3\2\2\2\u1f4d\u1f4e\3\2"+
		"\2\2\u1f4e\u1f50\3\2\2\2\u1f4f\u1f4d\3\2\2\2\u1f50\u1f51\7\u030b\2\2\u1f51"+
		"\u0417\3\2\2\2\u1f52\u1f53\5\u0410\u0209\2\u1f53\u0419\3\2\2\2\u1f54\u1f57"+
		"\5\u0418\u020d\2\u1f55\u1f57\5\u0420\u0211\2\u1f56\u1f54\3\2\2\2\u1f56"+
		"\u1f55\3\2\2\2\u1f57\u041b\3\2\2\2\u1f58\u1f59\5\u046a\u0236\2\u1f59\u041d"+
		"\3\2\2\2\u1f5a\u1f5b\5\u0410\u0209\2\u1f5b\u041f\3\2\2\2\u1f5c\u1f5d\5"+
		"\u046a\u0236\2\u1f5d\u1f61\7\u0306\2\2\u1f5e\u1f5f\5\u046a\u0236\2\u1f5f"+
		"\u1f60\7\u0306\2\2\u1f60\u1f62\3\2\2\2\u1f61\u1f5e\3\2\2\2\u1f61\u1f62"+
		"\3\2\2\2\u1f62\u1f63\3\2\2\2\u1f63\u1f64\7\u02fa\2\2\u1f64\u0421\3\2\2"+
		"\2\u1f65\u1f66\5\u046a\u0236\2\u1f66\u0423\3\2\2\2\u1f67\u1f68\5\u046a"+
		"\u0236\2\u1f68\u0425\3\2\2\2\u1f69\u1f6a\5\u0470\u0239\2\u1f6a\u0427\3"+
		"\2\2\2\u1f6b\u1f6c\5\u0470\u0239\2\u1f6c\u0429\3\2\2\2\u1f6d\u1f6e\5\u0470"+
		"\u0239\2\u1f6e\u042b\3\2\2\2\u1f6f\u1f70\5\u0470\u0239\2\u1f70\u042d\3"+
		"\2\2\2\u1f71\u1f72\5\u0470\u0239\2\u1f72\u042f\3\2\2\2\u1f73\u1f74\5\u0470"+
		"\u0239\2\u1f74\u0431\3\2\2\2\u1f75\u1f78\5\u0470\u0239\2\u1f76\u1f78\5"+
		"\u0474\u023b\2\u1f77\u1f75\3\2\2\2\u1f77\u1f76\3\2\2\2\u1f78\u0433\3\2"+
		"\2\2\u1f79\u1f7c\5\u0470\u0239\2\u1f7a\u1f7c\5\u0474\u023b\2\u1f7b\u1f79"+
		"\3\2\2\2\u1f7b\u1f7a\3\2\2\2\u1f7c\u0435\3\2\2\2\u1f7d\u1f7e\5\u046a\u0236"+
		"\2\u1f7e\u0437\3\2\2\2\u1f7f\u1f80\5\u046a\u0236\2\u1f80\u0439\3\2\2\2"+
		"\u1f81\u1f82\5\u046a\u0236\2\u1f82\u043b\3\2\2\2\u1f83\u1f84\5\u046a\u0236"+
		"\2\u1f84\u043d\3\2\2\2\u1f85\u1f86\5\u0470\u0239\2\u1f86\u043f\3\2\2\2"+
		"\u1f87\u1f88\5\u0470\u0239\2\u1f88\u0441\3\2\2\2\u1f89\u1f8a\5\u046a\u0236"+
		"\2\u1f8a\u0443\3\2\2\2\u1f8b\u1f8c\5\u049e\u0250\2\u1f8c\u0445\3\2\2\2"+
		"\u1f8d\u1f8e\5\u049e\u0250\2\u1f8e\u0447\3\2\2\2\u1f8f\u1f90\5\u049e\u0250"+
		"\2\u1f90\u0449\3\2\2\2\u1f91\u1f94\5\u0470\u0239\2\u1f92\u1f94\5\u0474"+
		"\u023b\2\u1f93\u1f91\3\2\2\2\u1f93\u1f92\3\2\2\2\u1f94\u044b\3\2\2\2\u1f95"+
		"\u1f96\5\u0424\u0213\2\u1f96\u1f97\5\u0474\u023b\2\u1f97\u044d\3\2\2\2"+
		"\u1f98\u1fa0\5\u046a\u0236\2\u1f99\u1f9a\7\u0306\2\2\u1f9a\u1fa1\7\u02fa"+
		"\2\2\u1f9b\u1f9e\5\u0474\u023b\2\u1f9c\u1f9d\7\u0306\2\2\u1f9d\u1f9f\7"+
		"\u02fa\2\2\u1f9e\u1f9c\3\2\2\2\u1f9e\u1f9f\3\2\2\2\u1f9f\u1fa1\3\2\2\2"+
		"\u1fa0\u1f99\3\2\2\2\u1fa0\u1f9b\3\2\2\2\u1fa0\u1fa1\3\2\2\2\u1fa1\u044f"+
		"\3\2\2\2\u1fa2\u1fa5\5\u0470\u0239\2\u1fa3\u1fa5\5\u0474\u023b\2\u1fa4"+
		"\u1fa2\3\2\2\2\u1fa4\u1fa3\3\2\2\2\u1fa5\u0451\3\2\2\2\u1fa6\u1fab\5\u0450"+
		"\u0229\2\u1fa7\u1fa8\7\u0307\2\2\u1fa8\u1faa\5\u0450\u0229\2\u1fa9\u1fa7"+
		"\3\2\2\2\u1faa\u1fad\3\2\2\2\u1fab\u1fa9\3\2\2\2\u1fab\u1fac\3\2\2\2\u1fac"+
		"\u0453\3\2\2\2\u1fad\u1fab\3\2\2\2\u1fae\u1fb3\5\u044e\u0228\2\u1faf\u1fb0"+
		"\7\u0307\2\2\u1fb0\u1fb2\5\u044e\u0228\2\u1fb1\u1faf\3\2\2\2\u1fb2\u1fb5"+
		"\3\2\2\2\u1fb3\u1fb1\3\2\2\2\u1fb3\u1fb4\3\2\2\2\u1fb4\u0455\3\2\2\2\u1fb5"+
		"\u1fb3\3\2\2\2\u1fb6\u1fb7\5\u046a\u0236\2\u1fb7\u0457\3\2\2\2\u1fb8\u1fbb"+
		"\5\u0468\u0235\2\u1fb9\u1fbb\5\u04b6\u025c\2\u1fba\u1fb8\3\2\2\2\u1fba"+
		"\u1fb9\3\2\2\2\u1fbb\u0459\3\2\2\2\u1fbc\u1fbd\5\u0458\u022d\2\u1fbd\u045b"+
		"\3\2\2\2\u1fbe\u1fc1\5\u0468\u0235\2\u1fbf\u1fc1\5\u04bc\u025f\2\u1fc0"+
		"\u1fbe\3\2\2\2\u1fc0\u1fbf\3\2\2\2\u1fc1\u045d\3\2\2\2\u1fc2\u1fc3\5\u045c"+
		"\u022f\2\u1fc3\u045f\3\2\2\2\u1fc4\u1fc5\5\u046a\u0236\2\u1fc5\u0461\3"+
		"\2\2\2\u1fc6\u1fc7\5\u0484\u0243\2\u1fc7\u0463\3\2\2\2\u1fc8\u1fc9\5\u046a"+
		"\u0236\2\u1fc9\u0465\3\2\2\2\u1fca\u1fcb\5\u046a\u0236\2\u1fcb\u0467\3"+
		"\2\2\2\u1fcc\u1fd0\t\u0082\2\2\u1fcd\u1fce\6\u0235\u00d0\2\u1fce\u1fd0"+
		"\7\u0320\2\2\u1fcf\u1fcc\3\2\2\2\u1fcf\u1fcd\3\2\2\2\u1fd0\u0469\3\2\2"+
		"\2\u1fd1\u1fd4\5\u0468\u0235\2\u1fd2\u1fd4\5\u04b0\u0259\2\u1fd3\u1fd1"+
		"\3\2\2\2\u1fd3\u1fd2\3\2\2\2\u1fd4\u046b\3\2\2\2\u1fd5\u1fda\5\u046a\u0236"+
		"\2\u1fd6\u1fd7\7\u0307\2\2\u1fd7\u1fd9\5\u046a\u0236\2\u1fd8\u1fd6\3\2"+
		"\2\2\u1fd9\u1fdc\3\2\2\2\u1fda\u1fd8\3\2\2\2\u1fda\u1fdb\3\2\2\2\u1fdb"+
		"\u046d\3\2\2\2\u1fdc\u1fda\3\2\2\2\u1fdd\u1fde\7\u030a\2\2\u1fde\u1fdf"+
		"\5\u046c\u0237\2\u1fdf\u1fe0\7\u030b\2\2\u1fe0\u046f\3\2\2\2\u1fe1\u1fe3"+
		"\5\u046a\u0236\2\u1fe2\u1fe4\5\u0474\u023b\2\u1fe3\u1fe2\3\2\2\2\u1fe3"+
		"\u1fe4\3\2\2\2\u1fe4\u0471\3\2\2\2\u1fe5\u1fea\5\u046a\u0236\2\u1fe6\u1fe8"+
		"\5\u0474\u023b\2\u1fe7\u1fe9\5\u0474\u023b\2\u1fe8\u1fe7\3\2\2\2\u1fe8"+
		"\u1fe9\3\2\2\2\u1fe9\u1feb\3\2\2\2\u1fea\u1fe6\3\2\2\2\u1fea\u1feb\3\2"+
		"\2\2\u1feb\u1ff1\3\2\2\2\u1fec\u1fed\6\u023a\u00d1\2\u1fed\u1fee\5\u0474"+
		"\u023b\2\u1fee\u1fef\5\u0474\u023b\2\u1fef\u1ff1\3\2\2\2\u1ff0\u1fe5\3"+
		"\2\2\2\u1ff0\u1fec\3\2\2\2\u1ff1\u0473\3\2\2\2\u1ff2\u1ff3\7\u0306\2\2"+
		"\u1ff3\u1ff4\5\u046a\u0236\2\u1ff4\u0475\3\2\2\2\u1ff5\u1ff6\t\u0083\2"+
		"\2\u1ff6\u0477\3\2\2\2\u1ff7\u1ff8\t\u0084\2\2\u1ff8\u0479\3\2\2\2\u1ff9"+
		"\u1ffa\t\u0085\2\2\u1ffa\u047b\3\2\2\2\u1ffb\u2001\7\u02ed\2\2\u1ffc\u1ffd"+
		"\6\u023f\u00d2\2\u1ffd\u2001\7\u0316\2\2\u1ffe\u2001\7\u02ef\2\2\u1fff"+
		"\u2001\7\u02ee\2\2\u2000\u1ffb\3\2\2\2\u2000\u1ffc\3\2\2\2\u2000\u1ffe"+
		"\3\2\2\2\u2000\u1fff\3\2\2\2\u2001\u047d\3\2\2\2\u2002\u200c\5\u048a\u0246"+
		"\2\u2003\u200c\5\u0490\u0249\2\u2004\u200c\5\u0496\u024c\2\u2005\u200c"+
		"\5\u0494\u024b\2\u2006\u200c\5\u0492\u024a\2\u2007\u2009\7\u031c\2\2\u2008"+
		"\u2007\3\2\2\2\u2008\u2009\3\2\2\2\u2009\u200a\3\2\2\2\u200a\u200c\t\u0086"+
		"\2\2\u200b\u2002\3\2\2\2\u200b\u2003\3\2\2\2\u200b\u2004\3\2\2\2\u200b"+
		"\u2005\3\2\2\2\u200b\u2006\3\2\2\2\u200b\u2008\3\2\2\2\u200c\u047f\3\2"+
		"\2\2\u200d\u2013\5\u047e\u0240\2\u200e\u200f\7\u02f8\2\2\u200f\u2013\5"+
		"\u0476\u023c\2\u2010\u2011\7\u02f9\2\2\u2011\u2013\5\u0476\u023c\2\u2012"+
		"\u200d\3\2\2\2\u2012\u200e\3\2\2\2\u2012\u2010\3\2\2\2\u2013\u0481\3\2"+
		"\2\2\u2014\u2015\7\u030a\2\2\u2015\u201a\5\u0486\u0244\2\u2016\u2017\7"+
		"\u0307\2\2\u2017\u2019\5\u0486\u0244\2\u2018\u2016\3\2\2\2\u2019\u201c"+
		"\3\2\2\2\u201a\u2018\3\2\2\2\u201a\u201b\3\2\2\2\u201b\u201d\3\2\2\2\u201c"+
		"\u201a\3\2\2\2\u201d\u201e\7\u030b\2\2\u201e\u0483\3\2\2\2\u201f\u2023"+
		"\7\u0321\2\2\u2020\u2021\6\u0243\u00d3\2\u2021\u2023\7\u0320\2\2\u2022"+
		"\u201f\3\2\2\2\u2022\u2020\3\2\2\2\u2023\u0485\3\2\2\2\u2024\u2028\5\u0484"+
		"\u0243\2\u2025\u2028\7\u0316\2\2\u2026\u2028\7\u0317\2\2\u2027\u2024\3"+
		"\2\2\2\u2027\u2025\3\2\2\2\u2027\u2026\3\2\2\2\u2028\u0487\3\2\2\2\u2029"+
		"\u202d\5\u0484\u0243\2\u202a\u202b\6\u0245\u00d4\2\u202b\u202d\7\u0316"+
		"\2\2\u202c\u2029\3\2\2\2\u202c\u202a\3\2\2\2\u202d\u0489\3\2\2\2\u202e"+
		"\u2030\7\u031c\2\2\u202f\u202e\3\2\2\2\u202f\u2030\3\2\2\2\u2030\u2031"+
		"\3\2\2\2\u2031\u2034\5\u0484\u0243\2\u2032\u2034\7\u031e\2\2\u2033\u202f"+
		"\3\2\2\2\u2033\u2032\3\2\2\2\u2034\u2038\3\2\2\2\u2035\u2037\5\u0484\u0243"+
		"\2\u2036\u2035\3\2\2\2\u2037\u203a\3\2\2\2\u2038\u2036\3\2\2\2\u2038\u2039"+
		"\3\2\2\2\u2039\u048b\3\2\2\2\u203a\u2038\3\2\2\2\u203b\u203c\5\u0484\u0243"+
		"\2\u203c\u048d\3\2\2\2\u203d\u2042\5\u0484\u0243\2\u203e\u203f\7\u0307"+
		"\2\2\u203f\u2041\5\u0484\u0243\2\u2040\u203e\3\2\2\2\u2041\u2044\3\2\2"+
		"\2\u2042\u2040\3\2\2\2\u2042\u2043\3\2\2\2\u2043\u048f\3\2\2\2\u2044\u2042"+
		"\3\2\2\2\u2045\u2046\t\u0085\2\2\u2046\u0491\3\2\2\2\u2047\u2048\t\u0087"+
		"\2\2\u2048\u0493\3\2\2\2\u2049\u204a\t\u0088\2\2\u204a\u0495\3\2\2\2\u204b"+
		"\u204c\7v\2\2\u204c\u2052\7\u0321\2\2\u204d\u204e\7\u024c\2\2\u204e\u2052"+
		"\7\u0321\2\2\u204f\u2050\7\u0249\2\2\u2050\u2052\7\u0321\2\2\u2051\u204b"+
		"\3\2\2\2\u2051\u204d\3\2\2\2\u2051\u204f\3\2\2\2\u2052\u0497\3\2\2\2\u2053"+
		"\u2056\5\u039c\u01cf\2\u2054\u2056\5\u049c\u024f\2\u2055\u2053\3\2\2\2"+
		"\u2055\u2054\3\2\2\2\u2056\u0499\3\2\2\2\u2057\u2058\5\u049c\u024f\2\u2058"+
		"\u049b\3\2\2\2\u2059\u205a\7\u030a\2\2\u205a\u205b\7\u02ed\2\2\u205b\u205c"+
		"\7\u0307\2\2\u205c\u205d\7\u02ed\2\2\u205d\u205e\7\u030b\2\2\u205e\u049d"+
		"\3\2\2\2\u205f\u2062\5\u046a\u0236\2\u2060\u2062\5\u0484\u0243\2\u2061"+
		"\u205f\3\2\2\2\u2061\u2060\3\2\2\2\u2062\u049f\3\2\2\2\u2063\u2066\5\u0468"+
		"\u0235\2\u2064\u2066\5\u04be\u0260\2\u2065\u2063\3\2\2\2\u2065\u2064\3"+
		"\2\2\2\u2066\u04a1\3\2\2\2\u2067\u206a\5\u045c\u022f\2\u2068\u206a\5\u0484"+
		"\u0243\2\u2069\u2067\3\2\2\2\u2069\u2068\3\2\2\2\u206a\u04a3\3\2\2\2\u206b"+
		"\u206e\5\u047c\u023f\2\u206c\u206e\5\u0468\u0235\2\u206d\u206b\3\2\2\2"+
		"\u206d\u206c\3\2\2\2\u206e\u04a5\3\2\2\2\u206f\u2070\7\u030a\2\2\u2070"+
		"\u2071\7\u030b\2\2\u2071\u04a7\3\2\2\2\u2072\u2073\t\u0089\2\2\u2073\u04a9"+
		"\3\2\2\2\u2074\u2075\t\u008a\2\2\u2075\u04ab\3\2\2\2\u2076\u2077\7\u00d8"+
		"\2\2\u2077\u207d\7\u0306\2\2\u2078\u2079\7\u011e\2\2\u2079\u207d\7\u0306"+
		"\2\2\u207a\u207b\7\u01f8\2\2\u207b\u207d\7\u0306\2\2\u207c\u2076\3\2\2"+
		"\2\u207c\u2078\3\2\2\2\u207c\u207a\3\2\2\2\u207d\u04ad\3\2\2\2\u207e\u207f"+
		"\7\u0294\2\2\u207f\u2089\7\u0306\2\2\u2080\u2081\7\u02a3\2\2\u2081\u2089"+
		"\7\u0306\2\2\u2082\u2083\7\u00d8\2\2\u2083\u2089\7\u0306\2\2\u2084\u2085"+
		"\7\u011e\2\2\u2085\u2089\7\u0306\2\2\u2086\u2087\7\u01f8\2\2\u2087\u2089"+
		"\7\u0306\2\2\u2088\u207e\3\2\2\2\u2088\u2080\3\2\2\2\u2088\u2082\3\2\2"+
		"\2\u2088\u2084\3\2\2\2\u2088\u2086\3\2\2\2\u2089\u04af\3\2\2\2\u208a\u2092"+
		"\6\u0259\u00d5\2\u208b\u2093\5\u04b6\u025c\2\u208c\u2093\5\u04c2\u0262"+
		"\2\u208d\u2093\7\u00af\2\2\u208e\u208f\6\u0259\u00d6\2\u208f\u2093\7\u0200"+
		"\2\2\u2090\u2091\6\u0259\u00d7\2\u2091\u2093\7\u02cc\2\2\u2092\u208b\3"+
		"\2\2\2\u2092\u208c\3\2\2\2\u2092\u208d\3\2\2\2\u2092\u208e\3\2\2\2\u2092"+
		"\u2090\3\2\2\2\u2093\u209c\3\2\2\2\u2094\u209a\5\u04ba\u025e\2\u2095\u209a"+
		"\5\u04b2\u025a\2\u2096\u209a\5\u04b4\u025b\2\u2097\u209a\5\u04b8\u025d"+
		"\2\u2098\u209a\5\u04c0\u0261\2\u2099\u2094\3\2\2\2\u2099\u2095\3\2\2\2"+
		"\u2099\u2096\3\2\2\2\u2099\u2097\3\2\2\2\u2099\u2098\3\2\2\2\u209a\u209c"+
		"\3\2\2\2\u209b\u208a\3\2\2\2\u209b\u2099\3\2\2\2\u209c\u04b1\3\2\2\2\u209d"+
		"\u209e\t\u008b\2\2\u209e\u04b3\3\2\2\2\u209f\u20a0\t\u008c\2\2\u20a0\u04b5"+
		"\3\2\2\2\u20a1\u20ac\6\u025c\u00d8\2\u20a2\u20ad\5\u04c4\u0263\2\u20a3"+
		"\u20ad\7\u00ac\2\2\u20a4\u20ad\7\u00be\2\2\u20a5\u20ad\7\u0173\2\2\u20a6"+
		"\u20ad\7\u01a9\2\2\u20a7\u20ad\7\u01ad\2\2\u20a8\u20ad\7\u01c5\2\2\u20a9"+
		"\u20ad\7\u01cd\2\2\u20aa\u20ad\7\u02c7\2\2\u20ab\u20ad\7\u0237\2\2\u20ac"+
		"\u20a2\3\2\2\2\u20ac\u20a3\3\2\2\2\u20ac\u20a4\3\2\2\2\u20ac\u20a5\3\2"+
		"\2\2\u20ac\u20a6\3\2\2\2\u20ac\u20a7\3\2\2\2\u20ac\u20a8\3\2\2\2\u20ac"+
		"\u20a9\3\2\2\2\u20ac\u20aa\3\2\2\2\u20ac\u20ab\3\2\2\2\u20ad\u20b4\3\2"+
		"\2\2\u20ae\u20b2\5\u04ba\u025e\2\u20af\u20b2\5\u04b8\u025d\2\u20b0\u20b2"+
		"\5\u04c0\u0261\2\u20b1\u20ae\3\2\2\2\u20b1\u20af\3\2\2\2\u20b1\u20b0\3"+
		"\2\2\2\u20b2\u20b4\3\2\2\2\u20b3\u20a1\3\2\2\2\u20b3\u20b1\3\2\2\2\u20b4"+
		"\u04b7\3\2\2\2\u20b5\u20b6\t\u008d\2\2\u20b6\u04b9\3\2\2\2\u20b7\u20bb"+
		"\t\u008e\2\2\u20b8\u20b9\6\u025e\u00d9\2\u20b9\u20bb\t\u008f\2\2\u20ba"+
		"\u20b7\3\2\2\2\u20ba\u20b8\3\2\2\2\u20bb\u04bb\3\2\2\2\u20bc\u20bf\6\u025f"+
		"\u00da\2\u20bd\u20c0\5\u04c4\u0263\2\u20be\u20c0\5\u04c2\u0262\2\u20bf"+
		"\u20bd\3\2\2\2\u20bf\u20be\3\2\2\2\u20c0\u20c7\3\2\2\2\u20c1\u20c5\5\u04ba"+
		"\u025e\2\u20c2\u20c5\5\u04b4\u025b\2\u20c3\u20c5\5\u04c0\u0261\2\u20c4"+
		"\u20c1\3\2\2\2\u20c4\u20c2\3\2\2\2\u20c4\u20c3\3\2\2\2\u20c5\u20c7\3\2"+
		"\2\2\u20c6\u20bc\3\2\2\2\u20c6\u20c4\3\2\2\2\u20c7\u04bd\3\2\2\2\u20c8"+
		"\u20cd\5\u04ba\u025e\2\u20c9\u20cd\5\u04b2\u025a\2\u20ca\u20cd\5\u04b4"+
		"\u025b\2\u20cb\u20cd\5\u04b8\u025d\2\u20cc\u20c8\3\2\2\2\u20cc\u20c9\3"+
		"\2\2\2\u20cc\u20ca\3\2\2\2\u20cc\u20cb\3\2\2\2\u20cd\u04bf\3\2\2\2\u20ce"+
		"\u20cf\t\u008a\2\2\u20cf\u04c1\3\2\2\2\u20d0\u20d6\t\u0090\2\2\u20d1\u20d2"+
		"\6\u0262\u00db\2\u20d2\u20d6\7\u0200\2\2\u20d3\u20d4\6\u0262\u00dc\2\u20d4"+
		"\u20d6\7\u00ec\2\2\u20d5\u20d0\3\2\2\2\u20d5\u20d1\3\2\2\2\u20d5\u20d3"+
		"\3\2\2\2\u20d6\u04c3\3\2\2\2\u20d7\u20e1\t\u0091\2\2\u20d8\u20d9\6\u0263"+
		"\u00dd\2\u20d9\u20e1\7\u0200\2\2\u20da\u20db\6\u0263\u00de\2\u20db\u20e1"+
		"\t\u0092\2\2\u20dc\u20dd\6\u0263\u00df\2\u20dd\u20e1\t\u0093\2\2\u20de"+
		"\u20df\6\u0263\u00e0\2\u20df\u20e1\7\u0296\2\2\u20e0\u20d7\3\2\2\2\u20e0"+
		"\u20d8\3\2\2\2\u20e0\u20da\3\2\2\2\u20e0\u20dc\3\2\2\2\u20e0\u20de\3\2"+
		"\2\2\u20e1\u04c5\3\2\2\2\u0465\u04c9\u04cd\u04d0\u04d2\u04f6\u04fe\u0503"+
		"\u0513\u051a\u0521\u0524\u052b\u0530\u0533\u0538\u053e\u0540\u0544\u0548"+
		"\u0551\u0555\u055a\u0560\u0567\u056b\u0570\u0575\u057c\u057f\u0585\u0588"+
		"\u058f\u0599\u059e\u05a3\u05ab\u05b1\u05b5\u05ba\u05c3\u05c9\u05cf\u05d5"+
		"\u05de\u05e4\u05ed\u05fb\u05ff\u0605\u0609\u060f\u0613\u0618\u061b\u0621"+
		"\u0627\u062d\u0631\u0636\u063a\u063e\u0646\u0648\u0655\u065d\u0665\u0669"+
		"\u0686\u0696\u0699\u06a2\u06a7\u06ad\u06b2\u06b6\u06bb\u06bf\u06c3\u06c7"+
		"\u06cb\u06cf\u06d1\u06dc\u06e4\u06ed\u06f2\u06f5\u06fa\u0701\u0709\u070d"+
		"\u0712\u0719\u071e\u0723\u072b\u072f\u0734\u0737\u073a\u073d\u0744\u074b"+
		"\u074f\u0767\u076b\u0771\u0778\u077b\u077f\u0786\u0789\u078c\u078f\u0798"+
		"\u079f\u07a4\u07a7\u07aa\u07b0\u07b6\u07b9\u07be\u07c8\u07cb\u07d1\u07d7"+
		"\u07e1\u07e4\u07ec\u07f2\u07fd\u0800\u0805\u0818\u081b\u081e\u0824\u0827"+
		"\u0829\u082f\u0839\u0843\u0846\u0849\u084e\u0854\u0861\u0865\u086a\u0873"+
		"\u0884\u0897\u08a0\u08a3\u08ab\u08b0\u08b4\u08bb\u08c0\u08cf\u08d3\u08d9"+
		"\u08df\u08e5\u08eb\u08f1\u08f6\u08fa\u0902\u0908\u090e\u0913\u0916\u0919"+
		"\u0922\u0925\u0930\u093c\u0945\u0949\u0952\u0955\u095b\u095d\u0961\u0968"+
		"\u0975\u097c\u0982\u0985\u0996\u09aa\u09ae\u09b4\u09ba\u09c0\u09c5\u09cc"+
		"\u09d3\u09d8\u09db\u09df\u09e3\u09e8\u09ec\u09f0\u09f6\u09fb\u09fe\u0a02"+
		"\u0a08\u0a0c\u0a10\u0a18\u0a20\u0a29\u0a32\u0a3f\u0a42\u0a46\u0a4c\u0a54"+
		"\u0a59\u0a5c\u0a5f\u0a62\u0a65\u0a67\u0a6d\u0a6f\u0a7e\u0a84\u0a8b\u0a8e"+
		"\u0a90\u0a92\u0a9c\u0a9e\u0aa2\u0aa5\u0aa8\u0aac\u0ab1\u0ab7\u0aba\u0abd"+
		"\u0ac3\u0ac6\u0acf\u0ad8\u0adc\u0ae0\u0ae6\u0aeb\u0af0\u0af5\u0af9\u0aff"+
		"\u0b0a\u0b0d\u0b12\u0b18\u0b1b\u0b1e\u0b21\u0b24\u0b32\u0b35\u0b39\u0b3d"+
		"\u0b43\u0b48\u0b4c\u0b51\u0b54\u0b58\u0b5e\u0b62\u0b66\u0b6f\u0b74\u0b78"+
		"\u0b7c\u0b7f\u0b83\u0b86\u0b88\u0b8c\u0b92\u0b96\u0b98\u0b9c\u0ba0\u0ba4"+
		"\u0bab\u0bad\u0bb6\u0bbc\u0bc1\u0bc4\u0bc7\u0bca\u0bcd\u0bd1\u0be0\u0be4"+
		"\u0bea\u0bed\u0bf0\u0bf6\u0bfb\u0bff\u0c02\u0c0a\u0c0c\u0c19\u0c25\u0c2a"+
		"\u0c2d\u0c30\u0c35\u0c3b\u0c4b\u0c5f\u0c68\u0c6c\u0c73\u0c78\u0c81\u0c88"+
		"\u0c93\u0c9a\u0ca3\u0cac\u0cb8\u0cbd\u0cc4\u0cc8\u0cce\u0cd3\u0cd8\u0cdc"+
		"\u0ce2\u0ce8\u0cea\u0ced\u0cf1\u0cfb\u0d00\u0d05\u0d0c\u0d15\u0d1d\u0d22"+
		"\u0d26\u0d2c\u0d2f\u0d32\u0d36\u0d3a\u0d44\u0d48\u0d4b\u0d4e\u0d53\u0d59"+
		"\u0d5d\u0d63\u0d66\u0d68\u0d6d\u0d79\u0d82\u0d8f\u0d92\u0d97\u0d9e\u0da2"+
		"\u0da6\u0da8\u0db6\u0dbd\u0dc6\u0dcc\u0dd5\u0dd9\u0ddd\u0de7\u0de9\u0df1"+
		"\u0df8\u0dfd\u0e01\u0e05\u0e08\u0e0e\u0e11\u0e14\u0e1a\u0e21\u0e26\u0e2a"+
		"\u0e2d\u0e30\u0e33\u0e35\u0e39\u0e41\u0e47\u0e4b\u0e50\u0e53\u0e56\u0e59"+
		"\u0e5b\u0e60\u0e69\u0e76\u0e78\u0e7c\u0e82\u0e85\u0e88\u0e8e\u0e95\u0e97"+
		"\u0e9f\u0ea5\u0eaa\u0ead\u0eb4\u0eb6\u0ebf\u0ec8\u0ed1\u0ed9\u0edd\u0ee4"+
		"\u0ee7\u0ee9\u0ef1\u0ef7\u0f01\u0f08\u0f66\u0f6a\u0f70\u0f7e\u0f86\u0f89"+
		"\u0f95\u0f9a\u0fa0\u0fa7\u0fae\u0fb5\u0fbc\u0fc3\u0fca\u0fcd\u0fd4\u0fdc"+
		"\u0fe4\u0fee\u0ff4\u0ff8\u0ffc\u1001\u1004\u1006\u100f\u1015\u101c\u1021"+
		"\u1026\u102b\u102e\u1035\u1042\u1048\u104e\u1055\u105d\u1063\u106f\u1071"+
		"\u1077\u107b\u107d\u1081\u108e\u1094\u109c\u10a7\u10ab\u10b8\u10bf\u10c5"+
		"\u10cc\u10ce\u10d8\u10e0\u10e3\u10e8\u10ec\u10f2\u10f5\u10fa\u1105\u1107"+
		"\u1113\u1118\u1120\u1126\u1128\u112a\u1130\u113c\u1141\u1143\u1147\u114d"+
		"\u1150\u1153\u115d\u115f\u1165\u116c\u1172\u117c\u1180\u1185\u1196\u11a6"+
		"\u11ab\u11b3\u11bb\u11c0\u11c6\u11c9\u11cb\u11d4\u11da\u11e0\u11e2\u11e6"+
		"\u11f1\u11fb\u1200\u1205\u120a\u1212\u1216\u121b\u1224\u1230\u123e\u1247"+
		"\u1249\u1250\u1257\u125b\u1261\u1269\u1270\u1274\u127a\u1281\u1284\u128d"+
		"\u1293\u1298\u12af\u12b2\u12c2\u12c7\u12ca\u12ce\u12d1\u12df\u12e5\u12ea"+
		"\u12ed\u12ef\u12f3\u12f8\u12fa\u1306\u130c\u1322\u1326\u1328\u1330\u1334"+
		"\u133d\u1347\u134e\u1351\u1355\u1358\u135b\u135f\u1362\u1366\u1369\u136e"+
		"\u1371\u1376\u1379\u137f\u1383\u1389\u138c\u1395\u1397\u139d\u13a1\u13a4"+
		"\u13a7\u13ab\u13b1\u13b4\u13b7\u13c1\u13c5\u13ce\u13d1\u13d6\u13d9\u13dc"+
		"\u13e0\u13e3\u13e8\u13ec\u13f4\u1401\u1413\u1418\u141d\u1425\u142b\u142d"+
		"\u1431\u1434\u1442\u144c\u1450\u1458\u145b\u145f\u1469\u146d\u1474\u1479"+
		"\u1481\u1486\u148c\u1493\u1498\u149e\u14a5\u14af\u14b1\u14b9\u14be\u14c2"+
		"\u14c5\u14cc\u14d1\u14d5\u14e0\u14e8\u14ec\u14ef\u14f2\u14f6\u14fa\u14ff"+
		"\u1505\u1509\u1514\u1517\u151a\u151d\u1525\u1529\u152e\u1536\u153e\u1544"+
		"\u1556\u1560\u1566\u1574\u1577\u157b\u1586\u1588\u1591\u159d\u159f\u15a6"+
		"\u15ac\u15b2\u15ba\u15c5\u15c9\u15e6\u15e8\u15f0\u15f4\u1605\u160c\u161a"+
		"\u1626\u162c\u1633\u1636\u1658\u1660\u1662\u166e\u1673\u1679\u1681\u1688"+
		"\u168e\u1693\u1699\u169e\u16a3\u16a9\u16ae\u16b4\u16bc\u16c4\u16cc\u16d4"+
		"\u16d9\u16df\u16e4\u16e8\u16ec\u16f1\u16f3\u1706\u170a\u1711\u171d\u1720"+
		"\u1724\u1729\u172e\u1732\u173c\u1745\u1747\u174a\u1753\u175a\u1767\u176c"+
		"\u1773\u1779\u1793\u17b2\u17c6\u17cc\u17d0\u17eb\u17f7\u1804\u1808\u180c"+
		"\u1828\u1860\u186a\u186e\u187a\u187f\u188c\u18a0\u18a4\u18b5\u18b8\u18bd"+
		"\u18c0\u18c9\u18cd\u18d3\u18d9\u18dd\u18e8\u18ee\u18f0\u18f7\u18fe\u1902"+
		"\u1909\u190e\u1912\u1917\u191b\u191f\u1924\u1929\u192b\u192f\u193c\u1940"+
		"\u1943\u1947\u194b\u194f\u1954\u1958\u195c\u1965\u1967\u196e\u1974\u197c"+
		"\u1991\u1996\u199d\u19b4\u19c4\u19ce\u19d2\u19d9\u19dc\u19e7\u19f0\u19f3"+
		"\u19fa\u19ff\u1a19\u1a1f\u1a25\u1a29\u1a33\u1a37\u1a44\u1a50\u1a62\u1a6a"+
		"\u1a74\u1a77\u1a7c\u1a80\u1a87\u1a8c\u1a93\u1a9b\u1a9e\u1aa3\u1aab\u1aae"+
		"\u1abc\u1abf\u1acc\u1ad0\u1ad2\u1ad7\u1adc\u1ae2\u1ae8\u1aee\u1af3\u1af6"+
		"\u1afc\u1b01\u1b04\u1b0a\u1b0e\u1b14\u1b16\u1b19\u1b1f\u1b25\u1b2d\u1b2f"+
		"\u1b31\u1b35\u1b3b\u1b40\u1b44\u1b49\u1b4f\u1b56\u1b59\u1b5b\u1b5e\u1b68"+
		"\u1b6c\u1b72\u1b79\u1b7e\u1b8c\u1b91\u1b99\u1b9e\u1ba2\u1ba5\u1baa\u1bae"+
		"\u1bb6\u1bbe\u1bc0\u1bc7\u1bcf\u1bd6\u1bd9\u1be1\u1be9\u1beb\u1bf1\u1bf7"+
		"\u1bfb\u1c02\u1c0d\u1c16\u1c19\u1c1e\u1c20\u1c23\u1c26\u1c2a\u1c2d\u1c31"+
		"\u1c36\u1c39\u1c3d\u1c40\u1c44\u1c49\u1c4d\u1c59\u1c5d\u1c63\u1c66\u1c6b"+
		"\u1c6f\u1c73\u1c78\u1c81\u1c84\u1c88\u1c8c\u1c8f\u1c93\u1c97\u1c9c\u1ca1"+
		"\u1ca7\u1cac\u1cb1\u1cb3\u1cb8\u1cbf\u1cc7\u1ccd\u1ccf\u1cd3\u1cd7\u1cdb"+
		"\u1cdf\u1ced\u1cf4\u1cf8\u1cfd\u1d03\u1d07\u1d0d\u1d11\u1d15\u1d1a\u1d1f"+
		"\u1d24\u1d29\u1d2f\u1d35\u1d3a\u1d3f\u1d44\u1d49\u1d4e\u1d53\u1d58\u1d62"+
		"\u1d68\u1d6e\u1d74\u1d77\u1d7e\u1d83\u1d86\u1d8a\u1d8d\u1d91\u1d96\u1d9a"+
		"\u1d9f\u1da3\u1dac\u1daf\u1db2\u1db5\u1db9\u1dbd\u1dc1\u1dd0\u1dd3\u1dd5"+
		"\u1dda\u1de3\u1de6\u1dea\u1df7\u1e03\u1e08\u1e0d\u1e16\u1e1b\u1e24\u1e29"+
		"\u1e2d\u1e31\u1e35\u1e3a\u1e3f\u1e45\u1e4a\u1e4d\u1e54\u1e5d\u1e64\u1e72"+
		"\u1e7e\u1e8b\u1e93\u1e9a\u1ea3\u1ea9\u1eb1\u1eb7\u1ec2\u1eca\u1ed2\u1eda"+
		"\u1ee4\u1ee9\u1eee\u1ef0\u1ef6\u1efc\u1eff\u1f06\u1f08\u1f0a\u1f0d\u1f0f"+
		"\u1f20\u1f25\u1f27\u1f2e\u1f3b\u1f3d\u1f43\u1f4d\u1f56\u1f61\u1f77\u1f7b"+
		"\u1f93\u1f9e\u1fa0\u1fa4\u1fab\u1fb3\u1fba\u1fc0\u1fcf\u1fd3\u1fda\u1fe3"+
		"\u1fe8\u1fea\u1ff0\u2000\u2008\u200b\u2012\u201a\u2022\u2027\u202c\u202f"+
		"\u2033\u2038\u2042\u2051\u2055\u2061\u2065\u2069\u206d\u207c\u2088\u2092"+
		"\u2099\u209b\u20ac\u20b1\u20b3\u20ba\u20bf\u20c4\u20c6\u20cc\u20d5\u20e0";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}